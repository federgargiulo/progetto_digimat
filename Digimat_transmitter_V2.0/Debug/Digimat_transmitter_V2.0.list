
Digimat_transmitter_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e074  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001be48  0800e218  0800e218  0001e218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a060  0802a060  00040338  2**0
                  CONTENTS
  4 .ARM          00000008  0802a060  0802a060  0003a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a068  0802a068  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a068  0802a068  0003a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a06c  0802a06c  0003a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0802a070  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f94c  20000338  0802a3a8  00040338  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000fc84  0802a3a8  0004fc84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY
 13 .debug_info   000649ef  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008517  00000000  00000000  000a4e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00024169  00000000  00000000  000ad326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003628  00000000  00000000  000d1490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b5c  00000000  00000000  000d4ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc60  00000000  00000000  000d7614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000450ca  00000000  00000000  000f7274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b0d7e  00000000  00000000  0013c33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000cd2c  00000000  00000000  001ed0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001f9de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000035ae  00000000  00000000  001f9e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000198  00000000  00000000  001fd424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000338 	.word	0x20000338
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e1fc 	.word	0x0800e1fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000033c 	.word	0x2000033c
 80001dc:	0800e1fc 	.word	0x0800e1fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f54:	b500      	push	{lr}
 8000f56:	b08f      	sub	sp, #60	; 0x3c
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000f58:	4b64      	ldr	r3, [pc, #400]	; (80010ec <MX_BlueNRG_MS_Init+0x198>)
 8000f5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f5e:	900c      	str	r0, [sp, #48]	; 0x30
 8000f60:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000f64:	3308      	adds	r3, #8
 8000f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f6a:	900a      	str	r0, [sp, #40]	; 0x28
 8000f6c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f70:	2101      	movs	r1, #1
 8000f72:	2000      	movs	r0, #0
 8000f74:	f005 fe10 	bl	8006b98 <BSP_PB_Init>
	BSP_LED_Init(LED2);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f005 fdbb 	bl	8006af4 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f005 fe86 	bl	8006c90 <BSP_COM_Init>
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f005 fe5b 	bl	8006c40 <BSP_PB_GetState>
 8000f8a:	b2c0      	uxtb	r0, r0
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <MX_BlueNRG_MS_Init+0x19c>)
 8000f8e:	7018      	strb	r0, [r3, #0]
	hci_init(user_notify, NULL);
 8000f90:	2100      	movs	r1, #0
 8000f92:	4858      	ldr	r0, [pc, #352]	; (80010f4 <MX_BlueNRG_MS_Init+0x1a0>)
 8000f94:	f008 fc24 	bl	80097e0 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f98:	f10d 0116 	add.w	r1, sp, #22
 8000f9c:	f10d 0019 	add.w	r0, sp, #25
 8000fa0:	f008 fb62 	bl	8009668 <getBlueNRGVersion>
	hci_reset();
 8000fa4:	f008 fb82 	bl	80096ac <hci_reset>
	HAL_Delay(100);
 8000fa8:	2064      	movs	r0, #100	; 0x64
 8000faa:	f005 ff37 	bl	8006e1c <HAL_Delay>
	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000fae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8000fb2:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8000fb6:	4850      	ldr	r0, [pc, #320]	; (80010f8 <MX_BlueNRG_MS_Init+0x1a4>)
 8000fb8:	f00a fd30 	bl	800ba1c <iprintf>
	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fbc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000fc0:	2b30      	cmp	r3, #48	; 0x30
 8000fc2:	d902      	bls.n	8000fca <MX_BlueNRG_MS_Init+0x76>
		bnrg_expansion_board = IDB05A1;
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <MX_BlueNRG_MS_Init+0x1a8>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
	if (BLE_Role == CLIENT) {
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <MX_BlueNRG_MS_Init+0x1ac>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d13f      	bne.n	8001052 <MX_BlueNRG_MS_Init+0xfe>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000fd2:	ab0e      	add	r3, sp, #56	; 0x38
 8000fd4:	e913 0003 	ldmdb	r3, {r0, r1}
 8000fd8:	9008      	str	r0, [sp, #32]
 8000fda:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000fde:	aa08      	add	r2, sp, #32
 8000fe0:	2106      	movs	r1, #6
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f008 faf0 	bl	80095c8 <aci_hal_write_config_data>
	if (ret) {
 8000fe8:	4601      	mov	r1, r0
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d138      	bne.n	8001060 <MX_BlueNRG_MS_Init+0x10c>
	ret = aci_gatt_init();
 8000fee:	f008 f96b 	bl	80092c8 <aci_gatt_init>
	if (ret) {
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d138      	bne.n	8001068 <MX_BlueNRG_MS_Init+0x114>
	if (BLE_Role == SERVER) {
 8000ff6:	4b42      	ldr	r3, [pc, #264]	; (8001100 <MX_BlueNRG_MS_Init+0x1ac>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d038      	beq.n	8001070 <MX_BlueNRG_MS_Init+0x11c>
		if (bnrg_expansion_board == IDB05A1) {
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_BlueNRG_MS_Init+0x1a8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d04e      	beq.n	80010a4 <MX_BlueNRG_MS_Init+0x150>
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001006:	f10d 031a 	add.w	r3, sp, #26
 800100a:	aa07      	add	r2, sp, #28
 800100c:	f10d 011e 	add.w	r1, sp, #30
 8001010:	2003      	movs	r0, #3
 8001012:	f008 f83e 	bl	8009092 <aci_gap_init_IDB04A1>
	if (ret != BLE_STATUS_SUCCESS) {
 8001016:	2800      	cmp	r0, #0
 8001018:	d151      	bne.n	80010be <MX_BlueNRG_MS_Init+0x16a>
	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800101a:	2001      	movs	r0, #1
 800101c:	9003      	str	r0, [sp, #12]
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <MX_BlueNRG_MS_Init+0x1b0>)
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2100      	movs	r1, #0
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	2310      	movs	r3, #16
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2307      	movs	r3, #7
 800102c:	460a      	mov	r2, r1
 800102e:	f008 f8c3 	bl	80091b8 <aci_gap_set_auth_requirement>
	if (ret == BLE_STATUS_SUCCESS) {
 8001032:	2800      	cmp	r0, #0
 8001034:	d047      	beq.n	80010c6 <MX_BlueNRG_MS_Init+0x172>
	if (BLE_Role == SERVER) {
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <MX_BlueNRG_MS_Init+0x1ac>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d047      	beq.n	80010ce <MX_BlueNRG_MS_Init+0x17a>
		printf("CLIENT: BLE Stack Initialized\n");
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <MX_BlueNRG_MS_Init+0x1b4>)
 8001040:	f00a fd5a 	bl	800baf8 <puts>
	ret = aci_hal_set_tx_power_level(1,4);
 8001044:	2104      	movs	r1, #4
 8001046:	2001      	movs	r0, #1
 8001048:	f008 faec 	bl	8009624 <aci_hal_set_tx_power_level>
}
 800104c:	b00f      	add	sp, #60	; 0x3c
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8001052:	ab0a      	add	r3, sp, #40	; 0x28
 8001054:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001058:	9008      	str	r0, [sp, #32]
 800105a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800105e:	e7be      	b.n	8000fde <MX_BlueNRG_MS_Init+0x8a>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8001060:	482a      	ldr	r0, [pc, #168]	; (800110c <MX_BlueNRG_MS_Init+0x1b8>)
 8001062:	f00a fcdb 	bl	800ba1c <iprintf>
 8001066:	e7c2      	b.n	8000fee <MX_BlueNRG_MS_Init+0x9a>
		printf("GATT_Init failed.\n");
 8001068:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_BlueNRG_MS_Init+0x1bc>)
 800106a:	f00a fd45 	bl	800baf8 <puts>
 800106e:	e7c2      	b.n	8000ff6 <MX_BlueNRG_MS_Init+0xa2>
		if (bnrg_expansion_board == IDB05A1) {
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_BlueNRG_MS_Init+0x1a8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d008      	beq.n	800108a <MX_BlueNRG_MS_Init+0x136>
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001078:	f10d 031a 	add.w	r3, sp, #26
 800107c:	aa07      	add	r2, sp, #28
 800107e:	f10d 011e 	add.w	r1, sp, #30
 8001082:	2001      	movs	r0, #1
 8001084:	f008 f805 	bl	8009092 <aci_gap_init_IDB04A1>
 8001088:	e7c5      	b.n	8001016 <MX_BlueNRG_MS_Init+0xc2>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800108a:	f10d 031a 	add.w	r3, sp, #26
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	ab07      	add	r3, sp, #28
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f10d 031e 	add.w	r3, sp, #30
 8001098:	2207      	movs	r2, #7
 800109a:	2100      	movs	r1, #0
 800109c:	2001      	movs	r0, #1
 800109e:	f007 ffbf 	bl	8009020 <aci_gap_init_IDB05A1>
 80010a2:	e7b8      	b.n	8001016 <MX_BlueNRG_MS_Init+0xc2>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010a4:	f10d 031a 	add.w	r3, sp, #26
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	ab07      	add	r3, sp, #28
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	f10d 031e 	add.w	r3, sp, #30
 80010b2:	2207      	movs	r2, #7
 80010b4:	2100      	movs	r1, #0
 80010b6:	2004      	movs	r0, #4
 80010b8:	f007 ffb2 	bl	8009020 <aci_gap_init_IDB05A1>
 80010bc:	e7ab      	b.n	8001016 <MX_BlueNRG_MS_Init+0xc2>
		printf("GAP_Init failed.\n");
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <MX_BlueNRG_MS_Init+0x1c0>)
 80010c0:	f00a fd1a 	bl	800baf8 <puts>
 80010c4:	e7a9      	b.n	800101a <MX_BlueNRG_MS_Init+0xc6>
		printf("BLE Stack Initialized.\n");
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <MX_BlueNRG_MS_Init+0x1c4>)
 80010c8:	f00a fd16 	bl	800baf8 <puts>
 80010cc:	e7b3      	b.n	8001036 <MX_BlueNRG_MS_Init+0xe2>
		printf("SERVER: BLE Stack Initialized\n");
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_BlueNRG_MS_Init+0x1c8>)
 80010d0:	f00a fd12 	bl	800baf8 <puts>
		ret = Add_Sample_Service();
 80010d4:	f000 fa52 	bl	800157c <Add_Sample_Service>
		if (ret == BLE_STATUS_SUCCESS)
 80010d8:	b918      	cbnz	r0, 80010e2 <MX_BlueNRG_MS_Init+0x18e>
			printf("Service added successfully.\n");
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_BlueNRG_MS_Init+0x1cc>)
 80010dc:	f00a fd0c 	bl	800baf8 <puts>
 80010e0:	e7b0      	b.n	8001044 <MX_BlueNRG_MS_Init+0xf0>
			printf("Error while adding service.\n");
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <MX_BlueNRG_MS_Init+0x1d0>)
 80010e4:	f00a fd08 	bl	800baf8 <puts>
 80010e8:	e7ac      	b.n	8001044 <MX_BlueNRG_MS_Init+0xf0>
 80010ea:	bf00      	nop
 80010ec:	0800e218 	.word	0x0800e218
 80010f0:	20000000 	.word	0x20000000
 80010f4:	08001915 	.word	0x08001915
 80010f8:	0800e270 	.word	0x0800e270
 80010fc:	2000035c 	.word	0x2000035c
 8001100:	20000354 	.word	0x20000354
 8001104:	0001e240 	.word	0x0001e240
 8001108:	0800e33c 	.word	0x0800e33c
 800110c:	0800e284 	.word	0x0800e284
 8001110:	0800e2a4 	.word	0x0800e2a4
 8001114:	0800e2b8 	.word	0x0800e2b8
 8001118:	0800e2cc 	.word	0x0800e2cc
 800111c:	0800e2e4 	.word	0x0800e2e4
 8001120:	0800e304 	.word	0x0800e304
 8001124:	0800e320 	.word	0x0800e320

08001128 <MX_BlueNRG_MS_Process>:
{
 8001128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800112c:	b08d      	sub	sp, #52	; 0x34
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
	if (set_connectable)
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <MX_BlueNRG_MS_Process+0x110>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d165      	bne.n	8001202 <MX_BlueNRG_MS_Process+0xda>

		set_connectable = FALSE;
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
	}

	if (BLE_Role == CLIENT)
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <MX_BlueNRG_MS_Process+0x114>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b9d3      	cbnz	r3, 8001172 <MX_BlueNRG_MS_Process+0x4a>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 800113c:	4b40      	ldr	r3, [pc, #256]	; (8001240 <MX_BlueNRG_MS_Process+0x118>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b11b      	cbz	r3, 800114a <MX_BlueNRG_MS_Process+0x22>
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <MX_BlueNRG_MS_Process+0x11c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d069      	beq.n	800121e <MX_BlueNRG_MS_Process+0xf6>
			startReadTXCharHandle();
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <MX_BlueNRG_MS_Process+0x118>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b11b      	cbz	r3, 8001158 <MX_BlueNRG_MS_Process+0x30>
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <MX_BlueNRG_MS_Process+0x120>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d065      	beq.n	8001224 <MX_BlueNRG_MS_Process+0xfc>
			startReadRXCharHandle();
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8001158:	4b39      	ldr	r3, [pc, #228]	; (8001240 <MX_BlueNRG_MS_Process+0x118>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b14b      	cbz	r3, 8001172 <MX_BlueNRG_MS_Process+0x4a>
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <MX_BlueNRG_MS_Process+0x11c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b133      	cbz	r3, 8001172 <MX_BlueNRG_MS_Process+0x4a>
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_BlueNRG_MS_Process+0x120>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b11b      	cbz	r3, 8001172 <MX_BlueNRG_MS_Process+0x4a>
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <MX_BlueNRG_MS_Process+0x124>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d05b      	beq.n	800122a <MX_BlueNRG_MS_Process+0x102>
			enableNotification();
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed || acquisizione_da_inviare)
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <MX_BlueNRG_MS_Process+0x128>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4a37      	ldr	r2, [pc, #220]	; (8001254 <MX_BlueNRG_MS_Process+0x12c>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	d03c      	beq.n	80011f8 <MX_BlueNRG_MS_Process+0xd0>
		//			//BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
		//			/* If uncommented be sure the BSP_LED_Init(LED2)
		//			 * is called in main().
		//			 * E.g. it can be enabled for debugging. */
		//		}
		if (connected && notification_enabled)
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <MX_BlueNRG_MS_Process+0x118>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d030      	beq.n	80011e8 <MX_BlueNRG_MS_Process+0xc0>
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <MX_BlueNRG_MS_Process+0x124>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d02c      	beq.n	80011e8 <MX_BlueNRG_MS_Process+0xc0>
		{

			if(conteggio_campioni==0){
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_BlueNRG_MS_Process+0x130>)
 8001190:	681c      	ldr	r4, [r3, #0]
 8001192:	2c00      	cmp	r4, #0
 8001194:	d074      	beq.n	8001280 <MX_BlueNRG_MS_Process+0x158>
				conteggio_campioni=0;
				fine=0;
			}

			uint8_t data[20];
			sprintf((char *)data, "%d,%.2f,%.2f,%.2f#",cuscinetto, misure_temperatura, misure_umidita, angolo);
 8001196:	4c31      	ldr	r4, [pc, #196]	; (800125c <MX_BlueNRG_MS_Process+0x134>)
 8001198:	6820      	ldr	r0, [r4, #0]
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_BlueNRG_MS_Process+0x138>)
 800119c:	781d      	ldrb	r5, [r3, #0]
 800119e:	f7ff f9db 	bl	8000558 <__aeabi_f2d>
 80011a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MX_BlueNRG_MS_Process+0x13c>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f7ff f9d5 	bl	8000558 <__aeabi_f2d>
 80011ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_BlueNRG_MS_Process+0x140>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f7ff f9cf 	bl	8000558 <__aeabi_f2d>
 80011ba:	e9cd 0100 	strd	r0, r1, [sp]
 80011be:	462a      	mov	r2, r5
 80011c0:	492a      	ldr	r1, [pc, #168]	; (800126c <MX_BlueNRG_MS_Process+0x144>)
 80011c2:	a807      	add	r0, sp, #28
 80011c4:	f00a fca0 	bl	800bb08 <siprintf>
			sendData(data, sizeof(data));
 80011c8:	2114      	movs	r1, #20
 80011ca:	a807      	add	r0, sp, #28
 80011cc:	f000 fada 	bl	8001784 <sendData>
			printf("\nAngolo: %f\r\n", angolo);
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	f7ff f9c1 	bl	8000558 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4825      	ldr	r0, [pc, #148]	; (8001270 <MX_BlueNRG_MS_Process+0x148>)
 80011dc:	f00a fc1e 	bl	800ba1c <iprintf>
			//				sprintf((char *)data, ",%f\r\n", misure_temperatura);
			//				sendData(data, sizeof(data));
			contatore_invii++;
 80011e0:	4a24      	ldr	r2, [pc, #144]	; (8001274 <MX_BlueNRG_MS_Process+0x14c>)
 80011e2:	7813      	ldrb	r3, [r2, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	7013      	strb	r3, [r2, #0]

		}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_BlueNRG_MS_Process+0x128>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]

		/*RESET SISTEMA A 30 INVII, CIRCA 30 SECONDI */
		if(contatore_invii>30) HAL_NVIC_SystemReset();
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_BlueNRG_MS_Process+0x14c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b1e      	cmp	r3, #30
 80011f4:	f200 8189 	bhi.w	800150a <MX_BlueNRG_MS_Process+0x3e2>
	hci_user_evt_proc();
 80011f8:	f008 fbf6 	bl	80099e8 <hci_user_evt_proc>
}
 80011fc:	b00d      	add	sp, #52	; 0x34
 80011fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Make_Connection();
 8001202:	f000 fa11 	bl	8001628 <Make_Connection>
		HAL_TIM_Base_Start_IT(&htim3);
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <MX_BlueNRG_MS_Process+0x150>)
 8001208:	f007 fafc 	bl	8008804 <HAL_TIM_Base_Start_IT>
		set_connectable = FALSE;
 800120c:	2000      	movs	r0, #0
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_BlueNRG_MS_Process+0x110>)
 8001210:	7018      	strb	r0, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8001212:	f005 fd15 	bl	8006c40 <BSP_PB_GetState>
 8001216:	b2c0      	uxtb	r0, r0
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_BlueNRG_MS_Process+0x154>)
 800121a:	7018      	strb	r0, [r3, #0]
 800121c:	e78b      	b.n	8001136 <MX_BlueNRG_MS_Process+0xe>
			startReadTXCharHandle();
 800121e:	f000 fa59 	bl	80016d4 <startReadTXCharHandle>
 8001222:	e799      	b.n	8001158 <MX_BlueNRG_MS_Process+0x30>
			startReadRXCharHandle();
 8001224:	f000 fa76 	bl	8001714 <startReadRXCharHandle>
 8001228:	e796      	b.n	8001158 <MX_BlueNRG_MS_Process+0x30>
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800122a:	2000      	movs	r0, #0
 800122c:	f005 fca0 	bl	8006b70 <BSP_LED_Off>
			enableNotification();
 8001230:	f000 fad0 	bl	80017d4 <enableNotification>
 8001234:	e79d      	b.n	8001172 <MX_BlueNRG_MS_Process+0x4a>
 8001236:	bf00      	nop
 8001238:	20000001 	.word	0x20000001
 800123c:	20000354 	.word	0x20000354
 8001240:	20006380 	.word	0x20006380
 8001244:	20006387 	.word	0x20006387
 8001248:	20006386 	.word	0x20006386
 800124c:	20006388 	.word	0x20006388
 8001250:	20006378 	.word	0x20006378
 8001254:	2000f56c 	.word	0x2000f56c
 8001258:	2000649c 	.word	0x2000649c
 800125c:	20000358 	.word	0x20000358
 8001260:	2000035e 	.word	0x2000035e
 8001264:	2000f568 	.word	0x2000f568
 8001268:	2000f564 	.word	0x2000f564
 800126c:	0800e374 	.word	0x0800e374
 8001270:	0800e388 	.word	0x0800e388
 8001274:	2000035d 	.word	0x2000035d
 8001278:	20009514 	.word	0x20009514
 800127c:	20000000 	.word	0x20000000
				printf("dimensione massima \r\n");
 8001280:	48a5      	ldr	r0, [pc, #660]	; (8001518 <MX_BlueNRG_MS_Process+0x3f0>)
 8001282:	f00a fc39 	bl	800baf8 <puts>
				for (int i = 0; i < SAMPLES; i += 2) {
 8001286:	4da5      	ldr	r5, [pc, #660]	; (800151c <MX_BlueNRG_MS_Process+0x3f4>)
				printf("dimensione massima \r\n");
 8001288:	462a      	mov	r2, r5
				for (int i = 0; i < SAMPLES; i += 2) {
 800128a:	4623      	mov	r3, r4
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].x);
 800128c:	4fa4      	ldr	r7, [pc, #656]	; (8001520 <MX_BlueNRG_MS_Process+0x3f8>)
					fft_in_buf_real[(i + 1)] = 0;
 800128e:	2600      	movs	r6, #0
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].x);
 8001290:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8001294:	f020 0101 	bic.w	r1, r0, #1
 8001298:	eb01 0160 	add.w	r1, r1, r0, asr #1
 800129c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80012a0:	edd1 7a00 	vldr	s15, [r1]
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	edc2 7a00 	vstr	s15, [r2]
					fft_in_buf_real[(i + 1)] = 0;
 80012ac:	6056      	str	r6, [r2, #4]
				for (int i = 0; i < SAMPLES; i += 2) {
 80012ae:	3302      	adds	r3, #2
 80012b0:	3208      	adds	r2, #8
 80012b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b6:	d1eb      	bne.n	8001290 <MX_BlueNRG_MS_Process+0x168>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 80012b8:	4e98      	ldr	r6, [pc, #608]	; (800151c <MX_BlueNRG_MS_Process+0x3f4>)
 80012ba:	2301      	movs	r3, #1
 80012bc:	2200      	movs	r2, #0
 80012be:	4631      	mov	r1, r6
 80012c0:	4898      	ldr	r0, [pc, #608]	; (8001524 <MX_BlueNRG_MS_Process+0x3fc>)
 80012c2:	f009 f8e7 	bl	800a494 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 80012c6:	f8df b278 	ldr.w	fp, [pc, #632]	; 8001540 <MX_BlueNRG_MS_Process+0x418>
 80012ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ce:	4659      	mov	r1, fp
 80012d0:	4630      	mov	r0, r6
 80012d2:	f009 f9d5 	bl	800a680 <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 80012d6:	4b94      	ldr	r3, [pc, #592]	; (8001528 <MX_BlueNRG_MS_Process+0x400>)
 80012d8:	4a94      	ldr	r2, [pc, #592]	; (800152c <MX_BlueNRG_MS_Process+0x404>)
 80012da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012de:	4658      	mov	r0, fp
 80012e0:	f008 fc4a 	bl	8009b78 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 80012e4:	465f      	mov	r7, fp
 80012e6:	4e92      	ldr	r6, [pc, #584]	; (8001530 <MX_BlueNRG_MS_Process+0x408>)
 80012e8:	f50b 5880 	add.w	r8, fp, #4096	; 0x1000
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 80012ec:	46b2      	mov	sl, r6
 80012ee:	46d9      	mov	r9, fp
					psd_out_buf_x[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 80012f0:	ecf9 7a01 	vldmia	r9!, {s15}
 80012f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f8:	ee17 0a90 	vmov	r0, s15
 80012fc:	2800      	cmp	r0, #0
 80012fe:	bfb8      	it	lt
 8001300:	4240      	neglt	r0, r0
 8001302:	f7ff f917 	bl	8000534 <__aeabi_i2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	f7ff f97d 	bl	8000608 <__aeabi_dmul>
 800130e:	2200      	movs	r2, #0
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <MX_BlueNRG_MS_Process+0x40c>)
 8001312:	f7ff f979 	bl	8000608 <__aeabi_dmul>
 8001316:	e8ea 0102 	strd	r0, r1, [sl], #8
				for (int i = 0; i < FFT_SIZE; i ++) {
 800131a:	45c1      	cmp	r9, r8
 800131c:	d1e8      	bne.n	80012f0 <MX_BlueNRG_MS_Process+0x1c8>
				for (int i = 0; i < FFT_SIZE; i ++) {
 800131e:	f506 5900 	add.w	r9, r6, #8192	; 0x2000
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001322:	2000      	movs	r0, #0
 8001324:	2100      	movs	r1, #0
					sum_psd_out_buf_x= sum_psd_out_buf_x + psd_out_buf_x[i];
 8001326:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800132a:	f7fe ffb7 	bl	800029c <__adddf3>
				for (int i = 0; i < FFT_SIZE; i ++) {
 800132e:	454e      	cmp	r6, r9
 8001330:	d1f9      	bne.n	8001326 <MX_BlueNRG_MS_Process+0x1fe>
				sum_psd_out_buf_x=sum_psd_out_buf_x/FFT_SIZE;
 8001332:	2200      	movs	r2, #0
 8001334:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	2200      	movs	r2, #0
 800133e:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <MX_BlueNRG_MS_Process+0x410>)
 8001340:	f7ff f962 	bl	8000608 <__aeabi_dmul>
 8001344:	4b7d      	ldr	r3, [pc, #500]	; (800153c <MX_BlueNRG_MS_Process+0x414>)
 8001346:	e9c3 0100 	strd	r0, r1, [r3]
 800134a:	4629      	mov	r1, r5
				for (int i = 0; i < SAMPLES; i += 2) {
 800134c:	4622      	mov	r2, r4
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].y);
 800134e:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8001520 <MX_BlueNRG_MS_Process+0x3f8>
					fft_in_buf_real[(i + 1)] = 0;
 8001352:	2600      	movs	r6, #0
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].y);
 8001354:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8001358:	f020 0301 	bic.w	r3, r0, #1
 800135c:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8001360:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8001364:	edd3 7a01 	vldr	s15, [r3, #4]
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	edc1 7a00 	vstr	s15, [r1]
					fft_in_buf_real[(i + 1)] = 0;
 8001370:	604e      	str	r6, [r1, #4]
				for (int i = 0; i < SAMPLES; i += 2) {
 8001372:	3202      	adds	r2, #2
 8001374:	3108      	adds	r1, #8
 8001376:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800137a:	d1eb      	bne.n	8001354 <MX_BlueNRG_MS_Process+0x22c>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 800137c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800151c <MX_BlueNRG_MS_Process+0x3f4>
 8001380:	2301      	movs	r3, #1
 8001382:	2200      	movs	r2, #0
 8001384:	4649      	mov	r1, r9
 8001386:	4867      	ldr	r0, [pc, #412]	; (8001524 <MX_BlueNRG_MS_Process+0x3fc>)
 8001388:	f009 f884 	bl	800a494 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 800138c:	4e6c      	ldr	r6, [pc, #432]	; (8001540 <MX_BlueNRG_MS_Process+0x418>)
 800138e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001392:	4631      	mov	r1, r6
 8001394:	4648      	mov	r0, r9
 8001396:	f009 f973 	bl	800a680 <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <MX_BlueNRG_MS_Process+0x400>)
 800139c:	4a63      	ldr	r2, [pc, #396]	; (800152c <MX_BlueNRG_MS_Process+0x404>)
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	4630      	mov	r0, r6
 80013a4:	f008 fbe8 	bl	8009b78 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 80013a8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800156c <MX_BlueNRG_MS_Process+0x444>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 80013ac:	46ca      	mov	sl, r9
					psd_out_buf_y[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 80013ae:	ecfb 7a01 	vldmia	fp!, {s15}
 80013b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b6:	ee17 0a90 	vmov	r0, s15
 80013ba:	2800      	cmp	r0, #0
 80013bc:	bfb8      	it	lt
 80013be:	4240      	neglt	r0, r0
 80013c0:	f7ff f8b8 	bl	8000534 <__aeabi_i2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	f7ff f91e 	bl	8000608 <__aeabi_dmul>
 80013cc:	2200      	movs	r2, #0
 80013ce:	4b59      	ldr	r3, [pc, #356]	; (8001534 <MX_BlueNRG_MS_Process+0x40c>)
 80013d0:	f7ff f91a 	bl	8000608 <__aeabi_dmul>
 80013d4:	e8ea 0102 	strd	r0, r1, [sl], #8
				for (int i = 0; i < FFT_SIZE; i ++) {
 80013d8:	45c3      	cmp	fp, r8
 80013da:	d1e8      	bne.n	80013ae <MX_BlueNRG_MS_Process+0x286>
				for (int i = 0; i < FFT_SIZE; i ++) {
 80013dc:	f509 5600 	add.w	r6, r9, #8192	; 0x2000
				for (int i = 0; i < FFT_SIZE; i ++) {
 80013e0:	2000      	movs	r0, #0
 80013e2:	2100      	movs	r1, #0
					sum_psd_out_buf_y= sum_psd_out_buf_y + psd_out_buf_y[i];
 80013e4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80013e8:	f7fe ff58 	bl	800029c <__adddf3>
				for (int i = 0; i < FFT_SIZE; i ++) {
 80013ec:	45b1      	cmp	r9, r6
 80013ee:	d1f9      	bne.n	80013e4 <MX_BlueNRG_MS_Process+0x2bc>
				sum_psd_out_buf_y=sum_psd_out_buf_y/FFT_SIZE;
 80013f0:	2200      	movs	r2, #0
 80013f2:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80013f6:	f7ff f907 	bl	8000608 <__aeabi_dmul>
 80013fa:	2200      	movs	r2, #0
 80013fc:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <MX_BlueNRG_MS_Process+0x410>)
 80013fe:	f7ff f903 	bl	8000608 <__aeabi_dmul>
 8001402:	4b50      	ldr	r3, [pc, #320]	; (8001544 <MX_BlueNRG_MS_Process+0x41c>)
 8001404:	e9c3 0100 	strd	r0, r1, [r3]
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].z);
 8001408:	4845      	ldr	r0, [pc, #276]	; (8001520 <MX_BlueNRG_MS_Process+0x3f8>)
					fft_in_buf_real[(i + 1)] = 0;
 800140a:	2100      	movs	r1, #0
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].z);
 800140c:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8001410:	f022 0301 	bic.w	r3, r2, #1
 8001414:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8001418:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800141c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	edc5 7a00 	vstr	s15, [r5]
					fft_in_buf_real[(i + 1)] = 0;
 8001428:	6069      	str	r1, [r5, #4]
				for (int i = 0; i < SAMPLES; i += 2) {
 800142a:	3402      	adds	r4, #2
 800142c:	3508      	adds	r5, #8
 800142e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8001432:	d1eb      	bne.n	800140c <MX_BlueNRG_MS_Process+0x2e4>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 8001434:	4d39      	ldr	r5, [pc, #228]	; (800151c <MX_BlueNRG_MS_Process+0x3f4>)
 8001436:	2301      	movs	r3, #1
 8001438:	2200      	movs	r2, #0
 800143a:	4629      	mov	r1, r5
 800143c:	4839      	ldr	r0, [pc, #228]	; (8001524 <MX_BlueNRG_MS_Process+0x3fc>)
 800143e:	f009 f829 	bl	800a494 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 8001442:	4c3f      	ldr	r4, [pc, #252]	; (8001540 <MX_BlueNRG_MS_Process+0x418>)
 8001444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001448:	4621      	mov	r1, r4
 800144a:	4628      	mov	r0, r5
 800144c:	f009 f918 	bl	800a680 <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 8001450:	4b35      	ldr	r3, [pc, #212]	; (8001528 <MX_BlueNRG_MS_Process+0x400>)
 8001452:	4a36      	ldr	r2, [pc, #216]	; (800152c <MX_BlueNRG_MS_Process+0x404>)
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	4620      	mov	r0, r4
 800145a:	f008 fb8d 	bl	8009b78 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 800145e:	4e3a      	ldr	r6, [pc, #232]	; (8001548 <MX_BlueNRG_MS_Process+0x420>)
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 8001460:	46b1      	mov	r9, r6
					psd_out_buf_z[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 8001462:	2400      	movs	r4, #0
 8001464:	4d33      	ldr	r5, [pc, #204]	; (8001534 <MX_BlueNRG_MS_Process+0x40c>)
 8001466:	ecf7 7a01 	vldmia	r7!, {s15}
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	2800      	cmp	r0, #0
 8001474:	bfb8      	it	lt
 8001476:	4240      	neglt	r0, r0
 8001478:	f7ff f85c 	bl	8000534 <__aeabi_i2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f7ff f8c2 	bl	8000608 <__aeabi_dmul>
 8001484:	4622      	mov	r2, r4
 8001486:	462b      	mov	r3, r5
 8001488:	f7ff f8be 	bl	8000608 <__aeabi_dmul>
 800148c:	e8e9 0102 	strd	r0, r1, [r9], #8
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001490:	4547      	cmp	r7, r8
 8001492:	d1e8      	bne.n	8001466 <MX_BlueNRG_MS_Process+0x33e>
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001494:	f506 5400 	add.w	r4, r6, #8192	; 0x2000
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001498:	2000      	movs	r0, #0
 800149a:	2100      	movs	r1, #0
					sum_psd_out_buf_z= sum_psd_out_buf_z + psd_out_buf_z[i];
 800149c:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80014a0:	f7fe fefc 	bl	800029c <__adddf3>
				for (int i = 0; i < FFT_SIZE; i ++) {
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d1f9      	bne.n	800149c <MX_BlueNRG_MS_Process+0x374>
				sum_psd_out_buf_z=sum_psd_out_buf_z/FFT_SIZE;
 80014a8:	2200      	movs	r2, #0
 80014aa:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80014ae:	f7ff f8ab 	bl	8000608 <__aeabi_dmul>
 80014b2:	2200      	movs	r2, #0
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_BlueNRG_MS_Process+0x410>)
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_BlueNRG_MS_Process+0x424>)
 80014bc:	e9c3 0100 	strd	r0, r1, [r3]
				if(sum_psd_out_buf_y<10000.0)
 80014c0:	a313      	add	r3, pc, #76	; (adr r3, 8001510 <MX_BlueNRG_MS_Process+0x3e8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	491f      	ldr	r1, [pc, #124]	; (8001544 <MX_BlueNRG_MS_Process+0x41c>)
 80014c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014cc:	f7ff fb0e 	bl	8000aec <__aeabi_dcmplt>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	f083 0301 	eor.w	r3, r3, #1
 80014dc:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <MX_BlueNRG_MS_Process+0x428>)
 80014de:	7013      	strb	r3, [r2, #0]
				IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &misure_temperatura);
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_BlueNRG_MS_Process+0x42c>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f005 f8ab 	bl	8006640 <IKS01A3_ENV_SENSOR_GetValue>
				IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &misure_umidita);
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <MX_BlueNRG_MS_Process+0x430>)
 80014ec:	2104      	movs	r1, #4
 80014ee:	2000      	movs	r0, #0
 80014f0:	f005 f8a6 	bl	8006640 <IKS01A3_ENV_SENSOR_GetValue>
				acquisizione_da_inviare=0;
 80014f4:	2400      	movs	r4, #0
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_BlueNRG_MS_Process+0x434>)
 80014f8:	701c      	strb	r4, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim3);
 80014fa:	4819      	ldr	r0, [pc, #100]	; (8001560 <MX_BlueNRG_MS_Process+0x438>)
 80014fc:	f007 f982 	bl	8008804 <HAL_TIM_Base_Start_IT>
				conteggio_campioni=0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_BlueNRG_MS_Process+0x43c>)
 8001502:	601c      	str	r4, [r3, #0]
				fine=0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_BlueNRG_MS_Process+0x440>)
 8001506:	601c      	str	r4, [r3, #0]
 8001508:	e645      	b.n	8001196 <MX_BlueNRG_MS_Process+0x6e>
		if(contatore_invii>30) HAL_NVIC_SystemReset();
 800150a:	f005 fcf1 	bl	8006ef0 <HAL_NVIC_SystemReset>
 800150e:	e673      	b.n	80011f8 <MX_BlueNRG_MS_Process+0xd0>
 8001510:	00000000 	.word	0x00000000
 8001514:	40c38800 	.word	0x40c38800
 8001518:	0800e35c 	.word	0x0800e35c
 800151c:	200064cc 	.word	0x200064cc
 8001520:	20009564 	.word	0x20009564
 8001524:	200064a0 	.word	0x200064a0
 8001528:	2000955c 	.word	0x2000955c
 800152c:	20009560 	.word	0x20009560
 8001530:	20000360 	.word	0x20000360
 8001534:	3fef4000 	.word	0x3fef4000
 8001538:	3fe00000 	.word	0x3fe00000
 800153c:	20006360 	.word	0x20006360
 8001540:	200084cc 	.word	0x200084cc
 8001544:	20006368 	.word	0x20006368
 8001548:	20004360 	.word	0x20004360
 800154c:	20006370 	.word	0x20006370
 8001550:	2000035e 	.word	0x2000035e
 8001554:	2000f564 	.word	0x2000f564
 8001558:	2000f568 	.word	0x2000f568
 800155c:	2000f56c 	.word	0x2000f56c
 8001560:	20009514 	.word	0x20009514
 8001564:	2000649c 	.word	0x2000649c
 8001568:	2000f56d 	.word	0x2000f56d
 800156c:	20002360 	.word	0x20002360

08001570 <BSP_PB_Callback>:
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
	/* Set the User Button flag */
	user_button_pressed = 1;
 8001570:	4b01      	ldr	r3, [pc, #4]	; (8001578 <BSP_PB_Callback+0x8>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
}
 8001576:	4770      	bx	lr
 8001578:	20006378 	.word	0x20006378

0800157c <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800157c:	b510      	push	{r4, lr}
 800157e:	b092      	sub	sp, #72	; 0x48
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001580:	4c25      	ldr	r4, [pc, #148]	; (8001618 <Add_Sample_Service+0x9c>)
 8001582:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8001586:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800158a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800158e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001592:	f104 0310 	add.w	r3, r4, #16
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800159c:	f10d 0e18 	add.w	lr, sp, #24
 80015a0:	3420      	adds	r4, #32
 80015a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015a6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <Add_Sample_Service+0xa0>)
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2307      	movs	r3, #7
 80015b0:	2201      	movs	r2, #1
 80015b2:	4661      	mov	r1, ip
 80015b4:	2002      	movs	r0, #2
 80015b6:	f007 fea4 	bl	8009302 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015ba:	bb40      	cbnz	r0, 800160e <Add_Sample_Service+0x92>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <Add_Sample_Service+0xa4>)
 80015be:	9305      	str	r3, [sp, #20]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9304      	str	r3, [sp, #16]
 80015c4:	2310      	movs	r3, #16
 80015c6:	9303      	str	r3, [sp, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	9202      	str	r2, [sp, #8]
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2314      	movs	r3, #20
 80015d2:	aa0a      	add	r2, sp, #40	; 0x28
 80015d4:	2102      	movs	r1, #2
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <Add_Sample_Service+0xa0>)
 80015d8:	8800      	ldrh	r0, [r0, #0]
 80015da:	f007 fed1 	bl	8009380 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015de:	b9c0      	cbnz	r0, 8001612 <Add_Sample_Service+0x96>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <Add_Sample_Service+0xa8>)
 80015e2:	9305      	str	r3, [sp, #20]
 80015e4:	2301      	movs	r3, #1
 80015e6:	9304      	str	r3, [sp, #16]
 80015e8:	2210      	movs	r2, #16
 80015ea:	9203      	str	r2, [sp, #12]
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	230c      	movs	r3, #12
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2314      	movs	r3, #20
 80015f8:	aa06      	add	r2, sp, #24
 80015fa:	2102      	movs	r1, #2
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <Add_Sample_Service+0xa0>)
 80015fe:	8800      	ldrh	r0, [r0, #0]
 8001600:	f007 febe 	bl	8009380 <aci_gatt_add_char>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8001604:	2800      	cmp	r0, #0
 8001606:	bf18      	it	ne
 8001608:	2047      	movne	r0, #71	; 0x47
}
 800160a:	b012      	add	sp, #72	; 0x48
 800160c:	bd10      	pop	{r4, pc}
  return BLE_STATUS_ERROR ;
 800160e:	2047      	movs	r0, #71	; 0x47
 8001610:	e7fb      	b.n	800160a <Add_Sample_Service+0x8e>
 8001612:	2047      	movs	r0, #71	; 0x47
 8001614:	e7f9      	b.n	800160a <Add_Sample_Service+0x8e>
 8001616:	bf00      	nop
 8001618:	0800e228 	.word	0x0800e228
 800161c:	2000638c 	.word	0x2000638c
 8001620:	2000637c 	.word	0x2000637c
 8001624:	2000637a 	.word	0x2000637a

08001628 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8001628:	b500      	push	{lr}
 800162a:	b08d      	sub	sp, #52	; 0x34
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <Make_Connection+0x98>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	bb2b      	cbnz	r3, 800167e <Make_Connection+0x56>

    printf("Client Create Connection\n");
 8001632:	4824      	ldr	r0, [pc, #144]	; (80016c4 <Make_Connection+0x9c>)
 8001634:	f00a fa60 	bl	800baf8 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <Make_Connection+0xa0>)
 800163a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800163e:	9008      	str	r0, [sp, #32]
 8001640:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8001644:	2000      	movs	r0, #0
 8001646:	f005 fa89 	bl	8006b5c <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 800164a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800164e:	9306      	str	r3, [sp, #24]
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	233c      	movs	r3, #60	; 0x3c
 8001654:	9304      	str	r3, [sp, #16]
 8001656:	2200      	movs	r2, #0
 8001658:	9203      	str	r2, [sp, #12]
 800165a:	2328      	movs	r3, #40	; 0x28
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	ab08      	add	r3, sp, #32
 8001664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001668:	4608      	mov	r0, r1
 800166a:	f007 fde6 	bl	800923a <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 800166e:	b318      	cbz	r0, 80016b8 <Make_Connection+0x90>
      printf("Error while starting connection.\n");
 8001670:	4816      	ldr	r0, [pc, #88]	; (80016cc <Make_Connection+0xa4>)
 8001672:	f00a fa41 	bl	800baf8 <puts>
      HAL_Delay(100);
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f005 fbd0 	bl	8006e1c <HAL_Delay>
 800167c:	e01c      	b.n	80016b8 <Make_Connection+0x90>
    }

  } else  {

    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <Make_Connection+0xa8>)
 8001680:	f10d 0c20 	add.w	ip, sp, #32
 8001684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001686:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800168a:	f88c 3000 	strb.w	r3, [ip]

    /* disable scan response */
    hci_le_set_scan_resp_data(0,NULL);
 800168e:	2100      	movs	r1, #0
 8001690:	4608      	mov	r0, r1
 8001692:	f008 f862 	bl	800975a <hci_le_set_scan_resp_data>
    /*
    Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
    Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
    Slave_Conn_Interval_Max
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8001696:	2000      	movs	r0, #0
 8001698:	9006      	str	r0, [sp, #24]
 800169a:	9005      	str	r0, [sp, #20]
 800169c:	9004      	str	r0, [sp, #16]
 800169e:	9003      	str	r0, [sp, #12]
 80016a0:	ab08      	add	r3, sp, #32
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	230d      	movs	r3, #13
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	9000      	str	r0, [sp, #0]
 80016aa:	4603      	mov	r3, r0
 80016ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b4:	f007 fd22 	bl	80090fc <aci_gap_set_discoverable>
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 80016b8:	b00d      	add	sp, #52	; 0x34
 80016ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80016be:	bf00      	nop
 80016c0:	20000354 	.word	0x20000354
 80016c4:	0800e398 	.word	0x0800e398
 80016c8:	0800e258 	.word	0x0800e258
 80016cc:	0800e3b4 	.word	0x0800e3b4
 80016d0:	0800e3d8 	.word	0x0800e3d8

080016d4 <startReadTXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
  if (!start_read_tx_char_handle)
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <startReadTXCharHandle+0x34>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b103      	cbz	r3, 80016dc <startReadTXCharHandle+0x8>
 80016da:	4770      	bx	lr
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	b086      	sub	sp, #24
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80016e0:	ac02      	add	r4, sp, #8
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <startReadTXCharHandle+0x38>)
 80016e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <startReadTXCharHandle+0x3c>)
 80016ec:	8818      	ldrh	r0, [r3, #0]
 80016ee:	9400      	str	r4, [sp, #0]
 80016f0:	2302      	movs	r3, #2
 80016f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f6:	2101      	movs	r1, #1
 80016f8:	b280      	uxth	r0, r0
 80016fa:	f007 fed4 	bl	80094a6 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 80016fe:	4b02      	ldr	r3, [pc, #8]	; (8001708 <startReadTXCharHandle+0x34>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
  }
}
 8001704:	b006      	add	sp, #24
 8001706:	bd10      	pop	{r4, pc}
 8001708:	2000638f 	.word	0x2000638f
 800170c:	0800e238 	.word	0x0800e238
 8001710:	20006384 	.word	0x20006384

08001714 <startReadRXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
  if (!start_read_rx_char_handle)
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <startReadRXCharHandle+0x34>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b103      	cbz	r3, 800171c <startReadRXCharHandle+0x8>
 800171a:	4770      	bx	lr
{
 800171c:	b510      	push	{r4, lr}
 800171e:	b086      	sub	sp, #24
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001720:	ac02      	add	r4, sp, #8
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <startReadRXCharHandle+0x38>)
 8001724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <startReadRXCharHandle+0x3c>)
 800172c:	8818      	ldrh	r0, [r3, #0]
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	2302      	movs	r3, #2
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	2101      	movs	r1, #1
 8001738:	b280      	uxth	r0, r0
 800173a:	f007 feb4 	bl	80094a6 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 800173e:	4b02      	ldr	r3, [pc, #8]	; (8001748 <startReadRXCharHandle+0x34>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
  }
}
 8001744:	b006      	add	sp, #24
 8001746:	bd10      	pop	{r4, pc}
 8001748:	2000638e 	.word	0x2000638e
 800174c:	0800e248 	.word	0x0800e248
 8001750:	20006384 	.word	0x20006384

08001754 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4605      	mov	r5, r0
 8001758:	460e      	mov	r6, r1
  BSP_LED_Toggle(LED2);
 800175a:	2000      	movs	r0, #0
 800175c:	f005 fa12 	bl	8006b84 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8001760:	b13e      	cbz	r6, 8001772 <receiveData+0x1e>
 8001762:	462c      	mov	r4, r5
 8001764:	4435      	add	r5, r6
    printf("%c", data_buffer[i]);
 8001766:	f814 0b01 	ldrb.w	r0, [r4], #1
 800176a:	f00a f969 	bl	800ba40 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 800176e:	42ac      	cmp	r4, r5
 8001770:	d1f9      	bne.n	8001766 <receiveData+0x12>
  }
  fflush(stdout);
 8001772:	4b03      	ldr	r3, [pc, #12]	; (8001780 <receiveData+0x2c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	f00a f87a 	bl	800b870 <fflush>
}
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	bf00      	nop
 8001780:	200001c8 	.word	0x200001c8

08001784 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001784:	b500      	push	{lr}
 8001786:	b083      	sub	sp, #12
 8001788:	4603      	mov	r3, r0
 800178a:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <sendData+0x3c>)
 800178e:	7809      	ldrb	r1, [r1, #0]
 8001790:	2901      	cmp	r1, #1
 8001792:	d00b      	beq.n	80017ac <sendData+0x28>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8001794:	490b      	ldr	r1, [pc, #44]	; (80017c4 <sendData+0x40>)
 8001796:	8808      	ldrh	r0, [r1, #0]
 8001798:	490b      	ldr	r1, [pc, #44]	; (80017c8 <sendData+0x44>)
 800179a:	8809      	ldrh	r1, [r1, #0]
 800179c:	3101      	adds	r1, #1
 800179e:	b289      	uxth	r1, r1
 80017a0:	b280      	uxth	r0, r0
 80017a2:	f007 fee2 	bl	800956a <aci_gatt_write_without_response>
  }
}
 80017a6:	b003      	add	sp, #12
 80017a8:	f85d fb04 	ldr.w	pc, [sp], #4
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	4906      	ldr	r1, [pc, #24]	; (80017cc <sendData+0x48>)
 80017b4:	8809      	ldrh	r1, [r1, #0]
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <sendData+0x4c>)
 80017b8:	8800      	ldrh	r0, [r0, #0]
 80017ba:	f007 fe41 	bl	8009440 <aci_gatt_update_char_value>
 80017be:	e7f2      	b.n	80017a6 <sendData+0x22>
 80017c0:	20000354 	.word	0x20000354
 80017c4:	20006384 	.word	0x20006384
 80017c8:	2000638a 	.word	0x2000638a
 80017cc:	2000637c 	.word	0x2000637c
 80017d0:	2000638c 	.word	0x2000638c

080017d4 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	b082      	sub	sp, #8
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 80017d8:	2301      	movs	r3, #1
 80017da:	f8ad 3004 	strh.w	r3, [sp, #4]

  uint32_t tickstart = HAL_GetTick();
 80017de:	f005 fb17 	bl	8006e10 <HAL_GetTick>
 80017e2:	4604      	mov	r4, r0

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80017e4:	4e0c      	ldr	r6, [pc, #48]	; (8001818 <enableNotification+0x44>)
 80017e6:	4d0d      	ldr	r5, [pc, #52]	; (800181c <enableNotification+0x48>)
 80017e8:	8830      	ldrh	r0, [r6, #0]
 80017ea:	8829      	ldrh	r1, [r5, #0]
 80017ec:	3102      	adds	r1, #2
 80017ee:	ab01      	add	r3, sp, #4
 80017f0:	2202      	movs	r2, #2
 80017f2:	b289      	uxth	r1, r1
 80017f4:	b280      	uxth	r0, r0
 80017f6:	f007 fe87 	bl	8009508 <aci_gatt_write_charac_descriptor>
 80017fa:	2846      	cmp	r0, #70	; 0x46
 80017fc:	d106      	bne.n	800180c <enableNotification+0x38>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80017fe:	f005 fb07 	bl	8006e10 <HAL_GetTick>
 8001802:	1b00      	subs	r0, r0, r4
 8001804:	f242 7310 	movw	r3, #10000	; 0x2710
 8001808:	4298      	cmp	r0, r3
 800180a:	d9ed      	bls.n	80017e8 <enableNotification+0x14>
  }
  notification_enabled = TRUE;
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <enableNotification+0x4c>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	b002      	add	sp, #8
 8001814:	bd70      	pop	{r4, r5, r6, pc}
 8001816:	bf00      	nop
 8001818:	20006384 	.word	0x20006384
 800181c:	20006390 	.word	0x20006390
 8001820:	20006388 	.word	0x20006388

08001824 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001824:	b508      	push	{r3, lr}
 8001826:	4603      	mov	r3, r0
  if(handle == RXCharHandle + 1){
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <Attribute_Modified_CB+0x34>)
 800182a:	f8b0 c000 	ldrh.w	ip, [r0]
 800182e:	f10c 0c01 	add.w	ip, ip, #1
 8001832:	4563      	cmp	r3, ip
 8001834:	d005      	beq.n	8001842 <Attribute_Modified_CB+0x1e>
    receiveData(att_data, data_length);
  } else if (handle == TXCharHandle + 2) {
 8001836:	4909      	ldr	r1, [pc, #36]	; (800185c <Attribute_Modified_CB+0x38>)
 8001838:	8809      	ldrh	r1, [r1, #0]
 800183a:	3102      	adds	r1, #2
 800183c:	428b      	cmp	r3, r1
 800183e:	d004      	beq.n	800184a <Attribute_Modified_CB+0x26>
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8001840:	bd08      	pop	{r3, pc}
    receiveData(att_data, data_length);
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff ff86 	bl	8001754 <receiveData>
 8001848:	e7fa      	b.n	8001840 <Attribute_Modified_CB+0x1c>
    if(att_data[0] == 0x01)
 800184a:	7813      	ldrb	r3, [r2, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d1f7      	bne.n	8001840 <Attribute_Modified_CB+0x1c>
      notification_enabled = TRUE;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <Attribute_Modified_CB+0x3c>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	e7f3      	b.n	8001840 <Attribute_Modified_CB+0x1c>
 8001858:	2000637a 	.word	0x2000637a
 800185c:	2000637c 	.word	0x2000637c
 8001860:	20006388 	.word	0x20006388

08001864 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	4607      	mov	r7, r0
  connected = TRUE;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <GAP_ConnectionComplete_CB+0x34>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <GAP_ConnectionComplete_CB+0x38>)
 8001870:	8019      	strh	r1, [r3, #0]

  printf("Connected to device:");
 8001872:	480b      	ldr	r0, [pc, #44]	; (80018a0 <GAP_ConnectionComplete_CB+0x3c>)
 8001874:	f00a f8d2 	bl	800ba1c <iprintf>
  for(int i = 5; i > 0; i--){
 8001878:	1dbc      	adds	r4, r7, #6
 800187a:	1c7e      	adds	r6, r7, #1
    printf("%02X-", addr[i]);
 800187c:	4d09      	ldr	r5, [pc, #36]	; (80018a4 <GAP_ConnectionComplete_CB+0x40>)
 800187e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8001882:	4628      	mov	r0, r5
 8001884:	f00a f8ca 	bl	800ba1c <iprintf>
  for(int i = 5; i > 0; i--){
 8001888:	42b4      	cmp	r4, r6
 800188a:	d1f8      	bne.n	800187e <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 800188c:	7839      	ldrb	r1, [r7, #0]
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <GAP_ConnectionComplete_CB+0x44>)
 8001890:	f00a f8c4 	bl	800ba1c <iprintf>
}
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001896:	bf00      	nop
 8001898:	20006380 	.word	0x20006380
 800189c:	20006384 	.word	0x20006384
 80018a0:	0800e3e8 	.word	0x0800e3e8
 80018a4:	0800e400 	.word	0x0800e400
 80018a8:	0800e408 	.word	0x0800e408

080018ac <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80018ac:	b510      	push	{r4, lr}
  connected = FALSE;
 80018ae:	2400      	movs	r4, #0
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <GAP_DisconnectionComplete_CB+0x2c>)
 80018b2:	601c      	str	r4, [r3, #0]

  printf("Disconnected\n");
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <GAP_DisconnectionComplete_CB+0x30>)
 80018b6:	f00a f91f 	bl	800baf8 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <GAP_DisconnectionComplete_CB+0x34>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <GAP_DisconnectionComplete_CB+0x38>)
 80018c2:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <GAP_DisconnectionComplete_CB+0x3c>)
 80018c6:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <GAP_DisconnectionComplete_CB+0x40>)
 80018ca:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <GAP_DisconnectionComplete_CB+0x44>)
 80018ce:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <GAP_DisconnectionComplete_CB+0x48>)
 80018d2:	701c      	strb	r4, [r3, #0]
}
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	20006380 	.word	0x20006380
 80018dc:	0800e410 	.word	0x0800e410
 80018e0:	20000001 	.word	0x20000001
 80018e4:	20006388 	.word	0x20006388
 80018e8:	2000638f 	.word	0x2000638f
 80018ec:	2000638e 	.word	0x2000638e
 80018f0:	20006387 	.word	0x20006387
 80018f4:	20006386 	.word	0x20006386

080018f8 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 80018f8:	b508      	push	{r3, lr}
  if (attr_handle == tx_handle+1) {
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <GATT_Notification_CB+0x18>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4298      	cmp	r0, r3
 8001902:	d000      	beq.n	8001906 <GATT_Notification_CB+0xe>
    receiveData(attr_value, attr_len);
  }
}
 8001904:	bd08      	pop	{r3, pc}
    receiveData(attr_value, attr_len);
 8001906:	4610      	mov	r0, r2
 8001908:	f7ff ff24 	bl	8001754 <receiveData>
}
 800190c:	e7fa      	b.n	8001904 <GATT_Notification_CB+0xc>
 800190e:	bf00      	nop
 8001910:	20006390 	.word	0x20006390

08001914 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001914:	b508      	push	{r3, lr}
  hci_uart_pckt *hci_pckt = pData;
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001916:	7803      	ldrb	r3, [r0, #0]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d106      	bne.n	800192a <user_notify+0x16>
    return;

  switch(event_pckt->evt){
 800191c:	7843      	ldrb	r3, [r0, #1]
 800191e:	2b3e      	cmp	r3, #62	; 0x3e
 8001920:	d007      	beq.n	8001932 <user_notify+0x1e>
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d00e      	beq.n	8001944 <user_notify+0x30>
 8001926:	2b05      	cmp	r3, #5
 8001928:	d000      	beq.n	800192c <user_notify+0x18>
        break;
      }
    }
    break;
  }
}
 800192a:	bd08      	pop	{r3, pc}
      GAP_DisconnectionComplete_CB();
 800192c:	f7ff ffbe 	bl	80018ac <GAP_DisconnectionComplete_CB>
    break;
 8001930:	e7fb      	b.n	800192a <user_notify+0x16>
      switch(evt->subevent){
 8001932:	78c3      	ldrb	r3, [r0, #3]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d1f8      	bne.n	800192a <user_notify+0x16>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001938:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 800193c:	3009      	adds	r0, #9
 800193e:	f7ff ff91 	bl	8001864 <GAP_ConnectionComplete_CB>
        break;
 8001942:	e7f2      	b.n	800192a <user_notify+0x16>
      switch(blue_evt->ecode){
 8001944:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8001948:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 800194c:	2b11      	cmp	r3, #17
 800194e:	d8ec      	bhi.n	800192a <user_notify+0x16>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <user_notify+0x44>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	080019a1 	.word	0x080019a1
 800195c:	0800192b 	.word	0x0800192b
 8001960:	0800192b 	.word	0x0800192b
 8001964:	0800192b 	.word	0x0800192b
 8001968:	0800192b 	.word	0x0800192b
 800196c:	0800192b 	.word	0x0800192b
 8001970:	0800192b 	.word	0x0800192b
 8001974:	0800192b 	.word	0x0800192b
 8001978:	0800192b 	.word	0x0800192b
 800197c:	0800192b 	.word	0x0800192b
 8001980:	0800192b 	.word	0x0800192b
 8001984:	0800192b 	.word	0x0800192b
 8001988:	0800192b 	.word	0x0800192b
 800198c:	0800192b 	.word	0x0800192b
 8001990:	080019bd 	.word	0x080019bd
 8001994:	08001a13 	.word	0x08001a13
 8001998:	0800192b 	.word	0x0800192b
 800199c:	080019cf 	.word	0x080019cf
          if (bnrg_expansion_board == IDB05A1) {
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <user_notify+0x138>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80019a6:	bf0c      	ite	eq
 80019a8:	f100 020c 	addeq.w	r2, r0, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80019ac:	f100 020a 	addne.w	r2, r0, #10
 80019b0:	7a41      	ldrb	r1, [r0, #9]
 80019b2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80019b6:	f7ff ff35 	bl	8001824 <Attribute_Modified_CB>
 80019ba:	e7b6      	b.n	800192a <user_notify+0x16>
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80019bc:	79c1      	ldrb	r1, [r0, #7]
 80019be:	3902      	subs	r1, #2
 80019c0:	f100 020a 	add.w	r2, r0, #10
 80019c4:	b2c9      	uxtb	r1, r1
 80019c6:	8900      	ldrh	r0, [r0, #8]
 80019c8:	f7ff ff96 	bl	80018f8 <GATT_Notification_CB>
        break;
 80019cc:	e7ad      	b.n	800192a <user_notify+0x16>
        if(BLE_Role == CLIENT) {
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <user_notify+0x13c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1a9      	bne.n	800192a <user_notify+0x16>
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <user_notify+0x140>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b113      	cbz	r3, 80019e2 <user_notify+0xce>
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <user_notify+0x144>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b17b      	cbz	r3, 8001a02 <user_notify+0xee>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <user_notify+0x148>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d09f      	beq.n	800192a <user_notify+0x16>
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <user_notify+0x14c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d19b      	bne.n	800192a <user_notify+0x16>
            rx_handle = resp->attr_handle;
 80019f2:	8901      	ldrh	r1, [r0, #8]
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <user_notify+0x150>)
 80019f6:	8019      	strh	r1, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 80019f8:	b289      	uxth	r1, r1
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <user_notify+0x154>)
 80019fc:	f00a f80e 	bl	800ba1c <iprintf>
 8001a00:	e793      	b.n	800192a <user_notify+0x16>
            tx_handle = resp->attr_handle;
 8001a02:	8901      	ldrh	r1, [r0, #8]
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <user_notify+0x158>)
 8001a06:	8019      	strh	r1, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001a08:	b289      	uxth	r1, r1
 8001a0a:	4819      	ldr	r0, [pc, #100]	; (8001a70 <user_notify+0x15c>)
 8001a0c:	f00a f806 	bl	800ba1c <iprintf>
 8001a10:	e78b      	b.n	800192a <user_notify+0x16>
        if(BLE_Role == CLIENT) {
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <user_notify+0x13c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d187      	bne.n	800192a <user_notify+0x16>
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <user_notify+0x140>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b133      	cbz	r3, 8001a2e <user_notify+0x11a>
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <user_notify+0x144>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b91b      	cbnz	r3, 8001a2e <user_notify+0x11a>
            end_read_tx_char_handle = TRUE;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <user_notify+0x144>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e77d      	b.n	800192a <user_notify+0x16>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <user_notify+0x148>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f43f af79 	beq.w	800192a <user_notify+0x16>
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <user_notify+0x14c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f47f af74 	bne.w	800192a <user_notify+0x16>
            end_read_rx_char_handle = TRUE;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <user_notify+0x14c>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e76f      	b.n	800192a <user_notify+0x16>
 8001a4a:	bf00      	nop
 8001a4c:	2000035c 	.word	0x2000035c
 8001a50:	20000354 	.word	0x20000354
 8001a54:	2000638f 	.word	0x2000638f
 8001a58:	20006387 	.word	0x20006387
 8001a5c:	2000638e 	.word	0x2000638e
 8001a60:	20006386 	.word	0x20006386
 8001a64:	2000638a 	.word	0x2000638a
 8001a68:	0800e438 	.word	0x0800e438
 8001a6c:	20006390 	.word	0x20006390
 8001a70:	0800e420 	.word	0x0800e420

08001a74 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2400      	movs	r4, #0
 8001a7a:	9400      	str	r4, [sp, #0]
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HCI_TL_SPI_Init+0x60>)
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	9b00      	ldr	r3, [sp, #0]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001a90:	2601      	movs	r6, #1
 8001a92:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a98:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001a9c:	4d0e      	ldr	r5, [pc, #56]	; (8001ad8 <HCI_TL_SPI_Init+0x64>)
 8001a9e:	a901      	add	r1, sp, #4
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f005 fa6b 	bl	8006f7c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001ab2:	a901      	add	r1, sp, #4
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f005 fa61 	bl	8006f7c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001aba:	2302      	movs	r3, #2
 8001abc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001ac4:	a901      	add	r1, sp, #4
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f005 fa58 	bl	8006f7c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8001acc:	f000 fbe0 	bl	8002290 <BSP_SPI1_Init>
}
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001adc:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001ade:	4c08      	ldr	r4, [pc, #32]	; (8001b00 <HCI_TL_SPI_DeInit+0x24>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f005 fb30 	bl	8007148 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4620      	mov	r0, r4
 8001aec:	f005 fb2c 	bl	8007148 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af4:	4620      	mov	r0, r4
 8001af6:	f005 fb27 	bl	8007148 <HAL_GPIO_DeInit>
  return 0;
}
 8001afa:	2000      	movs	r0, #0
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	bf00      	nop
 8001b00:	40020000 	.word	0x40020000

08001b04 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001b04:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b06:	4c0d      	ldr	r4, [pc, #52]	; (8001b3c <HCI_TL_SPI_Reset+0x38>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f005 fbb1 	bl	8007274 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f005 fbab 	bl	8007274 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001b1e:	2005      	movs	r0, #5
 8001b20:	f005 f97c 	bl	8006e1c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f005 fba2 	bl	8007274 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001b30:	2005      	movs	r0, #5
 8001b32:	f005 f973 	bl	8006e1c <HAL_Delay>
  return 0;
}
 8001b36:	2000      	movs	r0, #0
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	4605      	mov	r5, r0
 8001b46:	460c      	mov	r4, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8001b48:	23ff      	movs	r3, #255	; 0xff
 8001b4a:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HCI_TL_SPI_Receive+0x88>)
 8001b50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b54:	9002      	str	r0, [sp, #8]
 8001b56:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	481b      	ldr	r0, [pc, #108]	; (8001bcc <HCI_TL_SPI_Receive+0x8c>)
 8001b60:	f005 fb88 	bl	8007274 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b64:	2205      	movs	r2, #5
 8001b66:	4669      	mov	r1, sp
 8001b68:	a802      	add	r0, sp, #8
 8001b6a:	f000 faef 	bl	800214c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001b6e:	f89d 3000 	ldrb.w	r3, [sp]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d008      	beq.n	8001b88 <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 8001b76:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <HCI_TL_SPI_Receive+0x8c>)
 8001b7e:	f005 fb79 	bl	8007274 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif

  return len;
}
 8001b82:	4620      	mov	r0, r4
 8001b84:	b005      	add	sp, #20
 8001b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001b88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b8c:	f89d 6003 	ldrb.w	r6, [sp, #3]
    if(byte_count > 0)
 8001b90:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 8001b94:	d014      	beq.n	8001bc0 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 8001b96:	42a6      	cmp	r6, r4
 8001b98:	bf28      	it	cs
 8001b9a:	4626      	movcs	r6, r4
      for(len = 0; len < byte_count; len++)
 8001b9c:	b196      	cbz	r6, 8001bc4 <HCI_TL_SPI_Receive+0x84>
 8001b9e:	2400      	movs	r4, #0
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001ba0:	2701      	movs	r7, #1
 8001ba2:	463a      	mov	r2, r7
 8001ba4:	f10d 010e 	add.w	r1, sp, #14
 8001ba8:	f10d 000f 	add.w	r0, sp, #15
 8001bac:	f000 face 	bl	800214c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001bb0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001bb4:	552b      	strb	r3, [r5, r4]
      for(len = 0; len < byte_count; len++)
 8001bb6:	1c63      	adds	r3, r4, #1
 8001bb8:	b2dc      	uxtb	r4, r3
 8001bba:	42a6      	cmp	r6, r4
 8001bbc:	d8f1      	bhi.n	8001ba2 <HCI_TL_SPI_Receive+0x62>
 8001bbe:	e7db      	b.n	8001b78 <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	e7d9      	b.n	8001b78 <HCI_TL_SPI_Receive+0x38>
      for(len = 0; len < byte_count; len++)
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e7d7      	b.n	8001b78 <HCI_TL_SPI_Receive+0x38>
 8001bc8:	0800e260 	.word	0x0800e260
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	4681      	mov	r9, r0
 8001bd8:	4688      	mov	r8, r1
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HCI_TL_SPI_Send+0x8c>)
 8001bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be0:	9002      	str	r0, [sp, #8]
 8001be2:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001be6:	f005 f913 	bl	8006e10 <HAL_GetTick>
 8001bea:	4606      	mov	r6, r0
  do
  {
    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001bec:	4d1c      	ldr	r5, [pc, #112]	; (8001c60 <HCI_TL_SPI_Send+0x90>)
 8001bee:	2700      	movs	r7, #0
 8001bf0:	2402      	movs	r4, #2
 8001bf2:	e00c      	b.n	8001c0e <HCI_TL_SPI_Send+0x3e>
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
    {
      result = -3;
 8001bf4:	f06f 0002 	mvn.w	r0, #2
      break;
    }
  } while(result < 0);

  return result;
 8001bf8:	e02d      	b.n	8001c56 <HCI_TL_SPI_Send+0x86>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f005 fb38 	bl	8007274 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001c04:	f005 f904 	bl	8006e10 <HAL_GetTick>
 8001c08:	1b83      	subs	r3, r0, r6
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	d8f2      	bhi.n	8001bf4 <HCI_TL_SPI_Send+0x24>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001c0e:	463a      	mov	r2, r7
 8001c10:	4621      	mov	r1, r4
 8001c12:	4628      	mov	r0, r5
 8001c14:	f005 fb2e 	bl	8007274 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001c18:	2205      	movs	r2, #5
 8001c1a:	4669      	mov	r1, sp
 8001c1c:	a802      	add	r0, sp, #8
 8001c1e:	f000 fa95 	bl	800214c <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02)
 8001c22:	f89d 3000 	ldrb.w	r3, [sp]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d1e7      	bne.n	8001bfa <HCI_TL_SPI_Send+0x2a>
      if(header_slave[1] >= size)
 8001c2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001c2e:	4543      	cmp	r3, r8
 8001c30:	d3e3      	bcc.n	8001bfa <HCI_TL_SPI_Send+0x2a>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001c32:	4642      	mov	r2, r8
 8001c34:	490b      	ldr	r1, [pc, #44]	; (8001c64 <HCI_TL_SPI_Send+0x94>)
 8001c36:	4648      	mov	r0, r9
 8001c38:	f000 fa88 	bl	800214c <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <HCI_TL_SPI_Send+0x90>)
 8001c42:	f005 fb17 	bl	8007274 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001c46:	f005 f8e3 	bl	8006e10 <HAL_GetTick>
 8001c4a:	1b80      	subs	r0, r0, r6
    result = 0;
 8001c4c:	280f      	cmp	r0, #15
 8001c4e:	bf8c      	ite	hi
 8001c50:	f06f 0002 	mvnhi.w	r0, #2
 8001c54:	2000      	movls	r0, #0
}
 8001c56:	b005      	add	sp, #20
 8001c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c5c:	0800e268 	.word	0x0800e268
 8001c60:	40020000 	.word	0x40020000
 8001c64:	2000639c 	.word	0x2000639c

08001c68 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001c6a:	4d07      	ldr	r5, [pc, #28]	; (8001c88 <hci_tl_lowlevel_isr+0x20>)
 8001c6c:	2401      	movs	r4, #1
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
  {
    if (hci_notify_asynch_evt(NULL))
 8001c6e:	2600      	movs	r6, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001c70:	4621      	mov	r1, r4
 8001c72:	4628      	mov	r0, r5
 8001c74:	f005 faf8 	bl	8007268 <HAL_GPIO_ReadPin>
  while(IsDataAvailable())
 8001c78:	2801      	cmp	r0, #1
 8001c7a:	d104      	bne.n	8001c86 <hci_tl_lowlevel_isr+0x1e>
    if (hci_notify_asynch_evt(NULL))
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f007 fed7 	bl	8009a30 <hci_notify_asynch_evt>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d0f4      	beq.n	8001c70 <hci_tl_lowlevel_isr+0x8>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	40020000 	.word	0x40020000

08001c8c <hci_tl_lowlevel_init>:
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <hci_tl_lowlevel_init+0x4c>)
 8001c92:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <hci_tl_lowlevel_init+0x50>)
 8001c96:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <hci_tl_lowlevel_init+0x54>)
 8001c9a:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <hci_tl_lowlevel_init+0x58>)
 8001c9e:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <hci_tl_lowlevel_init+0x5c>)
 8001ca2:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <hci_tl_lowlevel_init+0x60>)
 8001ca6:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8001ca8:	a801      	add	r0, sp, #4
 8001caa:	f007 fdc3 	bl	8009834 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001cae:	4c10      	ldr	r4, [pc, #64]	; (8001cf0 <hci_tl_lowlevel_init+0x64>)
 8001cb0:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f005 f948 	bl	8006f4a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <hci_tl_lowlevel_init+0x68>)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f005 f93c 	bl	8006f3c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f005 f8cd 	bl	8006e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cce:	2006      	movs	r0, #6
 8001cd0:	f005 f900 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
}
 8001cd4:	b008      	add	sp, #32
 8001cd6:	bd10      	pop	{r4, pc}
 8001cd8:	08001a75 	.word	0x08001a75
 8001cdc:	08001add 	.word	0x08001add
 8001ce0:	08001bd1 	.word	0x08001bd1
 8001ce4:	08001b41 	.word	0x08001b41
 8001ce8:	08001b05 	.word	0x08001b05
 8001cec:	0800224d 	.word	0x0800224d
 8001cf0:	20006394 	.word	0x20006394
 8001cf4:	08001c69 	.word	0x08001c69

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b500      	push	{lr}
 8001cfa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfc:	2230      	movs	r2, #48	; 0x30
 8001cfe:	2100      	movs	r1, #0
 8001d00:	a808      	add	r0, sp, #32
 8001d02:	f009 fff9 	bl	800bcf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d06:	2300      	movs	r3, #0
 8001d08:	9303      	str	r3, [sp, #12]
 8001d0a:	9304      	str	r3, [sp, #16]
 8001d0c:	9305      	str	r3, [sp, #20]
 8001d0e:	9306      	str	r3, [sp, #24]
 8001d10:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <SystemClock_Config+0x9c>)
 8001d16:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d18:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d1c:	6411      	str	r1, [r2, #64]	; 0x40
 8001d1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d20:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	491b      	ldr	r1, [pc, #108]	; (8001d98 <SystemClock_Config+0xa0>)
 8001d2c:	680a      	ldr	r2, [r1, #0]
 8001d2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d36:	600a      	str	r2, [r1, #0]
 8001d38:	680a      	ldr	r2, [r1, #0]
 8001d3a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001d3e:	9202      	str	r2, [sp, #8]
 8001d40:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d42:	2102      	movs	r1, #2
 8001d44:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d46:	2201      	movs	r2, #1
 8001d48:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d50:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d52:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d58:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d62:	a808      	add	r0, sp, #32
 8001d64:	f005 fff4 	bl	8007d50 <HAL_RCC_OscConfig>
 8001d68:	b980      	cbnz	r0, 8001d8c <SystemClock_Config+0x94>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6e:	2102      	movs	r1, #2
 8001d70:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7a:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7c:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d7e:	a803      	add	r0, sp, #12
 8001d80:	f006 fa50 	bl	8008224 <HAL_RCC_ClockConfig>
 8001d84:	b920      	cbnz	r0, 8001d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
  }
}
 8001d86:	b015      	add	sp, #84	; 0x54
 8001d88:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d8e:	e7fe      	b.n	8001d8e <SystemClock_Config+0x96>
 8001d90:	b672      	cpsid	i
 8001d92:	e7fe      	b.n	8001d92 <SystemClock_Config+0x9a>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000

08001d9c <main>:
{
 8001d9c:	b500      	push	{lr}
 8001d9e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001da0:	f005 f810 	bl	8006dc4 <HAL_Init>
  SystemClock_Config();
 8001da4:	f7ff ffa8 	bl	8001cf8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	2400      	movs	r4, #0
 8001daa:	9407      	str	r4, [sp, #28]
 8001dac:	9408      	str	r4, [sp, #32]
 8001dae:	9409      	str	r4, [sp, #36]	; 0x24
 8001db0:	940a      	str	r4, [sp, #40]	; 0x28
 8001db2:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	9401      	str	r4, [sp, #4]
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <main+0x174>)
 8001db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dba:	f042 0204 	orr.w	r2, r2, #4
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc2:	f002 0204 	and.w	r2, r2, #4
 8001dc6:	9201      	str	r2, [sp, #4]
 8001dc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dca:	9402      	str	r4, [sp, #8]
 8001dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001dda:	9202      	str	r2, [sp, #8]
 8001ddc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	9403      	str	r4, [sp, #12]
 8001de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
 8001de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dea:	f002 0201 	and.w	r2, r2, #1
 8001dee:	9203      	str	r2, [sp, #12]
 8001df0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	9404      	str	r4, [sp, #16]
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	f042 0202 	orr.w	r2, r2, #2
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	9304      	str	r3, [sp, #16]
 8001e04:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e06:	4d43      	ldr	r5, [pc, #268]	; (8001f14 <main+0x178>)
 8001e08:	4622      	mov	r2, r4
 8001e0a:	f240 3102 	movw	r1, #770	; 0x302
 8001e0e:	4628      	mov	r0, r5
 8001e10:	f005 fa30 	bl	8007274 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e14:	2601      	movs	r6, #1
 8001e16:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e1c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	a907      	add	r1, sp, #28
 8001e22:	4628      	mov	r0, r5
 8001e24:	f005 f8aa 	bl	8006f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001e28:	f240 3302 	movw	r3, #770	; 0x302
 8001e2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	a907      	add	r1, sp, #28
 8001e36:	4628      	mov	r0, r5
 8001e38:	f005 f8a0 	bl	8006f7c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4621      	mov	r1, r4
 8001e40:	2006      	movs	r0, #6
 8001e42:	f005 f811 	bl	8006e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e46:	2006      	movs	r0, #6
 8001e48:	f005 f844 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	4621      	mov	r1, r4
 8001e50:	2028      	movs	r0, #40	; 0x28
 8001e52:	f005 f809 	bl	8006e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e56:	2028      	movs	r0, #40	; 0x28
 8001e58:	f005 f83c 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5c:	9407      	str	r4, [sp, #28]
 8001e5e:	9408      	str	r4, [sp, #32]
 8001e60:	9409      	str	r4, [sp, #36]	; 0x24
 8001e62:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	9405      	str	r4, [sp, #20]
 8001e66:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 8001e68:	482b      	ldr	r0, [pc, #172]	; (8001f18 <main+0x17c>)
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <main+0x180>)
 8001e6c:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 84-1;
 8001e6e:	2353      	movs	r3, #83	; 0x53
 8001e70:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 50-1;
 8001e74:	2331      	movs	r3, #49	; 0x31
 8001e76:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e78:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e7c:	f006 fe3e 	bl	8008afc <HAL_TIM_Base_Init>
 8001e80:	bb98      	cbnz	r0, 8001eea <main+0x14e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e86:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e88:	a907      	add	r1, sp, #28
 8001e8a:	4823      	ldr	r0, [pc, #140]	; (8001f18 <main+0x17c>)
 8001e8c:	f006 fe6f 	bl	8008b6e <HAL_TIM_ConfigClockSource>
 8001e90:	bb68      	cbnz	r0, 8001eee <main+0x152>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e98:	a905      	add	r1, sp, #20
 8001e9a:	481f      	ldr	r0, [pc, #124]	; (8001f18 <main+0x17c>)
 8001e9c:	f006 ff1c 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	bb38      	cbnz	r0, 8001ef2 <main+0x156>
  MX_BlueNRG_MS_Init();
 8001ea2:	f7ff f857 	bl	8000f54 <MX_BlueNRG_MS_Init>
	if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f004 fbf5 	bl	8006698 <IKS01A3_MOTION_SENSOR_Init>
 8001eae:	b310      	cbz	r0, 8001ef6 <main+0x15a>
	if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE)==HAL_OK){
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f004 f9bc 	bl	8006230 <IKS01A3_ENV_SENSOR_Init>
 8001eb8:	b308      	cbz	r0, 8001efe <main+0x162>
	if(IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY)==HAL_OK){
 8001eba:	2104      	movs	r1, #4
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f004 f9b7 	bl	8006230 <IKS01A3_ENV_SENSOR_Init>
 8001ec2:	b308      	cbz	r0, 8001f08 <main+0x16c>
	HAL_Delay(1500);
 8001ec4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ec8:	f004 ffa8 	bl	8006e1c <HAL_Delay>
	arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	4813      	ldr	r0, [pc, #76]	; (8001f20 <main+0x184>)
 8001ed2:	f007 ff85 	bl	8009de0 <arm_rfft_fast_init_f32>
	arm_cfft_radix4_init_f32(&fft_handler_cplx, FFT_SIZE, 0, 1);
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ede:	4811      	ldr	r0, [pc, #68]	; (8001f24 <main+0x188>)
 8001ee0:	f008 fb50 	bl	800a584 <arm_cfft_radix4_init_f32>
  MX_BlueNRG_MS_Process();
 8001ee4:	f7ff f920 	bl	8001128 <MX_BlueNRG_MS_Process>
	while (1)
 8001ee8:	e7fc      	b.n	8001ee4 <main+0x148>
 8001eea:	b672      	cpsid	i
	while (1)
 8001eec:	e7fe      	b.n	8001eec <main+0x150>
 8001eee:	b672      	cpsid	i
 8001ef0:	e7fe      	b.n	8001ef0 <main+0x154>
 8001ef2:	b672      	cpsid	i
 8001ef4:	e7fe      	b.n	8001ef4 <main+0x158>
		IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	f004 fda6 	bl	8006a48 <IKS01A3_MOTION_SENSOR_Enable>
 8001efc:	e7d8      	b.n	8001eb0 <main+0x114>
		IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f004 fb73 	bl	80065ec <IKS01A3_ENV_SENSOR_Enable>
 8001f06:	e7d8      	b.n	8001eba <main+0x11e>
		IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8001f08:	2104      	movs	r1, #4
 8001f0a:	f004 fb6f 	bl	80065ec <IKS01A3_ENV_SENSOR_Enable>
 8001f0e:	e7d9      	b.n	8001ec4 <main+0x128>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	20009514 	.word	0x20009514
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	200064a0 	.word	0x200064a0
 8001f24:	200064b8 	.word	0x200064b8

08001f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b500      	push	{lr}
 8001f2a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	9100      	str	r1, [sp, #0]
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x3c>)
 8001f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
 8001f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	9101      	str	r1, [sp, #4]
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f58:	2007      	movs	r0, #7
 8001f5a:	f004 ff73 	bl	8006e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	b003      	add	sp, #12
 8001f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b500      	push	{lr}
 8001f6a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0x68>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d005      	beq.n	8001f80 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d016      	beq.n	8001fa8 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f7a:	b003      	add	sp, #12
 8001f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f80:	2100      	movs	r1, #0
 8001f82:	9100      	str	r1, [sp, #0]
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_TIM_Base_MspInit+0x70>)
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	f042 0202 	orr.w	r2, r2, #2
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f98:	460a      	mov	r2, r1
 8001f9a:	201d      	movs	r0, #29
 8001f9c:	f004 ff64 	bl	8006e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f004 ff97 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
 8001fa6:	e7e8      	b.n	8001f7a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fa8:	2100      	movs	r1, #0
 8001faa:	9101      	str	r1, [sp, #4]
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_Base_MspInit+0x70>)
 8001fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	2019      	movs	r0, #25
 8001fc4:	f004 ff50 	bl	8006e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f004 ff83 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
}
 8001fce:	e7d4      	b.n	8001f7a <HAL_TIM_Base_MspInit+0x12>
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	00000000 	.word	0x00000000

08001fe0 <calcolaAngoloInclinazione>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calcolaAngoloInclinazione(int32_t accel_x, int32_t accel_y, int32_t accel_z) {
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	ed2d 8b02 	vpush	{d8}
 8001fe6:	460c      	mov	r4, r1
    // Conversione delle misure di accelerazione in unità standard (es. m/s^2)
	float A_x = accel_x * 9.8 / 1000.0;  // Conversione da mg a m/s^2
    float A_y = accel_y * 9.8 / 1000.0;  // Conversione da mg a m/s^2
    float A_z = accel_z * 9.8 / 1000.0;  // Conversione da mg a m/s^2
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7fe faa3 	bl	8000534 <__aeabi_i2d>
 8001fee:	a31e      	add	r3, pc, #120	; (adr r3, 8002068 <calcolaAngoloInclinazione+0x88>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb08 	bl	8000608 <__aeabi_dmul>
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <calcolaAngoloInclinazione+0x98>)
 8001ffc:	f7fe fc2e 	bl	800085c <__aeabi_ddiv>
 8002000:	f7fe fdda 	bl	8000bb8 <__aeabi_d2f>

    // Calcolo dell'angolo d'inclinazione in radianti
    float angolo_radiani = atan2(A_y, A_z);
 8002004:	f7fe faa8 	bl	8000558 <__aeabi_f2d>
 8002008:	ec41 0b18 	vmov	d8, r0, r1
    float A_y = accel_y * 9.8 / 1000.0;  // Conversione da mg a m/s^2
 800200c:	4620      	mov	r0, r4
 800200e:	f7fe fa91 	bl	8000534 <__aeabi_i2d>
 8002012:	a315      	add	r3, pc, #84	; (adr r3, 8002068 <calcolaAngoloInclinazione+0x88>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe faf6 	bl	8000608 <__aeabi_dmul>
 800201c:	2200      	movs	r2, #0
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <calcolaAngoloInclinazione+0x98>)
 8002020:	f7fe fc1c 	bl	800085c <__aeabi_ddiv>
 8002024:	f7fe fdc8 	bl	8000bb8 <__aeabi_d2f>
    float angolo_radiani = atan2(A_y, A_z);
 8002028:	f7fe fa96 	bl	8000558 <__aeabi_f2d>
 800202c:	eeb0 1a48 	vmov.f32	s2, s16
 8002030:	eef0 1a68 	vmov.f32	s3, s17
 8002034:	ec41 0b10 	vmov	d0, r0, r1
 8002038:	f00b fe4a 	bl	800dcd0 <atan2>
 800203c:	ec51 0b10 	vmov	r0, r1, d0
 8002040:	f7fe fdba 	bl	8000bb8 <__aeabi_d2f>
    // Conversione da radianti a gradi
    float angolo_gradi = angolo_radiani * 180.0 / M_PI;
 8002044:	f7fe fa88 	bl	8000558 <__aeabi_f2d>
 8002048:	2200      	movs	r2, #0
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <calcolaAngoloInclinazione+0x9c>)
 800204c:	f7fe fadc 	bl	8000608 <__aeabi_dmul>
 8002050:	a307      	add	r3, pc, #28	; (adr r3, 8002070 <calcolaAngoloInclinazione+0x90>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe fc01 	bl	800085c <__aeabi_ddiv>
 800205a:	f7fe fdad 	bl	8000bb8 <__aeabi_d2f>

    return angolo_gradi;
}
 800205e:	ee00 0a10 	vmov	s0, r0
 8002062:	ecbd 8b02 	vpop	{d8}
 8002066:	bd10      	pop	{r4, pc}
 8002068:	9999999a 	.word	0x9999999a
 800206c:	40239999 	.word	0x40239999
 8002070:	54442d18 	.word	0x54442d18
 8002074:	400921fb 	.word	0x400921fb
 8002078:	408f4000 	.word	0x408f4000
 800207c:	40668000 	.word	0x40668000

08002080 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler>

08002082 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler>

08002084 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler>

08002086 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler>

08002088 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <UsageFault_Handler>

0800208a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f004 feb1 	bl	8006df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bd08      	pop	{r3, pc}

08002098 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800209a:	4802      	ldr	r0, [pc, #8]	; (80020a4 <EXTI0_IRQHandler+0xc>)
 800209c:	f004 ff5c 	bl	8006f58 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020a0:	bd08      	pop	{r3, pc}
 80020a2:	bf00      	nop
 80020a4:	20006394 	.word	0x20006394

080020a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020aa:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80020ac:	f006 fc04 	bl	80088b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

//	acquisizione_da_inviare=1;
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020b0:	bd08      	pop	{r3, pc}
 80020b2:	bf00      	nop
 80020b4:	200094cc 	.word	0x200094cc

080020b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020ba:	4819      	ldr	r0, [pc, #100]	; (8002120 <TIM3_IRQHandler+0x68>)
 80020bc:	f006 fbfc 	bl	80088b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(fine==0)
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <TIM3_IRQHandler+0x6c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b12b      	cbz	r3, 80020d2 <TIM3_IRQHandler+0x1a>
  {
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[conteggio_campioni++]);
  }
  if(conteggio_campioni==2048){
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <TIM3_IRQHandler+0x70>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ce:	d00e      	beq.n	80020ee <TIM3_IRQHandler+0x36>
	  	  conteggio_campioni=0;
	  	  fine=1;
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80020d0:	bd08      	pop	{r3, pc}
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[conteggio_campioni++]);
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <TIM3_IRQHandler+0x70>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	1c51      	adds	r1, r2, #1
 80020d8:	6019      	str	r1, [r3, #0]
 80020da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <TIM3_IRQHandler+0x74>)
 80020e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80020e4:	2102      	movs	r1, #2
 80020e6:	2000      	movs	r0, #0
 80020e8:	f004 fcd8 	bl	8006a9c <IKS01A3_MOTION_SENSOR_GetAxes>
 80020ec:	e7eb      	b.n	80020c6 <TIM3_IRQHandler+0xe>
	  HAL_TIM_Base_Stop_IT(&htim3);
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <TIM3_IRQHandler+0x68>)
 80020f0:	f006 fbc4 	bl	800887c <HAL_TIM_Base_Stop_IT>
	  angolo=calcolaAngoloInclinazione(misure_accelerometro[2047].x, misure_accelerometro[2047].y, misure_accelerometro[2047].z);
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <TIM3_IRQHandler+0x78>)
 80020f6:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 80020fa:	f8d3 1ff8 	ldr.w	r1, [r3, #4088]	; 0xff8
 80020fe:	f8d3 0ff4 	ldr.w	r0, [r3, #4084]	; 0xff4
 8002102:	f7ff ff6d 	bl	8001fe0 <calcolaAngoloInclinazione>
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <TIM3_IRQHandler+0x7c>)
 8002108:	ed83 0a00 	vstr	s0, [r3]
	  acquisizione_da_inviare=1;
 800210c:	2301      	movs	r3, #1
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <TIM3_IRQHandler+0x80>)
 8002110:	7013      	strb	r3, [r2, #0]
	  	  conteggio_campioni=0;
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <TIM3_IRQHandler+0x70>)
 8002114:	2100      	movs	r1, #0
 8002116:	6011      	str	r1, [r2, #0]
	  	  fine=1;
 8002118:	4a02      	ldr	r2, [pc, #8]	; (8002124 <TIM3_IRQHandler+0x6c>)
 800211a:	7013      	strb	r3, [r2, #0]
}
 800211c:	e7d8      	b.n	80020d0 <TIM3_IRQHandler+0x18>
 800211e:	bf00      	nop
 8002120:	20009514 	.word	0x20009514
 8002124:	2000f56d 	.word	0x2000f56d
 8002128:	2000649c 	.word	0x2000649c
 800212c:	20009564 	.word	0x20009564
 8002130:	2000e564 	.word	0x2000e564
 8002134:	20000358 	.word	0x20000358
 8002138:	2000f56c 	.word	0x2000f56c

0800213c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800213c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800213e:	4802      	ldr	r0, [pc, #8]	; (8002148 <EXTI15_10_IRQHandler+0xc>)
 8002140:	f004 ff0a 	bl	8006f58 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002144:	bd08      	pop	{r3, pc}
 8002146:	bf00      	nop
 8002148:	20000160 	.word	0x20000160

0800214c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800214c:	b500      	push	{lr}
 800214e:	b083      	sub	sp, #12
 8002150:	4613      	mov	r3, r2
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	460a      	mov	r2, r1
 800215a:	4601      	mov	r1, r0
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <BSP_SPI1_SendRecv+0x28>)
 800215e:	f006 fa33 	bl	80085c8 <HAL_SPI_TransmitReceive>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002162:	2800      	cmp	r0, #0
  }
  return ret;
}
 8002164:	bf0c      	ite	eq
 8002166:	2000      	moveq	r0, #0
 8002168:	f06f 0005 	mvnne.w	r0, #5
 800216c:	b003      	add	sp, #12
 800216e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002172:	bf00      	nop
 8002174:	2000f5cc 	.word	0x2000f5cc

08002178 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret = BSP_ERROR_NONE;

  if (I2C1InitCounter > 0)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <BSP_I2C1_DeInit+0x4c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b1fb      	cbz	r3, 80021be <BSP_I2C1_DeInit+0x46>
  {
    if (--I2C1InitCounter == 0)
 800217e:	3b01      	subs	r3, #1
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <BSP_I2C1_DeInit+0x4c>)
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	b10b      	cbz	r3, 800218a <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8002186:	2000      	movs	r0, #0
        ret = BSP_ERROR_BUS_FAILURE;
      }
    }
  }
  return ret;
}
 8002188:	4770      	bx	lr
{
 800218a:	b510      	push	{r4, lr}
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <BSP_I2C1_DeInit+0x50>)
 800218e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002196:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <BSP_I2C1_DeInit+0x54>)
 8002198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219c:	4620      	mov	r0, r4
 800219e:	f004 ffd3 	bl	8007148 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	4620      	mov	r0, r4
 80021a8:	f004 ffce 	bl	8007148 <HAL_GPIO_DeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80021ac:	4808      	ldr	r0, [pc, #32]	; (80021d0 <BSP_I2C1_DeInit+0x58>)
 80021ae:	f005 fb80 	bl	80078b2 <HAL_I2C_DeInit>
        ret = BSP_ERROR_BUS_FAILURE;
 80021b2:	2800      	cmp	r0, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2000      	moveq	r0, #0
 80021b8:	f06f 0007 	mvnne.w	r0, #7
}
 80021bc:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 80021be:	2000      	movs	r0, #0
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000f570 	.word	0x2000f570
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020400 	.word	0x40020400
 80021d0:	2000f578 	.word	0x2000f578

080021d4 <BSP_I2C1_WriteReg>:
{
 80021d4:	b510      	push	{r4, lr}
 80021d6:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80021d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80021dc:	9402      	str	r4, [sp, #8]
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	460a      	mov	r2, r1
 80021e6:	4601      	mov	r1, r0
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <BSP_I2C1_WriteReg+0x38>)
 80021ea:	f005 fb7b 	bl	80078e4 <HAL_I2C_Mem_Write>
 80021ee:	b910      	cbnz	r0, 80021f6 <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80021f0:	2000      	movs	r0, #0
}
 80021f2:	b004      	add	sp, #16
 80021f4:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <BSP_I2C1_WriteReg+0x38>)
 80021f8:	f005 fda7 	bl	8007d4a <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80021fc:	2804      	cmp	r0, #4
 80021fe:	bf0c      	ite	eq
 8002200:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8002204:	f06f 0003 	mvnne.w	r0, #3
 8002208:	e7f3      	b.n	80021f2 <BSP_I2C1_WriteReg+0x1e>
 800220a:	bf00      	nop
 800220c:	2000f578 	.word	0x2000f578

08002210 <BSP_I2C1_ReadReg>:
{
 8002210:	b510      	push	{r4, lr}
 8002212:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002214:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002218:	9402      	str	r4, [sp, #8]
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	9200      	str	r2, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	460a      	mov	r2, r1
 8002222:	4601      	mov	r1, r0
 8002224:	4808      	ldr	r0, [pc, #32]	; (8002248 <BSP_I2C1_ReadReg+0x38>)
 8002226:	f005 fc13 	bl	8007a50 <HAL_I2C_Mem_Read>
 800222a:	b910      	cbnz	r0, 8002232 <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800222c:	2000      	movs	r0, #0
}
 800222e:	b004      	add	sp, #16
 8002230:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <BSP_I2C1_ReadReg+0x38>)
 8002234:	f005 fd89 	bl	8007d4a <HAL_I2C_GetError>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002238:	2804      	cmp	r0, #4
 800223a:	bf0c      	ite	eq
 800223c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8002240:	f06f 0003 	mvnne.w	r0, #3
 8002244:	e7f3      	b.n	800222e <BSP_I2C1_ReadReg+0x1e>
 8002246:	bf00      	nop
 8002248:	2000f578 	.word	0x2000f578

0800224c <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 800224c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800224e:	f004 fddf 	bl	8006e10 <HAL_GetTick>
}
 8002252:	bd08      	pop	{r3, pc}

08002254 <MX_SPI1_Init>:
{
 8002254:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8002256:	4a0d      	ldr	r2, [pc, #52]	; (800228c <MX_SPI1_Init+0x38>)
 8002258:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800225a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800225e:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002260:	2200      	movs	r2, #0
 8002262:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002266:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002268:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800226a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226e:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002270:	2118      	movs	r1, #24
 8002272:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002274:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002276:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002278:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800227a:	220a      	movs	r2, #10
 800227c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800227e:	f006 f944 	bl	800850a <HAL_SPI_Init>
}
 8002282:	3800      	subs	r0, #0
 8002284:	bf18      	it	ne
 8002286:	2001      	movne	r0, #1
 8002288:	bd08      	pop	{r3, pc}
 800228a:	bf00      	nop
 800228c:	40013000 	.word	0x40013000

08002290 <BSP_SPI1_Init>:
  hspi1.Instance  = SPI1;
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <BSP_SPI1_Init+0xc4>)
 8002292:	4a31      	ldr	r2, [pc, #196]	; (8002358 <BSP_SPI1_Init+0xc8>)
 8002294:	601a      	str	r2, [r3, #0]
  if(SPI1InitCounter++ == 0)
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <BSP_SPI1_Init+0xcc>)
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	6011      	str	r1, [r2, #0]
 800229e:	b10b      	cbz	r3, 80022a4 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80022a0:	2000      	movs	r0, #0
}
 80022a2:	4770      	bx	lr
{
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a8:	b088      	sub	sp, #32
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80022aa:	482a      	ldr	r0, [pc, #168]	; (8002354 <BSP_SPI1_Init+0xc4>)
 80022ac:	f006 faa6 	bl	80087fc <HAL_SPI_GetState>
 80022b0:	b118      	cbz	r0, 80022ba <BSP_SPI1_Init+0x2a>
  int32_t ret = BSP_ERROR_NONE;
 80022b2:	2000      	movs	r0, #0
}
 80022b4:	b008      	add	sp, #32
 80022b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ba:	2400      	movs	r4, #0
 80022bc:	9400      	str	r4, [sp, #0]
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <BSP_SPI1_Init+0xd0>)
 80022c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
 80022c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	9401      	str	r4, [sp, #4]
 80022d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	f002 0201 	and.w	r2, r2, #1
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	9402      	str	r4, [sp, #8]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	f042 0202 	orr.w	r2, r2, #2
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2702      	movs	r7, #2
 8002300:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2603      	movs	r6, #3
 8002306:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002308:	2505      	movs	r5, #5
 800230a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800230c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8002368 <BSP_SPI1_Init+0xd8>
 8002310:	a903      	add	r1, sp, #12
 8002312:	4640      	mov	r0, r8
 8002314:	f004 fe32 	bl	8006f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002322:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002324:	a903      	add	r1, sp, #12
 8002326:	4640      	mov	r0, r8
 8002328:	f004 fe28 	bl	8006f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800232c:	2308      	movs	r3, #8
 800232e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002336:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002338:	a903      	add	r1, sp, #12
 800233a:	480a      	ldr	r0, [pc, #40]	; (8002364 <BSP_SPI1_Init+0xd4>)
 800233c:	f004 fe1e 	bl	8006f7c <HAL_GPIO_Init>
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <BSP_SPI1_Init+0xc4>)
 8002342:	f7ff ff87 	bl	8002254 <MX_SPI1_Init>
                ret = BSP_ERROR_BUS_FAILURE;
 8002346:	42a0      	cmp	r0, r4
 8002348:	bf0c      	ite	eq
 800234a:	4620      	moveq	r0, r4
 800234c:	f06f 0007 	mvnne.w	r0, #7
 8002350:	e7b0      	b.n	80022b4 <BSP_SPI1_Init+0x24>
 8002352:	bf00      	nop
 8002354:	2000f5cc 	.word	0x2000f5cc
 8002358:	40013000 	.word	0x40013000
 800235c:	2000f574 	.word	0x2000f574
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400
 8002368:	40020000 	.word	0x40020000

0800236c <MX_I2C1_Init>:
{
 800236c:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <MX_I2C1_Init+0x2c>)
 8002370:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <MX_I2C1_Init+0x30>)
 8002374:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002376:	2200      	movs	r2, #0
 8002378:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 800237a:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800237c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002380:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002382:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002384:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002386:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002388:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800238a:	f005 f9cf 	bl	800772c <HAL_I2C_Init>
}
 800238e:	3800      	subs	r0, #0
 8002390:	bf18      	it	ne
 8002392:	2001      	movne	r0, #1
 8002394:	bd08      	pop	{r3, pc}
 8002396:	bf00      	nop
 8002398:	40005400 	.word	0x40005400
 800239c:	00061a80 	.word	0x00061a80

080023a0 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <BSP_I2C1_Init+0xa8>)
 80023a2:	4a2a      	ldr	r2, [pc, #168]	; (800244c <BSP_I2C1_Init+0xac>)
 80023a4:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <BSP_I2C1_Init+0xb0>)
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	b10b      	cbz	r3, 80023b4 <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80023b0:	2000      	movs	r0, #0
}
 80023b2:	4770      	bx	lr
{
 80023b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023b8:	b089      	sub	sp, #36	; 0x24
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <BSP_I2C1_Init+0xa8>)
 80023bc:	f005 fcc2 	bl	8007d44 <HAL_I2C_GetState>
 80023c0:	b118      	cbz	r0, 80023ca <BSP_I2C1_Init+0x2a>
  int32_t ret = BSP_ERROR_NONE;
 80023c2:	2000      	movs	r0, #0
}
 80023c4:	b009      	add	sp, #36	; 0x24
 80023c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2500      	movs	r5, #0
 80023cc:	9501      	str	r5, [sp, #4]
 80023ce:	4c21      	ldr	r4, [pc, #132]	; (8002454 <BSP_I2C1_Init+0xb4>)
 80023d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	6323      	str	r3, [r4, #48]	; 0x30
 80023d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80023e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e8:	f04f 0912 	mov.w	r9, #18
 80023ec:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	f04f 0803 	mov.w	r8, #3
 80023f6:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80023fa:	2704      	movs	r7, #4
 80023fc:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80023fe:	4e16      	ldr	r6, [pc, #88]	; (8002458 <BSP_I2C1_Init+0xb8>)
 8002400:	a903      	add	r1, sp, #12
 8002402:	4630      	mov	r0, r6
 8002404:	f004 fdba 	bl	8006f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240e:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002418:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800241a:	a903      	add	r1, sp, #12
 800241c:	4630      	mov	r0, r6
 800241e:	f004 fdad 	bl	8006f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002422:	9502      	str	r5, [sp, #8]
 8002424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800242a:	6423      	str	r3, [r4, #64]	; 0x40
 800242c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800242e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	9b02      	ldr	r3, [sp, #8]
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002436:	4804      	ldr	r0, [pc, #16]	; (8002448 <BSP_I2C1_Init+0xa8>)
 8002438:	f7ff ff98 	bl	800236c <MX_I2C1_Init>
          ret = BSP_ERROR_NONE;
 800243c:	42a8      	cmp	r0, r5
 800243e:	bf14      	ite	ne
 8002440:	f06f 0007 	mvnne.w	r0, #7
 8002444:	4628      	moveq	r0, r5
 8002446:	e7bd      	b.n	80023c4 <BSP_I2C1_Init+0x24>
 8002448:	2000f578 	.word	0x2000f578
 800244c:	40005400 	.word	0x40005400
 8002450:	2000f570 	.word	0x2000f570
 8002454:	40023800 	.word	0x40023800
 8002458:	40020400 	.word	0x40020400

0800245c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800245c:	2001      	movs	r0, #1
 800245e:	4770      	bx	lr

08002460 <_kill>:

int _kill(int pid, int sig)
{
 8002460:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002462:	f009 fc9b 	bl	800bd9c <__errno>
 8002466:	2316      	movs	r3, #22
 8002468:	6003      	str	r3, [r0, #0]
  return -1;
}
 800246a:	f04f 30ff 	mov.w	r0, #4294967295
 800246e:	bd08      	pop	{r3, pc}

08002470 <_exit>:

void _exit (int status)
{
 8002470:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002472:	f009 fc93 	bl	800bd9c <__errno>
 8002476:	2316      	movs	r3, #22
 8002478:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800247a:	e7fe      	b.n	800247a <_exit+0xa>

0800247c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	1e16      	subs	r6, r2, #0
 8002480:	dd07      	ble.n	8002492 <_read+0x16>
 8002482:	460c      	mov	r4, r1
 8002484:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248e:	42a5      	cmp	r5, r4
 8002490:	d1f9      	bne.n	8002486 <_read+0xa>
  }

  return len;
}
 8002492:	4630      	mov	r0, r6
 8002494:	bd70      	pop	{r4, r5, r6, pc}

08002496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002496:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	1e16      	subs	r6, r2, #0
 800249a:	dd07      	ble.n	80024ac <_write+0x16>
 800249c:	460c      	mov	r4, r1
 800249e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80024a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024a4:	f004 fc50 	bl	8006d48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d1f9      	bne.n	80024a0 <_write+0xa>
  }
  return len;
}
 80024ac:	4630      	mov	r0, r6
 80024ae:	bd70      	pop	{r4, r5, r6, pc}

080024b0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	4770      	bx	lr

080024b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80024b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ba:	604b      	str	r3, [r1, #4]
  return 0;
}
 80024bc:	2000      	movs	r0, #0
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80024c0:	2001      	movs	r0, #1
 80024c2:	4770      	bx	lr

080024c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80024c4:	2000      	movs	r0, #0
 80024c6:	4770      	bx	lr

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b508      	push	{r3, lr}
 80024ca:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <_sbrk+0x38>)
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	b152      	cbz	r2, 80024e8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <_sbrk+0x38>)
 80024d4:	6810      	ldr	r0, [r2, #0]
 80024d6:	4403      	add	r3, r0
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <_sbrk+0x3c>)
 80024da:	490b      	ldr	r1, [pc, #44]	; (8002508 <_sbrk+0x40>)
 80024dc:	1a52      	subs	r2, r2, r1
 80024de:	4293      	cmp	r3, r2
 80024e0:	d806      	bhi.n	80024f0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <_sbrk+0x38>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80024e6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <_sbrk+0x38>)
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <_sbrk+0x44>)
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	e7f0      	b.n	80024d2 <_sbrk+0xa>
    errno = ENOMEM;
 80024f0:	f009 fc54 	bl	800bd9c <__errno>
 80024f4:	230c      	movs	r3, #12
 80024f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	e7f3      	b.n	80024e6 <_sbrk+0x1e>
 80024fe:	bf00      	nop
 8002500:	2000f624 	.word	0x2000f624
 8002504:	20018000 	.word	0x20018000
 8002508:	00000400 	.word	0x00000400
 800250c:	2000fc88 	.word	0x2000fc88

08002510 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <SystemInit+0x10>)
 8002512:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002540:	4c0b      	ldr	r4, [pc, #44]	; (8002570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800254e:	f7ff ffdf 	bl	8002510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f009 fc29 	bl	800bda8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7ff fc21 	bl	8001d9c <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800255c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8002568:	0802a070 	.word	0x0802a070
  ldr r2, =_sbss
 800256c:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8002570:	2000fc84 	.word	0x2000fc84

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002578:	2301      	movs	r3, #1
 800257a:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 800257c:	2000      	movs	r0, #0
 800257e:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8002580:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8002582:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HTS221_GetCapabilities+0x18>)
 8002586:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002588:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800258a:	2300      	movs	r3, #0
 800258c:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 800258e:	4770      	bx	lr
 8002590:	41480000 	.word	0x41480000

08002594 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002594:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002596:	6884      	ldr	r4, [r0, #8]
 8002598:	b92c      	cbnz	r4, 80025a6 <ReadRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800259a:	6944      	ldr	r4, [r0, #20]
 800259c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80025a0:	7b00      	ldrb	r0, [r0, #12]
 80025a2:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 80025a4:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025a6:	6944      	ldr	r4, [r0, #20]
 80025a8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80025ac:	7b00      	ldrb	r0, [r0, #12]
 80025ae:	47a0      	blx	r4
 80025b0:	e7f8      	b.n	80025a4 <ReadRegWrap+0x10>

080025b2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025b2:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80025b4:	6884      	ldr	r4, [r0, #8]
 80025b6:	b92c      	cbnz	r4, 80025c4 <WriteRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80025b8:	6904      	ldr	r4, [r0, #16]
 80025ba:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80025be:	7b00      	ldrb	r0, [r0, #12]
 80025c0:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 80025c2:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025c4:	6904      	ldr	r4, [r0, #16]
 80025c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80025ca:	7b00      	ldrb	r0, [r0, #12]
 80025cc:	47a0      	blx	r4
 80025ce:	e7f8      	b.n	80025c2 <WriteRegWrap+0x10>

080025d0 <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 80025d0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d012      	beq.n	80025fe <HTS221_HUM_Enable+0x2e>
{
 80025d8:	b510      	push	{r4, lr}
 80025da:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80025dc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80025e0:	b123      	cbz	r3, 80025ec <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return HTS221_OK;
 80025e8:	2000      	movs	r0, #0
}
 80025ea:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80025ec:	2101      	movs	r1, #1
 80025ee:	3020      	adds	r0, #32
 80025f0:	f000 fa4f 	bl	8002a92 <hts221_power_on_set>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d0f4      	beq.n	80025e2 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	e7f5      	b.n	80025ea <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 80025fe:	2000      	movs	r0, #0
}
 8002600:	4770      	bx	lr

08002602 <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 8002602:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002606:	b18b      	cbz	r3, 800262c <HTS221_HUM_Disable+0x2a>
{
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800260c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002610:	b11b      	cbz	r3, 800261a <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8002612:	2000      	movs	r0, #0
 8002614:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8002618:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800261a:	2100      	movs	r1, #0
 800261c:	3020      	adds	r0, #32
 800261e:	f000 fa38 	bl	8002a92 <hts221_power_on_set>
 8002622:	2800      	cmp	r0, #0
 8002624:	d0f5      	beq.n	8002612 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8002626:	f04f 30ff 	mov.w	r0, #4294967295
 800262a:	e7f5      	b.n	8002618 <HTS221_HUM_Disable+0x16>
    return HTS221_OK;
 800262c:	2000      	movs	r0, #0
}
 800262e:	4770      	bx	lr

08002630 <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8002630:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002634:	2b01      	cmp	r3, #1
 8002636:	d012      	beq.n	800265e <HTS221_TEMP_Enable+0x2e>
{
 8002638:	b510      	push	{r4, lr}
 800263a:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800263c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002640:	b123      	cbz	r3, 800264c <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return HTS221_OK;
 8002648:	2000      	movs	r0, #0
}
 800264a:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800264c:	2101      	movs	r1, #1
 800264e:	3020      	adds	r0, #32
 8002650:	f000 fa1f 	bl	8002a92 <hts221_power_on_set>
 8002654:	2800      	cmp	r0, #0
 8002656:	d0f4      	beq.n	8002642 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	e7f5      	b.n	800264a <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 800265e:	2000      	movs	r0, #0
}
 8002660:	4770      	bx	lr

08002662 <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8002662:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002666:	b18b      	cbz	r3, 800268c <HTS221_TEMP_Disable+0x2a>
{
 8002668:	b510      	push	{r4, lr}
 800266a:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800266c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002670:	b11b      	cbz	r3, 800267a <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002672:	2000      	movs	r0, #0
 8002674:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 8002678:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800267a:	2100      	movs	r1, #0
 800267c:	3020      	adds	r0, #32
 800267e:	f000 fa08 	bl	8002a92 <hts221_power_on_set>
 8002682:	2800      	cmp	r0, #0
 8002684:	d0f5      	beq.n	8002672 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8002686:	f04f 30ff 	mov.w	r0, #4294967295
 800268a:	e7f5      	b.n	8002678 <HTS221_TEMP_Disable+0x16>
    return HTS221_OK;
 800268c:	2000      	movs	r0, #0
}
 800268e:	4770      	bx	lr

08002690 <HTS221_DeInit>:
{
 8002690:	b510      	push	{r4, lr}
 8002692:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8002694:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8002698:	2b01      	cmp	r3, #1
 800269a:	d003      	beq.n	80026a4 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 800269c:	2000      	movs	r0, #0
 800269e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 80026a2:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80026a4:	f7ff ffad 	bl	8002602 <HTS221_HUM_Disable>
 80026a8:	b938      	cbnz	r0, 80026ba <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7ff ffd9 	bl	8002662 <HTS221_TEMP_Disable>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d0f3      	beq.n	800269c <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	e7f3      	b.n	80026a2 <HTS221_DeInit+0x12>
      return HTS221_ERROR;
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	e7f0      	b.n	80026a2 <HTS221_DeInit+0x12>

080026c0 <HTS221_SetOutputDataRate>:
{
 80026c0:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80026c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	d910      	bls.n	80026f2 <HTS221_SetOutputDataRate+0x32>
 80026d0:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80026d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	bf94      	ite	ls
 80026de:	2102      	movls	r1, #2
 80026e0:	2103      	movhi	r1, #3
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80026e2:	3020      	adds	r0, #32
 80026e4:	f000 f95c 	bl	80029a0 <hts221_data_rate_set>
 80026e8:	3800      	subs	r0, #0
 80026ea:	bf18      	it	ne
 80026ec:	2001      	movne	r0, #1
}
 80026ee:	4240      	negs	r0, r0
 80026f0:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80026f2:	2101      	movs	r1, #1
 80026f4:	e7f5      	b.n	80026e2 <HTS221_SetOutputDataRate+0x22>

080026f6 <HTS221_Init>:
{
 80026f6:	b538      	push	{r3, r4, r5, lr}
 80026f8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80026fa:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80026fe:	b123      	cbz	r3, 800270a <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8002700:	2301      	movs	r3, #1
 8002702:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HTS221_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	bd38      	pop	{r3, r4, r5, pc}
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800270a:	f100 0520 	add.w	r5, r0, #32
 800270e:	2100      	movs	r1, #0
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f9be 	bl	8002a92 <hts221_power_on_set>
 8002716:	b970      	cbnz	r0, 8002736 <HTS221_Init+0x40>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002718:	2101      	movs	r1, #1
 800271a:	4628      	mov	r0, r5
 800271c:	f000 f977 	bl	8002a0e <hts221_block_data_update_set>
 8002720:	b948      	cbnz	r0, 8002736 <HTS221_Init+0x40>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002722:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff ffca 	bl	80026c0 <HTS221_SetOutputDataRate>
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800272c:	2800      	cmp	r0, #0
 800272e:	d0e7      	beq.n	8002700 <HTS221_Init+0xa>
      return HTS221_ERROR;
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	e7e8      	b.n	8002708 <HTS221_Init+0x12>
 8002736:	f04f 30ff 	mov.w	r0, #4294967295
 800273a:	e7e5      	b.n	8002708 <HTS221_Init+0x12>

0800273c <HTS221_HUM_SetOutputDataRate>:
{
 800273c:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 800273e:	f7ff ffbf 	bl	80026c0 <HTS221_SetOutputDataRate>
}
 8002742:	bd08      	pop	{r3, pc}

08002744 <HTS221_TEMP_SetOutputDataRate>:
{
 8002744:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002746:	f7ff ffbb 	bl	80026c0 <HTS221_SetOutputDataRate>
}
 800274a:	bd08      	pop	{r3, pc}

0800274c <HTS221_ReadID>:
{
 800274c:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800274e:	3020      	adds	r0, #32
 8002750:	f000 f998 	bl	8002a84 <hts221_device_id_get>
 8002754:	3800      	subs	r0, #0
 8002756:	bf18      	it	ne
 8002758:	2001      	movne	r0, #1
}
 800275a:	4240      	negs	r0, r0
 800275c:	bd08      	pop	{r3, pc}
	...

08002760 <HTS221_GetOutputDataRate>:
{
 8002760:	b510      	push	{r4, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002766:	f10d 0107 	add.w	r1, sp, #7
 800276a:	3020      	adds	r0, #32
 800276c:	f000 f931 	bl	80029d2 <hts221_data_rate_get>
 8002770:	b9a8      	cbnz	r0, 800279e <HTS221_GetOutputDataRate+0x3e>
  switch (odr_low_level)
 8002772:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d814      	bhi.n	80027a4 <HTS221_GetOutputDataRate+0x44>
 800277a:	e8df f003 	tbb	[pc, r3]
 800277e:	0602      	.short	0x0602
 8002780:	0d0a      	.short	0x0d0a
      *Odr = 0.0f;
 8002782:	2300      	movs	r3, #0
 8002784:	6023      	str	r3, [r4, #0]
}
 8002786:	b002      	add	sp, #8
 8002788:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 800278a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800278e:	6023      	str	r3, [r4, #0]
      break;
 8002790:	e7f9      	b.n	8002786 <HTS221_GetOutputDataRate+0x26>
      *Odr = 7.0f;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HTS221_GetOutputDataRate+0x4c>)
 8002794:	6023      	str	r3, [r4, #0]
      break;
 8002796:	e7f6      	b.n	8002786 <HTS221_GetOutputDataRate+0x26>
      *Odr = 12.5f;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HTS221_GetOutputDataRate+0x50>)
 800279a:	6023      	str	r3, [r4, #0]
      break;
 800279c:	e7f3      	b.n	8002786 <HTS221_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 800279e:	f04f 30ff 	mov.w	r0, #4294967295
 80027a2:	e7f0      	b.n	8002786 <HTS221_GetOutputDataRate+0x26>
  switch (odr_low_level)
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	e7ed      	b.n	8002786 <HTS221_GetOutputDataRate+0x26>
 80027aa:	bf00      	nop
 80027ac:	40e00000 	.word	0x40e00000
 80027b0:	41480000 	.word	0x41480000

080027b4 <HTS221_HUM_GetOutputDataRate>:
{
 80027b4:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80027b6:	f7ff ffd3 	bl	8002760 <HTS221_GetOutputDataRate>
}
 80027ba:	bd08      	pop	{r3, pc}

080027bc <HTS221_TEMP_GetOutputDataRate>:
{
 80027bc:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80027be:	f7ff ffcf 	bl	8002760 <HTS221_GetOutputDataRate>
}
 80027c2:	bd08      	pop	{r3, pc}

080027c4 <HTS221_HUM_GetHumidity>:
{
 80027c4:	b530      	push	{r4, r5, lr}
 80027c6:	b087      	sub	sp, #28
 80027c8:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80027ca:	f100 0420 	add.w	r4, r0, #32
 80027ce:	a901      	add	r1, sp, #4
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 f9e1 	bl	8002b98 <hts221_hum_adc_point_0_get>
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d14a      	bne.n	8002870 <HTS221_HUM_GetHumidity+0xac>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80027da:	a902      	add	r1, sp, #8
 80027dc:	4620      	mov	r0, r4
 80027de:	f000 f971 	bl	8002ac4 <hts221_hum_rh_point_0_get>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d147      	bne.n	8002876 <HTS221_HUM_GetHumidity+0xb2>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80027e6:	a903      	add	r1, sp, #12
 80027e8:	4620      	mov	r0, r4
 80027ea:	f000 f9ec 	bl	8002bc6 <hts221_hum_adc_point_1_get>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d144      	bne.n	800287c <HTS221_HUM_GetHumidity+0xb8>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80027f2:	a904      	add	r1, sp, #16
 80027f4:	4620      	mov	r0, r4
 80027f6:	f000 f978 	bl	8002aea <hts221_hum_rh_point_1_get>
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d141      	bne.n	8002882 <HTS221_HUM_GetHumidity+0xbe>
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 80027fe:	2300      	movs	r3, #0
 8002800:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002804:	a905      	add	r1, sp, #20
 8002806:	4620      	mov	r0, r4
 8002808:	f000 f91a 	bl	8002a40 <hts221_humidity_raw_get>
 800280c:	2800      	cmp	r0, #0
 800280e:	d13b      	bne.n	8002888 <HTS221_HUM_GetHumidity+0xc4>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002810:	ed9d 6a04 	vldr	s12, [sp, #16]
 8002814:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002818:	eddd 6a03 	vldr	s13, [sp, #12]
 800281c:	eddd 5a01 	vldr	s11, [sp, #4]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002820:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800282c:	ee36 5a47 	vsub.f32	s10, s12, s14
 8002830:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002834:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002838:	ee26 6a25 	vmul.f32	s12, s12, s11
 800283c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002844:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8002848:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  if (*Value < 0.0f)
 800284c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d41b      	bmi.n	800288e <HTS221_HUM_GetHumidity+0xca>
  if (*Value > 100.0f)
 8002856:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002894 <HTS221_HUM_GetHumidity+0xd0>
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	bfd2      	itee	le
 8002864:	ed85 7a00 	vstrle	s14, [r5]
    *Value = 100.0f;
 8002868:	4b0b      	ldrgt	r3, [pc, #44]	; (8002898 <HTS221_HUM_GetHumidity+0xd4>)
 800286a:	602b      	strgt	r3, [r5, #0]
}
 800286c:	b007      	add	sp, #28
 800286e:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	e7fa      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
    return HTS221_ERROR;
 8002876:	f04f 30ff 	mov.w	r0, #4294967295
 800287a:	e7f7      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
    return HTS221_ERROR;
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	e7f4      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
    return HTS221_ERROR;
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	e7f1      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
    return HTS221_ERROR;
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	e7ee      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
 800288e:	2300      	movs	r3, #0
 8002890:	602b      	str	r3, [r5, #0]
  if (*Value > 100.0f)
 8002892:	e7eb      	b.n	800286c <HTS221_HUM_GetHumidity+0xa8>
 8002894:	42c80000 	.word	0x42c80000
 8002898:	42c80000 	.word	0x42c80000

0800289c <HTS221_TEMP_GetTemperature>:
{
 800289c:	b530      	push	{r4, r5, lr}
 800289e:	b087      	sub	sp, #28
 80028a0:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80028a2:	f100 0420 	add.w	r4, r0, #32
 80028a6:	a901      	add	r1, sp, #4
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 f9a3 	bl	8002bf4 <hts221_temp_adc_point_0_get>
 80028ae:	bbc0      	cbnz	r0, 8002922 <HTS221_TEMP_GetTemperature+0x86>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80028b0:	a902      	add	r1, sp, #8
 80028b2:	4620      	mov	r0, r4
 80028b4:	f000 f92c 	bl	8002b10 <hts221_temp_deg_point_0_get>
 80028b8:	bbb0      	cbnz	r0, 8002928 <HTS221_TEMP_GetTemperature+0x8c>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80028ba:	a903      	add	r1, sp, #12
 80028bc:	4620      	mov	r0, r4
 80028be:	f000 f9b0 	bl	8002c22 <hts221_temp_adc_point_1_get>
 80028c2:	bba0      	cbnz	r0, 800292e <HTS221_TEMP_GetTemperature+0x92>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80028c4:	a904      	add	r1, sp, #16
 80028c6:	4620      	mov	r0, r4
 80028c8:	f000 f944 	bl	8002b54 <hts221_temp_deg_point_1_get>
 80028cc:	bb90      	cbnz	r0, 8002934 <HTS221_TEMP_GetTemperature+0x98>
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80028d4:	a905      	add	r1, sp, #20
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 f8c3 	bl	8002a62 <hts221_temperature_raw_get>
 80028dc:	bb68      	cbnz	r0, 800293a <HTS221_TEMP_GetTemperature+0x9e>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80028de:	ed9d 6a04 	vldr	s12, [sp, #16]
 80028e2:	ed9d 7a02 	vldr	s14, [sp, #8]
 80028e6:	eddd 6a03 	vldr	s13, [sp, #12]
 80028ea:	eddd 5a01 	vldr	s11, [sp, #4]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80028ee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80028fa:	ee36 5a47 	vsub.f32	s10, s12, s14
 80028fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002902:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002906:	ee26 6a25 	vmul.f32	s12, s12, s11
 800290a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800290e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002912:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8002916:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800291a:	ed85 7a00 	vstr	s14, [r5]
}
 800291e:	b007      	add	sp, #28
 8002920:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8002922:	f04f 30ff 	mov.w	r0, #4294967295
 8002926:	e7fa      	b.n	800291e <HTS221_TEMP_GetTemperature+0x82>
    return HTS221_ERROR;
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	e7f7      	b.n	800291e <HTS221_TEMP_GetTemperature+0x82>
    return HTS221_ERROR;
 800292e:	f04f 30ff 	mov.w	r0, #4294967295
 8002932:	e7f4      	b.n	800291e <HTS221_TEMP_GetTemperature+0x82>
    return HTS221_ERROR;
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	e7f1      	b.n	800291e <HTS221_TEMP_GetTemperature+0x82>
    return HTS221_ERROR;
 800293a:	f04f 30ff 	mov.w	r0, #4294967295
 800293e:	e7ee      	b.n	800291e <HTS221_TEMP_GetTemperature+0x82>

08002940 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8002940:	b1c8      	cbz	r0, 8002976 <HTS221_RegisterBusIO+0x36>
{
 8002942:	b508      	push	{r3, lr}
 8002944:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8002946:	680a      	ldr	r2, [r1, #0]
 8002948:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800294a:	6848      	ldr	r0, [r1, #4]
 800294c:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800294e:	6888      	ldr	r0, [r1, #8]
 8002950:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002952:	7b08      	ldrb	r0, [r1, #12]
 8002954:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002956:	6908      	ldr	r0, [r1, #16]
 8002958:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800295a:	6948      	ldr	r0, [r1, #20]
 800295c:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800295e:	6988      	ldr	r0, [r1, #24]
 8002960:	6198      	str	r0, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <HTS221_RegisterBusIO+0x44>)
 8002964:	6258      	str	r0, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002966:	4808      	ldr	r0, [pc, #32]	; (8002988 <HTS221_RegisterBusIO+0x48>)
 8002968:	6218      	str	r0, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800296a:	69c9      	ldr	r1, [r1, #28]
 800296c:	6299      	str	r1, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800296e:	62db      	str	r3, [r3, #44]	; 0x2c
    if (pObj->IO.Init != NULL)
 8002970:	b122      	cbz	r2, 800297c <HTS221_RegisterBusIO+0x3c>
      ret = pObj->IO.Init();
 8002972:	4790      	blx	r2
}
 8002974:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
}
 800297a:	4770      	bx	lr
      ret = HTS221_ERROR;
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002980:	e7f8      	b.n	8002974 <HTS221_RegisterBusIO+0x34>
 8002982:	bf00      	nop
 8002984:	08002595 	.word	0x08002595
 8002988:	080025b3 	.word	0x080025b3

0800298c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800298c:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800298e:	6844      	ldr	r4, [r0, #4]
 8002990:	68c0      	ldr	r0, [r0, #12]
 8002992:	47a0      	blx	r4

  return ret;
}
 8002994:	bd10      	pop	{r4, pc}

08002996 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002996:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002998:	6804      	ldr	r4, [r0, #0]
 800299a:	68c0      	ldr	r0, [r0, #12]
 800299c:	47a0      	blx	r4

  return ret;
}
 800299e:	bd10      	pop	{r4, pc}

080029a0 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80029a0:	b530      	push	{r4, r5, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	4604      	mov	r4, r0
 80029a6:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029a8:	2301      	movs	r3, #1
 80029aa:	aa01      	add	r2, sp, #4
 80029ac:	2120      	movs	r1, #32
 80029ae:	f7ff ffed 	bl	800298c <hts221_read_reg>

  if (ret == 0)
 80029b2:	b108      	cbz	r0, 80029b8 <hts221_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80029b4:	b003      	add	sp, #12
 80029b6:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 80029b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029bc:	f365 0301 	bfi	r3, r5, #0, #2
 80029c0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029c4:	2301      	movs	r3, #1
 80029c6:	aa01      	add	r2, sp, #4
 80029c8:	2120      	movs	r1, #32
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ffe3 	bl	8002996 <hts221_write_reg>
  return ret;
 80029d0:	e7f0      	b.n	80029b4 <hts221_data_rate_set+0x14>

080029d2 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80029d2:	b510      	push	{r4, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029d8:	2301      	movs	r3, #1
 80029da:	aa01      	add	r2, sp, #4
 80029dc:	2120      	movs	r1, #32
 80029de:	f7ff ffd5 	bl	800298c <hts221_read_reg>

  switch (reg.odr)
 80029e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d80b      	bhi.n	8002a06 <hts221_data_rate_get+0x34>
 80029ee:	e8df f003 	tbb	[pc, r3]
 80029f2:	0c02      	.short	0x0c02
 80029f4:	0806      	.short	0x0806
 80029f6:	2300      	movs	r3, #0
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80029f8:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 80029fa:	b002      	add	sp, #8
 80029fc:	bd10      	pop	{r4, pc}
      break;
 80029fe:	2302      	movs	r3, #2
 8002a00:	e7fa      	b.n	80029f8 <hts221_data_rate_get+0x26>
      break;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e7f8      	b.n	80029f8 <hts221_data_rate_get+0x26>
      break;
 8002a06:	2304      	movs	r3, #4
 8002a08:	e7f6      	b.n	80029f8 <hts221_data_rate_get+0x26>
  switch (reg.odr)
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e7f4      	b.n	80029f8 <hts221_data_rate_get+0x26>

08002a0e <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a0e:	b530      	push	{r4, r5, lr}
 8002a10:	b083      	sub	sp, #12
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a16:	2301      	movs	r3, #1
 8002a18:	aa01      	add	r2, sp, #4
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	f7ff ffb6 	bl	800298c <hts221_read_reg>

  if (ret == 0)
 8002a20:	b108      	cbz	r0, 8002a26 <hts221_block_data_update_set+0x18>
    reg.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002a22:	b003      	add	sp, #12
 8002a24:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8002a26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a2a:	f365 0382 	bfi	r3, r5, #2, #1
 8002a2e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a32:	2301      	movs	r3, #1
 8002a34:	aa01      	add	r2, sp, #4
 8002a36:	2120      	movs	r1, #32
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ffac 	bl	8002996 <hts221_write_reg>
  return ret;
 8002a3e:	e7f0      	b.n	8002a22 <hts221_block_data_update_set+0x14>

08002a40 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a40:	b510      	push	{r4, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002a46:	2302      	movs	r3, #2
 8002a48:	aa01      	add	r2, sp, #4
 8002a4a:	2128      	movs	r1, #40	; 0x28
 8002a4c:	f7ff ff9e 	bl	800298c <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
 8002a50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a5c:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd10      	pop	{r4, pc}

08002a62 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a62:	b510      	push	{r4, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002a68:	2302      	movs	r3, #2
 8002a6a:	aa01      	add	r2, sp, #4
 8002a6c:	212a      	movs	r1, #42	; 0x2a
 8002a6e:	f7ff ff8d 	bl	800298c <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
 8002a72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a7e:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002a80:	b002      	add	sp, #8
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002a84:	b508      	push	{r3, lr}
 8002a86:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002a88:	2301      	movs	r3, #1
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	f7ff ff7e 	bl	800298c <hts221_read_reg>

  return ret;
}
 8002a90:	bd08      	pop	{r3, pc}

08002a92 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a92:	b530      	push	{r4, r5, lr}
 8002a94:	b083      	sub	sp, #12
 8002a96:	4604      	mov	r4, r0
 8002a98:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	aa01      	add	r2, sp, #4
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	f7ff ff74 	bl	800298c <hts221_read_reg>

  if (ret == 0)
 8002aa4:	b108      	cbz	r0, 8002aaa <hts221_power_on_set+0x18>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002aa6:	b003      	add	sp, #12
 8002aa8:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 8002aaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002aae:	f365 13c7 	bfi	r3, r5, #7, #1
 8002ab2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	aa01      	add	r2, sp, #4
 8002aba:	2120      	movs	r1, #32
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7ff ff6a 	bl	8002996 <hts221_write_reg>
  return ret;
 8002ac2:	e7f0      	b.n	8002aa6 <hts221_power_on_set+0x14>

08002ac4 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	460c      	mov	r4, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002aca:	2301      	movs	r3, #1
 8002acc:	f10d 0207 	add.w	r2, sp, #7
 8002ad0:	2130      	movs	r1, #48	; 0x30
 8002ad2:	f7ff ff5b 	bl	800298c <hts221_read_reg>
  *val = coeff / 2.0f;
 8002ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8002ae2:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd10      	pop	{r4, pc}

08002aea <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002aea:	b510      	push	{r4, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	460c      	mov	r4, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002af0:	2301      	movs	r3, #1
 8002af2:	f10d 0207 	add.w	r2, sp, #7
 8002af6:	2131      	movs	r1, #49	; 0x31
 8002af8:	f7ff ff48 	bl	800298c <hts221_read_reg>
  *val = coeff / 2.0f;
 8002afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8002b08:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd10      	pop	{r4, pc}

08002b10 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b10:	b530      	push	{r4, r5, lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f10d 0203 	add.w	r2, sp, #3
 8002b1e:	2132      	movs	r1, #50	; 0x32
 8002b20:	f7ff ff34 	bl	800298c <hts221_read_reg>

  if (ret == 0)
 8002b24:	b108      	cbz	r0, 8002b2a <hts221_temp_deg_point_0_get+0x1a>
    coeff_h = reg.t0_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 8002b26:	b003      	add	sp, #12
 8002b28:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	aa01      	add	r2, sp, #4
 8002b2e:	2135      	movs	r1, #53	; 0x35
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7ff ff2b 	bl	800298c <hts221_read_reg>
    coeff_h = reg.t0_msb;
 8002b36:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8002b4e:	edc5 7a00 	vstr	s15, [r5]
  return ret;
 8002b52:	e7e8      	b.n	8002b26 <hts221_temp_deg_point_0_get+0x16>

08002b54 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b54:	b530      	push	{r4, r5, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f10d 0203 	add.w	r2, sp, #3
 8002b62:	2133      	movs	r1, #51	; 0x33
 8002b64:	f7ff ff12 	bl	800298c <hts221_read_reg>

  if (ret == 0)
 8002b68:	b108      	cbz	r0, 8002b6e <hts221_temp_deg_point_1_get+0x1a>
    coeff_h = reg.t1_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 8002b6a:	b003      	add	sp, #12
 8002b6c:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002b6e:	2301      	movs	r3, #1
 8002b70:	aa01      	add	r2, sp, #4
 8002b72:	2135      	movs	r1, #53	; 0x35
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff ff09 	bl	800298c <hts221_read_reg>
    coeff_h = reg.t1_msb;
 8002b7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002b7e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002b82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8002b92:	edc5 7a00 	vstr	s15, [r5]
  return ret;
 8002b96:	e7e8      	b.n	8002b6a <hts221_temp_deg_point_1_get+0x16>

08002b98 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	aa01      	add	r2, sp, #4
 8002ba2:	2136      	movs	r1, #54	; 0x36
 8002ba4:	f7ff fef2 	bl	800298c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002ba8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd10      	pop	{r4, pc}

08002bc6 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002bc6:	b510      	push	{r4, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002bcc:	2302      	movs	r3, #2
 8002bce:	aa01      	add	r2, sp, #4
 8002bd0:	213a      	movs	r1, #58	; 0x3a
 8002bd2:	f7ff fedb 	bl	800298c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002bd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	aa01      	add	r2, sp, #4
 8002bfe:	213c      	movs	r1, #60	; 0x3c
 8002c00:	f7ff fec4 	bl	800298c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c04:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002c08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1a:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002c22:	b510      	push	{r4, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002c28:	2302      	movs	r3, #2
 8002c2a:	aa01      	add	r2, sp, #4
 8002c2c:	213e      	movs	r1, #62	; 0x3e
 8002c2e:	f7ff fead 	bl	800298c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002c36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <LIS2DW12_GetCapabilities>:
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 8002c54:	2000      	movs	r0, #0
 8002c56:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8002c58:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002c5a:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c5c:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002c5e:	2310      	movs	r3, #16
 8002c60:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8002c62:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002c64:	2300      	movs	r3, #0
 8002c66:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002c68:	4a01      	ldr	r2, [pc, #4]	; (8002c70 <LIS2DW12_GetCapabilities+0x20>)
 8002c6a:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002c6c:	618b      	str	r3, [r1, #24]
  return LIS2DW12_OK;
}
 8002c6e:	4770      	bx	lr
 8002c70:	44c80000 	.word	0x44c80000

08002c74 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c74:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002c76:	6944      	ldr	r4, [r0, #20]
 8002c78:	7b00      	ldrb	r0, [r0, #12]
 8002c7a:	47a0      	blx	r4
}
 8002c7c:	bd10      	pop	{r4, pc}

08002c7e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c7e:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002c80:	6904      	ldr	r4, [r0, #16]
 8002c82:	7b00      	ldrb	r0, [r0, #12]
 8002c84:	47a0      	blx	r4
}
 8002c86:	bd10      	pop	{r4, pc}

08002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
{
 8002c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8c:	ed2d 8b02 	vpush	{d8}
 8002c90:	4604      	mov	r4, r0
 8002c92:	eeb0 8a40 	vmov.f32	s16, s0
 8002c96:	460d      	mov	r5, r1
 8002c98:	4616      	mov	r6, r2
  switch (Mode)
 8002c9a:	1e4b      	subs	r3, r1, #1
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d803      	bhi.n	8002ca8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 8002ca0:	e8df f003 	tbb	[pc, r3]
 8002ca4:	5d4f3f13 	.word	0x5d4f3f13
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002ca8:	2e01      	cmp	r6, #1
 8002caa:	bf14      	ite	ne
 8002cac:	f04f 0804 	movne.w	r8, #4
 8002cb0:	f04f 0814 	moveq.w	r8, #20
      if (Odr < 12.5f)
 8002cb4:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002cb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d510      	bpl.n	8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5c>
        Odr = 12.5f;
 8002cc2:	eeb2 8a09 	vmov.f32	s16, #41	; 0x41480000  12.5
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	e014      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002cca:	2e01      	cmp	r6, #1
 8002ccc:	bf14      	ite	ne
 8002cce:	f04f 0803 	movne.w	r8, #3
 8002cd2:	f04f 0813 	moveq.w	r8, #19
      if (Odr > 200.0f)
 8002cd6:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002cda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	dc2a      	bgt.n	8002d3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002ce4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8002e10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x188>
 8002ce8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d845      	bhi.n	8002d7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
 8002cf2:	2101      	movs	r1, #1
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002cf4:	f104 0720 	add.w	r7, r4, #32
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	f000 fc8b 	bl	8003614 <lis2dw12_data_rate_set>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d17d      	bne.n	8002dfe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x176>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002d02:	4641      	mov	r1, r8
 8002d04:	4638      	mov	r0, r7
 8002d06:	f000 fbe3 	bl	80034d0 <lis2dw12_power_mode_set>
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d17a      	bne.n	8002e04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17c>
  pObj->acc_odr = Odr;
 8002d0e:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002d12:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002d16:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8002d1a:	ecbd 8b02 	vpop	{d8}
 8002d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002d22:	2e01      	cmp	r6, #1
 8002d24:	bf14      	ite	ne
 8002d26:	4688      	movne	r8, r1
 8002d28:	f04f 0812 	moveq.w	r8, #18
      if (Odr > 200.0f)
 8002d2c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002d30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	ddd4      	ble.n	8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5c>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002d3a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002d3e:	2106      	movs	r1, #6
 8002d40:	e7d8      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002d42:	2e01      	cmp	r6, #1
 8002d44:	bf14      	ite	ne
 8002d46:	f04f 0801 	movne.w	r8, #1
 8002d4a:	f04f 0811 	moveq.w	r8, #17
      if (Odr > 200.0f)
 8002d4e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002d52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	dcee      	bgt.n	8002d3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
 8002d5c:	e7c2      	b.n	8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5c>
      switch (Noise)
 8002d5e:	2e01      	cmp	r6, #1
 8002d60:	bf14      	ite	ne
 8002d62:	f04f 0800 	movne.w	r8, #0
 8002d66:	f04f 0801 	moveq.w	r8, #1
 8002d6a:	ea4f 1808 	mov.w	r8, r8, lsl #4
      if (Odr > 200.0f)
 8002d6e:	eddf 7a27 	vldr	s15, [pc, #156]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002d72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	dcde      	bgt.n	8002d3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
 8002d7c:	e7b2      	b.n	8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5c>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002d7e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002d82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	d932      	bls.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x16a>
 8002d8c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002d90:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d801      	bhi.n	8002d9e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x116>
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	e7aa      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002d9e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002e14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 8002da2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d801      	bhi.n	8002db0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x128>
 8002dac:	2104      	movs	r1, #4
 8002dae:	e7a1      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002db0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002e18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002db4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbc:	d801      	bhi.n	8002dc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13a>
 8002dbe:	2105      	movs	r1, #5
 8002dc0:	e798      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002dc2:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002dc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	d912      	bls.n	8002df6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x16e>
 8002dd0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002dd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	d90d      	bls.n	8002dfa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x172>
 8002dde:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002e20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x198>
 8002de2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	bf94      	ite	ls
 8002dec:	2108      	movls	r1, #8
 8002dee:	2109      	movhi	r1, #9
 8002df0:	e780      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002df2:	2102      	movs	r1, #2
 8002df4:	e77e      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002df6:	2106      	movs	r1, #6
 8002df8:	e77c      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 8002dfa:	2107      	movs	r1, #7
 8002dfc:	e77a      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
    return LIS2DW12_ERROR;
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	e78a      	b.n	8002d1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x92>
    return LIS2DW12_ERROR;
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	e787      	b.n	8002d1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002e0a:	bf00      	nop
 8002e0c:	43480000 	.word	0x43480000
 8002e10:	3fcccccd 	.word	0x3fcccccd
 8002e14:	42480000 	.word	0x42480000
 8002e18:	42c80000 	.word	0x42c80000
 8002e1c:	43c80000 	.word	0x43c80000
 8002e20:	44480000 	.word	0x44480000

08002e24 <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002e24:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00e      	beq.n	8002e4a <LIS2DW12_ACC_Enable+0x26>
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002e30:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8002e34:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8002e38:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8002e3c:	f7ff ff24 	bl	8002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002e40:	b928      	cbnz	r0, 8002e4e <LIS2DW12_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8002e48:	bd10      	pop	{r4, pc}
    return LIS2DW12_OK;
 8002e4a:	2000      	movs	r0, #0
}
 8002e4c:	4770      	bx	lr
    return LIS2DW12_ERROR;
 8002e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e52:	e7f9      	b.n	8002e48 <LIS2DW12_ACC_Enable+0x24>

08002e54 <LIS2DW12_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8002e54:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002e58:	b90b      	cbnz	r3, 8002e5e <LIS2DW12_ACC_Disable+0xa>
    return LIS2DW12_OK;
 8002e5a:	2000      	movs	r0, #0
}
 8002e5c:	4770      	bx	lr
{
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	4604      	mov	r4, r0
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002e62:	2100      	movs	r1, #0
 8002e64:	3020      	adds	r0, #32
 8002e66:	f000 fbd5 	bl	8003614 <lis2dw12_data_rate_set>
 8002e6a:	b910      	cbnz	r0, 8002e72 <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 8002e6c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8002e70:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8002e72:	f04f 30ff 	mov.w	r0, #4294967295
 8002e76:	e7fb      	b.n	8002e70 <LIS2DW12_ACC_Disable+0x1c>

08002e78 <LIS2DW12_DeInit>:
{
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002e7c:	f7ff ffea 	bl	8002e54 <LIS2DW12_ACC_Disable>
 8002e80:	b948      	cbnz	r0, 8002e96 <LIS2DW12_DeInit+0x1e>
  pObj->acc_odr = 0.0f;
 8002e82:	2300      	movs	r3, #0
 8002e84:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002e8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  pObj->is_initialized = 0;
 8002e90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8002e94:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8002e96:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9a:	e7fb      	b.n	8002e94 <LIS2DW12_DeInit+0x1c>

08002e9c <LIS2DW12_Init>:
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4604      	mov	r4, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002ea0:	f100 0520 	add.w	r5, r0, #32
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 fcbc 	bl	8003824 <lis2dw12_auto_increment_set>
 8002eac:	bb10      	cbnz	r0, 8002ef4 <LIS2DW12_Init+0x58>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 fc44 	bl	800373e <lis2dw12_block_data_update_set>
 8002eb6:	bb00      	cbnz	r0, 8002efa <LIS2DW12_Init+0x5e>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 fccb 	bl	8003856 <lis2dw12_fifo_mode_set>
 8002ec0:	b9f0      	cbnz	r0, 8002f00 <LIS2DW12_Init+0x64>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 fb03 	bl	80034d0 <lis2dw12_power_mode_set>
 8002eca:	b9e0      	cbnz	r0, 8002f06 <LIS2DW12_Init+0x6a>
  pObj->acc_odr = 100.0f;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <LIS2DW12_Init+0x7c>)
 8002ece:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002ed6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 fb9a 	bl	8003614 <lis2dw12_data_rate_set>
 8002ee0:	b9a0      	cbnz	r0, 8002f0c <LIS2DW12_Init+0x70>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f000 fc43 	bl	8003770 <lis2dw12_full_scale_set>
 8002eea:	b990      	cbnz	r0, 8002f12 <LIS2DW12_Init+0x76>
  pObj->is_initialized = 1;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	e7fb      	b.n	8002ef2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	e7f8      	b.n	8002ef2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	e7f5      	b.n	8002ef2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002f06:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0a:	e7f2      	b.n	8002ef2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e7ef      	b.n	8002ef2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e7ec      	b.n	8002ef2 <LIS2DW12_Init+0x56>
 8002f18:	42c80000 	.word	0x42c80000

08002f1c <LIS2DW12_ACC_SetFullScale>:
{
 8002f1c:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LIS2DW12_4g
 8002f1e:	2902      	cmp	r1, #2
 8002f20:	dd06      	ble.n	8002f30 <LIS2DW12_ACC_SetFullScale+0x14>
 8002f22:	2904      	cmp	r1, #4
 8002f24:	dd0d      	ble.n	8002f42 <LIS2DW12_ACC_SetFullScale+0x26>
 8002f26:	2909      	cmp	r1, #9
 8002f28:	bfb4      	ite	lt
 8002f2a:	2102      	movlt	r1, #2
 8002f2c:	2103      	movge	r1, #3
 8002f2e:	e000      	b.n	8002f32 <LIS2DW12_ACC_SetFullScale+0x16>
 8002f30:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002f32:	3020      	adds	r0, #32
 8002f34:	f000 fc1c 	bl	8003770 <lis2dw12_full_scale_set>
 8002f38:	3800      	subs	r0, #0
 8002f3a:	bf18      	it	ne
 8002f3c:	2001      	movne	r0, #1
}
 8002f3e:	4240      	negs	r0, r0
 8002f40:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LIS2DW12_4g
 8002f42:	2101      	movs	r1, #1
 8002f44:	e7f5      	b.n	8002f32 <LIS2DW12_ACC_SetFullScale+0x16>

08002f46 <LIS2DW12_ReadID>:
{
 8002f46:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002f48:	3020      	adds	r0, #32
 8002f4a:	f000 fc64 	bl	8003816 <lis2dw12_device_id_get>
 8002f4e:	3800      	subs	r0, #0
 8002f50:	bf18      	it	ne
 8002f52:	2001      	movne	r0, #1
}
 8002f54:	4240      	negs	r0, r0
 8002f56:	bd08      	pop	{r3, pc}

08002f58 <LIS2DW12_ACC_GetFullScale>:
{
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002f5e:	f10d 0107 	add.w	r1, sp, #7
 8002f62:	3020      	adds	r0, #32
 8002f64:	f000 fc1d 	bl	80037a2 <lis2dw12_full_scale_get>
 8002f68:	b9c0      	cbnz	r0, 8002f9c <LIS2DW12_ACC_GetFullScale+0x44>
  switch (fs_low_level)
 8002f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d810      	bhi.n	8002f94 <LIS2DW12_ACC_GetFullScale+0x3c>
 8002f72:	e8df f003 	tbb	[pc, r3]
 8002f76:	0602      	.short	0x0602
 8002f78:	0c09      	.short	0x0c09
      *FullScale =  2;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	6023      	str	r3, [r4, #0]
}
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002f82:	2304      	movs	r3, #4
 8002f84:	6023      	str	r3, [r4, #0]
      break;
 8002f86:	e7fa      	b.n	8002f7e <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	6023      	str	r3, [r4, #0]
      break;
 8002f8c:	e7f7      	b.n	8002f7e <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	6023      	str	r3, [r4, #0]
      break;
 8002f92:	e7f4      	b.n	8002f7e <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = -1;
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	6020      	str	r0, [r4, #0]
      break;
 8002f9a:	e7f0      	b.n	8002f7e <LIS2DW12_ACC_GetFullScale+0x26>
    return LIS2DW12_ERROR;
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	e7ed      	b.n	8002f7e <LIS2DW12_ACC_GetFullScale+0x26>
	...

08002fa4 <LIS2DW12_ACC_GetSensitivity>:
{
 8002fa4:	b530      	push	{r4, r5, lr}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002faa:	f100 0420 	add.w	r4, r0, #32
 8002fae:	f10d 0107 	add.w	r1, sp, #7
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f000 fbf5 	bl	80037a2 <lis2dw12_full_scale_get>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d14c      	bne.n	8003056 <LIS2DW12_ACC_GetSensitivity+0xb2>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002fbc:	f10d 0106 	add.w	r1, sp, #6
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f000 fabd 	bl	8003540 <lis2dw12_power_mode_get>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d148      	bne.n	800305c <LIS2DW12_ACC_GetSensitivity+0xb8>
  switch (mode)
 8002fca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002fce:	2a1b      	cmp	r2, #27
 8002fd0:	d809      	bhi.n	8002fe6 <LIS2DW12_ACC_GetSensitivity+0x42>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 8002fda:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8002fde:	bb0a      	cbnz	r2, 8003024 <LIS2DW12_ACC_GetSensitivity+0x80>
 8002fe0:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8002fe4:	d105      	bne.n	8002ff2 <LIS2DW12_ACC_GetSensitivity+0x4e>
      *Sensitivity = -1.0f;
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <LIS2DW12_ACC_GetSensitivity+0xc0>)
 8002fe8:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002fee:	b003      	add	sp, #12
 8002ff0:	bd30      	pop	{r4, r5, pc}
      switch (full_scale)
 8002ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d80f      	bhi.n	800301a <LIS2DW12_ACC_GetSensitivity+0x76>
 8002ffa:	e8df f003 	tbb	[pc, r3]
 8002ffe:	0502      	.short	0x0502
 8003000:	0b08      	.short	0x0b08
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <LIS2DW12_ACC_GetSensitivity+0xc4>)
 8003004:	602b      	str	r3, [r5, #0]
          break;
 8003006:	e7f2      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <LIS2DW12_ACC_GetSensitivity+0xc8>)
 800300a:	602b      	str	r3, [r5, #0]
          break;
 800300c:	e7ef      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <LIS2DW12_ACC_GetSensitivity+0xcc>)
 8003010:	602b      	str	r3, [r5, #0]
          break;
 8003012:	e7ec      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8003016:	602b      	str	r3, [r5, #0]
          break;
 8003018:	e7e9      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <LIS2DW12_ACC_GetSensitivity+0xc0>)
 800301c:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003022:	e7e4      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
      switch (full_scale)
 8003024:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d80f      	bhi.n	800304c <LIS2DW12_ACC_GetSensitivity+0xa8>
 800302c:	e8df f003 	tbb	[pc, r3]
 8003030:	0b080502 	.word	0x0b080502
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <LIS2DW12_ACC_GetSensitivity+0xd4>)
 8003036:	602b      	str	r3, [r5, #0]
          break;
 8003038:	e7d9      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <LIS2DW12_ACC_GetSensitivity+0xd8>)
 800303c:	602b      	str	r3, [r5, #0]
          break;
 800303e:	e7d6      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <LIS2DW12_ACC_GetSensitivity+0xc4>)
 8003042:	602b      	str	r3, [r5, #0]
          break;
 8003044:	e7d3      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <LIS2DW12_ACC_GetSensitivity+0xc8>)
 8003048:	602b      	str	r3, [r5, #0]
          break;
 800304a:	e7d0      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
          *Sensitivity = -1.0f;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <LIS2DW12_ACC_GetSensitivity+0xc0>)
 800304e:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003054:	e7cb      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
    return LIS2DW12_ERROR;
 8003056:	f04f 30ff 	mov.w	r0, #4294967295
 800305a:	e7c8      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
    return LIS2DW12_ERROR;
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	e7c5      	b.n	8002fee <LIS2DW12_ACC_GetSensitivity+0x4a>
 8003062:	bf00      	nop
 8003064:	bf800000 	.word	0xbf800000
 8003068:	3f79db23 	.word	0x3f79db23
 800306c:	3ff9db23 	.word	0x3ff9db23
 8003070:	4079db23 	.word	0x4079db23
 8003074:	40f9db23 	.word	0x40f9db23
 8003078:	3e79db23 	.word	0x3e79db23
 800307c:	3ef9db23 	.word	0x3ef9db23

08003080 <LIS2DW12_ACC_GetOutputDataRate>:
{
 8003080:	b530      	push	{r4, r5, lr}
 8003082:	b083      	sub	sp, #12
 8003084:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003086:	f100 0420 	add.w	r4, r0, #32
 800308a:	f10d 0107 	add.w	r1, sp, #7
 800308e:	4620      	mov	r0, r4
 8003090:	f000 faf5 	bl	800367e <lis2dw12_data_rate_get>
 8003094:	2800      	cmp	r0, #0
 8003096:	f040 809d 	bne.w	80031d4 <LIS2DW12_ACC_GetOutputDataRate+0x154>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800309a:	f10d 0106 	add.w	r1, sp, #6
 800309e:	4620      	mov	r0, r4
 80030a0:	f000 fa4e 	bl	8003540 <lis2dw12_power_mode_get>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	f040 8098 	bne.w	80031da <LIS2DW12_ACC_GetOutputDataRate+0x15a>
  switch (odr_low_level)
 80030aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030ae:	2b32      	cmp	r3, #50	; 0x32
 80030b0:	f200 808b 	bhi.w	80031ca <LIS2DW12_ACC_GetOutputDataRate+0x14a>
 80030b4:	e8df f003 	tbb	[pc, r3]
 80030b8:	38351e1a 	.word	0x38351e1a
 80030bc:	44413e3b 	.word	0x44413e3b
 80030c0:	8989725b 	.word	0x8989725b
 80030c4:	89898989 	.word	0x89898989
 80030c8:	891a8989 	.word	0x891a8989
 80030cc:	89898989 	.word	0x89898989
 80030d0:	89898989 	.word	0x89898989
 80030d4:	89898989 	.word	0x89898989
 80030d8:	89898989 	.word	0x89898989
 80030dc:	89898989 	.word	0x89898989
 80030e0:	89898989 	.word	0x89898989
 80030e4:	89898989 	.word	0x89898989
 80030e8:	8989      	.short	0x8989
 80030ea:	1a          	.byte	0x1a
 80030eb:	00          	.byte	0x00
      *Odr = 0.0f;
 80030ec:	2300      	movs	r3, #0
 80030ee:	602b      	str	r3, [r5, #0]
}
 80030f0:	b003      	add	sp, #12
 80030f2:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 80030f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80030f8:	2a1b      	cmp	r2, #27
 80030fa:	d80a      	bhi.n	8003112 <LIS2DW12_ACC_GetOutputDataRate+0x92>
 80030fc:	2301      	movs	r3, #1
 80030fe:	4093      	lsls	r3, r2
 8003100:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 8003104:	d002      	beq.n	800310c <LIS2DW12_ACC_GetOutputDataRate+0x8c>
          *Odr = 1.6f;
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <LIS2DW12_ACC_GetOutputDataRate+0x160>)
 8003108:	602b      	str	r3, [r5, #0]
          break;
 800310a:	e7f1      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 800310c:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 8003110:	d104      	bne.n	800311c <LIS2DW12_ACC_GetOutputDataRate+0x9c>
          *Odr = -1.0f;
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <LIS2DW12_ACC_GetOutputDataRate+0x164>)
 8003114:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003116:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 800311a:	e7e9      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 12.5f;
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <LIS2DW12_ACC_GetOutputDataRate+0x168>)
 800311e:	602b      	str	r3, [r5, #0]
          break;
 8003120:	e7e6      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 12.5f;
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <LIS2DW12_ACC_GetOutputDataRate+0x168>)
 8003124:	602b      	str	r3, [r5, #0]
      break;
 8003126:	e7e3      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 25.0f;
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <LIS2DW12_ACC_GetOutputDataRate+0x16c>)
 800312a:	602b      	str	r3, [r5, #0]
      break;
 800312c:	e7e0      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 50.0f;
 800312e:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <LIS2DW12_ACC_GetOutputDataRate+0x170>)
 8003130:	602b      	str	r3, [r5, #0]
      break;
 8003132:	e7dd      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 100.0f;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <LIS2DW12_ACC_GetOutputDataRate+0x174>)
 8003136:	602b      	str	r3, [r5, #0]
      break;
 8003138:	e7da      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 200.0f;
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 800313c:	602b      	str	r3, [r5, #0]
      break;
 800313e:	e7d7      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 8003140:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003144:	2a1b      	cmp	r2, #27
 8003146:	d80a      	bhi.n	800315e <LIS2DW12_ACC_GetOutputDataRate+0xde>
 8003148:	2301      	movs	r3, #1
 800314a:	4093      	lsls	r3, r2
 800314c:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 8003150:	d002      	beq.n	8003158 <LIS2DW12_ACC_GetOutputDataRate+0xd8>
          *Odr = 200.0f;
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 8003154:	602b      	str	r3, [r5, #0]
          break;
 8003156:	e7cb      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 8003158:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 800315c:	d104      	bne.n	8003168 <LIS2DW12_ACC_GetOutputDataRate+0xe8>
          *Odr = -1.0f;
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <LIS2DW12_ACC_GetOutputDataRate+0x164>)
 8003160:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003162:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003166:	e7c3      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 400.0f;
 8003168:	4b24      	ldr	r3, [pc, #144]	; (80031fc <LIS2DW12_ACC_GetOutputDataRate+0x17c>)
 800316a:	602b      	str	r3, [r5, #0]
          break;
 800316c:	e7c0      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 800316e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003172:	2a1b      	cmp	r2, #27
 8003174:	d80a      	bhi.n	800318c <LIS2DW12_ACC_GetOutputDataRate+0x10c>
 8003176:	2301      	movs	r3, #1
 8003178:	4093      	lsls	r3, r2
 800317a:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 800317e:	d002      	beq.n	8003186 <LIS2DW12_ACC_GetOutputDataRate+0x106>
          *Odr = 200.0f;
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 8003182:	602b      	str	r3, [r5, #0]
          break;
 8003184:	e7b4      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 8003186:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 800318a:	d104      	bne.n	8003196 <LIS2DW12_ACC_GetOutputDataRate+0x116>
          *Odr = -1.0f;
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <LIS2DW12_ACC_GetOutputDataRate+0x164>)
 800318e:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003194:	e7ac      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 800.0f;
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8003198:	602b      	str	r3, [r5, #0]
          break;
 800319a:	e7a9      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 800319c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80031a0:	2a1b      	cmp	r2, #27
 80031a2:	d80a      	bhi.n	80031ba <LIS2DW12_ACC_GetOutputDataRate+0x13a>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4093      	lsls	r3, r2
 80031a8:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 80031ac:	d002      	beq.n	80031b4 <LIS2DW12_ACC_GetOutputDataRate+0x134>
          *Odr = 200.0f;
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 80031b0:	602b      	str	r3, [r5, #0]
          break;
 80031b2:	e79d      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 80031b4:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 80031b8:	d104      	bne.n	80031c4 <LIS2DW12_ACC_GetOutputDataRate+0x144>
          *Odr = -1.0f;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <LIS2DW12_ACC_GetOutputDataRate+0x164>)
 80031bc:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80031c2:	e795      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 1600.0f;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <LIS2DW12_ACC_GetOutputDataRate+0x184>)
 80031c6:	602b      	str	r3, [r5, #0]
          break;
 80031c8:	e792      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = -1.0f;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <LIS2DW12_ACC_GetOutputDataRate+0x164>)
 80031cc:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 80031d2:	e78d      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	e78a      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 80031da:	f04f 30ff 	mov.w	r0, #4294967295
 80031de:	e787      	b.n	80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x70>
 80031e0:	3fcccccd 	.word	0x3fcccccd
 80031e4:	bf800000 	.word	0xbf800000
 80031e8:	41480000 	.word	0x41480000
 80031ec:	41c80000 	.word	0x41c80000
 80031f0:	42480000 	.word	0x42480000
 80031f4:	42c80000 	.word	0x42c80000
 80031f8:	43480000 	.word	0x43480000
 80031fc:	43c80000 	.word	0x43c80000
 8003200:	44480000 	.word	0x44480000
 8003204:	44c80000 	.word	0x44c80000

08003208 <LIS2DW12_ACC_GetAxesRaw>:
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	460d      	mov	r5, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800320e:	f100 0420 	add.w	r4, r0, #32
 8003212:	f10d 0107 	add.w	r1, sp, #7
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f992 	bl	8003540 <lis2dw12_power_mode_get>
 800321c:	2800      	cmp	r0, #0
 800321e:	d143      	bne.n	80032a8 <LIS2DW12_ACC_GetAxesRaw+0xa0>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003220:	a902      	add	r1, sp, #8
 8003222:	4620      	mov	r0, r4
 8003224:	f000 fad8 	bl	80037d8 <lis2dw12_acceleration_raw_get>
 8003228:	2800      	cmp	r0, #0
 800322a:	d140      	bne.n	80032ae <LIS2DW12_ACC_GetAxesRaw+0xa6>
  switch (mode)
 800322c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003230:	2a1b      	cmp	r2, #27
 8003232:	d83f      	bhi.n	80032b4 <LIS2DW12_ACC_GetAxesRaw+0xac>
 8003234:	2301      	movs	r3, #1
 8003236:	4093      	lsls	r3, r2
 8003238:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 800323c:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8003240:	b9e2      	cbnz	r2, 800327c <LIS2DW12_ACC_GetAxesRaw+0x74>
 8003242:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8003246:	d102      	bne.n	800324e <LIS2DW12_ACC_GetAxesRaw+0x46>
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	e014      	b.n	8003278 <LIS2DW12_ACC_GetAxesRaw+0x70>
      Value->x = (data_raw.i16bit[0] / 16);
 800324e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	330f      	addlt	r3, #15
 8003258:	111b      	asrs	r3, r3, #4
 800325a:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800325c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003260:	2b00      	cmp	r3, #0
 8003262:	bfb8      	it	lt
 8003264:	330f      	addlt	r3, #15
 8003266:	111b      	asrs	r3, r3, #4
 8003268:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800326a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfb8      	it	lt
 8003272:	330f      	addlt	r3, #15
 8003274:	111b      	asrs	r3, r3, #4
 8003276:	80ab      	strh	r3, [r5, #4]
}
 8003278:	b005      	add	sp, #20
 800327a:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 4);
 800327c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	bfb8      	it	lt
 8003284:	3303      	addlt	r3, #3
 8003286:	109b      	asrs	r3, r3, #2
 8003288:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800328a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800328e:	2b00      	cmp	r3, #0
 8003290:	bfb8      	it	lt
 8003292:	3303      	addlt	r3, #3
 8003294:	109b      	asrs	r3, r3, #2
 8003296:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003298:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	bfb8      	it	lt
 80032a0:	3303      	addlt	r3, #3
 80032a2:	109b      	asrs	r3, r3, #2
 80032a4:	80ab      	strh	r3, [r5, #4]
      break;
 80032a6:	e7e7      	b.n	8003278 <LIS2DW12_ACC_GetAxesRaw+0x70>
    return LIS2DW12_ERROR;
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e7e4      	b.n	8003278 <LIS2DW12_ACC_GetAxesRaw+0x70>
    return LIS2DW12_ERROR;
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	e7e1      	b.n	8003278 <LIS2DW12_ACC_GetAxesRaw+0x70>
  switch (mode)
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	e7de      	b.n	8003278 <LIS2DW12_ACC_GetAxesRaw+0x70>

080032ba <LIS2DW12_ACC_GetAxes>:
{
 80032ba:	b530      	push	{r4, r5, lr}
 80032bc:	b085      	sub	sp, #20
 80032be:	4605      	mov	r5, r0
 80032c0:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80032c6:	a902      	add	r1, sp, #8
 80032c8:	f7ff ff9e 	bl	8003208 <LIS2DW12_ACC_GetAxesRaw>
 80032cc:	bb60      	cbnz	r0, 8003328 <LIS2DW12_ACC_GetAxes+0x6e>
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80032ce:	a901      	add	r1, sp, #4
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7ff fe67 	bl	8002fa4 <LIS2DW12_ACC_GetSensitivity>
 80032d6:	bb50      	cbnz	r0, 800332e <LIS2DW12_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80032d8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80032dc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f0:	edc4 7a00 	vstr	s15, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80032f4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003308:	edc4 7a01 	vstr	s15, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800330c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003320:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003324:	b005      	add	sp, #20
 8003326:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	e7fa      	b.n	8003324 <LIS2DW12_ACC_GetAxes+0x6a>
    return LIS2DW12_ERROR;
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	e7f7      	b.n	8003324 <LIS2DW12_ACC_GetAxes+0x6a>

08003334 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
{
 8003334:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8003336:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800333a:	2b01      	cmp	r3, #1
 800333c:	d040      	beq.n	80033c0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x8c>
  pObj->acc_operating_mode = Mode;
 800333e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8003342:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
                  : (Odr <=   12.5f) ?   12.5f
 8003346:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80033f8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xc4>
 800334a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	d938      	bls.n	80033c6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x92>
                  : (Odr <=   25.0f) ?   25.0f
 8003354:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003358:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	d937      	bls.n	80033d2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x9e>
                  : (Odr <=   50.0f) ?   50.0f
 8003362:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8003366:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d933      	bls.n	80033d8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xa4>
                  : (Odr <=  100.0f) ?  100.0f
 8003370:	eddf 7a22 	vldr	s15, [pc, #136]	; 80033fc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xc8>
 8003374:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d92f      	bls.n	80033de <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xaa>
                  : (Odr <=  200.0f) ?  200.0f
 800337e:	eddf 7a20 	vldr	s15, [pc, #128]	; 8003400 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xcc>
 8003382:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d92b      	bls.n	80033e4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xb0>
                  : (Odr <=  400.0f) ?  400.0f
 800338c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003404 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xd0>
 8003390:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d927      	bls.n	80033ea <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xb6>
                  : (Odr <=  800.0f) ?  800.0f
 800339a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003408 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xd4>
 800339e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d923      	bls.n	80033f0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xbc>
                  :                    1600.0f;
 80033a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800340c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xd8>
 80033ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003410 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xdc>
 80033b8:	bf88      	it	hi
 80033ba:	eef0 7a47 	vmovhi.f32	s15, s14
 80033be:	e004      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80033c0:	f7ff fc62 	bl	8002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80033c4:	e004      	b.n	80033d0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x9c>
                  : (Odr <=   12.5f) ?   12.5f
 80033c6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80033f8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xc4>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80033ca:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80033ce:	2000      	movs	r0, #0
}
 80033d0:	bd08      	pop	{r3, pc}
                  : (Odr <=   25.0f) ?   25.0f
 80033d2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80033d6:	e7f8      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
                  : (Odr <=   50.0f) ?   50.0f
 80033d8:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80033dc:	e7f5      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
                  : (Odr <=  100.0f) ?  100.0f
 80033de:	eddf 7a07 	vldr	s15, [pc, #28]	; 80033fc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xc8>
 80033e2:	e7f2      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
                  : (Odr <=  200.0f) ?  200.0f
 80033e4:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003400 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xcc>
 80033e8:	e7ef      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
                  : (Odr <=  400.0f) ?  400.0f
 80033ea:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003404 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xd0>
 80033ee:	e7ec      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
                  : (Odr <=  800.0f) ?  800.0f
 80033f0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003408 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xd4>
 80033f4:	e7e9      	b.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x96>
 80033f6:	bf00      	nop
 80033f8:	3fcccccd 	.word	0x3fcccccd
 80033fc:	42480000 	.word	0x42480000
 8003400:	42c80000 	.word	0x42c80000
 8003404:	43480000 	.word	0x43480000
 8003408:	43c80000 	.word	0x43c80000
 800340c:	44480000 	.word	0x44480000
 8003410:	44c80000 	.word	0x44c80000

08003414 <LIS2DW12_ACC_SetOutputDataRate>:
{
 8003414:	b508      	push	{r3, lr}
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003416:	2200      	movs	r2, #0
 8003418:	4611      	mov	r1, r2
 800341a:	f7ff ff8b 	bl	8003334 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
}
 800341e:	bd08      	pop	{r3, pc}

08003420 <LIS2DW12_Write_Reg>:
{
 8003420:	b500      	push	{lr}
 8003422:	b083      	sub	sp, #12
 8003424:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003428:	2301      	movs	r3, #1
 800342a:	f10d 0207 	add.w	r2, sp, #7
 800342e:	3020      	adds	r0, #32
 8003430:	f000 f849 	bl	80034c6 <lis2dw12_write_reg>
 8003434:	3800      	subs	r0, #0
 8003436:	bf18      	it	ne
 8003438:	2001      	movne	r0, #1
}
 800343a:	4240      	negs	r0, r0
 800343c:	b003      	add	sp, #12
 800343e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003444 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 8003444:	2800      	cmp	r0, #0
 8003446:	d02b      	beq.n	80034a0 <LIS2DW12_RegisterBusIO+0x5c>
{
 8003448:	b510      	push	{r4, lr}
 800344a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 800344c:	680b      	ldr	r3, [r1, #0]
 800344e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003450:	684a      	ldr	r2, [r1, #4]
 8003452:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003454:	688a      	ldr	r2, [r1, #8]
 8003456:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8003458:	7b0a      	ldrb	r2, [r1, #12]
 800345a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800345c:	690a      	ldr	r2, [r1, #16]
 800345e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003460:	694a      	ldr	r2, [r1, #20]
 8003462:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003464:	698a      	ldr	r2, [r1, #24]
 8003466:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <LIS2DW12_RegisterBusIO+0x70>)
 800346a:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800346c:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <LIS2DW12_RegisterBusIO+0x74>)
 800346e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003470:	69ca      	ldr	r2, [r1, #28]
 8003472:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003474:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8003476:	b1b3      	cbz	r3, 80034a6 <LIS2DW12_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003478:	4798      	blx	r3
 800347a:	b9b8      	cbnz	r0, 80034ac <LIS2DW12_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d000      	beq.n	8003484 <LIS2DW12_RegisterBusIO+0x40>
}
 8003482:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003484:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1fa      	bne.n	8003482 <LIS2DW12_RegisterBusIO+0x3e>
          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800348c:	2205      	movs	r2, #5
 800348e:	2121      	movs	r1, #33	; 0x21
 8003490:	4620      	mov	r0, r4
 8003492:	f7ff ffc5 	bl	8003420 <LIS2DW12_Write_Reg>
 8003496:	3800      	subs	r0, #0
 8003498:	bf18      	it	ne
 800349a:	2001      	movne	r0, #1
 800349c:	4240      	negs	r0, r0
 800349e:	e7f0      	b.n	8003482 <LIS2DW12_RegisterBusIO+0x3e>
    ret = LIS2DW12_ERROR;
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034a4:	4770      	bx	lr
      ret = LIS2DW12_ERROR;
 80034a6:	f04f 30ff 	mov.w	r0, #4294967295
 80034aa:	e7ea      	b.n	8003482 <LIS2DW12_RegisterBusIO+0x3e>
      ret = LIS2DW12_ERROR;
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80034b0:	e7e7      	b.n	8003482 <LIS2DW12_RegisterBusIO+0x3e>
 80034b2:	bf00      	nop
 80034b4:	08002c75 	.word	0x08002c75
 80034b8:	08002c7f 	.word	0x08002c7f

080034bc <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80034bc:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034be:	6844      	ldr	r4, [r0, #4]
 80034c0:	68c0      	ldr	r0, [r0, #12]
 80034c2:	47a0      	blx	r4

  return ret;
}
 80034c4:	bd10      	pop	{r4, pc}

080034c6 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80034c6:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034c8:	6804      	ldr	r4, [r0, #0]
 80034ca:	68c0      	ldr	r0, [r0, #12]
 80034cc:	47a0      	blx	r4

  return ret;
}
 80034ce:	bd10      	pop	{r4, pc}

080034d0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80034d0:	b530      	push	{r4, r5, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	4605      	mov	r5, r0
 80034d6:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80034d8:	2301      	movs	r3, #1
 80034da:	aa01      	add	r2, sp, #4
 80034dc:	2120      	movs	r1, #32
 80034de:	f7ff ffed 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 80034e2:	4603      	mov	r3, r0
 80034e4:	b110      	cbz	r0, 80034ec <lis2dw12_power_mode_set+0x1c>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  return ret;
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	b003      	add	sp, #12
 80034ea:	bd30      	pop	{r4, r5, pc}
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80034ec:	08a2      	lsrs	r2, r4, #2
 80034ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034f2:	f362 0383 	bfi	r3, r2, #2, #2
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80034f6:	f364 0301 	bfi	r3, r4, #0, #2
 80034fa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80034fe:	2301      	movs	r3, #1
 8003500:	aa01      	add	r2, sp, #4
 8003502:	2120      	movs	r1, #32
 8003504:	4628      	mov	r0, r5
 8003506:	f7ff ffde 	bl	80034c6 <lis2dw12_write_reg>
  if (ret == 0)
 800350a:	4603      	mov	r3, r0
 800350c:	2800      	cmp	r0, #0
 800350e:	d1ea      	bne.n	80034e6 <lis2dw12_power_mode_set+0x16>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003510:	2301      	movs	r3, #1
 8003512:	466a      	mov	r2, sp
 8003514:	2125      	movs	r1, #37	; 0x25
 8003516:	4628      	mov	r0, r5
 8003518:	f7ff ffd0 	bl	80034bc <lis2dw12_read_reg>
  if (ret == 0)
 800351c:	4603      	mov	r3, r0
 800351e:	2800      	cmp	r0, #0
 8003520:	d1e1      	bne.n	80034e6 <lis2dw12_power_mode_set+0x16>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003522:	0921      	lsrs	r1, r4, #4
 8003524:	f89d 3000 	ldrb.w	r3, [sp]
 8003528:	f361 0382 	bfi	r3, r1, #2, #1
 800352c:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003530:	2301      	movs	r3, #1
 8003532:	466a      	mov	r2, sp
 8003534:	2125      	movs	r1, #37	; 0x25
 8003536:	4628      	mov	r0, r5
 8003538:	f7ff ffc5 	bl	80034c6 <lis2dw12_write_reg>
 800353c:	4603      	mov	r3, r0
  return ret;
 800353e:	e7d2      	b.n	80034e6 <lis2dw12_power_mode_set+0x16>

08003540 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003540:	b530      	push	{r4, r5, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	4604      	mov	r4, r0
 8003546:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003548:	2301      	movs	r3, #1
 800354a:	aa01      	add	r2, sp, #4
 800354c:	2120      	movs	r1, #32
 800354e:	f7ff ffb5 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003552:	b108      	cbz	r0, 8003558 <lis2dw12_power_mode_get+0x18>
        break;
    }
  }

  return ret;
}
 8003554:	b003      	add	sp, #12
 8003556:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003558:	2301      	movs	r3, #1
 800355a:	466a      	mov	r2, sp
 800355c:	2125      	movs	r1, #37	; 0x25
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ffac 	bl	80034bc <lis2dw12_read_reg>
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003564:	f89d 1000 	ldrb.w	r1, [sp]
 8003568:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800356c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003570:	f002 030c 	and.w	r3, r2, #12
 8003574:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 8003578:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800357c:	4413      	add	r3, r2
 800357e:	2b1b      	cmp	r3, #27
 8003580:	d845      	bhi.n	800360e <lis2dw12_power_mode_get+0xce>
 8003582:	e8df f003 	tbb	[pc, r3]
 8003586:	171a      	.short	0x171a
 8003588:	440e1114 	.word	0x440e1114
 800358c:	23264444 	.word	0x23264444
 8003590:	44441d20 	.word	0x44441d20
 8003594:	32354444 	.word	0x32354444
 8003598:	44292c2f 	.word	0x44292c2f
 800359c:	3e414444 	.word	0x3e414444
 80035a0:	383b      	.short	0x383b
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80035a2:	2304      	movs	r3, #4
 80035a4:	702b      	strb	r3, [r5, #0]
        break;
 80035a6:	e7d5      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80035a8:	2303      	movs	r3, #3
 80035aa:	702b      	strb	r3, [r5, #0]
        break;
 80035ac:	e7d2      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80035ae:	2302      	movs	r3, #2
 80035b0:	702b      	strb	r3, [r5, #0]
        break;
 80035b2:	e7cf      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80035b4:	2301      	movs	r3, #1
 80035b6:	702b      	strb	r3, [r5, #0]
        break;
 80035b8:	e7cc      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80035ba:	2300      	movs	r3, #0
 80035bc:	702b      	strb	r3, [r5, #0]
        break;
 80035be:	e7c9      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80035c0:	230b      	movs	r3, #11
 80035c2:	702b      	strb	r3, [r5, #0]
        break;
 80035c4:	e7c6      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80035c6:	230a      	movs	r3, #10
 80035c8:	702b      	strb	r3, [r5, #0]
        break;
 80035ca:	e7c3      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80035cc:	2309      	movs	r3, #9
 80035ce:	702b      	strb	r3, [r5, #0]
        break;
 80035d0:	e7c0      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80035d2:	2308      	movs	r3, #8
 80035d4:	702b      	strb	r3, [r5, #0]
        break;
 80035d6:	e7bd      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80035d8:	2314      	movs	r3, #20
 80035da:	702b      	strb	r3, [r5, #0]
        break;
 80035dc:	e7ba      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80035de:	2313      	movs	r3, #19
 80035e0:	702b      	strb	r3, [r5, #0]
        break;
 80035e2:	e7b7      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80035e4:	2312      	movs	r3, #18
 80035e6:	702b      	strb	r3, [r5, #0]
        break;
 80035e8:	e7b4      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80035ea:	2311      	movs	r3, #17
 80035ec:	702b      	strb	r3, [r5, #0]
        break;
 80035ee:	e7b1      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80035f0:	2310      	movs	r3, #16
 80035f2:	702b      	strb	r3, [r5, #0]
        break;
 80035f4:	e7ae      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80035f6:	231b      	movs	r3, #27
 80035f8:	702b      	strb	r3, [r5, #0]
        break;
 80035fa:	e7ab      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80035fc:	231a      	movs	r3, #26
 80035fe:	702b      	strb	r3, [r5, #0]
        break;
 8003600:	e7a8      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003602:	2319      	movs	r3, #25
 8003604:	702b      	strb	r3, [r5, #0]
        break;
 8003606:	e7a5      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003608:	2318      	movs	r3, #24
 800360a:	702b      	strb	r3, [r5, #0]
        break;
 800360c:	e7a2      	b.n	8003554 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800360e:	2304      	movs	r3, #4
 8003610:	702b      	strb	r3, [r5, #0]
  return ret;
 8003612:	e79f      	b.n	8003554 <lis2dw12_power_mode_get+0x14>

08003614 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	b083      	sub	sp, #12
 8003618:	4605      	mov	r5, r0
 800361a:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800361c:	2301      	movs	r3, #1
 800361e:	aa01      	add	r2, sp, #4
 8003620:	2120      	movs	r1, #32
 8003622:	f7ff ff4b 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003626:	4603      	mov	r3, r0
 8003628:	b110      	cbz	r0, 8003630 <lis2dw12_data_rate_set+0x1c>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  return ret;
}
 800362a:	4618      	mov	r0, r3
 800362c:	b003      	add	sp, #12
 800362e:	bd30      	pop	{r4, r5, pc}
    ctrl1.odr = (uint8_t) val;
 8003630:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003634:	f364 1307 	bfi	r3, r4, #4, #4
 8003638:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800363c:	2301      	movs	r3, #1
 800363e:	aa01      	add	r2, sp, #4
 8003640:	2120      	movs	r1, #32
 8003642:	4628      	mov	r0, r5
 8003644:	f7ff ff3f 	bl	80034c6 <lis2dw12_write_reg>
  if (ret == 0)
 8003648:	4603      	mov	r3, r0
 800364a:	2800      	cmp	r0, #0
 800364c:	d1ed      	bne.n	800362a <lis2dw12_data_rate_set+0x16>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800364e:	2301      	movs	r3, #1
 8003650:	466a      	mov	r2, sp
 8003652:	2122      	movs	r1, #34	; 0x22
 8003654:	4628      	mov	r0, r5
 8003656:	f7ff ff31 	bl	80034bc <lis2dw12_read_reg>
  if (ret == 0)
 800365a:	4603      	mov	r3, r0
 800365c:	2800      	cmp	r0, #0
 800365e:	d1e4      	bne.n	800362a <lis2dw12_data_rate_set+0x16>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003660:	0921      	lsrs	r1, r4, #4
 8003662:	f89d 3000 	ldrb.w	r3, [sp]
 8003666:	f361 0301 	bfi	r3, r1, #0, #2
 800366a:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800366e:	2301      	movs	r3, #1
 8003670:	466a      	mov	r2, sp
 8003672:	2122      	movs	r1, #34	; 0x22
 8003674:	4628      	mov	r0, r5
 8003676:	f7ff ff26 	bl	80034c6 <lis2dw12_write_reg>
 800367a:	4603      	mov	r3, r0
  return ret;
 800367c:	e7d5      	b.n	800362a <lis2dw12_data_rate_set+0x16>

0800367e <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800367e:	b530      	push	{r4, r5, lr}
 8003680:	b083      	sub	sp, #12
 8003682:	4604      	mov	r4, r0
 8003684:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003686:	2301      	movs	r3, #1
 8003688:	aa01      	add	r2, sp, #4
 800368a:	2120      	movs	r1, #32
 800368c:	f7ff ff16 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003690:	b108      	cbz	r0, 8003696 <lis2dw12_data_rate_get+0x18>
        break;
    }
  }

  return ret;
}
 8003692:	b003      	add	sp, #12
 8003694:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003696:	2301      	movs	r3, #1
 8003698:	466a      	mov	r2, sp
 800369a:	2122      	movs	r1, #34	; 0x22
 800369c:	4620      	mov	r0, r4
 800369e:	f7ff ff0d 	bl	80034bc <lis2dw12_read_reg>
    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80036a2:	f89d 2000 	ldrb.w	r2, [sp]
 80036a6:	f002 0203 	and.w	r2, r2, #3
 80036aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80036b4:	2b32      	cmp	r3, #50	; 0x32
 80036b6:	d83f      	bhi.n	8003738 <lis2dw12_data_rate_get+0xba>
 80036b8:	e8df f003 	tbb	[pc, r3]
 80036bc:	23201d1a 	.word	0x23201d1a
 80036c0:	2f2c2926 	.word	0x2f2c2926
 80036c4:	3e3e3532 	.word	0x3e3e3532
 80036c8:	3e3e3e3e 	.word	0x3e3e3e3e
 80036cc:	3e3b3e3e 	.word	0x3e3b3e3e
 80036d0:	3e3e3e3e 	.word	0x3e3e3e3e
 80036d4:	3e3e3e3e 	.word	0x3e3e3e3e
 80036d8:	3e3e3e3e 	.word	0x3e3e3e3e
 80036dc:	3e3e3e3e 	.word	0x3e3e3e3e
 80036e0:	3e3e3e3e 	.word	0x3e3e3e3e
 80036e4:	3e3e3e3e 	.word	0x3e3e3e3e
 80036e8:	3e3e3e3e 	.word	0x3e3e3e3e
 80036ec:	3e3e      	.short	0x3e3e
 80036ee:	38          	.byte	0x38
 80036ef:	00          	.byte	0x00
        *val = LIS2DW12_XL_ODR_OFF;
 80036f0:	2300      	movs	r3, #0
 80036f2:	702b      	strb	r3, [r5, #0]
        break;
 80036f4:	e7cd      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	702b      	strb	r3, [r5, #0]
        break;
 80036fa:	e7ca      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_12Hz5;
 80036fc:	2302      	movs	r3, #2
 80036fe:	702b      	strb	r3, [r5, #0]
        break;
 8003700:	e7c7      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_25Hz;
 8003702:	2303      	movs	r3, #3
 8003704:	702b      	strb	r3, [r5, #0]
        break;
 8003706:	e7c4      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_50Hz;
 8003708:	2304      	movs	r3, #4
 800370a:	702b      	strb	r3, [r5, #0]
        break;
 800370c:	e7c1      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_100Hz;
 800370e:	2305      	movs	r3, #5
 8003710:	702b      	strb	r3, [r5, #0]
        break;
 8003712:	e7be      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_200Hz;
 8003714:	2306      	movs	r3, #6
 8003716:	702b      	strb	r3, [r5, #0]
        break;
 8003718:	e7bb      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_400Hz;
 800371a:	2307      	movs	r3, #7
 800371c:	702b      	strb	r3, [r5, #0]
        break;
 800371e:	e7b8      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_800Hz;
 8003720:	2308      	movs	r3, #8
 8003722:	702b      	strb	r3, [r5, #0]
        break;
 8003724:	e7b5      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003726:	2309      	movs	r3, #9
 8003728:	702b      	strb	r3, [r5, #0]
        break;
 800372a:	e7b2      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800372c:	2332      	movs	r3, #50	; 0x32
 800372e:	702b      	strb	r3, [r5, #0]
        break;
 8003730:	e7af      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003732:	2312      	movs	r3, #18
 8003734:	702b      	strb	r3, [r5, #0]
        break;
 8003736:	e7ac      	b.n	8003692 <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_OFF;
 8003738:	2300      	movs	r3, #0
 800373a:	702b      	strb	r3, [r5, #0]
  return ret;
 800373c:	e7a9      	b.n	8003692 <lis2dw12_data_rate_get+0x14>

0800373e <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800373e:	b530      	push	{r4, r5, lr}
 8003740:	b083      	sub	sp, #12
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003746:	2301      	movs	r3, #1
 8003748:	aa01      	add	r2, sp, #4
 800374a:	2121      	movs	r1, #33	; 0x21
 800374c:	f7ff feb6 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003750:	b108      	cbz	r0, 8003756 <lis2dw12_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003752:	b003      	add	sp, #12
 8003754:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8003756:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800375a:	f365 03c3 	bfi	r3, r5, #3, #1
 800375e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003762:	2301      	movs	r3, #1
 8003764:	aa01      	add	r2, sp, #4
 8003766:	2121      	movs	r1, #33	; 0x21
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff feac 	bl	80034c6 <lis2dw12_write_reg>
  return ret;
 800376e:	e7f0      	b.n	8003752 <lis2dw12_block_data_update_set+0x14>

08003770 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003770:	b530      	push	{r4, r5, lr}
 8003772:	b083      	sub	sp, #12
 8003774:	4604      	mov	r4, r0
 8003776:	460d      	mov	r5, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003778:	2301      	movs	r3, #1
 800377a:	aa01      	add	r2, sp, #4
 800377c:	2125      	movs	r1, #37	; 0x25
 800377e:	f7ff fe9d 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003782:	b108      	cbz	r0, 8003788 <lis2dw12_full_scale_set+0x18>
    reg.fs = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003784:	b003      	add	sp, #12
 8003786:	bd30      	pop	{r4, r5, pc}
    reg.fs = (uint8_t) val;
 8003788:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800378c:	f365 1305 	bfi	r3, r5, #4, #2
 8003790:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003794:	2301      	movs	r3, #1
 8003796:	aa01      	add	r2, sp, #4
 8003798:	2125      	movs	r1, #37	; 0x25
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fe93 	bl	80034c6 <lis2dw12_write_reg>
  return ret;
 80037a0:	e7f0      	b.n	8003784 <lis2dw12_full_scale_set+0x14>

080037a2 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80037a2:	b510      	push	{r4, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	460c      	mov	r4, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037a8:	2301      	movs	r3, #1
 80037aa:	aa01      	add	r2, sp, #4
 80037ac:	2125      	movs	r1, #37	; 0x25
 80037ae:	f7ff fe85 	bl	80034bc <lis2dw12_read_reg>

  switch (reg.fs)
 80037b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037b6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d008      	beq.n	80037d0 <lis2dw12_full_scale_get+0x2e>
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d008      	beq.n	80037d4 <lis2dw12_full_scale_get+0x32>
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	bf14      	ite	ne
 80037c6:	2300      	movne	r3, #0
 80037c8:	2301      	moveq	r3, #1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80037ca:	7023      	strb	r3, [r4, #0]
      *val = LIS2DW12_2g;
      break;
  }

  return ret;
}
 80037cc:	b002      	add	sp, #8
 80037ce:	bd10      	pop	{r4, pc}
  switch (reg.fs)
 80037d0:	2302      	movs	r3, #2
 80037d2:	e7fa      	b.n	80037ca <lis2dw12_full_scale_get+0x28>
 80037d4:	2303      	movs	r3, #3
 80037d6:	e7f8      	b.n	80037ca <lis2dw12_full_scale_get+0x28>

080037d8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80037d8:	b510      	push	{r4, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80037de:	2306      	movs	r3, #6
 80037e0:	466a      	mov	r2, sp
 80037e2:	2128      	movs	r1, #40	; 0x28
 80037e4:	f7ff fe6a 	bl	80034bc <lis2dw12_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80037e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80037ec:	f89d 3000 	ldrb.w	r3, [sp]
 80037f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037f4:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80037f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80037fa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80037fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003802:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003804:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003808:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800380c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003810:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003812:	b002      	add	sp, #8
 8003814:	bd10      	pop	{r4, pc}

08003816 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003816:	b508      	push	{r3, lr}
 8003818:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800381a:	2301      	movs	r3, #1
 800381c:	210f      	movs	r1, #15
 800381e:	f7ff fe4d 	bl	80034bc <lis2dw12_read_reg>

  return ret;
}
 8003822:	bd08      	pop	{r3, pc}

08003824 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003824:	b530      	push	{r4, r5, lr}
 8003826:	b083      	sub	sp, #12
 8003828:	4604      	mov	r4, r0
 800382a:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800382c:	2301      	movs	r3, #1
 800382e:	aa01      	add	r2, sp, #4
 8003830:	2121      	movs	r1, #33	; 0x21
 8003832:	f7ff fe43 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003836:	b108      	cbz	r0, 800383c <lis2dw12_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003838:	b003      	add	sp, #12
 800383a:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 800383c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003840:	f365 0382 	bfi	r3, r5, #2, #1
 8003844:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003848:	2301      	movs	r3, #1
 800384a:	aa01      	add	r2, sp, #4
 800384c:	2121      	movs	r1, #33	; 0x21
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fe39 	bl	80034c6 <lis2dw12_write_reg>
  return ret;
 8003854:	e7f0      	b.n	8003838 <lis2dw12_auto_increment_set+0x14>

08003856 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003856:	b530      	push	{r4, r5, lr}
 8003858:	b083      	sub	sp, #12
 800385a:	4604      	mov	r4, r0
 800385c:	460d      	mov	r5, r1
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800385e:	2301      	movs	r3, #1
 8003860:	aa01      	add	r2, sp, #4
 8003862:	212e      	movs	r1, #46	; 0x2e
 8003864:	f7ff fe2a 	bl	80034bc <lis2dw12_read_reg>

  if (ret == 0)
 8003868:	b108      	cbz	r0, 800386e <lis2dw12_fifo_mode_set+0x18>
    reg.fmode = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800386a:	b003      	add	sp, #12
 800386c:	bd30      	pop	{r4, r5, pc}
    reg.fmode = (uint8_t) val;
 800386e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003872:	f365 1347 	bfi	r3, r5, #5, #3
 8003876:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800387a:	2301      	movs	r3, #1
 800387c:	aa01      	add	r2, sp, #4
 800387e:	212e      	movs	r1, #46	; 0x2e
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff fe20 	bl	80034c6 <lis2dw12_write_reg>
  return ret;
 8003886:	e7f0      	b.n	800386a <lis2dw12_fifo_mode_set+0x14>

08003888 <LIS2MDL_GetCapabilities>:
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003888:	2000      	movs	r0, #0
 800388a:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 800388c:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 8003892:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8003894:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8003896:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 8003898:	2332      	movs	r3, #50	; 0x32
 800389a:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800389c:	2300      	movs	r3, #0
 800389e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80038a0:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80038a2:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <LIS2MDL_GetCapabilities+0x20>)
 80038a4:	618b      	str	r3, [r1, #24]
  return LIS2MDL_OK;
}
 80038a6:	4770      	bx	lr
 80038a8:	42c80000 	.word	0x42c80000

080038ac <LIS2MDL_MAG_GetSensitivity>:
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80038ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80038b0:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 80038b2:	2000      	movs	r0, #0
 80038b4:	4770      	bx	lr

080038b6 <LIS2MDL_MAG_GetFullScale>:
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 80038b6:	2332      	movs	r3, #50	; 0x32
 80038b8:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 80038ba:	2000      	movs	r0, #0
 80038bc:	4770      	bx	lr

080038be <LIS2MDL_MAG_SetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 80038be:	2000      	movs	r0, #0
 80038c0:	4770      	bx	lr

080038c2 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038c2:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80038c4:	6884      	ldr	r4, [r0, #8]
 80038c6:	b13c      	cbz	r4, 80038d8 <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038c8:	2c03      	cmp	r4, #3
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80038ca:	6944      	ldr	r4, [r0, #20]
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038cc:	bf18      	it	ne
 80038ce:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
 80038d2:	7b00      	ldrb	r0, [r0, #12]
 80038d4:	47a0      	blx	r4
  }
}
 80038d6:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038d8:	6944      	ldr	r4, [r0, #20]
 80038da:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80038de:	7b00      	ldrb	r0, [r0, #12]
 80038e0:	47a0      	blx	r4
 80038e2:	e7f8      	b.n	80038d6 <ReadMagRegWrap+0x14>

080038e4 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038e4:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80038e6:	6884      	ldr	r4, [r0, #8]
 80038e8:	b13c      	cbz	r4, 80038fa <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038ea:	2c03      	cmp	r4, #3
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80038ec:	6904      	ldr	r4, [r0, #16]
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038ee:	bf18      	it	ne
 80038f0:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
 80038f4:	7b00      	ldrb	r0, [r0, #12]
 80038f6:	47a0      	blx	r4
  }
}
 80038f8:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038fa:	6904      	ldr	r4, [r0, #16]
 80038fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003900:	7b00      	ldrb	r0, [r0, #12]
 8003902:	47a0      	blx	r4
 8003904:	e7f8      	b.n	80038f8 <WriteMagRegWrap+0x14>

08003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	4690      	mov	r8, r2
 800390e:	461f      	mov	r7, r3
 8003910:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 8003914:	2340      	movs	r3, #64	; 0x40
 8003916:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003920:	233d      	movs	r3, #61	; 0x3d
 8003922:	f88d 3015 	strb.w	r3, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 8003926:	2344      	movs	r3, #68	; 0x44
 8003928:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t status_master_mainpage = 0x39U;
  uint8_t sens_hub_endop = 0x01U;
  uint8_t lsm6dsox_outx_h_a = 0x29U;
  uint8_t lsm6dsox_status_reg = 0x1EU;
  uint8_t xlda = 0x01U;
  uint8_t len = (uint8_t)Length;
 800392c:	f88d 7013 	strb.w	r7, [sp, #19]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003930:	f100 0420 	add.w	r4, r0, #32
 8003934:	2301      	movs	r3, #1
 8003936:	f10d 0217 	add.w	r2, sp, #23
 800393a:	4619      	mov	r1, r3
 800393c:	4620      	mov	r0, r4
 800393e:	f000 fbac 	bl	800409a <lis2mdl_write_reg>
 8003942:	2800      	cmp	r0, #0
 8003944:	f040 8088 	bne.w	8003a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x152>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003948:	2301      	movs	r3, #1
 800394a:	f10d 0215 	add.w	r2, sp, #21
 800394e:	2115      	movs	r1, #21
 8003950:	4620      	mov	r0, r4
 8003952:	f000 fba2 	bl	800409a <lis2mdl_write_reg>
 8003956:	2800      	cmp	r0, #0
 8003958:	f040 8081 	bne.w	8003a5e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x158>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800395c:	2301      	movs	r3, #1
 800395e:	f10d 0207 	add.w	r2, sp, #7
 8003962:	2116      	movs	r1, #22
 8003964:	4620      	mov	r0, r4
 8003966:	f000 fb98 	bl	800409a <lis2mdl_write_reg>
 800396a:	2800      	cmp	r0, #0
 800396c:	d17a      	bne.n	8003a64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x15e>
  {
    return LIS2MDL_ERROR;
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800396e:	2301      	movs	r3, #1
 8003970:	f10d 0213 	add.w	r2, sp, #19
 8003974:	2117      	movs	r1, #23
 8003976:	4620      	mov	r0, r4
 8003978:	f000 fb8f 	bl	800409a <lis2mdl_write_reg>
 800397c:	2800      	cmp	r0, #0
 800397e:	d174      	bne.n	8003a6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x164>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003980:	2301      	movs	r3, #1
 8003982:	aa05      	add	r2, sp, #20
 8003984:	2114      	movs	r1, #20
 8003986:	4620      	mov	r0, r4
 8003988:	f000 fb87 	bl	800409a <lis2mdl_write_reg>
 800398c:	2800      	cmp	r0, #0
 800398e:	d16f      	bne.n	8003a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x16a>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003990:	2301      	movs	r3, #1
 8003992:	f10d 0216 	add.w	r2, sp, #22
 8003996:	4619      	mov	r1, r3
 8003998:	4620      	mov	r0, r4
 800399a:	f000 fb7e 	bl	800409a <lis2mdl_write_reg>
 800399e:	2800      	cmp	r0, #0
 80039a0:	d169      	bne.n	8003a76 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x170>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80039a2:	2301      	movs	r3, #1
 80039a4:	f10d 0212 	add.w	r2, sp, #18
 80039a8:	2110      	movs	r1, #16
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 fb70 	bl	8004090 <lis2mdl_read_reg>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d163      	bne.n	8003a7c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x176>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80039b4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80039b8:	b913      	cbnz	r3, 80039c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xba>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80039ba:	2340      	movs	r3, #64	; 0x40
 80039bc:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80039c0:	2301      	movs	r3, #1
 80039c2:	f10d 0212 	add.w	r2, sp, #18
 80039c6:	2110      	movs	r1, #16
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 fb66 	bl	800409a <lis2mdl_write_reg>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d157      	bne.n	8003a82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80039d2:	2306      	movs	r3, #6
 80039d4:	aa02      	add	r2, sp, #8
 80039d6:	2129      	movs	r1, #41	; 0x29
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 fb59 	bl	8004090 <lis2mdl_read_reg>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d152      	bne.n	8003a88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x182>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80039e2:	2601      	movs	r6, #1
 80039e4:	251e      	movs	r5, #30
 80039e6:	4633      	mov	r3, r6
 80039e8:	f10d 0211 	add.w	r2, sp, #17
 80039ec:	4629      	mov	r1, r5
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 fb4e 	bl	8004090 <lis2mdl_read_reg>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d14a      	bne.n	8003a8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x188>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 80039f8:	f89d 1011 	ldrb.w	r1, [sp, #17]
 80039fc:	f011 0f01 	tst.w	r1, #1
 8003a00:	d0f1      	beq.n	80039e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003a02:	2601      	movs	r6, #1
 8003a04:	2539      	movs	r5, #57	; 0x39
 8003a06:	4633      	mov	r3, r6
 8003a08:	f10d 0211 	add.w	r2, sp, #17
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 fb3e 	bl	8004090 <lis2mdl_read_reg>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d13f      	bne.n	8003a98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003a18:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003a1c:	f013 0f01 	tst.w	r3, #1
 8003a20:	d0f1      	beq.n	8003a06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x100>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003a22:	2301      	movs	r3, #1
 8003a24:	f10d 0217 	add.w	r2, sp, #23
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 fb35 	bl	800409a <lis2mdl_write_reg>
 8003a30:	bba8      	cbnz	r0, 8003a9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x198>
  {
    return LIS2MDL_ERROR;
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003a32:	463b      	mov	r3, r7
 8003a34:	4642      	mov	r2, r8
 8003a36:	2102      	movs	r1, #2
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 fb29 	bl	8004090 <lis2mdl_read_reg>
 8003a3e:	bb88      	cbnz	r0, 8003aa4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x19e>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003a40:	2301      	movs	r3, #1
 8003a42:	f10d 0216 	add.w	r2, sp, #22
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f000 fb26 	bl	800409a <lis2mdl_write_reg>
 8003a4e:	3800      	subs	r0, #0
 8003a50:	bf18      	it	ne
 8003a52:	2001      	movne	r0, #1
 8003a54:	4240      	negs	r0, r0
 8003a56:	e01c      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	e019      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	e016      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e013      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	e010      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e00d      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a76:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7a:	e00a      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e007      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295
 8003a86:	e004      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	e001      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
      return LIS2MDL_ERROR;
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return LIS2MDL_ERROR;
  }

  return LIS2MDL_OK;
}
 8003a92:	b006      	add	sp, #24
 8003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return LIS2MDL_ERROR;
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	e7f9      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa2:	e7f6      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
    return LIS2MDL_ERROR;
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e7f3      	b.n	8003a92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>

08003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	4615      	mov	r5, r2
 8003ab0:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 8003ab4:	2340      	movs	r3, #64	; 0x40
 8003ab6:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003ac0:	223c      	movs	r2, #60	; 0x3c
 8003ac2:	f88d 2015 	strb.w	r2, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t shub_odr_104 = 0x00U;
 8003ac6:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 8003aca:	2344      	movs	r3, #68	; 0x44
 8003acc:	f88d 3013 	strb.w	r3, [sp, #19]
  uint8_t datawrite_slv0 = 0x0EU;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003ad0:	f100 0420 	add.w	r4, r0, #32
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f10d 0217 	add.w	r2, sp, #23
 8003ada:	4619      	mov	r1, r3
 8003adc:	4620      	mov	r0, r4
 8003ade:	f000 fadc 	bl	800409a <lis2mdl_write_reg>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d170      	bne.n	8003bc8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f10d 0215 	add.w	r2, sp, #21
 8003aec:	2115      	movs	r1, #21
 8003aee:	4620      	mov	r0, r4
 8003af0:	f000 fad3 	bl	800409a <lis2mdl_write_reg>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d16a      	bne.n	8003bce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x124>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003af8:	2301      	movs	r3, #1
 8003afa:	f10d 0207 	add.w	r2, sp, #7
 8003afe:	2116      	movs	r1, #22
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 faca 	bl	800409a <lis2mdl_write_reg>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d164      	bne.n	8003bd4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x12a>
  {
    return LIS2MDL_ERROR;
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	aa05      	add	r2, sp, #20
 8003b0e:	2117      	movs	r1, #23
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 fac2 	bl	800409a <lis2mdl_write_reg>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d15f      	bne.n	8003bda <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x130>
  {
    return LIS2MDL_ERROR;
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	210e      	movs	r1, #14
 8003b20:	4620      	mov	r0, r4
 8003b22:	f000 faba 	bl	800409a <lis2mdl_write_reg>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d15a      	bne.n	8003be0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x136>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f10d 0213 	add.w	r2, sp, #19
 8003b30:	2114      	movs	r1, #20
 8003b32:	4620      	mov	r0, r4
 8003b34:	f000 fab1 	bl	800409a <lis2mdl_write_reg>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d154      	bne.n	8003be6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13c>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f10d 0216 	add.w	r2, sp, #22
 8003b42:	4619      	mov	r1, r3
 8003b44:	4620      	mov	r0, r4
 8003b46:	f000 faa8 	bl	800409a <lis2mdl_write_reg>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d14e      	bne.n	8003bec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x142>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f10d 0212 	add.w	r2, sp, #18
 8003b54:	2110      	movs	r1, #16
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 fa9a 	bl	8004090 <lis2mdl_read_reg>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d148      	bne.n	8003bf2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x148>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003b60:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003b64:	b913      	cbnz	r3, 8003b6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc2>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f10d 0212 	add.w	r2, sp, #18
 8003b72:	2110      	movs	r1, #16
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 fa90 	bl	800409a <lis2mdl_write_reg>
 8003b7a:	bbe8      	cbnz	r0, 8003bf8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x14e>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003b7c:	2306      	movs	r3, #6
 8003b7e:	aa02      	add	r2, sp, #8
 8003b80:	2129      	movs	r1, #41	; 0x29
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 fa84 	bl	8004090 <lis2mdl_read_reg>
 8003b88:	bbc8      	cbnz	r0, 8003bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x154>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003b8a:	2601      	movs	r6, #1
 8003b8c:	251e      	movs	r5, #30
 8003b8e:	4633      	mov	r3, r6
 8003b90:	f10d 0211 	add.w	r2, sp, #17
 8003b94:	4629      	mov	r1, r5
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 fa7a 	bl	8004090 <lis2mdl_read_reg>
 8003b9c:	bb90      	cbnz	r0, 8003c04 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15a>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8003b9e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003ba2:	f013 0f01 	tst.w	r3, #1
 8003ba6:	d0f2      	beq.n	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe4>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003ba8:	2601      	movs	r6, #1
 8003baa:	2539      	movs	r5, #57	; 0x39
 8003bac:	4633      	mov	r3, r6
 8003bae:	f10d 0211 	add.w	r2, sp, #17
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f000 fa6b 	bl	8004090 <lis2mdl_read_reg>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	bb38      	cbnz	r0, 8003c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x164>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003bbe:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	daf2      	bge.n	8003bac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x102>
 8003bc6:	e01f      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	e01c      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd2:	e019      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	e016      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295
 8003bde:	e013      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	e010      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003be6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bea:	e00d      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf0:	e00a      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	e007      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	e004      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
    return LIS2MDL_ERROR;
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003c02:	e001      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
      return LIS2MDL_ERROR;
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295

  return LIS2MDL_OK;
}
 8003c08:	4610      	mov	r0, r2
 8003c0a:	b006      	add	sp, #24
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
      return LIS2MDL_ERROR;
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	e7f9      	b.n	8003c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>

08003c14 <LIS2MDL_Init>:
{
 8003c14:	b530      	push	{r4, r5, lr}
 8003c16:	b083      	sub	sp, #12
 8003c18:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c1a:	6883      	ldr	r3, [r0, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d01f      	beq.n	8003c60 <LIS2MDL_Init+0x4c>
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003c20:	f100 0520 	add.w	r5, r0, #32
 8003c24:	2101      	movs	r1, #1
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 fa89 	bl	800413e <lis2mdl_block_data_update_set>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d150      	bne.n	8003cd2 <LIS2MDL_Init+0xbe>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003c30:	2102      	movs	r1, #2
 8003c32:	4628      	mov	r0, r5
 8003c34:	f000 fa36 	bl	80040a4 <lis2mdl_operating_mode_set>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d14d      	bne.n	8003cd8 <LIS2MDL_Init+0xc4>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 fa49 	bl	80040d6 <lis2mdl_data_rate_set>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d14a      	bne.n	8003cde <LIS2MDL_Init+0xca>
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f000 fab6 	bl	80041bc <lis2mdl_self_test_set>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d147      	bne.n	8003ce4 <LIS2MDL_Init+0xd0>
  pObj->is_initialized = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LIS2MDL_OK;
 8003c5a:	2000      	movs	r0, #0
}
 8003c5c:	b003      	add	sp, #12
 8003c5e:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003c60:	2301      	movs	r3, #1
 8003c62:	466a      	mov	r2, sp
 8003c64:	2162      	movs	r1, #98	; 0x62
 8003c66:	f7ff fe4e 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003c6a:	bb48      	cbnz	r0, 8003cc0 <LIS2MDL_Init+0xac>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	aa01      	add	r2, sp, #4
 8003c70:	2160      	movs	r1, #96	; 0x60
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff fe47 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003c78:	bb28      	cbnz	r0, 8003cc6 <LIS2MDL_Init+0xb2>
    reg_c.bdu = PROPERTY_ENABLE;
 8003c7a:	f89d 3000 	ldrb.w	r3, [sp]
    reg_c.self_test = PROPERTY_DISABLE;
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	f36f 0341 	bfc	r3, #1, #1
 8003c86:	f88d 3000 	strb.w	r3, [sp]
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003c8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f362 0301 	bfi	r3, r2, #0, #2
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003c94:	f043 030c 	orr.w	r3, r3, #12
 8003c98:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	466a      	mov	r2, sp
 8003ca0:	2162      	movs	r1, #98	; 0x62
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7ff ff01 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ca8:	b980      	cbnz	r0, 8003ccc <LIS2MDL_Init+0xb8>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003caa:	2301      	movs	r3, #1
 8003cac:	aa01      	add	r2, sp, #4
 8003cae:	2160      	movs	r1, #96	; 0x60
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7ff fefa 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d0cc      	beq.n	8003c54 <LIS2MDL_Init+0x40>
      return LIS2MDL_ERROR;
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbe:	e7cd      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	e7ca      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	e7c7      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	e7c4      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd6:	e7c1      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	e7be      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	e7bb      	b.n	8003c5c <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e7b8      	b.n	8003c5c <LIS2MDL_Init+0x48>

08003cea <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8003cea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d027      	beq.n	8003d42 <LIS2MDL_MAG_Enable+0x58>
{
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003cf8:	6883      	ldr	r3, [r0, #8]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d00a      	beq.n	8003d14 <LIS2MDL_MAG_Enable+0x2a>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003cfe:	2100      	movs	r1, #0
 8003d00:	3020      	adds	r0, #32
 8003d02:	f000 f9cf 	bl	80040a4 <lis2mdl_operating_mode_set>
 8003d06:	bb08      	cbnz	r0, 8003d4c <LIS2MDL_MAG_Enable+0x62>
  pObj->mag_is_enabled = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return LIS2MDL_OK;
 8003d0e:	2000      	movs	r0, #0
}
 8003d10:	b002      	add	sp, #8
 8003d12:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d14:	2301      	movs	r3, #1
 8003d16:	aa01      	add	r2, sp, #4
 8003d18:	2160      	movs	r1, #96	; 0x60
 8003d1a:	f7ff fdf4 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d1e:	b990      	cbnz	r0, 8003d46 <LIS2MDL_MAG_Enable+0x5c>
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003d20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d24:	f36f 0301 	bfc	r3, #0, #2
 8003d28:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	aa01      	add	r2, sp, #4
 8003d30:	2160      	movs	r1, #96	; 0x60
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff feb9 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d0e5      	beq.n	8003d08 <LIS2MDL_MAG_Enable+0x1e>
      return LIS2MDL_ERROR;
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	e7e6      	b.n	8003d10 <LIS2MDL_MAG_Enable+0x26>
    return LIS2MDL_OK;
 8003d42:	2000      	movs	r0, #0
}
 8003d44:	4770      	bx	lr
      return LIS2MDL_ERROR;
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4a:	e7e1      	b.n	8003d10 <LIS2MDL_MAG_Enable+0x26>
      return LIS2MDL_ERROR;
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	e7de      	b.n	8003d10 <LIS2MDL_MAG_Enable+0x26>

08003d52 <LIS2MDL_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8003d52:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003d56:	b33b      	cbz	r3, 8003da8 <LIS2MDL_MAG_Disable+0x56>
{
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d5e:	6883      	ldr	r3, [r0, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d009      	beq.n	8003d78 <LIS2MDL_MAG_Disable+0x26>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003d64:	2102      	movs	r1, #2
 8003d66:	3020      	adds	r0, #32
 8003d68:	f000 f99c 	bl	80040a4 <lis2mdl_operating_mode_set>
 8003d6c:	bb08      	cbnz	r0, 8003db2 <LIS2MDL_MAG_Disable+0x60>
  pObj->mag_is_enabled = 0;
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8003d74:	b002      	add	sp, #8
 8003d76:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d78:	2301      	movs	r3, #1
 8003d7a:	aa01      	add	r2, sp, #4
 8003d7c:	2160      	movs	r1, #96	; 0x60
 8003d7e:	f7ff fdc2 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d82:	b998      	cbnz	r0, 8003dac <LIS2MDL_MAG_Disable+0x5a>
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003d84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f362 0301 	bfi	r3, r2, #0, #2
 8003d8e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d92:	2301      	movs	r3, #1
 8003d94:	aa01      	add	r2, sp, #4
 8003d96:	2160      	movs	r1, #96	; 0x60
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7ff fe86 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d0e5      	beq.n	8003d6e <LIS2MDL_MAG_Disable+0x1c>
      return LIS2MDL_ERROR;
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	e7e5      	b.n	8003d74 <LIS2MDL_MAG_Disable+0x22>
    return LIS2MDL_OK;
 8003da8:	2000      	movs	r0, #0
}
 8003daa:	4770      	bx	lr
      return LIS2MDL_ERROR;
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	e7e0      	b.n	8003d74 <LIS2MDL_MAG_Disable+0x22>
      return LIS2MDL_ERROR;
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	e7dd      	b.n	8003d74 <LIS2MDL_MAG_Disable+0x22>

08003db8 <LIS2MDL_DeInit>:
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4604      	mov	r4, r0
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003dbc:	f7ff ffc9 	bl	8003d52 <LIS2MDL_MAG_Disable>
 8003dc0:	b910      	cbnz	r0, 8003dc8 <LIS2MDL_DeInit+0x10>
  pObj->is_initialized = 0;
 8003dc2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8003dc6:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e7fb      	b.n	8003dc6 <LIS2MDL_DeInit+0xe>
	...

08003dd0 <LIS2MDL_MAG_SetOutputDataRate>:
{
 8003dd0:	b530      	push	{r4, r5, lr}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	4604      	mov	r4, r0
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003dd6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003dda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	d910      	bls.n	8003e06 <LIS2MDL_MAG_SetOutputDataRate+0x36>
 8003de4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003de8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d918      	bls.n	8003e24 <LIS2MDL_MAG_SetOutputDataRate+0x54>
 8003df2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003e60 <LIS2MDL_MAG_SetOutputDataRate+0x90>
 8003df6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	bf94      	ite	ls
 8003e00:	2502      	movls	r5, #2
 8003e02:	2503      	movhi	r5, #3
 8003e04:	e000      	b.n	8003e08 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003e06:	2500      	movs	r5, #0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e08:	68a3      	ldr	r3, [r4, #8]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d00c      	beq.n	8003e28 <LIS2MDL_MAG_SetOutputDataRate+0x58>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003e0e:	4629      	mov	r1, r5
 8003e10:	f104 0020 	add.w	r0, r4, #32
 8003e14:	f000 f95f 	bl	80040d6 <lis2mdl_data_rate_set>
 8003e18:	3800      	subs	r0, #0
 8003e1a:	bf18      	it	ne
 8003e1c:	2001      	movne	r0, #1
 8003e1e:	4240      	negs	r0, r0
}
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003e24:	2501      	movs	r5, #1
 8003e26:	e7ef      	b.n	8003e08 <LIS2MDL_MAG_SetOutputDataRate+0x38>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003e28:	2301      	movs	r3, #1
 8003e2a:	aa01      	add	r2, sp, #4
 8003e2c:	2160      	movs	r1, #96	; 0x60
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f7ff fd69 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003e34:	b980      	cbnz	r0, 8003e58 <LIS2MDL_MAG_SetOutputDataRate+0x88>
    reg_a.odr = new_odr;
 8003e36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e3a:	f365 0383 	bfi	r3, r5, #2, #2
 8003e3e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003e42:	2301      	movs	r3, #1
 8003e44:	aa01      	add	r2, sp, #4
 8003e46:	2160      	movs	r1, #96	; 0x60
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f7ff fe2e 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003e4e:	3800      	subs	r0, #0
 8003e50:	bf18      	it	ne
 8003e52:	2001      	movne	r0, #1
 8003e54:	4240      	negs	r0, r0
 8003e56:	e7e3      	b.n	8003e20 <LIS2MDL_MAG_SetOutputDataRate+0x50>
      return LIS2MDL_ERROR;
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e7e0      	b.n	8003e20 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e5e:	bf00      	nop
 8003e60:	42480000 	.word	0x42480000

08003e64 <LIS2MDL_ReadID>:
{
 8003e64:	b508      	push	{r3, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e66:	6883      	ldr	r3, [r0, #8]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d007      	beq.n	8003e7c <LIS2MDL_ReadID+0x18>
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003e6c:	3020      	adds	r0, #32
 8003e6e:	f000 f99e 	bl	80041ae <lis2mdl_device_id_get>
 8003e72:	3800      	subs	r0, #0
 8003e74:	bf18      	it	ne
 8003e76:	2001      	movne	r0, #1
 8003e78:	4240      	negs	r0, r0
}
 8003e7a:	bd08      	pop	{r3, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	460a      	mov	r2, r1
 8003e80:	214f      	movs	r1, #79	; 0x4f
 8003e82:	f7ff fd40 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003e86:	3800      	subs	r0, #0
 8003e88:	bf18      	it	ne
 8003e8a:	2001      	movne	r0, #1
 8003e8c:	4240      	negs	r0, r0
 8003e8e:	e7f4      	b.n	8003e7a <LIS2MDL_ReadID+0x16>

08003e90 <LIS2MDL_MAG_GetOutputDataRate>:
{
 8003e90:	b510      	push	{r4, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003e96:	f10d 0107 	add.w	r1, sp, #7
 8003e9a:	3020      	adds	r0, #32
 8003e9c:	f000 f934 	bl	8004108 <lis2mdl_data_rate_get>
 8003ea0:	b9a0      	cbnz	r0, 8003ecc <LIS2MDL_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 8003ea2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d813      	bhi.n	8003ed2 <LIS2MDL_MAG_GetOutputDataRate+0x42>
 8003eaa:	e8df f003 	tbb	[pc, r3]
 8003eae:	0602      	.short	0x0602
 8003eb0:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 8003eb4:	6023      	str	r3, [r4, #0]
}
 8003eb6:	b002      	add	sp, #8
 8003eb8:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 8003ebc:	6023      	str	r3, [r4, #0]
      break;
 8003ebe:	e7fa      	b.n	8003eb6 <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 8003ec2:	6023      	str	r3, [r4, #0]
      break;
 8003ec4:	e7f7      	b.n	8003eb6 <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 8003ec8:	6023      	str	r3, [r4, #0]
      break;
 8003eca:	e7f4      	b.n	8003eb6 <LIS2MDL_MAG_GetOutputDataRate+0x26>
    return LIS2MDL_ERROR;
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e7f1      	b.n	8003eb6 <LIS2MDL_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	e7ee      	b.n	8003eb6 <LIS2MDL_MAG_GetOutputDataRate+0x26>
 8003ed8:	41200000 	.word	0x41200000
 8003edc:	41a00000 	.word	0x41a00000
 8003ee0:	42480000 	.word	0x42480000
 8003ee4:	42c80000 	.word	0x42c80000

08003ee8 <LIS2MDL_MAG_GetAxesRaw>:
{
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	460c      	mov	r4, r1
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003eee:	4669      	mov	r1, sp
 8003ef0:	3020      	adds	r0, #32
 8003ef2:	f000 f93d 	bl	8004170 <lis2mdl_magnetic_raw_get>
 8003ef6:	b950      	cbnz	r0, 8003f0e <LIS2MDL_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8003ef8:	f8bd 3000 	ldrh.w	r3, [sp]
 8003efc:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003efe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8003f02:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003f04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f08:	80a3      	strh	r3, [r4, #4]
}
 8003f0a:	b002      	add	sp, #8
 8003f0c:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	e7fa      	b.n	8003f0a <LIS2MDL_MAG_GetAxesRaw+0x22>

08003f14 <LIS2MDL_MAG_GetAxes>:
{
 8003f14:	b510      	push	{r4, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	460c      	mov	r4, r1
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f1a:	6883      	ldr	r3, [r0, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d02e      	beq.n	8003f7e <LIS2MDL_MAG_GetAxes+0x6a>
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003f20:	4669      	mov	r1, sp
 8003f22:	3020      	adds	r0, #32
 8003f24:	f000 f924 	bl	8004170 <lis2mdl_magnetic_raw_get>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d14a      	bne.n	8003fc2 <LIS2MDL_MAG_GetAxes+0xae>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f2c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f38:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f44:	edc4 7a00 	vstr	s15, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003f48:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f5c:	edc4 7a01 	vstr	s15, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f60:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f74:	edc4 7a02 	vstr	s15, [r4, #8]
  return LIS2MDL_OK;
 8003f78:	2000      	movs	r0, #0
}
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003f7e:	2306      	movs	r3, #6
 8003f80:	aa02      	add	r2, sp, #8
 8003f82:	2168      	movs	r1, #104	; 0x68
 8003f84:	f7ff fcbf 	bl	8003906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003f88:	b9c0      	cbnz	r0, 8003fbc <LIS2MDL_MAG_GetAxes+0xa8>
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003f8a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003f8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003f92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f96:	f8ad 3000 	strh.w	r3, [sp]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003f9a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003f9e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003fa2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fa6:	f8ad 3002 	strh.w	r3, [sp, #2]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003faa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003fae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003fb2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003fba:	e7b7      	b.n	8003f2c <LIS2MDL_MAG_GetAxes+0x18>
      return LIS2MDL_ERROR;
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	e7db      	b.n	8003f7a <LIS2MDL_MAG_GetAxes+0x66>
      return LIS2MDL_ERROR;
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	e7d8      	b.n	8003f7a <LIS2MDL_MAG_GetAxes+0x66>

08003fc8 <LIS2MDL_Write_Reg>:
{
 8003fc8:	b500      	push	{lr}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	f88d 2007 	strb.w	r2, [sp, #7]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fd0:	6883      	ldr	r3, [r0, #8]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d00c      	beq.n	8003ff0 <LIS2MDL_Write_Reg+0x28>
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f10d 0207 	add.w	r2, sp, #7
 8003fdc:	3020      	adds	r0, #32
 8003fde:	f000 f85c 	bl	800409a <lis2mdl_write_reg>
 8003fe2:	3800      	subs	r0, #0
 8003fe4:	bf18      	it	ne
 8003fe6:	2001      	movne	r0, #1
 8003fe8:	4240      	negs	r0, r0
}
 8003fea:	b003      	add	sp, #12
 8003fec:	f85d fb04 	ldr.w	pc, [sp], #4
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f10d 0207 	add.w	r2, sp, #7
 8003ff6:	f7ff fd58 	bl	8003aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ffa:	3800      	subs	r0, #0
 8003ffc:	bf18      	it	ne
 8003ffe:	2001      	movne	r0, #1
 8004000:	4240      	negs	r0, r0
 8004002:	e7f2      	b.n	8003fea <LIS2MDL_Write_Reg+0x22>

08004004 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 8004004:	2800      	cmp	r0, #0
 8004006:	d036      	beq.n	8004076 <LIS2MDL_RegisterBusIO+0x72>
{
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 800400c:	680b      	ldr	r3, [r1, #0]
 800400e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004010:	684a      	ldr	r2, [r1, #4]
 8004012:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8004018:	7b0a      	ldrb	r2, [r1, #12]
 800401a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800401c:	690a      	ldr	r2, [r1, #16]
 800401e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004020:	694a      	ldr	r2, [r1, #20]
 8004022:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004024:	698a      	ldr	r2, [r1, #24]
 8004026:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <LIS2MDL_RegisterBusIO+0x84>)
 800402a:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <LIS2MDL_RegisterBusIO+0x88>)
 800402e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004030:	69ca      	ldr	r2, [r1, #28]
 8004032:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8004034:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8004036:	b30b      	cbz	r3, 800407c <LIS2MDL_RegisterBusIO+0x78>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004038:	4798      	blx	r3
 800403a:	bb10      	cbnz	r0, 8004082 <LIS2MDL_RegisterBusIO+0x7e>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	b17b      	cbz	r3, 8004060 <LIS2MDL_RegisterBusIO+0x5c>
        if (pObj->is_initialized == 0U)
 8004040:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004044:	b962      	cbnz	r2, 8004060 <LIS2MDL_RegisterBusIO+0x5c>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004046:	2b01      	cmp	r3, #1
 8004048:	d00b      	beq.n	8004062 <LIS2MDL_RegisterBusIO+0x5e>
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800404a:	2b03      	cmp	r3, #3
 800404c:	d008      	beq.n	8004060 <LIS2MDL_RegisterBusIO+0x5c>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800404e:	2101      	movs	r1, #1
 8004050:	f104 0020 	add.w	r0, r4, #32
 8004054:	f000 f8cb 	bl	80041ee <lis2mdl_i2c_interface_set>
 8004058:	3800      	subs	r0, #0
 800405a:	bf18      	it	ne
 800405c:	2001      	movne	r0, #1
 800405e:	4240      	negs	r0, r0
}
 8004060:	bd10      	pop	{r4, pc}
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004062:	2234      	movs	r2, #52	; 0x34
 8004064:	2162      	movs	r1, #98	; 0x62
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff ffae 	bl	8003fc8 <LIS2MDL_Write_Reg>
 800406c:	3800      	subs	r0, #0
 800406e:	bf18      	it	ne
 8004070:	2001      	movne	r0, #1
 8004072:	4240      	negs	r0, r0
 8004074:	e7f4      	b.n	8004060 <LIS2MDL_RegisterBusIO+0x5c>
    ret = LIS2MDL_ERROR;
 8004076:	f04f 30ff 	mov.w	r0, #4294967295
}
 800407a:	4770      	bx	lr
      ret = LIS2MDL_ERROR;
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e7ee      	b.n	8004060 <LIS2MDL_RegisterBusIO+0x5c>
      ret = LIS2MDL_ERROR;
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	e7eb      	b.n	8004060 <LIS2MDL_RegisterBusIO+0x5c>
 8004088:	080038c3 	.word	0x080038c3
 800408c:	080038e5 	.word	0x080038e5

08004090 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004090:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004092:	6844      	ldr	r4, [r0, #4]
 8004094:	68c0      	ldr	r0, [r0, #12]
 8004096:	47a0      	blx	r4

  return ret;
}
 8004098:	bd10      	pop	{r4, pc}

0800409a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800409a:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800409c:	6804      	ldr	r4, [r0, #0]
 800409e:	68c0      	ldr	r0, [r0, #12]
 80040a0:	47a0      	blx	r4

  return ret;
}
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80040a4:	b530      	push	{r4, r5, lr}
 80040a6:	b083      	sub	sp, #12
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040ac:	2301      	movs	r3, #1
 80040ae:	aa01      	add	r2, sp, #4
 80040b0:	2160      	movs	r1, #96	; 0x60
 80040b2:	f7ff ffed 	bl	8004090 <lis2mdl_read_reg>

  if (ret == 0)
 80040b6:	b108      	cbz	r0, 80040bc <lis2mdl_operating_mode_set+0x18>
    reg.md = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80040b8:	b003      	add	sp, #12
 80040ba:	bd30      	pop	{r4, r5, pc}
    reg.md = (uint8_t)val;
 80040bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040c0:	f365 0301 	bfi	r3, r5, #0, #2
 80040c4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040c8:	2301      	movs	r3, #1
 80040ca:	aa01      	add	r2, sp, #4
 80040cc:	2160      	movs	r1, #96	; 0x60
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff ffe3 	bl	800409a <lis2mdl_write_reg>
  return ret;
 80040d4:	e7f0      	b.n	80040b8 <lis2mdl_operating_mode_set+0x14>

080040d6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80040d6:	b530      	push	{r4, r5, lr}
 80040d8:	b083      	sub	sp, #12
 80040da:	4604      	mov	r4, r0
 80040dc:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040de:	2301      	movs	r3, #1
 80040e0:	aa01      	add	r2, sp, #4
 80040e2:	2160      	movs	r1, #96	; 0x60
 80040e4:	f7ff ffd4 	bl	8004090 <lis2mdl_read_reg>

  if (ret == 0)
 80040e8:	b108      	cbz	r0, 80040ee <lis2mdl_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80040ea:	b003      	add	sp, #12
 80040ec:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 80040ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040f2:	f365 0383 	bfi	r3, r5, #2, #2
 80040f6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040fa:	2301      	movs	r3, #1
 80040fc:	aa01      	add	r2, sp, #4
 80040fe:	2160      	movs	r1, #96	; 0x60
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff ffca 	bl	800409a <lis2mdl_write_reg>
  return ret;
 8004106:	e7f0      	b.n	80040ea <lis2mdl_data_rate_set+0x14>

08004108 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004108:	b510      	push	{r4, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	460c      	mov	r4, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800410e:	2301      	movs	r3, #1
 8004110:	aa01      	add	r2, sp, #4
 8004112:	2160      	movs	r1, #96	; 0x60
 8004114:	f7ff ffbc 	bl	8004090 <lis2mdl_read_reg>

  switch (reg.odr)
 8004118:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800411c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d008      	beq.n	8004136 <lis2mdl_data_rate_get+0x2e>
 8004124:	2b03      	cmp	r3, #3
 8004126:	d008      	beq.n	800413a <lis2mdl_data_rate_get+0x32>
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2300      	movne	r3, #0
 800412e:	2301      	moveq	r3, #1
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004130:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 8004132:	b002      	add	sp, #8
 8004134:	bd10      	pop	{r4, pc}
  switch (reg.odr)
 8004136:	2302      	movs	r3, #2
 8004138:	e7fa      	b.n	8004130 <lis2mdl_data_rate_get+0x28>
 800413a:	2303      	movs	r3, #3
 800413c:	e7f8      	b.n	8004130 <lis2mdl_data_rate_get+0x28>

0800413e <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800413e:	b530      	push	{r4, r5, lr}
 8004140:	b083      	sub	sp, #12
 8004142:	4604      	mov	r4, r0
 8004144:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004146:	2301      	movs	r3, #1
 8004148:	aa01      	add	r2, sp, #4
 800414a:	2162      	movs	r1, #98	; 0x62
 800414c:	f7ff ffa0 	bl	8004090 <lis2mdl_read_reg>

  if (ret == 0)
 8004150:	b108      	cbz	r0, 8004156 <lis2mdl_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004152:	b003      	add	sp, #12
 8004154:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8004156:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800415a:	f365 1304 	bfi	r3, r5, #4, #1
 800415e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004162:	2301      	movs	r3, #1
 8004164:	aa01      	add	r2, sp, #4
 8004166:	2162      	movs	r1, #98	; 0x62
 8004168:	4620      	mov	r0, r4
 800416a:	f7ff ff96 	bl	800409a <lis2mdl_write_reg>
  return ret;
 800416e:	e7f0      	b.n	8004152 <lis2mdl_block_data_update_set+0x14>

08004170 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004170:	b510      	push	{r4, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004176:	2306      	movs	r3, #6
 8004178:	466a      	mov	r2, sp
 800417a:	2168      	movs	r1, #104	; 0x68
 800417c:	f7ff ff88 	bl	8004090 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004180:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004184:	f89d 3000 	ldrb.w	r3, [sp]
 8004188:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800418c:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800418e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004192:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004196:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800419a:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800419c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80041a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041a8:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80041aa:	b002      	add	sp, #8
 80041ac:	bd10      	pop	{r4, pc}

080041ae <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041ae:	b508      	push	{r3, lr}
 80041b0:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80041b2:	2301      	movs	r3, #1
 80041b4:	214f      	movs	r1, #79	; 0x4f
 80041b6:	f7ff ff6b 	bl	8004090 <lis2mdl_read_reg>

  return ret;
}
 80041ba:	bd08      	pop	{r3, pc}

080041bc <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041bc:	b530      	push	{r4, r5, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	4604      	mov	r4, r0
 80041c2:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041c4:	2301      	movs	r3, #1
 80041c6:	aa01      	add	r2, sp, #4
 80041c8:	2162      	movs	r1, #98	; 0x62
 80041ca:	f7ff ff61 	bl	8004090 <lis2mdl_read_reg>

  if (ret == 0)
 80041ce:	b108      	cbz	r0, 80041d4 <lis2mdl_self_test_set+0x18>
    reg.self_test = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80041d0:	b003      	add	sp, #12
 80041d2:	bd30      	pop	{r4, r5, pc}
    reg.self_test = val;
 80041d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041d8:	f365 0341 	bfi	r3, r5, #1, #1
 80041dc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041e0:	2301      	movs	r3, #1
 80041e2:	aa01      	add	r2, sp, #4
 80041e4:	2162      	movs	r1, #98	; 0x62
 80041e6:	4620      	mov	r0, r4
 80041e8:	f7ff ff57 	bl	800409a <lis2mdl_write_reg>
  return ret;
 80041ec:	e7f0      	b.n	80041d0 <lis2mdl_self_test_set+0x14>

080041ee <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80041ee:	b530      	push	{r4, r5, lr}
 80041f0:	b083      	sub	sp, #12
 80041f2:	4604      	mov	r4, r0
 80041f4:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041f6:	2301      	movs	r3, #1
 80041f8:	aa01      	add	r2, sp, #4
 80041fa:	2162      	movs	r1, #98	; 0x62
 80041fc:	f7ff ff48 	bl	8004090 <lis2mdl_read_reg>

  if (ret == 0)
 8004200:	b108      	cbz	r0, 8004206 <lis2mdl_i2c_interface_set+0x18>
    reg.i2c_dis = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004202:	b003      	add	sp, #12
 8004204:	bd30      	pop	{r4, r5, pc}
    reg.i2c_dis = (uint8_t)val;
 8004206:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800420a:	f365 1345 	bfi	r3, r5, #5, #1
 800420e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004212:	2301      	movs	r3, #1
 8004214:	aa01      	add	r2, sp, #4
 8004216:	2162      	movs	r1, #98	; 0x62
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff ff3e 	bl	800409a <lis2mdl_write_reg>
  return ret;
 800421e:	e7f0      	b.n	8004202 <lis2mdl_i2c_interface_set+0x14>

08004220 <LPS22HH_GetCapabilities>:
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004220:	2000      	movs	r0, #0
 8004222:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 8004224:	2301      	movs	r3, #1
 8004226:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8004228:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 800422a:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800422c:	2300      	movs	r3, #0
 800422e:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <LPS22HH_GetCapabilities+0x18>)
 8004232:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004234:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 8004236:	4770      	bx	lr
 8004238:	43480000 	.word	0x43480000

0800423c <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800423c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004240:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	d925      	bls.n	8004296 <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 800424a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800424e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d923      	bls.n	80042a0 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004258:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800425c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d91e      	bls.n	80042a4 <LPS22HH_SetOutputDataRate_When_Disabled+0x68>
 8004266:	eddf 7a12 	vldr	s15, [pc, #72]	; 80042b0 <LPS22HH_SetOutputDataRate_When_Disabled+0x74>
 800426a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	d919      	bls.n	80042a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x6c>
 8004274:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80042b4 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8004278:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d914      	bls.n	80042ac <LPS22HH_SetOutputDataRate_When_Disabled+0x70>
 8004282:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80042b8 <LPS22HH_SetOutputDataRate_When_Disabled+0x7c>
 8004286:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	bf94      	ite	ls
 8004290:	2306      	movls	r3, #6
 8004292:	2307      	movhi	r3, #7
 8004294:	e000      	b.n	8004298 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 8004296:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004298:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
}
 800429c:	2000      	movs	r0, #0
 800429e:	4770      	bx	lr
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80042a0:	2302      	movs	r3, #2
 80042a2:	e7f9      	b.n	8004298 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 80042a4:	2303      	movs	r3, #3
 80042a6:	e7f7      	b.n	8004298 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e7f5      	b.n	8004298 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 80042ac:	2305      	movs	r3, #5
 80042ae:	e7f3      	b.n	8004298 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 80042b0:	42480000 	.word	0x42480000
 80042b4:	42960000 	.word	0x42960000
 80042b8:	42c80000 	.word	0x42c80000

080042bc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042bc:	b510      	push	{r4, lr}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80042be:	6944      	ldr	r4, [r0, #20]
 80042c0:	7b00      	ldrb	r0, [r0, #12]
 80042c2:	47a0      	blx	r4
}
 80042c4:	bd10      	pop	{r4, pc}

080042c6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042c6:	b510      	push	{r4, lr}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80042c8:	6904      	ldr	r4, [r0, #16]
 80042ca:	7b00      	ldrb	r0, [r0, #12]
 80042cc:	47a0      	blx	r4
}
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 80042d0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00b      	beq.n	80042f0 <LPS22HH_PRESS_Enable+0x20>
{
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80042dc:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 80042e0:	3020      	adds	r0, #32
 80042e2:	f000 fa12 	bl	800470a <lps22hh_data_rate_set>
 80042e6:	b928      	cbnz	r0, 80042f4 <LPS22HH_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 80042ee:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 80042f0:	2000      	movs	r0, #0
}
 80042f2:	4770      	bx	lr
    return LPS22HH_ERROR;
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e7f9      	b.n	80042ee <LPS22HH_PRESS_Enable+0x1e>

080042fa <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 80042fa:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d00b      	beq.n	800431a <LPS22HH_TEMP_Enable+0x20>
{
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004306:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 800430a:	3020      	adds	r0, #32
 800430c:	f000 f9fd 	bl	800470a <lps22hh_data_rate_set>
 8004310:	b928      	cbnz	r0, 800431e <LPS22HH_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004318:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 800431a:	2000      	movs	r0, #0
}
 800431c:	4770      	bx	lr
    return LPS22HH_ERROR;
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	e7f9      	b.n	8004318 <LPS22HH_TEMP_Enable+0x1e>

08004324 <LPS22HH_Init>:
{
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8004328:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800432c:	b123      	cbz	r3, 8004338 <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 800432e:	2301      	movs	r3, #1
 8004330:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LPS22HH_OK;
 8004334:	2000      	movs	r0, #0
}
 8004336:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004338:	f100 0520 	add.w	r5, r0, #32
 800433c:	2111      	movs	r1, #17
 800433e:	4628      	mov	r0, r5
 8004340:	f000 fae3 	bl	800490a <lps22hh_i3c_interface_set>
 8004344:	b9b8      	cbnz	r0, 8004376 <LPS22HH_Init+0x52>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004346:	2110      	movs	r1, #16
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f9de 	bl	800470a <lps22hh_data_rate_set>
 800434e:	b990      	cbnz	r0, 8004376 <LPS22HH_Init+0x52>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004350:	2100      	movs	r1, #0
 8004352:	4628      	mov	r0, r5
 8004354:	f000 fac0 	bl	80048d8 <lps22hh_lp_bandwidth_set>
 8004358:	b968      	cbnz	r0, 8004376 <LPS22HH_Init+0x52>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800435a:	2101      	movs	r1, #1
 800435c:	4628      	mov	r0, r5
 800435e:	f000 f9bb 	bl	80046d8 <lps22hh_block_data_update_set>
 8004362:	b940      	cbnz	r0, 8004376 <LPS22HH_Init+0x52>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004364:	2101      	movs	r1, #1
 8004366:	4628      	mov	r0, r5
 8004368:	f000 fa9d 	bl	80048a6 <lps22hh_auto_increment_set>
 800436c:	b918      	cbnz	r0, 8004376 <LPS22HH_Init+0x52>
  pObj->last_odr = LPS22HH_25_Hz;
 800436e:	2303      	movs	r3, #3
 8004370:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return LPS22HH_OK;
 8004374:	e7db      	b.n	800432e <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	e7dc      	b.n	8004336 <LPS22HH_Init+0x12>

0800437c <LPS22HH_ReadID>:
{
 800437c:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800437e:	3020      	adds	r0, #32
 8004380:	f000 fa8a 	bl	8004898 <lps22hh_device_id_get>
 8004384:	3800      	subs	r0, #0
 8004386:	bf18      	it	ne
 8004388:	2001      	movne	r0, #1
}
 800438a:	4240      	negs	r0, r0
 800438c:	bd08      	pop	{r3, pc}

0800438e <LPS22HH_PRESS_Disable>:
{
 800438e:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8004390:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004394:	b1c3      	cbz	r3, 80043c8 <LPS22HH_PRESS_Disable+0x3a>
 8004396:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8004398:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800439c:	b11b      	cbz	r3, 80043a6 <LPS22HH_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 800439e:	2000      	movs	r0, #0
 80043a0:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80043a6:	f100 0520 	add.w	r5, r0, #32
 80043aa:	f100 0133 	add.w	r1, r0, #51	; 0x33
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f9e3 	bl	800477a <lps22hh_data_rate_get>
 80043b4:	b950      	cbnz	r0, 80043cc <LPS22HH_PRESS_Disable+0x3e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80043b6:	2100      	movs	r1, #0
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 f9a6 	bl	800470a <lps22hh_data_rate_set>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0ed      	beq.n	800439e <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	e7ed      	b.n	80043a4 <LPS22HH_PRESS_Disable+0x16>
    return LPS22HH_OK;
 80043c8:	2000      	movs	r0, #0
 80043ca:	e7eb      	b.n	80043a4 <LPS22HH_PRESS_Disable+0x16>
      return LPS22HH_ERROR;
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	e7e8      	b.n	80043a4 <LPS22HH_PRESS_Disable+0x16>
	...

080043d4 <LPS22HH_GetOutputDataRate>:
{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80043da:	f10d 0107 	add.w	r1, sp, #7
 80043de:	3020      	adds	r0, #32
 80043e0:	f000 f9cb 	bl	800477a <lps22hh_data_rate_get>
 80043e4:	bb18      	cbnz	r0, 800442e <LPS22HH_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 80043e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043ea:	2b07      	cmp	r3, #7
 80043ec:	d822      	bhi.n	8004434 <LPS22HH_GetOutputDataRate+0x60>
 80043ee:	e8df f003 	tbb	[pc, r3]
 80043f2:	0804      	.short	0x0804
 80043f4:	15120f0c 	.word	0x15120f0c
 80043f8:	1b18      	.short	0x1b18
      *Odr = 0.0f;
 80043fa:	2300      	movs	r3, #0
 80043fc:	6023      	str	r3, [r4, #0]
}
 80043fe:	b002      	add	sp, #8
 8004400:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8004402:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004406:	6023      	str	r3, [r4, #0]
      break;
 8004408:	e7f9      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 10.0f;
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <LPS22HH_GetOutputDataRate+0x68>)
 800440c:	6023      	str	r3, [r4, #0]
      break;
 800440e:	e7f6      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 25.0f;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <LPS22HH_GetOutputDataRate+0x6c>)
 8004412:	6023      	str	r3, [r4, #0]
      break;
 8004414:	e7f3      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 50.0f;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <LPS22HH_GetOutputDataRate+0x70>)
 8004418:	6023      	str	r3, [r4, #0]
      break;
 800441a:	e7f0      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 75.0f;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <LPS22HH_GetOutputDataRate+0x74>)
 800441e:	6023      	str	r3, [r4, #0]
      break;
 8004420:	e7ed      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 100.0f;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <LPS22HH_GetOutputDataRate+0x78>)
 8004424:	6023      	str	r3, [r4, #0]
      break;
 8004426:	e7ea      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 200.0f;
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <LPS22HH_GetOutputDataRate+0x7c>)
 800442a:	6023      	str	r3, [r4, #0]
      break;
 800442c:	e7e7      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
    return LPS22HH_ERROR;
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	e7e4      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e7e1      	b.n	80043fe <LPS22HH_GetOutputDataRate+0x2a>
 800443a:	bf00      	nop
 800443c:	41200000 	.word	0x41200000
 8004440:	41c80000 	.word	0x41c80000
 8004444:	42480000 	.word	0x42480000
 8004448:	42960000 	.word	0x42960000
 800444c:	42c80000 	.word	0x42c80000
 8004450:	43480000 	.word	0x43480000

08004454 <LPS22HH_PRESS_GetOutputDataRate>:
{
 8004454:	b508      	push	{r3, lr}
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004456:	f7ff ffbd 	bl	80043d4 <LPS22HH_GetOutputDataRate>
}
 800445a:	bd08      	pop	{r3, pc}

0800445c <LPS22HH_TEMP_GetOutputDataRate>:
{
 800445c:	b508      	push	{r3, lr}
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800445e:	f7ff ffb9 	bl	80043d4 <LPS22HH_GetOutputDataRate>
}
 8004462:	bd08      	pop	{r3, pc}

08004464 <LPS22HH_SetOutputDataRate_When_Enabled>:
{
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4604      	mov	r4, r0
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004468:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800446c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	d925      	bls.n	80044c2 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 8004476:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800447a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	d92f      	bls.n	80044e4 <LPS22HH_SetOutputDataRate_When_Enabled+0x80>
 8004484:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8004488:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d92a      	bls.n	80044e8 <LPS22HH_SetOutputDataRate_When_Enabled+0x84>
 8004492:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80044fc <LPS22HH_SetOutputDataRate_When_Enabled+0x98>
 8004496:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	d925      	bls.n	80044ec <LPS22HH_SetOutputDataRate_When_Enabled+0x88>
 80044a0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004500 <LPS22HH_SetOutputDataRate_When_Enabled+0x9c>
 80044a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ac:	d920      	bls.n	80044f0 <LPS22HH_SetOutputDataRate_When_Enabled+0x8c>
 80044ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004504 <LPS22HH_SetOutputDataRate_When_Enabled+0xa0>
 80044b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	bf94      	ite	ls
 80044bc:	2106      	movls	r1, #6
 80044be:	2107      	movhi	r1, #7
 80044c0:	e000      	b.n	80044c4 <LPS22HH_SetOutputDataRate_When_Enabled+0x60>
 80044c2:	2101      	movs	r1, #1
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80044c4:	f104 0520 	add.w	r5, r4, #32
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 f91e 	bl	800470a <lps22hh_data_rate_set>
 80044ce:	b988      	cbnz	r0, 80044f4 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80044d0:	f104 0133 	add.w	r1, r4, #51	; 0x33
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f950 	bl	800477a <lps22hh_data_rate_get>
 80044da:	3800      	subs	r0, #0
 80044dc:	bf18      	it	ne
 80044de:	2001      	movne	r0, #1
 80044e0:	4240      	negs	r0, r0
}
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80044e4:	2102      	movs	r1, #2
 80044e6:	e7ed      	b.n	80044c4 <LPS22HH_SetOutputDataRate_When_Enabled+0x60>
 80044e8:	2103      	movs	r1, #3
 80044ea:	e7eb      	b.n	80044c4 <LPS22HH_SetOutputDataRate_When_Enabled+0x60>
 80044ec:	2104      	movs	r1, #4
 80044ee:	e7e9      	b.n	80044c4 <LPS22HH_SetOutputDataRate_When_Enabled+0x60>
 80044f0:	2105      	movs	r1, #5
 80044f2:	e7e7      	b.n	80044c4 <LPS22HH_SetOutputDataRate_When_Enabled+0x60>
    return LPS22HH_ERROR;
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	e7f3      	b.n	80044e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x7e>
 80044fa:	bf00      	nop
 80044fc:	42480000 	.word	0x42480000
 8004500:	42960000 	.word	0x42960000
 8004504:	42c80000 	.word	0x42c80000

08004508 <LPS22HH_PRESS_SetOutputDataRate>:
{
 8004508:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 800450a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800450e:	2b01      	cmp	r3, #1
 8004510:	d002      	beq.n	8004518 <LPS22HH_PRESS_SetOutputDataRate+0x10>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004512:	f7ff fe93 	bl	800423c <LPS22HH_SetOutputDataRate_When_Disabled>
}
 8004516:	bd08      	pop	{r3, pc}
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004518:	f7ff ffa4 	bl	8004464 <LPS22HH_SetOutputDataRate_When_Enabled>
 800451c:	e7fb      	b.n	8004516 <LPS22HH_PRESS_SetOutputDataRate+0xe>

0800451e <LPS22HH_TEMP_SetOutputDataRate>:
{
 800451e:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 8004520:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004524:	2b01      	cmp	r3, #1
 8004526:	d002      	beq.n	800452e <LPS22HH_TEMP_SetOutputDataRate+0x10>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004528:	f7ff fe88 	bl	800423c <LPS22HH_SetOutputDataRate_When_Disabled>
}
 800452c:	bd08      	pop	{r3, pc}
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800452e:	f7ff ff99 	bl	8004464 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004532:	e7fb      	b.n	800452c <LPS22HH_TEMP_SetOutputDataRate+0xe>

08004534 <LPS22HH_TEMP_Disable>:
{
 8004534:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8004536:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800453a:	b1c3      	cbz	r3, 800456e <LPS22HH_TEMP_Disable+0x3a>
 800453c:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 800453e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004542:	b11b      	cbz	r3, 800454c <LPS22HH_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8004544:	2000      	movs	r0, #0
 8004546:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 800454a:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800454c:	f100 0520 	add.w	r5, r0, #32
 8004550:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f910 	bl	800477a <lps22hh_data_rate_get>
 800455a:	b950      	cbnz	r0, 8004572 <LPS22HH_TEMP_Disable+0x3e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800455c:	2100      	movs	r1, #0
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f8d3 	bl	800470a <lps22hh_data_rate_set>
 8004564:	2800      	cmp	r0, #0
 8004566:	d0ed      	beq.n	8004544 <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	e7ed      	b.n	800454a <LPS22HH_TEMP_Disable+0x16>
    return LPS22HH_OK;
 800456e:	2000      	movs	r0, #0
 8004570:	e7eb      	b.n	800454a <LPS22HH_TEMP_Disable+0x16>
      return LPS22HH_ERROR;
 8004572:	f04f 30ff 	mov.w	r0, #4294967295
 8004576:	e7e8      	b.n	800454a <LPS22HH_TEMP_Disable+0x16>

08004578 <LPS22HH_DeInit>:
{
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 800457c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004580:	2b01      	cmp	r3, #1
 8004582:	d003      	beq.n	800458c <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8004584:	2000      	movs	r0, #0
 8004586:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 800458a:	bd10      	pop	{r4, pc}
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800458c:	f7ff feff 	bl	800438e <LPS22HH_PRESS_Disable>
 8004590:	b938      	cbnz	r0, 80045a2 <LPS22HH_DeInit+0x2a>
    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004592:	4620      	mov	r0, r4
 8004594:	f7ff ffce 	bl	8004534 <LPS22HH_TEMP_Disable>
 8004598:	2800      	cmp	r0, #0
 800459a:	d0f3      	beq.n	8004584 <LPS22HH_DeInit+0xc>
      return LPS22HH_ERROR;
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	e7f3      	b.n	800458a <LPS22HH_DeInit+0x12>
      return LPS22HH_ERROR;
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	e7f0      	b.n	800458a <LPS22HH_DeInit+0x12>

080045a8 <LPS22HH_PRESS_GetPressure>:
{
 80045a8:	b530      	push	{r4, r5, lr}
 80045aa:	b083      	sub	sp, #12
 80045ac:	460c      	mov	r4, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80045ae:	2300      	movs	r3, #0
 80045b0:	9301      	str	r3, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80045b2:	a901      	add	r1, sp, #4
 80045b4:	3020      	adds	r0, #32
 80045b6:	f000 f948 	bl	800484a <lps22hh_pressure_raw_get>
 80045ba:	b940      	cbnz	r0, 80045ce <LPS22HH_PRESS_GetPressure+0x26>
 80045bc:	4605      	mov	r5, r0
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80045be:	9801      	ldr	r0, [sp, #4]
 80045c0:	f000 f878 	bl	80046b4 <lps22hh_from_lsb_to_hpa>
 80045c4:	ed84 0a00 	vstr	s0, [r4]
}
 80045c8:	4628      	mov	r0, r5
 80045ca:	b003      	add	sp, #12
 80045cc:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 80045ce:	f04f 35ff 	mov.w	r5, #4294967295
 80045d2:	e7f9      	b.n	80045c8 <LPS22HH_PRESS_GetPressure+0x20>

080045d4 <LPS22HH_TEMP_GetTemperature>:
{
 80045d4:	b530      	push	{r4, r5, lr}
 80045d6:	b083      	sub	sp, #12
 80045d8:	460c      	mov	r4, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80045da:	2300      	movs	r3, #0
 80045dc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80045e0:	a901      	add	r1, sp, #4
 80045e2:	3020      	adds	r0, #32
 80045e4:	f000 f947 	bl	8004876 <lps22hh_temperature_raw_get>
 80045e8:	b948      	cbnz	r0, 80045fe <LPS22HH_TEMP_GetTemperature+0x2a>
 80045ea:	4605      	mov	r5, r0
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80045ec:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80045f0:	f000 f866 	bl	80046c0 <lps22hh_from_lsb_to_celsius>
 80045f4:	ed84 0a00 	vstr	s0, [r4]
}
 80045f8:	4628      	mov	r0, r5
 80045fa:	b003      	add	sp, #12
 80045fc:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 80045fe:	f04f 35ff 	mov.w	r5, #4294967295
 8004602:	e7f9      	b.n	80045f8 <LPS22HH_TEMP_GetTemperature+0x24>

08004604 <LPS22HH_Write_Reg>:
{
 8004604:	b500      	push	{lr}
 8004606:	b083      	sub	sp, #12
 8004608:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800460c:	2301      	movs	r3, #1
 800460e:	f10d 0207 	add.w	r2, sp, #7
 8004612:	3020      	adds	r0, #32
 8004614:	f000 f849 	bl	80046aa <lps22hh_write_reg>
 8004618:	3800      	subs	r0, #0
 800461a:	bf18      	it	ne
 800461c:	2001      	movne	r0, #1
}
 800461e:	4240      	negs	r0, r0
 8004620:	b003      	add	sp, #12
 8004622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004628 <LPS22HH_RegisterBusIO>:
  if (pObj == NULL)
 8004628:	2800      	cmp	r0, #0
 800462a:	d02b      	beq.n	8004684 <LPS22HH_RegisterBusIO+0x5c>
{
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004634:	684a      	ldr	r2, [r1, #4]
 8004636:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004638:	688a      	ldr	r2, [r1, #8]
 800463a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800463c:	7b0a      	ldrb	r2, [r1, #12]
 800463e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004640:	690a      	ldr	r2, [r1, #16]
 8004642:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004644:	694a      	ldr	r2, [r1, #20]
 8004646:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004648:	698a      	ldr	r2, [r1, #24]
 800464a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <LPS22HH_RegisterBusIO+0x70>)
 800464e:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004650:	4a12      	ldr	r2, [pc, #72]	; (800469c <LPS22HH_RegisterBusIO+0x74>)
 8004652:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004654:	69ca      	ldr	r2, [r1, #28]
 8004656:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004658:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 800465a:	b1b3      	cbz	r3, 800468a <LPS22HH_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LPS22HH_OK)
 800465c:	4798      	blx	r3
 800465e:	b9b8      	cbnz	r0, 8004690 <LPS22HH_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d000      	beq.n	8004668 <LPS22HH_RegisterBusIO+0x40>
}
 8004666:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8004668:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1fa      	bne.n	8004666 <LPS22HH_RegisterBusIO+0x3e>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004670:	2201      	movs	r2, #1
 8004672:	2110      	movs	r1, #16
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff ffc5 	bl	8004604 <LPS22HH_Write_Reg>
 800467a:	3800      	subs	r0, #0
 800467c:	bf18      	it	ne
 800467e:	2001      	movne	r0, #1
 8004680:	4240      	negs	r0, r0
 8004682:	e7f0      	b.n	8004666 <LPS22HH_RegisterBusIO+0x3e>
    ret = LPS22HH_ERROR;
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004688:	4770      	bx	lr
      ret = LPS22HH_ERROR;
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	e7ea      	b.n	8004666 <LPS22HH_RegisterBusIO+0x3e>
      ret = LPS22HH_ERROR;
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004694:	e7e7      	b.n	8004666 <LPS22HH_RegisterBusIO+0x3e>
 8004696:	bf00      	nop
 8004698:	080042bd 	.word	0x080042bd
 800469c:	080042c7 	.word	0x080042c7

080046a0 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80046a0:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046a2:	6844      	ldr	r4, [r0, #4]
 80046a4:	68c0      	ldr	r0, [r0, #12]
 80046a6:	47a0      	blx	r4

  return ret;
}
 80046a8:	bd10      	pop	{r4, pc}

080046aa <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80046aa:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046ac:	6804      	ldr	r4, [r0, #0]
 80046ae:	68c0      	ldr	r0, [r0, #12]
 80046b0:	47a0      	blx	r4

  return ret;
}
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80046b4:	ee00 0a10 	vmov	s0, r0
  return ((float_t) lsb / 1048576.0f);
}
 80046b8:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 80046bc:	4770      	bx	lr
	...

080046c0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80046c0:	ee07 0a90 	vmov	s15, r0
  return ((float_t) lsb / 100.0f);
 80046c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80046c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80046d4 <lps22hh_from_lsb_to_celsius+0x14>
 80046cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	42c80000 	.word	0x42c80000

080046d8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80046d8:	b530      	push	{r4, r5, lr}
 80046da:	b083      	sub	sp, #12
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80046e0:	2301      	movs	r3, #1
 80046e2:	aa01      	add	r2, sp, #4
 80046e4:	2110      	movs	r1, #16
 80046e6:	f7ff ffdb 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 80046ea:	b108      	cbz	r0, 80046f0 <lps22hh_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80046ec:	b003      	add	sp, #12
 80046ee:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80046f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80046f4:	f365 0341 	bfi	r3, r5, #1, #1
 80046f8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80046fc:	2301      	movs	r3, #1
 80046fe:	aa01      	add	r2, sp, #4
 8004700:	2110      	movs	r1, #16
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff ffd1 	bl	80046aa <lps22hh_write_reg>
  return ret;
 8004708:	e7f0      	b.n	80046ec <lps22hh_block_data_update_set+0x14>

0800470a <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800470a:	b530      	push	{r4, r5, lr}
 800470c:	b083      	sub	sp, #12
 800470e:	4605      	mov	r5, r0
 8004710:	460c      	mov	r4, r1
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004712:	2301      	movs	r3, #1
 8004714:	aa01      	add	r2, sp, #4
 8004716:	2110      	movs	r1, #16
 8004718:	f7ff ffc2 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 800471c:	4603      	mov	r3, r0
 800471e:	b110      	cbz	r0, 8004726 <lps22hh_data_rate_set+0x1c>
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
}
 8004720:	4618      	mov	r0, r3
 8004722:	b003      	add	sp, #12
 8004724:	bd30      	pop	{r4, r5, pc}
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004726:	2301      	movs	r3, #1
 8004728:	466a      	mov	r2, sp
 800472a:	2111      	movs	r1, #17
 800472c:	4628      	mov	r0, r5
 800472e:	f7ff ffb7 	bl	80046a0 <lps22hh_read_reg>
  if (ret == 0)
 8004732:	4603      	mov	r3, r0
 8004734:	2800      	cmp	r0, #0
 8004736:	d1f3      	bne.n	8004720 <lps22hh_data_rate_set+0x16>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004738:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800473c:	f364 1306 	bfi	r3, r4, #4, #3
 8004740:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004744:	2301      	movs	r3, #1
 8004746:	aa01      	add	r2, sp, #4
 8004748:	2110      	movs	r1, #16
 800474a:	4628      	mov	r0, r5
 800474c:	f7ff ffad 	bl	80046aa <lps22hh_write_reg>
  if (ret == 0)
 8004750:	4603      	mov	r3, r0
 8004752:	2800      	cmp	r0, #0
 8004754:	d1e4      	bne.n	8004720 <lps22hh_data_rate_set+0x16>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004756:	0922      	lsrs	r2, r4, #4
 8004758:	f89d 3000 	ldrb.w	r3, [sp]
 800475c:	f362 0341 	bfi	r3, r2, #1, #1
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004760:	08e1      	lsrs	r1, r4, #3
 8004762:	f361 0300 	bfi	r3, r1, #0, #1
 8004766:	f88d 3000 	strb.w	r3, [sp]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800476a:	2301      	movs	r3, #1
 800476c:	466a      	mov	r2, sp
 800476e:	2111      	movs	r1, #17
 8004770:	4628      	mov	r0, r5
 8004772:	f7ff ff9a 	bl	80046aa <lps22hh_write_reg>
 8004776:	4603      	mov	r3, r0
  return ret;
 8004778:	e7d2      	b.n	8004720 <lps22hh_data_rate_set+0x16>

0800477a <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 800477a:	b530      	push	{r4, r5, lr}
 800477c:	b083      	sub	sp, #12
 800477e:	4604      	mov	r4, r0
 8004780:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004782:	2301      	movs	r3, #1
 8004784:	aa01      	add	r2, sp, #4
 8004786:	2110      	movs	r1, #16
 8004788:	f7ff ff8a 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 800478c:	4602      	mov	r2, r0
 800478e:	b110      	cbz	r0, 8004796 <lps22hh_data_rate_get+0x1c>
        break;
    }
  }

  return ret;
}
 8004790:	4610      	mov	r0, r2
 8004792:	b003      	add	sp, #12
 8004794:	bd30      	pop	{r4, r5, pc}
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004796:	2301      	movs	r3, #1
 8004798:	466a      	mov	r2, sp
 800479a:	2111      	movs	r1, #17
 800479c:	4620      	mov	r0, r4
 800479e:	f7ff ff7f 	bl	80046a0 <lps22hh_read_reg>
  if (ret == 0)
 80047a2:	4602      	mov	r2, r0
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d1f3      	bne.n	8004790 <lps22hh_data_rate_get+0x16>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80047a8:	2301      	movs	r3, #1
 80047aa:	466a      	mov	r2, sp
 80047ac:	2111      	movs	r1, #17
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7ff ff76 	bl	80046a0 <lps22hh_read_reg>
 80047b4:	4602      	mov	r2, r0
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80047b6:	f89d 3000 	ldrb.w	r3, [sp]
 80047ba:	f3c3 0140 	ubfx	r1, r3, #1, #1
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl_reg1.odr))
 80047c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80047cc:	f3c1 1102 	ubfx	r1, r1, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80047d0:	440b      	add	r3, r1
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d836      	bhi.n	8004844 <lps22hh_data_rate_get+0xca>
 80047d6:	e8df f003 	tbb	[pc, r3]
 80047da:	110b      	.short	0x110b
 80047dc:	1d1a1714 	.word	0x1d1a1714
 80047e0:	350e322f 	.word	0x350e322f
 80047e4:	35353535 	.word	0x35353535
 80047e8:	20353535 	.word	0x20353535
 80047ec:	2c292623 	.word	0x2c292623
        *val = LPS22HH_POWER_DOWN;
 80047f0:	2300      	movs	r3, #0
 80047f2:	702b      	strb	r3, [r5, #0]
        break;
 80047f4:	e7cc      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_ONE_SHOOT;
 80047f6:	2308      	movs	r3, #8
 80047f8:	702b      	strb	r3, [r5, #0]
        break;
 80047fa:	e7c9      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_1_Hz;
 80047fc:	2301      	movs	r3, #1
 80047fe:	702b      	strb	r3, [r5, #0]
        break;
 8004800:	e7c6      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_10_Hz;
 8004802:	2302      	movs	r3, #2
 8004804:	702b      	strb	r3, [r5, #0]
        break;
 8004806:	e7c3      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_25_Hz;
 8004808:	2303      	movs	r3, #3
 800480a:	702b      	strb	r3, [r5, #0]
        break;
 800480c:	e7c0      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_50_Hz;
 800480e:	2304      	movs	r3, #4
 8004810:	702b      	strb	r3, [r5, #0]
        break;
 8004812:	e7bd      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_75_Hz;
 8004814:	2305      	movs	r3, #5
 8004816:	702b      	strb	r3, [r5, #0]
        break;
 8004818:	e7ba      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_1_Hz_LOW_NOISE;
 800481a:	2311      	movs	r3, #17
 800481c:	702b      	strb	r3, [r5, #0]
        break;
 800481e:	e7b7      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8004820:	2312      	movs	r3, #18
 8004822:	702b      	strb	r3, [r5, #0]
        break;
 8004824:	e7b4      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8004826:	2313      	movs	r3, #19
 8004828:	702b      	strb	r3, [r5, #0]
        break;
 800482a:	e7b1      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_50_Hz_LOW_NOISE;
 800482c:	2314      	movs	r3, #20
 800482e:	702b      	strb	r3, [r5, #0]
        break;
 8004830:	e7ae      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8004832:	2315      	movs	r3, #21
 8004834:	702b      	strb	r3, [r5, #0]
        break;
 8004836:	e7ab      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_100_Hz;
 8004838:	2306      	movs	r3, #6
 800483a:	702b      	strb	r3, [r5, #0]
        break;
 800483c:	e7a8      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_200_Hz;
 800483e:	2307      	movs	r3, #7
 8004840:	702b      	strb	r3, [r5, #0]
        break;
 8004842:	e7a5      	b.n	8004790 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_POWER_DOWN;
 8004844:	2300      	movs	r3, #0
 8004846:	702b      	strb	r3, [r5, #0]
  return ret;
 8004848:	e7a2      	b.n	8004790 <lps22hh_data_rate_get+0x16>

0800484a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800484a:	b510      	push	{r4, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	460c      	mov	r4, r1
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004850:	2303      	movs	r3, #3
 8004852:	aa01      	add	r2, sp, #4
 8004854:	2128      	movs	r1, #40	; 0x28
 8004856:	f7ff ff23 	bl	80046a0 <lps22hh_read_reg>
  *buff = reg[2];
 800485a:	f89d 3006 	ldrb.w	r3, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 800485e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004862:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  *buff = (*buff * 256) + reg[0];
 8004866:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800486a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	6023      	str	r3, [r4, #0]

  return ret;
}
 8004872:	b002      	add	sp, #8
 8004874:	bd10      	pop	{r4, pc}

08004876 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004876:	b510      	push	{r4, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	460c      	mov	r4, r1
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800487c:	2302      	movs	r3, #2
 800487e:	aa01      	add	r2, sp, #4
 8004880:	212b      	movs	r1, #43	; 0x2b
 8004882:	f7ff ff0d 	bl	80046a0 <lps22hh_read_reg>
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 8004886:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800488a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800488e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004892:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8004894:	b002      	add	sp, #8
 8004896:	bd10      	pop	{r4, pc}

08004898 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004898:	b508      	push	{r3, lr}
 800489a:	460a      	mov	r2, r1
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800489c:	2301      	movs	r3, #1
 800489e:	210f      	movs	r1, #15
 80048a0:	f7ff fefe 	bl	80046a0 <lps22hh_read_reg>

  return ret;
}
 80048a4:	bd08      	pop	{r3, pc}

080048a6 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80048a6:	b530      	push	{r4, r5, lr}
 80048a8:	b083      	sub	sp, #12
 80048aa:	4604      	mov	r4, r0
 80048ac:	460d      	mov	r5, r1
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80048ae:	2301      	movs	r3, #1
 80048b0:	aa01      	add	r2, sp, #4
 80048b2:	2111      	movs	r1, #17
 80048b4:	f7ff fef4 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 80048b8:	b108      	cbz	r0, 80048be <lps22hh_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80048ba:	b003      	add	sp, #12
 80048bc:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 80048be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048c2:	f365 1304 	bfi	r3, r5, #4, #1
 80048c6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80048ca:	2301      	movs	r3, #1
 80048cc:	aa01      	add	r2, sp, #4
 80048ce:	2111      	movs	r1, #17
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff feea 	bl	80046aa <lps22hh_write_reg>
  return ret;
 80048d6:	e7f0      	b.n	80048ba <lps22hh_auto_increment_set+0x14>

080048d8 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80048d8:	b530      	push	{r4, r5, lr}
 80048da:	b083      	sub	sp, #12
 80048dc:	4604      	mov	r4, r0
 80048de:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80048e0:	2301      	movs	r3, #1
 80048e2:	aa01      	add	r2, sp, #4
 80048e4:	2110      	movs	r1, #16
 80048e6:	f7ff fedb 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 80048ea:	b108      	cbz	r0, 80048f0 <lps22hh_lp_bandwidth_set+0x18>
    reg.lpfp_cfg = (uint8_t)val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80048ec:	b003      	add	sp, #12
 80048ee:	bd30      	pop	{r4, r5, pc}
    reg.lpfp_cfg = (uint8_t)val;
 80048f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048f4:	f365 0383 	bfi	r3, r5, #2, #2
 80048f8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80048fc:	2301      	movs	r3, #1
 80048fe:	aa01      	add	r2, sp, #4
 8004900:	2110      	movs	r1, #16
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff fed1 	bl	80046aa <lps22hh_write_reg>
  return ret;
 8004908:	e7f0      	b.n	80048ec <lps22hh_lp_bandwidth_set+0x14>

0800490a <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800490a:	b530      	push	{r4, r5, lr}
 800490c:	b083      	sub	sp, #12
 800490e:	4605      	mov	r5, r0
 8004910:	460c      	mov	r4, r1
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8004912:	2301      	movs	r3, #1
 8004914:	aa01      	add	r2, sp, #4
 8004916:	210e      	movs	r1, #14
 8004918:	f7ff fec2 	bl	80046a0 <lps22hh_read_reg>

  if (ret == 0)
 800491c:	b108      	cbz	r0, 8004922 <lps22hh_i3c_interface_set+0x18>
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800491e:	b003      	add	sp, #12
 8004920:	bd30      	pop	{r4, r5, pc}
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8004922:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004926:	f364 0341 	bfi	r3, r4, #1, #1
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800492a:	0921      	lsrs	r1, r4, #4
 800492c:	f361 13c7 	bfi	r3, r1, #7, #1
 8004930:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8004934:	2301      	movs	r3, #1
 8004936:	aa01      	add	r2, sp, #4
 8004938:	210e      	movs	r1, #14
 800493a:	4628      	mov	r0, r5
 800493c:	f7ff feb5 	bl	80046aa <lps22hh_write_reg>
  return ret;
 8004940:	e7ed      	b.n	800491e <lps22hh_i3c_interface_set+0x14>
	...

08004944 <LSM6DSO_GetCapabilities>:
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004944:	2301      	movs	r3, #1
 8004946:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8004948:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 800494a:	2000      	movs	r0, #0
 800494c:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 800494e:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004950:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004954:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8004956:	2310      	movs	r3, #16
 8004958:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800495a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800495c:	4b02      	ldr	r3, [pc, #8]	; (8004968 <LSM6DSO_GetCapabilities+0x24>)
 800495e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004960:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004962:	2300      	movs	r3, #0
 8004964:	618b      	str	r3, [r1, #24]
  return LSM6DSO_OK;
}
 8004966:	4770      	bx	lr
 8004968:	45d02000 	.word	0x45d02000

0800496c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800496c:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800496e:	6944      	ldr	r4, [r0, #20]
 8004970:	7b00      	ldrb	r0, [r0, #12]
 8004972:	47a0      	blx	r4
}
 8004974:	bd10      	pop	{r4, pc}

08004976 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004976:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004978:	6904      	ldr	r4, [r0, #16]
 800497a:	7b00      	ldrb	r0, [r0, #12]
 800497c:	47a0      	blx	r4
}
 800497e:	bd10      	pop	{r4, pc}

08004980 <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8004980:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004984:	2b01      	cmp	r3, #1
 8004986:	d00b      	beq.n	80049a0 <LSM6DSO_ACC_Enable+0x20>
{
 8004988:	b510      	push	{r4, lr}
 800498a:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800498c:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 8004990:	3020      	adds	r0, #32
 8004992:	f001 f84c 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 8004996:	b928      	cbnz	r0, 80049a4 <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800499e:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 80049a0:	2000      	movs	r0, #0
}
 80049a2:	4770      	bx	lr
    return LSM6DSO_ERROR;
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	e7f9      	b.n	800499e <LSM6DSO_ACC_Enable+0x1e>

080049aa <LSM6DSO_ACC_SetFullScale>:
{
 80049aa:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 80049ac:	2902      	cmp	r1, #2
 80049ae:	dd06      	ble.n	80049be <LSM6DSO_ACC_SetFullScale+0x14>
 80049b0:	2904      	cmp	r1, #4
 80049b2:	dd0d      	ble.n	80049d0 <LSM6DSO_ACC_SetFullScale+0x26>
 80049b4:	2909      	cmp	r1, #9
 80049b6:	bfb4      	ite	lt
 80049b8:	2103      	movlt	r1, #3
 80049ba:	2101      	movge	r1, #1
 80049bc:	e000      	b.n	80049c0 <LSM6DSO_ACC_SetFullScale+0x16>
 80049be:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80049c0:	3020      	adds	r0, #32
 80049c2:	f000 fe47 	bl	8005654 <lsm6dso_xl_full_scale_set>
 80049c6:	3800      	subs	r0, #0
 80049c8:	bf18      	it	ne
 80049ca:	2001      	movne	r0, #1
}
 80049cc:	4240      	negs	r0, r0
 80049ce:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 80049d0:	2102      	movs	r1, #2
 80049d2:	e7f5      	b.n	80049c0 <LSM6DSO_ACC_SetFullScale+0x16>

080049d4 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 80049d4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d00b      	beq.n	80049f4 <LSM6DSO_GYRO_Enable+0x20>
{
 80049dc:	b510      	push	{r4, lr}
 80049de:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80049e0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80049e4:	3020      	adds	r0, #32
 80049e6:	f001 f899 	bl	8005b1c <lsm6dso_gy_data_rate_set>
 80049ea:	b928      	cbnz	r0, 80049f8 <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 80049f2:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 80049f4:	2000      	movs	r0, #0
}
 80049f6:	4770      	bx	lr
    return LSM6DSO_ERROR;
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e7f9      	b.n	80049f2 <LSM6DSO_GYRO_Enable+0x1e>

080049fe <LSM6DSO_Init>:
{
 80049fe:	b538      	push	{r3, r4, r5, lr}
 8004a00:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004a02:	f100 0420 	add.w	r4, r0, #32
 8004a06:	2180      	movs	r1, #128	; 0x80
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 ff7d 	bl	8005908 <lsm6dso_i3c_disable_set>
 8004a0e:	bb60      	cbnz	r0, 8004a6a <LSM6DSO_Init+0x6c>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004a10:	2101      	movs	r1, #1
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 ff5f 	bl	80058d6 <lsm6dso_auto_increment_set>
 8004a18:	bb50      	cbnz	r0, 8004a70 <LSM6DSO_Init+0x72>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 fee3 	bl	80057e8 <lsm6dso_block_data_update_set>
 8004a22:	bb40      	cbnz	r0, 8004a76 <LSM6DSO_Init+0x78>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004a24:	2100      	movs	r1, #0
 8004a26:	4620      	mov	r0, r4
 8004a28:	f000 ffa3 	bl	8005972 <lsm6dso_fifo_mode_set>
 8004a2c:	bb30      	cbnz	r0, 8004a7c <LSM6DSO_Init+0x7e>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004a2e:	2304      	movs	r3, #4
 8004a30:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004a34:	2100      	movs	r1, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 fff9 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 8004a3c:	bb08      	cbnz	r0, 8004a82 <LSM6DSO_Init+0x84>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 fe07 	bl	8005654 <lsm6dso_xl_full_scale_set>
 8004a46:	b9f8      	cbnz	r0, 8004a88 <LSM6DSO_Init+0x8a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4620      	mov	r0, r4
 8004a52:	f001 f863 	bl	8005b1c <lsm6dso_gy_data_rate_set>
 8004a56:	b9d0      	cbnz	r0, 8004a8e <LSM6DSO_Init+0x90>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004a58:	2106      	movs	r1, #6
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 fe5e 	bl	800571c <lsm6dso_gy_full_scale_set>
 8004a60:	b9c0      	cbnz	r0, 8004a94 <LSM6DSO_Init+0x96>
  pObj->is_initialized = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	e7fb      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e7f8      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e7f5      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e7f2      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	e7ef      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e7ec      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	e7e9      	b.n	8004a68 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	e7e6      	b.n	8004a68 <LSM6DSO_Init+0x6a>

08004a9a <LSM6DSO_GYRO_SetFullScale>:
{
 8004a9a:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004a9c:	297d      	cmp	r1, #125	; 0x7d
 8004a9e:	dd0a      	ble.n	8004ab6 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8004aa0:	29fa      	cmp	r1, #250	; 0xfa
 8004aa2:	dd11      	ble.n	8004ac8 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004aa4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8004aa8:	dd10      	ble.n	8004acc <LSM6DSO_GYRO_SetFullScale+0x32>
 8004aaa:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004aae:	bfd4      	ite	le
 8004ab0:	2104      	movle	r1, #4
 8004ab2:	2106      	movgt	r1, #6
 8004ab4:	e000      	b.n	8004ab8 <LSM6DSO_GYRO_SetFullScale+0x1e>
 8004ab6:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004ab8:	3020      	adds	r0, #32
 8004aba:	f000 fe2f 	bl	800571c <lsm6dso_gy_full_scale_set>
 8004abe:	3800      	subs	r0, #0
 8004ac0:	bf18      	it	ne
 8004ac2:	2001      	movne	r0, #1
}
 8004ac4:	4240      	negs	r0, r0
 8004ac6:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004ac8:	2100      	movs	r1, #0
 8004aca:	e7f5      	b.n	8004ab8 <LSM6DSO_GYRO_SetFullScale+0x1e>
 8004acc:	2102      	movs	r1, #2
 8004ace:	e7f3      	b.n	8004ab8 <LSM6DSO_GYRO_SetFullScale+0x1e>

08004ad0 <LSM6DSO_ReadID>:
{
 8004ad0:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004ad2:	3020      	adds	r0, #32
 8004ad4:	f000 fef8 	bl	80058c8 <lsm6dso_device_id_get>
 8004ad8:	3800      	subs	r0, #0
 8004ada:	bf18      	it	ne
 8004adc:	2001      	movne	r0, #1
}
 8004ade:	4240      	negs	r0, r0
 8004ae0:	bd08      	pop	{r3, pc}

08004ae2 <LSM6DSO_ACC_Disable>:
{
 8004ae2:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8004ae4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004ae8:	b90b      	cbnz	r3, 8004aee <LSM6DSO_ACC_Disable+0xc>
    return LSM6DSO_OK;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004af0:	f100 0520 	add.w	r5, r0, #32
 8004af4:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fddf 	bl	80056bc <lsm6dso_xl_data_rate_get>
 8004afe:	b938      	cbnz	r0, 8004b10 <LSM6DSO_ACC_Disable+0x2e>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004b00:	2100      	movs	r1, #0
 8004b02:	4628      	mov	r0, r5
 8004b04:	f000 ff93 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 8004b08:	b928      	cbnz	r0, 8004b16 <LSM6DSO_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8004b0a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  return LSM6DSO_OK;
 8004b0e:	e7ed      	b.n	8004aec <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e7ea      	b.n	8004aec <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	e7e7      	b.n	8004aec <LSM6DSO_ACC_Disable+0xa>

08004b1c <LSM6DSO_ACC_GetOutputDataRate>:
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004b22:	f10d 0107 	add.w	r1, sp, #7
 8004b26:	3020      	adds	r0, #32
 8004b28:	f000 fdc8 	bl	80056bc <lsm6dso_xl_data_rate_get>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d130      	bne.n	8004b92 <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8004b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b34:	2b0b      	cmp	r3, #11
 8004b36:	d82f      	bhi.n	8004b98 <LSM6DSO_ACC_GetOutputDataRate+0x7c>
 8004b38:	e8df f003 	tbb	[pc, r3]
 8004b3c:	13100d06 	.word	0x13100d06
 8004b40:	1f1c1916 	.word	0x1f1c1916
 8004b44:	0a282522 	.word	0x0a282522
      *Odr = 0.0f;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6023      	str	r3, [r4, #0]
}
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 8004b52:	6023      	str	r3, [r4, #0]
      break;
 8004b54:	e7fa      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 8004b58:	6023      	str	r3, [r4, #0]
      break;
 8004b5a:	e7f7      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8004b5e:	6023      	str	r3, [r4, #0]
      break;
 8004b60:	e7f4      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 8004b64:	6023      	str	r3, [r4, #0]
      break;
 8004b66:	e7f1      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 8004b6a:	6023      	str	r3, [r4, #0]
      break;
 8004b6c:	e7ee      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8004b70:	6023      	str	r3, [r4, #0]
      break;
 8004b72:	e7eb      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8004b74:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 8004b76:	6023      	str	r3, [r4, #0]
      break;
 8004b78:	e7e8      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 8004b7c:	6023      	str	r3, [r4, #0]
      break;
 8004b7e:	e7e5      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 8004b82:	6023      	str	r3, [r4, #0]
      break;
 8004b84:	e7e2      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <LSM6DSO_ACC_GetOutputDataRate+0xa8>)
 8004b88:	6023      	str	r3, [r4, #0]
      break;
 8004b8a:	e7df      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <LSM6DSO_ACC_GetOutputDataRate+0xac>)
 8004b8e:	6023      	str	r3, [r4, #0]
      break;
 8004b90:	e7dc      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	e7d9      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	e7d6      	b.n	8004b4c <LSM6DSO_ACC_GetOutputDataRate+0x30>
 8004b9e:	bf00      	nop
 8004ba0:	3fcccccd 	.word	0x3fcccccd
 8004ba4:	41480000 	.word	0x41480000
 8004ba8:	41d00000 	.word	0x41d00000
 8004bac:	42500000 	.word	0x42500000
 8004bb0:	42d00000 	.word	0x42d00000
 8004bb4:	43500000 	.word	0x43500000
 8004bb8:	43d08000 	.word	0x43d08000
 8004bbc:	44504000 	.word	0x44504000
 8004bc0:	44d06000 	.word	0x44d06000
 8004bc4:	45505000 	.word	0x45505000
 8004bc8:	45d05800 	.word	0x45d05800

08004bcc <LSM6DSO_ACC_GetSensitivity>:
{
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004bd2:	f10d 0107 	add.w	r1, sp, #7
 8004bd6:	3020      	adds	r0, #32
 8004bd8:	f000 fd55 	bl	8005686 <lsm6dso_xl_full_scale_get>
 8004bdc:	b9a0      	cbnz	r0, 8004c08 <LSM6DSO_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8004bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d813      	bhi.n	8004c0e <LSM6DSO_ACC_GetSensitivity+0x42>
 8004be6:	e8df f003 	tbb	[pc, r3]
 8004bea:	0c02      	.short	0x0c02
 8004bec:	0906      	.short	0x0906
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <LSM6DSO_ACC_GetSensitivity+0x48>)
 8004bf0:	6023      	str	r3, [r4, #0]
}
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004bf6:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <LSM6DSO_ACC_GetSensitivity+0x4c>)
 8004bf8:	6023      	str	r3, [r4, #0]
      break;
 8004bfa:	e7fa      	b.n	8004bf2 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <LSM6DSO_ACC_GetSensitivity+0x50>)
 8004bfe:	6023      	str	r3, [r4, #0]
      break;
 8004c00:	e7f7      	b.n	8004bf2 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <LSM6DSO_ACC_GetSensitivity+0x54>)
 8004c04:	6023      	str	r3, [r4, #0]
      break;
 8004c06:	e7f4      	b.n	8004bf2 <LSM6DSO_ACC_GetSensitivity+0x26>
    return LSM6DSO_ERROR;
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e7f1      	b.n	8004bf2 <LSM6DSO_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e7ee      	b.n	8004bf2 <LSM6DSO_ACC_GetSensitivity+0x26>
 8004c14:	3d79db23 	.word	0x3d79db23
 8004c18:	3df9db23 	.word	0x3df9db23
 8004c1c:	3e79db23 	.word	0x3e79db23
 8004c20:	3ef9db23 	.word	0x3ef9db23

08004c24 <LSM6DSO_ACC_GetFullScale>:
{
 8004c24:	b510      	push	{r4, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004c2a:	f10d 0107 	add.w	r1, sp, #7
 8004c2e:	3020      	adds	r0, #32
 8004c30:	f000 fd29 	bl	8005686 <lsm6dso_xl_full_scale_get>
 8004c34:	b9a0      	cbnz	r0, 8004c60 <LSM6DSO_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8004c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d813      	bhi.n	8004c66 <LSM6DSO_ACC_GetFullScale+0x42>
 8004c3e:	e8df f003 	tbb	[pc, r3]
 8004c42:	0c02      	.short	0x0c02
 8004c44:	0906      	.short	0x0906
      *FullScale =  2;
 8004c46:	2302      	movs	r3, #2
 8004c48:	6023      	str	r3, [r4, #0]
}
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	6023      	str	r3, [r4, #0]
      break;
 8004c52:	e7fa      	b.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8004c54:	2308      	movs	r3, #8
 8004c56:	6023      	str	r3, [r4, #0]
      break;
 8004c58:	e7f7      	b.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	6023      	str	r3, [r4, #0]
      break;
 8004c5e:	e7f4      	b.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x26>
    return LSM6DSO_ERROR;
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	e7f1      	b.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	e7ee      	b.n	8004c4a <LSM6DSO_ACC_GetFullScale+0x26>

08004c6c <LSM6DSO_ACC_GetAxesRaw>:
{
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004c72:	4669      	mov	r1, sp
 8004c74:	3020      	adds	r0, #32
 8004c76:	f000 fdef 	bl	8005858 <lsm6dso_acceleration_raw_get>
 8004c7a:	b950      	cbnz	r0, 8004c92 <LSM6DSO_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8004c7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c80:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8004c82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004c86:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8004c88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c8c:	80a3      	strh	r3, [r4, #4]
}
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	e7fa      	b.n	8004c8e <LSM6DSO_ACC_GetAxesRaw+0x22>

08004c98 <LSM6DSO_ACC_GetAxes>:
{
 8004c98:	b530      	push	{r4, r5, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9301      	str	r3, [sp, #4]
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ca4:	a902      	add	r1, sp, #8
 8004ca6:	3020      	adds	r0, #32
 8004ca8:	f000 fdd6 	bl	8005858 <lsm6dso_acceleration_raw_get>
 8004cac:	bb60      	cbnz	r0, 8004d08 <LSM6DSO_ACC_GetAxes+0x70>
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004cae:	a901      	add	r1, sp, #4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff ff8b 	bl	8004bcc <LSM6DSO_ACC_GetSensitivity>
 8004cb6:	bb50      	cbnz	r0, 8004d0e <LSM6DSO_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004cb8:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004cbc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd0:	edc4 7a00 	vstr	s15, [r4]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004cd4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce8:	edc4 7a01 	vstr	s15, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004cec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d00:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8004d04:	b005      	add	sp, #20
 8004d06:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e7fa      	b.n	8004d04 <LSM6DSO_ACC_GetAxes+0x6c>
    return LSM6DSO_ERROR;
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	e7f7      	b.n	8004d04 <LSM6DSO_ACC_GetAxes+0x6c>

08004d14 <LSM6DSO_GYRO_Disable>:
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8004d16:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004d1a:	b90b      	cbnz	r3, 8004d20 <LSM6DSO_GYRO_Disable+0xc>
    return LSM6DSO_OK;
 8004d1c:	2000      	movs	r0, #0
}
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004d22:	f100 0520 	add.w	r5, r0, #32
 8004d26:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fd2f 	bl	800578e <lsm6dso_gy_data_rate_get>
 8004d30:	b938      	cbnz	r0, 8004d42 <LSM6DSO_GYRO_Disable+0x2e>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004d32:	2100      	movs	r1, #0
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 fef1 	bl	8005b1c <lsm6dso_gy_data_rate_set>
 8004d3a:	b928      	cbnz	r0, 8004d48 <LSM6DSO_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8004d3c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSO_OK;
 8004d40:	e7ed      	b.n	8004d1e <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 8004d42:	f04f 30ff 	mov.w	r0, #4294967295
 8004d46:	e7ea      	b.n	8004d1e <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	e7e7      	b.n	8004d1e <LSM6DSO_GYRO_Disable+0xa>

08004d4e <LSM6DSO_DeInit>:
{
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8004d52:	f7ff fec6 	bl	8004ae2 <LSM6DSO_ACC_Disable>
 8004d56:	b950      	cbnz	r0, 8004d6e <LSM6DSO_DeInit+0x20>
  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff ffdb 	bl	8004d14 <LSM6DSO_GYRO_Disable>
 8004d5e:	b948      	cbnz	r0, 8004d74 <LSM6DSO_DeInit+0x26>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004d60:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004d64:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  pObj->is_initialized = 0;
 8004d68:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8004d6c:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d72:	e7fb      	b.n	8004d6c <LSM6DSO_DeInit+0x1e>
    return LSM6DSO_ERROR;
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	e7f8      	b.n	8004d6c <LSM6DSO_DeInit+0x1e>
	...

08004d7c <LSM6DSO_GYRO_GetOutputDataRate>:
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004d82:	f10d 0107 	add.w	r1, sp, #7
 8004d86:	3020      	adds	r0, #32
 8004d88:	f000 fd01 	bl	800578e <lsm6dso_gy_data_rate_get>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d12d      	bne.n	8004dec <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8004d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d94:	2b0a      	cmp	r3, #10
 8004d96:	d82c      	bhi.n	8004df2 <LSM6DSO_GYRO_GetOutputDataRate+0x76>
 8004d98:	e8df f003 	tbb	[pc, r3]
 8004d9c:	100d0a06 	.word	0x100d0a06
 8004da0:	1c191613 	.word	0x1c191613
 8004da4:	221f      	.short	0x221f
 8004da6:	25          	.byte	0x25
 8004da7:	00          	.byte	0x00
      *Odr = 0.0f;
 8004da8:	2300      	movs	r3, #0
 8004daa:	6023      	str	r3, [r4, #0]
}
 8004dac:	b002      	add	sp, #8
 8004dae:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 8004db2:	6023      	str	r3, [r4, #0]
      break;
 8004db4:	e7fa      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 8004db8:	6023      	str	r3, [r4, #0]
      break;
 8004dba:	e7f7      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 8004dbe:	6023      	str	r3, [r4, #0]
      break;
 8004dc0:	e7f4      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 8004dc4:	6023      	str	r3, [r4, #0]
      break;
 8004dc6:	e7f1      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 8004dca:	6023      	str	r3, [r4, #0]
      break;
 8004dcc:	e7ee      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 8004dd0:	6023      	str	r3, [r4, #0]
      break;
 8004dd2:	e7eb      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 8004dd6:	6023      	str	r3, [r4, #0]
      break;
 8004dd8:	e7e8      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 8004ddc:	6023      	str	r3, [r4, #0]
      break;
 8004dde:	e7e5      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 8004de2:	6023      	str	r3, [r4, #0]
      break;
 8004de4:	e7e2      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <LSM6DSO_GYRO_GetOutputDataRate+0xa0>)
 8004de8:	6023      	str	r3, [r4, #0]
      break;
 8004dea:	e7df      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e7dc      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e7d9      	b.n	8004dac <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 8004df8:	41480000 	.word	0x41480000
 8004dfc:	41d00000 	.word	0x41d00000
 8004e00:	42500000 	.word	0x42500000
 8004e04:	42d00000 	.word	0x42d00000
 8004e08:	43500000 	.word	0x43500000
 8004e0c:	43d08000 	.word	0x43d08000
 8004e10:	44504000 	.word	0x44504000
 8004e14:	44d06000 	.word	0x44d06000
 8004e18:	45505000 	.word	0x45505000
 8004e1c:	45d05800 	.word	0x45d05800

08004e20 <LSM6DSO_GYRO_GetSensitivity>:
{
 8004e20:	b510      	push	{r4, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004e26:	f10d 0107 	add.w	r1, sp, #7
 8004e2a:	3020      	adds	r0, #32
 8004e2c:	f000 fc8f 	bl	800574e <lsm6dso_gy_full_scale_get>
 8004e30:	b9c8      	cbnz	r0, 8004e66 <LSM6DSO_GYRO_GetSensitivity+0x46>
  switch (full_scale)
 8004e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d818      	bhi.n	8004e6c <LSM6DSO_GYRO_GetSensitivity+0x4c>
 8004e3a:	e8df f003 	tbb	[pc, r3]
 8004e3e:	0408      	.short	0x0408
 8004e40:	170e170b 	.word	0x170e170b
 8004e44:	11          	.byte	0x11
 8004e45:	00          	.byte	0x00
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <LSM6DSO_GYRO_GetSensitivity+0x54>)
 8004e48:	6023      	str	r3, [r4, #0]
}
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <LSM6DSO_GYRO_GetSensitivity+0x58>)
 8004e50:	6023      	str	r3, [r4, #0]
      break;
 8004e52:	e7fa      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 8004e56:	6023      	str	r3, [r4, #0]
      break;
 8004e58:	e7f7      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 8004e5c:	6023      	str	r3, [r4, #0]
      break;
 8004e5e:	e7f4      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8004e62:	6023      	str	r3, [r4, #0]
      break;
 8004e64:	e7f1      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
    return LSM6DSO_ERROR;
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	e7ee      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  switch (full_scale)
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	e7eb      	b.n	8004e4a <LSM6DSO_GYRO_GetSensitivity+0x2a>
 8004e72:	bf00      	nop
 8004e74:	408c0000 	.word	0x408c0000
 8004e78:	410c0000 	.word	0x410c0000
 8004e7c:	418c0000 	.word	0x418c0000
 8004e80:	420c0000 	.word	0x420c0000
 8004e84:	428c0000 	.word	0x428c0000

08004e88 <LSM6DSO_GYRO_GetFullScale>:
{
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004e8e:	f10d 0107 	add.w	r1, sp, #7
 8004e92:	3020      	adds	r0, #32
 8004e94:	f000 fc5b 	bl	800574e <lsm6dso_gy_full_scale_get>
 8004e98:	b9e0      	cbnz	r0, 8004ed4 <LSM6DSO_GYRO_GetFullScale+0x4c>
  switch (fs_low_level)
 8004e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d81b      	bhi.n	8004eda <LSM6DSO_GYRO_GetFullScale+0x52>
 8004ea2:	e8df f003 	tbb	[pc, r3]
 8004ea6:	0408      	.short	0x0408
 8004ea8:	1a0f1a0b 	.word	0x1a0f1a0b
 8004eac:	13          	.byte	0x13
 8004ead:	00          	.byte	0x00
      *FullScale =  125;
 8004eae:	237d      	movs	r3, #125	; 0x7d
 8004eb0:	6023      	str	r3, [r4, #0]
}
 8004eb2:	b002      	add	sp, #8
 8004eb4:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8004eb6:	23fa      	movs	r3, #250	; 0xfa
 8004eb8:	6023      	str	r3, [r4, #0]
      break;
 8004eba:	e7fa      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale =  500;
 8004ebc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004ec0:	6023      	str	r3, [r4, #0]
      break;
 8004ec2:	e7f6      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 1000;
 8004ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ec8:	6023      	str	r3, [r4, #0]
      break;
 8004eca:	e7f2      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 2000;
 8004ecc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ed0:	6023      	str	r3, [r4, #0]
      break;
 8004ed2:	e7ee      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
    return LSM6DSO_ERROR;
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e7eb      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
  switch (fs_low_level)
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	e7e8      	b.n	8004eb2 <LSM6DSO_GYRO_GetFullScale+0x2a>

08004ee0 <LSM6DSO_GYRO_GetAxesRaw>:
{
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ee6:	4669      	mov	r1, sp
 8004ee8:	3020      	adds	r0, #32
 8004eea:	f000 fc96 	bl	800581a <lsm6dso_angular_rate_raw_get>
 8004eee:	b950      	cbnz	r0, 8004f06 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8004ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ef4:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8004ef6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004efa:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8004efc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f00:	80a3      	strh	r3, [r4, #4]
}
 8004f02:	b002      	add	sp, #8
 8004f04:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	e7fa      	b.n	8004f02 <LSM6DSO_GYRO_GetAxesRaw+0x22>

08004f0c <LSM6DSO_GYRO_GetAxes>:
{
 8004f0c:	b530      	push	{r4, r5, lr}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	4605      	mov	r5, r0
 8004f12:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004f14:	a902      	add	r1, sp, #8
 8004f16:	3020      	adds	r0, #32
 8004f18:	f000 fc7f 	bl	800581a <lsm6dso_angular_rate_raw_get>
 8004f1c:	bb60      	cbnz	r0, 8004f78 <LSM6DSO_GYRO_GetAxes+0x6c>
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004f1e:	a901      	add	r1, sp, #4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f7ff ff7d 	bl	8004e20 <LSM6DSO_GYRO_GetSensitivity>
 8004f26:	bb50      	cbnz	r0, 8004f7e <LSM6DSO_GYRO_GetAxes+0x72>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004f28:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004f2c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f40:	edc4 7a00 	vstr	s15, [r4]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004f44:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f58:	edc4 7a01 	vstr	s15, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004f5c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f70:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8004f74:	b005      	add	sp, #20
 8004f76:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	e7fa      	b.n	8004f74 <LSM6DSO_GYRO_GetAxes+0x68>
    return LSM6DSO_ERROR;
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	e7f7      	b.n	8004f74 <LSM6DSO_GYRO_GetAxes+0x68>

08004f84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
{
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	ed2d 8b02 	vpush	{d8}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 8004f92:	2901      	cmp	r1, #1
 8004f94:	f000 80b2 	beq.w	80050fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
 8004f98:	2902      	cmp	r1, #2
 8004f9a:	f000 80fb 	beq.w	8005194 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x210>
 8004f9e:	b129      	cbz	r1, 8004fac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x28>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004fa4:	b003      	add	sp, #12
 8004fa6:	ecbd 8b02 	vpop	{d8}
 8004faa:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004fac:	f100 0520 	add.w	r5, r0, #32
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	466a      	mov	r2, sp
 8004fb4:	2114      	movs	r1, #20
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fb42 	bl	8005640 <lsm6dso_read_reg>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f040 809a 	bne.w	80050f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x172>
      if (val1.xl_ulp_en != 0U)
 8004fc2:	f99d 3000 	ldrsb.w	r3, [sp]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da12      	bge.n	8004ff0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x6c>
        if (pObj->acc_is_enabled == 1U)
 8004fca:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d07b      	beq.n	80050ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x146>
        val1.xl_ulp_en = 0;
 8004fd2:	f89d 3000 	ldrb.w	r3, [sp]
 8004fd6:	f36f 13c7 	bfc	r3, #7, #1
 8004fda:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004fde:	2301      	movs	r3, #1
 8004fe0:	466a      	mov	r2, sp
 8004fe2:	2114      	movs	r1, #20
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fb30 	bl	800564a <lsm6dso_write_reg>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f040 8083 	bne.w	80050f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x172>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	aa01      	add	r2, sp, #4
 8004ff4:	2115      	movs	r1, #21
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fb22 	bl	8005640 <lsm6dso_read_reg>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d17a      	bne.n	80050f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x172>
      if (val2.xl_hm_mode != 0U)
 8005000:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005004:	f013 0f10 	tst.w	r3, #16
 8005008:	d167      	bne.n	80050da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x156>
        newOdr = 12.5f;
 800500a:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800500e:	eeb4 8a67 	vcmp.f32	s16, s15
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	bf48      	it	mi
 8005018:	eeb0 8a67 	vmovmi.f32	s16, s15
  if (pObj->acc_is_enabled == 1U)
 800501c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8005020:	2901      	cmp	r1, #1
 8005022:	f000 810f 	beq.w	8005244 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c0>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005026:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8005330 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3ac>
 800502a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005032:	f240 8168 	bls.w	8005306 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x382>
 8005036:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800503a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	f240 8165 	bls.w	8005310 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x38c>
 8005046:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800504a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	f240 815f 	bls.w	8005314 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x390>
 8005056:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8005334 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b0>
 800505a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	f240 8159 	bls.w	8005318 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x394>
 8005066:	eddf 7ab4 	vldr	s15, [pc, #720]	; 8005338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b4>
 800506a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	f240 8153 	bls.w	800531c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x398>
 8005076:	eddf 7ab1 	vldr	s15, [pc, #708]	; 800533c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b8>
 800507a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	f240 814d 	bls.w	8005320 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x39c>
 8005086:	eddf 7aae 	vldr	s15, [pc, #696]	; 8005340 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3bc>
 800508a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	f240 8147 	bls.w	8005324 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3a0>
 8005096:	eddf 7aab 	vldr	s15, [pc, #684]	; 8005344 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c0>
 800509a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	f240 8141 	bls.w	8005328 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3a4>
 80050a6:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c4>
 80050aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	f240 813b 	bls.w	800532c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3a8>
 80050b6:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800534c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c8>
 80050ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	bf94      	ite	ls
 80050c4:	2309      	movls	r3, #9
 80050c6:	230a      	movhi	r3, #10
 80050c8:	e11e      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80050ca:	2100      	movs	r1, #0
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fcae 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f43f af7d 	beq.w	8004fd2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
 80050d8:	e00d      	b.n	80050f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x172>
        val2.xl_hm_mode = 0U;
 80050da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050de:	f36f 1304 	bfc	r3, #4, #1
 80050e2:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80050e6:	2301      	movs	r3, #1
 80050e8:	aa01      	add	r2, sp, #4
 80050ea:	2115      	movs	r1, #21
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 faac 	bl	800564a <lsm6dso_write_reg>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d089      	beq.n	800500a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x86>
        return LSM6DSO_ERROR;
 80050f6:	f04f 30ff 	mov.w	r0, #4294967295
 80050fa:	e753      	b.n	8004fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050fc:	f100 0520 	add.w	r5, r0, #32
 8005100:	2301      	movs	r3, #1
 8005102:	466a      	mov	r2, sp
 8005104:	2114      	movs	r1, #20
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fa9a 	bl	8005640 <lsm6dso_read_reg>
 800510c:	2800      	cmp	r0, #0
 800510e:	d13e      	bne.n	800518e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20a>
      if (val1.xl_ulp_en != 0U)
 8005110:	f99d 3000 	ldrsb.w	r3, [sp]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da10      	bge.n	800513a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1b6>
        if (pObj->acc_is_enabled == 1U)
 8005118:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800511c:	2b01      	cmp	r3, #1
 800511e:	d023      	beq.n	8005168 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
        val1.xl_ulp_en = 0;
 8005120:	f89d 3000 	ldrb.w	r3, [sp]
 8005124:	f36f 13c7 	bfc	r3, #7, #1
 8005128:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800512c:	2301      	movs	r3, #1
 800512e:	466a      	mov	r2, sp
 8005130:	2114      	movs	r1, #20
 8005132:	4628      	mov	r0, r5
 8005134:	f000 fa89 	bl	800564a <lsm6dso_write_reg>
 8005138:	bb48      	cbnz	r0, 800518e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20a>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800513a:	2301      	movs	r3, #1
 800513c:	aa01      	add	r2, sp, #4
 800513e:	2115      	movs	r1, #21
 8005140:	4628      	mov	r0, r5
 8005142:	f000 fa7d 	bl	8005640 <lsm6dso_read_reg>
 8005146:	bb10      	cbnz	r0, 800518e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20a>
      if (val2.xl_hm_mode == 0U)
 8005148:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800514c:	f013 0f10 	tst.w	r3, #16
 8005150:	d011      	beq.n	8005176 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f2>
      if (newOdr > 208.0f)
 8005152:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800533c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b8>
 8005156:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	f77f af5d 	ble.w	800501c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x98>
        newOdr = 208.0f;
 8005162:	eeb0 8a67 	vmov.f32	s16, s15
 8005166:	e759      	b.n	800501c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x98>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005168:	2100      	movs	r1, #0
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fc5f 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0d5      	beq.n	8005120 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x19c>
 8005174:	e00b      	b.n	800518e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20a>
        val2.xl_hm_mode = 1U;
 8005176:	f043 0310 	orr.w	r3, r3, #16
 800517a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800517e:	2301      	movs	r3, #1
 8005180:	aa01      	add	r2, sp, #4
 8005182:	2115      	movs	r1, #21
 8005184:	4628      	mov	r0, r5
 8005186:	f000 fa60 	bl	800564a <lsm6dso_write_reg>
 800518a:	2800      	cmp	r0, #0
 800518c:	d0e1      	beq.n	8005152 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ce>
        return LSM6DSO_ERROR;
 800518e:	f04f 30ff 	mov.w	r0, #4294967295
 8005192:	e707      	b.n	8004fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005194:	f100 0520 	add.w	r5, r0, #32
 8005198:	2301      	movs	r3, #1
 800519a:	aa01      	add	r2, sp, #4
 800519c:	2115      	movs	r1, #21
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 fa4e 	bl	8005640 <lsm6dso_read_reg>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d143      	bne.n	8005230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
      if (val2.xl_hm_mode != 0U)
 80051a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051ac:	f013 0f10 	tst.w	r3, #16
 80051b0:	d12a      	bne.n	8005208 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x284>
      if (pObj->gyro_is_enabled == 1U)
 80051b2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d035      	beq.n	8005226 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80051ba:	2301      	movs	r3, #1
 80051bc:	466a      	mov	r2, sp
 80051be:	2114      	movs	r1, #20
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 fa3d 	bl	8005640 <lsm6dso_read_reg>
 80051c6:	bb98      	cbnz	r0, 8005230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
      if (val1.xl_ulp_en == 0U)
 80051c8:	f99d 3000 	ldrsb.w	r3, [sp]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	db10      	blt.n	80051f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x26e>
        if (pObj->acc_is_enabled == 1U)
 80051d0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d02e      	beq.n	8005236 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2b2>
        val1.xl_ulp_en = 1U;
 80051d8:	f89d 3000 	ldrb.w	r3, [sp]
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80051e4:	2301      	movs	r3, #1
 80051e6:	466a      	mov	r2, sp
 80051e8:	2114      	movs	r1, #20
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 fa2d 	bl	800564a <lsm6dso_write_reg>
 80051f0:	b9f0      	cbnz	r0, 8005230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
      if (newOdr > 208.0f)
 80051f2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800533c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b8>
 80051f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	f77f af0d 	ble.w	800501c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x98>
        newOdr = 208.0f;
 8005202:	eeb0 8a67 	vmov.f32	s16, s15
 8005206:	e709      	b.n	800501c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x98>
        val2.xl_hm_mode = 0U;
 8005208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800520c:	f36f 1304 	bfc	r3, #4, #1
 8005210:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005214:	2301      	movs	r3, #1
 8005216:	aa01      	add	r2, sp, #4
 8005218:	2115      	movs	r1, #21
 800521a:	4628      	mov	r0, r5
 800521c:	f000 fa15 	bl	800564a <lsm6dso_write_reg>
 8005220:	2800      	cmp	r0, #0
 8005222:	d0c6      	beq.n	80051b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22e>
 8005224:	e004      	b.n	8005230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff fd74 	bl	8004d14 <LSM6DSO_GYRO_Disable>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0c4      	beq.n	80051ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x236>
        return LSM6DSO_ERROR;
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e6b6      	b.n	8004fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005236:	2100      	movs	r1, #0
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fbf8 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 800523e:	2800      	cmp	r0, #0
 8005240:	d0ca      	beq.n	80051d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x254>
 8005242:	e7f5      	b.n	8005230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005244:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8005330 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3ac>
 8005248:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005250:	d941      	bls.n	80052d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x352>
 8005252:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005256:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525e:	d93b      	bls.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 8005260:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8005264:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d93d      	bls.n	80052ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x366>
 800526e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005334 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b0>
 8005272:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527a:	d938      	bls.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x36a>
 800527c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005338 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b4>
 8005280:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	d933      	bls.n	80052f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x36e>
 800528a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800533c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3b8>
 800528e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	d92e      	bls.n	80052f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x372>
 8005298:	eddf 7a29 	vldr	s15, [pc, #164]	; 8005340 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3bc>
 800529c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d929      	bls.n	80052fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x376>
 80052a6:	eddf 7a27 	vldr	s15, [pc, #156]	; 8005344 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c0>
 80052aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b2:	d924      	bls.n	80052fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x37a>
 80052b4:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c4>
 80052b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	d91f      	bls.n	8005302 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x37e>
 80052c2:	eddf 7a22 	vldr	s15, [pc, #136]	; 800534c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x3c8>
 80052c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	bf94      	ite	ls
 80052d0:	2109      	movls	r1, #9
 80052d2:	210a      	movhi	r1, #10
 80052d4:	e000      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052d6:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80052d8:	f104 0020 	add.w	r0, r4, #32
 80052dc:	f000 fba7 	bl	8005a2e <lsm6dso_xl_data_rate_set>
 80052e0:	3800      	subs	r0, #0
 80052e2:	bf18      	it	ne
 80052e4:	2001      	movne	r0, #1
 80052e6:	4240      	negs	r0, r0
 80052e8:	e65c      	b.n	8004fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80052ea:	2102      	movs	r1, #2
 80052ec:	e7f4      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052ee:	2103      	movs	r1, #3
 80052f0:	e7f2      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052f2:	2104      	movs	r1, #4
 80052f4:	e7f0      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052f6:	2105      	movs	r1, #5
 80052f8:	e7ee      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052fa:	2106      	movs	r1, #6
 80052fc:	e7ec      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 80052fe:	2107      	movs	r1, #7
 8005300:	e7ea      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
 8005302:	2108      	movs	r1, #8
 8005304:	e7e8      	b.n	80052d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x354>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005306:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005308:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800530c:	2000      	movs	r0, #0
 800530e:	e649      	b.n	8004fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005310:	2301      	movs	r3, #1
 8005312:	e7f9      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005314:	2302      	movs	r3, #2
 8005316:	e7f7      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005318:	2303      	movs	r3, #3
 800531a:	e7f5      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 800531c:	2304      	movs	r3, #4
 800531e:	e7f3      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005320:	2305      	movs	r3, #5
 8005322:	e7f1      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005324:	2306      	movs	r3, #6
 8005326:	e7ef      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005328:	2307      	movs	r3, #7
 800532a:	e7ed      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 800532c:	2308      	movs	r3, #8
 800532e:	e7eb      	b.n	8005308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x384>
 8005330:	3fcccccd 	.word	0x3fcccccd
 8005334:	42500000 	.word	0x42500000
 8005338:	42d00000 	.word	0x42d00000
 800533c:	43500000 	.word	0x43500000
 8005340:	43d08000 	.word	0x43d08000
 8005344:	44504000 	.word	0x44504000
 8005348:	44d06000 	.word	0x44d06000
 800534c:	45505000 	.word	0x45505000

08005350 <LSM6DSO_ACC_SetOutputDataRate>:
{
 8005350:	b508      	push	{r3, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005352:	2100      	movs	r1, #0
 8005354:	f7ff fe16 	bl	8004f84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
}
 8005358:	bd08      	pop	{r3, pc}
	...

0800535c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
{
 800535c:	b530      	push	{r4, r5, lr}
 800535e:	ed2d 8b02 	vpush	{d8}
 8005362:	b083      	sub	sp, #12
 8005364:	4604      	mov	r4, r0
 8005366:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 800536a:	b139      	cbz	r1, 800537c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x20>
 800536c:	2901      	cmp	r1, #1
 800536e:	d073      	beq.n	8005458 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xfc>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005374:	b003      	add	sp, #12
 8005376:	ecbd 8b02 	vpop	{d8}
 800537a:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800537c:	f100 0520 	add.w	r5, r0, #32
 8005380:	2301      	movs	r3, #1
 8005382:	aa01      	add	r2, sp, #4
 8005384:	2116      	movs	r1, #22
 8005386:	4628      	mov	r0, r5
 8005388:	f000 f95a 	bl	8005640 <lsm6dso_read_reg>
 800538c:	2800      	cmp	r0, #0
 800538e:	d160      	bne.n	8005452 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
      if (val1.g_hm_mode != 0U)
 8005390:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	db4e      	blt.n	8005436 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xda>
  if (pObj->gyro_is_enabled == 1U)
 8005398:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 800539c:	2901      	cmp	r1, #1
 800539e:	f000 8083 	beq.w	80054a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x14c>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80053a2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80053a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	f240 80d3 	bls.w	8005558 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fc>
 80053b2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80053b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	f240 80d0 	bls.w	8005562 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x206>
 80053c2:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8005580 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x224>
 80053c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	f240 80ca 	bls.w	8005566 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x20a>
 80053d2:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8005584 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x228>
 80053d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	f240 80c4 	bls.w	800556a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x20e>
 80053e2:	eddf 7a69 	vldr	s15, [pc, #420]	; 8005588 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22c>
 80053e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	f240 80be 	bls.w	800556e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x212>
 80053f2:	eddf 7a66 	vldr	s15, [pc, #408]	; 800558c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x230>
 80053f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	f240 80b8 	bls.w	8005572 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x216>
 8005402:	eddf 7a63 	vldr	s15, [pc, #396]	; 8005590 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x234>
 8005406:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540e:	f240 80b2 	bls.w	8005576 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x21a>
 8005412:	eddf 7a60 	vldr	s15, [pc, #384]	; 8005594 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x238>
 8005416:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	f240 80ac 	bls.w	800557a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x21e>
 8005422:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8005598 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x23c>
 8005426:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	bf94      	ite	ls
 8005430:	2309      	movls	r3, #9
 8005432:	230a      	movhi	r3, #10
 8005434:	e091      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
        val1.g_hm_mode = 0U;
 8005436:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800543a:	f36f 13c7 	bfc	r3, #7, #1
 800543e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005442:	2301      	movs	r3, #1
 8005444:	aa01      	add	r2, sp, #4
 8005446:	2116      	movs	r1, #22
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f8fe 	bl	800564a <lsm6dso_write_reg>
 800544e:	2800      	cmp	r0, #0
 8005450:	d0a2      	beq.n	8005398 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3c>
        return LSM6DSO_ERROR;
 8005452:	f04f 30ff 	mov.w	r0, #4294967295
 8005456:	e78d      	b.n	8005374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005458:	f100 0520 	add.w	r5, r0, #32
 800545c:	2301      	movs	r3, #1
 800545e:	aa01      	add	r2, sp, #4
 8005460:	2116      	movs	r1, #22
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f8ec 	bl	8005640 <lsm6dso_read_reg>
 8005468:	b9d8      	cbnz	r0, 80054a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x146>
      if (val1.g_hm_mode == 0U)
 800546a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	da09      	bge.n	8005486 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x12a>
      if (newOdr > 208.0f)
 8005472:	eddf 7a45 	vldr	s15, [pc, #276]	; 8005588 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22c>
 8005476:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	dd8b      	ble.n	8005398 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3c>
        newOdr = 208.0f;
 8005480:	eeb0 8a67 	vmov.f32	s16, s15
 8005484:	e788      	b.n	8005398 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3c>
        val1.g_hm_mode = 1U;
 8005486:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005492:	2301      	movs	r3, #1
 8005494:	aa01      	add	r2, sp, #4
 8005496:	2116      	movs	r1, #22
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f8d6 	bl	800564a <lsm6dso_write_reg>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d0e7      	beq.n	8005472 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x116>
        return LSM6DSO_ERROR;
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	e765      	b.n	8005374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80054a8:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80054ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	d93b      	bls.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 80054b6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80054ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	d933      	bls.n	800552c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d0>
 80054c4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005580 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x224>
 80054c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d0:	d936      	bls.n	8005540 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1e4>
 80054d2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005584 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x228>
 80054d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d931      	bls.n	8005544 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1e8>
 80054e0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8005588 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22c>
 80054e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ec:	d92c      	bls.n	8005548 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1ec>
 80054ee:	eddf 7a27 	vldr	s15, [pc, #156]	; 800558c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x230>
 80054f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	d927      	bls.n	800554c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1f0>
 80054fc:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005590 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x234>
 8005500:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d922      	bls.n	8005550 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1f4>
 800550a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8005594 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x238>
 800550e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005516:	d91d      	bls.n	8005554 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1f8>
 8005518:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005598 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x23c>
 800551c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005524:	bf94      	ite	ls
 8005526:	2109      	movls	r1, #9
 8005528:	210a      	movhi	r1, #10
 800552a:	e000      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 800552c:	2102      	movs	r1, #2
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800552e:	f104 0020 	add.w	r0, r4, #32
 8005532:	f000 faf3 	bl	8005b1c <lsm6dso_gy_data_rate_set>
 8005536:	3800      	subs	r0, #0
 8005538:	bf18      	it	ne
 800553a:	2001      	movne	r0, #1
 800553c:	4240      	negs	r0, r0
 800553e:	e719      	b.n	8005374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005540:	2103      	movs	r1, #3
 8005542:	e7f4      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 8005544:	2104      	movs	r1, #4
 8005546:	e7f2      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 8005548:	2105      	movs	r1, #5
 800554a:	e7f0      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 800554c:	2106      	movs	r1, #6
 800554e:	e7ee      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 8005550:	2107      	movs	r1, #7
 8005552:	e7ec      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
 8005554:	2108      	movs	r1, #8
 8005556:	e7ea      	b.n	800552e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1d2>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005558:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800555a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800555e:	2000      	movs	r0, #0
 8005560:	e708      	b.n	8005374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005562:	2302      	movs	r3, #2
 8005564:	e7f9      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 8005566:	2303      	movs	r3, #3
 8005568:	e7f7      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 800556a:	2304      	movs	r3, #4
 800556c:	e7f5      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 800556e:	2305      	movs	r3, #5
 8005570:	e7f3      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 8005572:	2306      	movs	r3, #6
 8005574:	e7f1      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 8005576:	2307      	movs	r3, #7
 8005578:	e7ef      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 800557a:	2308      	movs	r3, #8
 800557c:	e7ed      	b.n	800555a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x1fe>
 800557e:	bf00      	nop
 8005580:	42500000 	.word	0x42500000
 8005584:	42d00000 	.word	0x42d00000
 8005588:	43500000 	.word	0x43500000
 800558c:	43d08000 	.word	0x43d08000
 8005590:	44504000 	.word	0x44504000
 8005594:	44d06000 	.word	0x44d06000
 8005598:	45505000 	.word	0x45505000

0800559c <LSM6DSO_GYRO_SetOutputDataRate>:
{
 800559c:	b508      	push	{r3, lr}
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800559e:	2100      	movs	r1, #0
 80055a0:	f7ff fedc 	bl	800535c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
}
 80055a4:	bd08      	pop	{r3, pc}

080055a6 <LSM6DSO_Write_Reg>:
{
 80055a6:	b500      	push	{lr}
 80055a8:	b083      	sub	sp, #12
 80055aa:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80055ae:	2301      	movs	r3, #1
 80055b0:	f10d 0207 	add.w	r2, sp, #7
 80055b4:	3020      	adds	r0, #32
 80055b6:	f000 f848 	bl	800564a <lsm6dso_write_reg>
 80055ba:	3800      	subs	r0, #0
 80055bc:	bf18      	it	ne
 80055be:	2001      	movne	r0, #1
}
 80055c0:	4240      	negs	r0, r0
 80055c2:	b003      	add	sp, #12
 80055c4:	f85d fb04 	ldr.w	pc, [sp], #4

080055c8 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d02b      	beq.n	8005624 <LSM6DSO_RegisterBusIO+0x5c>
{
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80055d4:	684a      	ldr	r2, [r1, #4]
 80055d6:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80055d8:	688a      	ldr	r2, [r1, #8]
 80055da:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80055dc:	7b0a      	ldrb	r2, [r1, #12]
 80055de:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80055e0:	690a      	ldr	r2, [r1, #16]
 80055e2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80055e4:	694a      	ldr	r2, [r1, #20]
 80055e6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80055e8:	698a      	ldr	r2, [r1, #24]
 80055ea:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80055ec:	4a12      	ldr	r2, [pc, #72]	; (8005638 <LSM6DSO_RegisterBusIO+0x70>)
 80055ee:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80055f0:	4a12      	ldr	r2, [pc, #72]	; (800563c <LSM6DSO_RegisterBusIO+0x74>)
 80055f2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80055f4:	69ca      	ldr	r2, [r1, #28]
 80055f6:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80055f8:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 80055fa:	b1b3      	cbz	r3, 800562a <LSM6DSO_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80055fc:	4798      	blx	r3
 80055fe:	b9b8      	cbnz	r0, 8005630 <LSM6DSO_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005600:	68a3      	ldr	r3, [r4, #8]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d000      	beq.n	8005608 <LSM6DSO_RegisterBusIO+0x40>
}
 8005606:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8005608:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1fa      	bne.n	8005606 <LSM6DSO_RegisterBusIO+0x3e>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005610:	220c      	movs	r2, #12
 8005612:	2112      	movs	r1, #18
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff ffc6 	bl	80055a6 <LSM6DSO_Write_Reg>
 800561a:	3800      	subs	r0, #0
 800561c:	bf18      	it	ne
 800561e:	2001      	movne	r0, #1
 8005620:	4240      	negs	r0, r0
 8005622:	e7f0      	b.n	8005606 <LSM6DSO_RegisterBusIO+0x3e>
    ret = LSM6DSO_ERROR;
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005628:	4770      	bx	lr
      ret = LSM6DSO_ERROR;
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	e7ea      	b.n	8005606 <LSM6DSO_RegisterBusIO+0x3e>
      ret = LSM6DSO_ERROR;
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005634:	e7e7      	b.n	8005606 <LSM6DSO_RegisterBusIO+0x3e>
 8005636:	bf00      	nop
 8005638:	0800496d 	.word	0x0800496d
 800563c:	08004977 	.word	0x08004977

08005640 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005640:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005642:	6844      	ldr	r4, [r0, #4]
 8005644:	68c0      	ldr	r0, [r0, #12]
 8005646:	47a0      	blx	r4

  return ret;
}
 8005648:	bd10      	pop	{r4, pc}

0800564a <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800564a:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800564c:	6804      	ldr	r4, [r0, #0]
 800564e:	68c0      	ldr	r0, [r0, #12]
 8005650:	47a0      	blx	r4

  return ret;
}
 8005652:	bd10      	pop	{r4, pc}

08005654 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005654:	b530      	push	{r4, r5, lr}
 8005656:	b083      	sub	sp, #12
 8005658:	4604      	mov	r4, r0
 800565a:	460d      	mov	r5, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800565c:	2301      	movs	r3, #1
 800565e:	aa01      	add	r2, sp, #4
 8005660:	2110      	movs	r1, #16
 8005662:	f7ff ffed 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 8005666:	b108      	cbz	r0, 800566c <lsm6dso_xl_full_scale_set+0x18>
    reg.fs_xl = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005668:	b003      	add	sp, #12
 800566a:	bd30      	pop	{r4, r5, pc}
    reg.fs_xl = (uint8_t) val;
 800566c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005670:	f365 0383 	bfi	r3, r5, #2, #2
 8005674:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005678:	2301      	movs	r3, #1
 800567a:	aa01      	add	r2, sp, #4
 800567c:	2110      	movs	r1, #16
 800567e:	4620      	mov	r0, r4
 8005680:	f7ff ffe3 	bl	800564a <lsm6dso_write_reg>
  return ret;
 8005684:	e7f0      	b.n	8005668 <lsm6dso_xl_full_scale_set+0x14>

08005686 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005686:	b510      	push	{r4, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800568c:	2301      	movs	r3, #1
 800568e:	aa01      	add	r2, sp, #4
 8005690:	2110      	movs	r1, #16
 8005692:	f7ff ffd5 	bl	8005640 <lsm6dso_read_reg>

  switch (reg.fs_xl)
 8005696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800569a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d008      	beq.n	80056b4 <lsm6dso_xl_full_scale_get+0x2e>
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d008      	beq.n	80056b8 <lsm6dso_xl_full_scale_get+0x32>
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	bf14      	ite	ne
 80056aa:	2300      	movne	r3, #0
 80056ac:	2301      	moveq	r3, #1
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80056ae:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 80056b0:	b002      	add	sp, #8
 80056b2:	bd10      	pop	{r4, pc}
  switch (reg.fs_xl)
 80056b4:	2302      	movs	r3, #2
 80056b6:	e7fa      	b.n	80056ae <lsm6dso_xl_full_scale_get+0x28>
 80056b8:	2303      	movs	r3, #3
 80056ba:	e7f8      	b.n	80056ae <lsm6dso_xl_full_scale_get+0x28>

080056bc <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80056bc:	b510      	push	{r4, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80056c2:	2301      	movs	r3, #1
 80056c4:	aa01      	add	r2, sp, #4
 80056c6:	2110      	movs	r1, #16
 80056c8:	f7ff ffba 	bl	8005640 <lsm6dso_read_reg>

  switch (reg.odr_xl)
 80056cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	3b01      	subs	r3, #1
 80056d4:	2b0a      	cmp	r3, #10
 80056d6:	d807      	bhi.n	80056e8 <lsm6dso_xl_data_rate_get+0x2c>
 80056d8:	e8df f003 	tbb	[pc, r3]
 80056dc:	0c0a081c 	.word	0x0c0a081c
 80056e0:	1412100e 	.word	0x1412100e
 80056e4:	1816      	.short	0x1816
 80056e6:	1a          	.byte	0x1a
 80056e7:	00          	.byte	0x00
 80056e8:	2300      	movs	r3, #0
 80056ea:	e014      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>
      *val = LSM6DSO_XL_ODR_12Hz5;
      break;

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
      break;
 80056ec:	2302      	movs	r3, #2
 80056ee:	e012      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
      break;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e010      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
      break;
 80056f4:	2304      	movs	r3, #4
 80056f6:	e00e      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
      break;
 80056f8:	2305      	movs	r3, #5
 80056fa:	e00c      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
      break;
 80056fc:	2306      	movs	r3, #6
 80056fe:	e00a      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
      break;
 8005700:	2307      	movs	r3, #7
 8005702:	e008      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
      break;
 8005704:	2308      	movs	r3, #8
 8005706:	e006      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
      break;
 8005708:	2309      	movs	r3, #9
 800570a:	e004      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
      break;
 800570c:	230a      	movs	r3, #10
 800570e:	e002      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
      break;
 8005710:	230b      	movs	r3, #11
 8005712:	e000      	b.n	8005716 <lsm6dso_xl_data_rate_get+0x5a>
  switch (reg.odr_xl)
 8005714:	2301      	movs	r3, #1
      *val = LSM6DSO_XL_ODR_OFF;
 8005716:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8005718:	b002      	add	sp, #8
 800571a:	bd10      	pop	{r4, pc}

0800571c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800571c:	b530      	push	{r4, r5, lr}
 800571e:	b083      	sub	sp, #12
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005724:	2301      	movs	r3, #1
 8005726:	aa01      	add	r2, sp, #4
 8005728:	2111      	movs	r1, #17
 800572a:	f7ff ff89 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 800572e:	b108      	cbz	r0, 8005734 <lsm6dso_gy_full_scale_set+0x18>
    reg.fs_g = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
    reg.fs_g = (uint8_t) val;
 8005734:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005738:	f365 0343 	bfi	r3, r5, #1, #3
 800573c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005740:	2301      	movs	r3, #1
 8005742:	aa01      	add	r2, sp, #4
 8005744:	2111      	movs	r1, #17
 8005746:	4620      	mov	r0, r4
 8005748:	f7ff ff7f 	bl	800564a <lsm6dso_write_reg>
  return ret;
 800574c:	e7f0      	b.n	8005730 <lsm6dso_gy_full_scale_set+0x14>

0800574e <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800574e:	b510      	push	{r4, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005754:	2301      	movs	r3, #1
 8005756:	aa01      	add	r2, sp, #4
 8005758:	2111      	movs	r1, #17
 800575a:	f7ff ff71 	bl	8005640 <lsm6dso_read_reg>

  switch (reg.fs_g)
 800575e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005762:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005766:	3b01      	subs	r3, #1
 8005768:	2b05      	cmp	r3, #5
 800576a:	d804      	bhi.n	8005776 <lsm6dso_gy_full_scale_get+0x28>
 800576c:	e8df f003 	tbb	[pc, r3]
 8005770:	0903070d 	.word	0x0903070d
 8005774:	0b03      	.short	0x0b03
 8005776:	2300      	movs	r3, #0
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005778:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 800577a:	b002      	add	sp, #8
 800577c:	bd10      	pop	{r4, pc}
      break;
 800577e:	2302      	movs	r3, #2
 8005780:	e7fa      	b.n	8005778 <lsm6dso_gy_full_scale_get+0x2a>
      break;
 8005782:	2304      	movs	r3, #4
 8005784:	e7f8      	b.n	8005778 <lsm6dso_gy_full_scale_get+0x2a>
      break;
 8005786:	2306      	movs	r3, #6
 8005788:	e7f6      	b.n	8005778 <lsm6dso_gy_full_scale_get+0x2a>
  switch (reg.fs_g)
 800578a:	2301      	movs	r3, #1
 800578c:	e7f4      	b.n	8005778 <lsm6dso_gy_full_scale_get+0x2a>

0800578e <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800578e:	b510      	push	{r4, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005794:	2301      	movs	r3, #1
 8005796:	aa01      	add	r2, sp, #4
 8005798:	2111      	movs	r1, #17
 800579a:	f7ff ff51 	bl	8005640 <lsm6dso_read_reg>

  switch (reg.odr_g)
 800579e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	3b01      	subs	r3, #1
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d806      	bhi.n	80057b8 <lsm6dso_gy_data_rate_get+0x2a>
 80057aa:	e8df f003 	tbb	[pc, r3]
 80057ae:	0719      	.short	0x0719
 80057b0:	0f0d0b09 	.word	0x0f0d0b09
 80057b4:	17151311 	.word	0x17151311
 80057b8:	2300      	movs	r3, #0
 80057ba:	e012      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>
      *val = LSM6DSO_GY_ODR_12Hz5;
      break;

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
      break;
 80057bc:	2302      	movs	r3, #2
 80057be:	e010      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
      break;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e00e      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
      break;
 80057c4:	2304      	movs	r3, #4
 80057c6:	e00c      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
      break;
 80057c8:	2305      	movs	r3, #5
 80057ca:	e00a      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
      break;
 80057cc:	2306      	movs	r3, #6
 80057ce:	e008      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
      break;
 80057d0:	2307      	movs	r3, #7
 80057d2:	e006      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
      break;
 80057d4:	2308      	movs	r3, #8
 80057d6:	e004      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
      break;
 80057d8:	2309      	movs	r3, #9
 80057da:	e002      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
      break;
 80057dc:	230a      	movs	r3, #10
 80057de:	e000      	b.n	80057e2 <lsm6dso_gy_data_rate_get+0x54>
  switch (reg.odr_g)
 80057e0:	2301      	movs	r3, #1
      *val = LSM6DSO_GY_ODR_OFF;
 80057e2:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 80057e4:	b002      	add	sp, #8
 80057e6:	bd10      	pop	{r4, pc}

080057e8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057e8:	b530      	push	{r4, r5, lr}
 80057ea:	b083      	sub	sp, #12
 80057ec:	4604      	mov	r4, r0
 80057ee:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80057f0:	2301      	movs	r3, #1
 80057f2:	aa01      	add	r2, sp, #4
 80057f4:	2112      	movs	r1, #18
 80057f6:	f7ff ff23 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 80057fa:	b108      	cbz	r0, 8005800 <lsm6dso_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8005800:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005804:	f365 1386 	bfi	r3, r5, #6, #1
 8005808:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800580c:	2301      	movs	r3, #1
 800580e:	aa01      	add	r2, sp, #4
 8005810:	2112      	movs	r1, #18
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff ff19 	bl	800564a <lsm6dso_write_reg>
  return ret;
 8005818:	e7f0      	b.n	80057fc <lsm6dso_block_data_update_set+0x14>

0800581a <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800581a:	b510      	push	{r4, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005820:	2306      	movs	r3, #6
 8005822:	466a      	mov	r2, sp
 8005824:	2122      	movs	r1, #34	; 0x22
 8005826:	f7ff ff0b 	bl	8005640 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800582a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800582e:	f89d 3000 	ldrb.w	r3, [sp]
 8005832:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005836:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005838:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800583c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005840:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005844:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800584a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800584e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005852:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8005854:	b002      	add	sp, #8
 8005856:	bd10      	pop	{r4, pc}

08005858 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005858:	b510      	push	{r4, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800585e:	2306      	movs	r3, #6
 8005860:	466a      	mov	r2, sp
 8005862:	2128      	movs	r1, #40	; 0x28
 8005864:	f7ff feec 	bl	8005640 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005868:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800586c:	f89d 3000 	ldrb.w	r3, [sp]
 8005870:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005874:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005876:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800587a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800587e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005882:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005884:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005888:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800588c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005890:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8005892:	b002      	add	sp, #8
 8005894:	bd10      	pop	{r4, pc}

08005896 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005896:	b530      	push	{r4, r5, lr}
 8005898:	b083      	sub	sp, #12
 800589a:	4604      	mov	r4, r0
 800589c:	460d      	mov	r5, r1
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800589e:	2301      	movs	r3, #1
 80058a0:	aa01      	add	r2, sp, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	f7ff fecc 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 80058a8:	b108      	cbz	r0, 80058ae <lsm6dso_mem_bank_set+0x18>
    reg.reg_access = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80058aa:	b003      	add	sp, #12
 80058ac:	bd30      	pop	{r4, r5, pc}
    reg.reg_access = (uint8_t)val;
 80058ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058b2:	f365 1387 	bfi	r3, r5, #6, #2
 80058b6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80058ba:	2301      	movs	r3, #1
 80058bc:	aa01      	add	r2, sp, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4620      	mov	r0, r4
 80058c2:	f7ff fec2 	bl	800564a <lsm6dso_write_reg>
  return ret;
 80058c6:	e7f0      	b.n	80058aa <lsm6dso_mem_bank_set+0x14>

080058c8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80058c8:	b508      	push	{r3, lr}
 80058ca:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80058cc:	2301      	movs	r3, #1
 80058ce:	210f      	movs	r1, #15
 80058d0:	f7ff feb6 	bl	8005640 <lsm6dso_read_reg>

  return ret;
}
 80058d4:	bd08      	pop	{r3, pc}

080058d6 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058d6:	b530      	push	{r4, r5, lr}
 80058d8:	b083      	sub	sp, #12
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80058de:	2301      	movs	r3, #1
 80058e0:	aa01      	add	r2, sp, #4
 80058e2:	2112      	movs	r1, #18
 80058e4:	f7ff feac 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 80058e8:	b108      	cbz	r0, 80058ee <lsm6dso_auto_increment_set+0x18>
    reg.if_inc = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80058ea:	b003      	add	sp, #12
 80058ec:	bd30      	pop	{r4, r5, pc}
    reg.if_inc = val;
 80058ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058f2:	f365 0382 	bfi	r3, r5, #2, #1
 80058f6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80058fa:	2301      	movs	r3, #1
 80058fc:	aa01      	add	r2, sp, #4
 80058fe:	2112      	movs	r1, #18
 8005900:	4620      	mov	r0, r4
 8005902:	f7ff fea2 	bl	800564a <lsm6dso_write_reg>
  return ret;
 8005906:	e7f0      	b.n	80058ea <lsm6dso_auto_increment_set+0x14>

08005908 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005908:	b530      	push	{r4, r5, lr}
 800590a:	b083      	sub	sp, #12
 800590c:	4605      	mov	r5, r0
 800590e:	460c      	mov	r4, r1
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005910:	2301      	movs	r3, #1
 8005912:	466a      	mov	r2, sp
 8005914:	2118      	movs	r1, #24
 8005916:	f7ff fe93 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 800591a:	4603      	mov	r3, r0
 800591c:	b110      	cbz	r0, 8005924 <lsm6dso_i3c_disable_set+0x1c>
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 800591e:	4618      	mov	r0, r3
 8005920:	b003      	add	sp, #12
 8005922:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005924:	09e3      	lsrs	r3, r4, #7
 8005926:	f89d 2000 	ldrb.w	r2, [sp]
 800592a:	f363 0241 	bfi	r2, r3, #1, #1
 800592e:	f88d 2000 	strb.w	r2, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005932:	2301      	movs	r3, #1
 8005934:	466a      	mov	r2, sp
 8005936:	2118      	movs	r1, #24
 8005938:	4628      	mov	r0, r5
 800593a:	f7ff fe86 	bl	800564a <lsm6dso_write_reg>
  if (ret == 0)
 800593e:	4603      	mov	r3, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	d1ec      	bne.n	800591e <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005944:	2301      	movs	r3, #1
 8005946:	aa01      	add	r2, sp, #4
 8005948:	2162      	movs	r1, #98	; 0x62
 800594a:	4628      	mov	r0, r5
 800594c:	f7ff fe78 	bl	8005640 <lsm6dso_read_reg>
  if (ret == 0)
 8005950:	4603      	mov	r3, r0
 8005952:	2800      	cmp	r0, #0
 8005954:	d1e3      	bne.n	800591e <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005956:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800595a:	f364 03c4 	bfi	r3, r4, #3, #2
 800595e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005962:	2301      	movs	r3, #1
 8005964:	aa01      	add	r2, sp, #4
 8005966:	2162      	movs	r1, #98	; 0x62
 8005968:	4628      	mov	r0, r5
 800596a:	f7ff fe6e 	bl	800564a <lsm6dso_write_reg>
 800596e:	4603      	mov	r3, r0
  return ret;
 8005970:	e7d5      	b.n	800591e <lsm6dso_i3c_disable_set+0x16>

08005972 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005972:	b530      	push	{r4, r5, lr}
 8005974:	b083      	sub	sp, #12
 8005976:	4604      	mov	r4, r0
 8005978:	460d      	mov	r5, r1
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800597a:	2301      	movs	r3, #1
 800597c:	aa01      	add	r2, sp, #4
 800597e:	210a      	movs	r1, #10
 8005980:	f7ff fe5e 	bl	8005640 <lsm6dso_read_reg>

  if (ret == 0)
 8005984:	b108      	cbz	r0, 800598a <lsm6dso_fifo_mode_set+0x18>
    reg.fifo_mode = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005986:	b003      	add	sp, #12
 8005988:	bd30      	pop	{r4, r5, pc}
    reg.fifo_mode = (uint8_t)val;
 800598a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800598e:	f365 0302 	bfi	r3, r5, #0, #3
 8005992:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005996:	2301      	movs	r3, #1
 8005998:	aa01      	add	r2, sp, #4
 800599a:	210a      	movs	r1, #10
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fe54 	bl	800564a <lsm6dso_write_reg>
  return ret;
 80059a2:	e7f0      	b.n	8005986 <lsm6dso_fifo_mode_set+0x14>

080059a4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80059aa:	2102      	movs	r1, #2
 80059ac:	f7ff ff73 	bl	8005896 <lsm6dso_mem_bank_set>

  if (ret == 0)
 80059b0:	4603      	mov	r3, r0
 80059b2:	b108      	cbz	r0, 80059b8 <lsm6dso_fsm_enable_get+0x14>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80059b8:	2302      	movs	r3, #2
 80059ba:	462a      	mov	r2, r5
 80059bc:	2146      	movs	r1, #70	; 0x46
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fe3e 	bl	8005640 <lsm6dso_read_reg>
  if (ret == 0)
 80059c4:	4603      	mov	r3, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d1f4      	bne.n	80059b4 <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	f7ff ff62 	bl	8005896 <lsm6dso_mem_bank_set>
 80059d2:	4603      	mov	r3, r0
  return ret;
 80059d4:	e7ee      	b.n	80059b4 <lsm6dso_fsm_enable_get+0x10>

080059d6 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80059d6:	b530      	push	{r4, r5, lr}
 80059d8:	b083      	sub	sp, #12
 80059da:	4604      	mov	r4, r0
 80059dc:	460d      	mov	r5, r1
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80059de:	2102      	movs	r1, #2
 80059e0:	f7ff ff59 	bl	8005896 <lsm6dso_mem_bank_set>

  if (ret == 0)
 80059e4:	4603      	mov	r3, r0
 80059e6:	b110      	cbz	r0, 80059ee <lsm6dso_fsm_data_rate_get+0x18>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	b003      	add	sp, #12
 80059ec:	bd30      	pop	{r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80059ee:	2301      	movs	r3, #1
 80059f0:	aa01      	add	r2, sp, #4
 80059f2:	215f      	movs	r1, #95	; 0x5f
 80059f4:	4620      	mov	r0, r4
 80059f6:	f7ff fe23 	bl	8005640 <lsm6dso_read_reg>
  if (ret == 0)
 80059fa:	4603      	mov	r3, r0
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d1f3      	bne.n	80059e8 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
 8005a00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a04:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d00c      	beq.n	8005a26 <lsm6dso_fsm_data_rate_get+0x50>
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d00c      	beq.n	8005a2a <lsm6dso_fsm_data_rate_get+0x54>
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	bf14      	ite	ne
 8005a14:	2300      	movne	r3, #0
 8005a16:	2301      	moveq	r3, #1
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005a18:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f7ff ff3a 	bl	8005896 <lsm6dso_mem_bank_set>
 8005a22:	4603      	mov	r3, r0
  return ret;
 8005a24:	e7e0      	b.n	80059e8 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
 8005a26:	2302      	movs	r3, #2
 8005a28:	e7f6      	b.n	8005a18 <lsm6dso_fsm_data_rate_get+0x42>
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e7f4      	b.n	8005a18 <lsm6dso_fsm_data_rate_get+0x42>

08005a2e <lsm6dso_xl_data_rate_set>:
{
 8005a2e:	b530      	push	{r4, r5, lr}
 8005a30:	b083      	sub	sp, #12
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005a36:	a901      	add	r1, sp, #4
 8005a38:	f7ff ffb4 	bl	80059a4 <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d147      	bne.n	8005ad2 <lsm6dso_xl_data_rate_set+0xa4>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005a46:	f3c2 0300 	ubfx	r3, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005a4a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a4e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005a50:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005a54:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005a56:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005a5a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005a5c:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005a60:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005a62:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005a66:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a68:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a6c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005a70:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005a76:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005a7a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a7c:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005a80:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a82:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005a86:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a88:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005a8c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a8e:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005a92:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005a94:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005a98:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005a9a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm15_en |
 8005a9e:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005aa2:	f013 0f01 	tst.w	r3, #1
 8005aa6:	d117      	bne.n	8005ad8 <lsm6dso_xl_data_rate_set+0xaa>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	466a      	mov	r2, sp
 8005aac:	2110      	movs	r1, #16
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff fdc6 	bl	8005640 <lsm6dso_read_reg>
  if (ret == 0)
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	b960      	cbnz	r0, 8005ad2 <lsm6dso_xl_data_rate_set+0xa4>
    reg.odr_xl = (uint8_t) odr_xl;
 8005ab8:	f89d 3000 	ldrb.w	r3, [sp]
 8005abc:	f365 1307 	bfi	r3, r5, #4, #4
 8005ac0:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	466a      	mov	r2, sp
 8005ac8:	2110      	movs	r1, #16
 8005aca:	4620      	mov	r0, r4
 8005acc:	f7ff fdbd 	bl	800564a <lsm6dso_write_reg>
 8005ad0:	4603      	mov	r3, r0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	b003      	add	sp, #12
 8005ad6:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005ad8:	f10d 0103 	add.w	r1, sp, #3
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7ff ff7a 	bl	80059d6 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1f4      	bne.n	8005ad2 <lsm6dso_xl_data_rate_set+0xa4>
        switch (fsm_odr)
 8005ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d8db      	bhi.n	8005aa8 <lsm6dso_xl_data_rate_set+0x7a>
 8005af0:	e8df f003 	tbb	[pc, r3]
 8005af4:	100b0602 	.word	0x100b0602
            if (val == LSM6DSO_XL_ODR_OFF)
 8005af8:	2d01      	cmp	r5, #1
 8005afa:	bf38      	it	cc
 8005afc:	2501      	movcc	r5, #1
 8005afe:	e7d3      	b.n	8005aa8 <lsm6dso_xl_data_rate_set+0x7a>
            if (val == LSM6DSO_XL_ODR_OFF)
 8005b00:	2d02      	cmp	r5, #2
 8005b02:	bf38      	it	cc
 8005b04:	2502      	movcc	r5, #2
 8005b06:	b2ed      	uxtb	r5, r5
 8005b08:	e7ce      	b.n	8005aa8 <lsm6dso_xl_data_rate_set+0x7a>
            if (val == LSM6DSO_XL_ODR_OFF)
 8005b0a:	2d03      	cmp	r5, #3
 8005b0c:	bf38      	it	cc
 8005b0e:	2503      	movcc	r5, #3
 8005b10:	b2ed      	uxtb	r5, r5
 8005b12:	e7c9      	b.n	8005aa8 <lsm6dso_xl_data_rate_set+0x7a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005b14:	2d03      	cmp	r5, #3
 8005b16:	bf98      	it	ls
 8005b18:	2504      	movls	r5, #4
 8005b1a:	e7c5      	b.n	8005aa8 <lsm6dso_xl_data_rate_set+0x7a>

08005b1c <lsm6dso_gy_data_rate_set>:
{
 8005b1c:	b530      	push	{r4, r5, lr}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	4604      	mov	r4, r0
 8005b22:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005b24:	a901      	add	r1, sp, #4
 8005b26:	f7ff ff3d 	bl	80059a4 <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d147      	bne.n	8005bc0 <lsm6dso_gy_data_rate_set+0xa4>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005b34:	f3c2 0300 	ubfx	r3, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005b38:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b3c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005b3e:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005b42:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005b44:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005b48:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005b4a:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005b4e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005b50:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005b54:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005b56:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005b5a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005b5e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005b60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005b64:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005b68:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b6a:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005b6e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b70:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b74:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b76:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b7a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b7c:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b80:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005b82:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b86:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005b88:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm15_en |
 8005b8c:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b90:	f013 0f01 	tst.w	r3, #1
 8005b94:	d117      	bne.n	8005bc6 <lsm6dso_gy_data_rate_set+0xaa>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b96:	2301      	movs	r3, #1
 8005b98:	466a      	mov	r2, sp
 8005b9a:	2111      	movs	r1, #17
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7ff fd4f 	bl	8005640 <lsm6dso_read_reg>
  if (ret == 0)
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	b960      	cbnz	r0, 8005bc0 <lsm6dso_gy_data_rate_set+0xa4>
    reg.odr_g = (uint8_t) odr_gy;
 8005ba6:	f89d 3000 	ldrb.w	r3, [sp]
 8005baa:	f365 1307 	bfi	r3, r5, #4, #4
 8005bae:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	466a      	mov	r2, sp
 8005bb6:	2111      	movs	r1, #17
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff fd46 	bl	800564a <lsm6dso_write_reg>
 8005bbe:	4603      	mov	r3, r0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	b003      	add	sp, #12
 8005bc4:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005bc6:	f10d 0103 	add.w	r1, sp, #3
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff ff03 	bl	80059d6 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d1f4      	bne.n	8005bc0 <lsm6dso_gy_data_rate_set+0xa4>
        switch (fsm_odr)
 8005bd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d8db      	bhi.n	8005b96 <lsm6dso_gy_data_rate_set+0x7a>
 8005bde:	e8df f003 	tbb	[pc, r3]
 8005be2:	0602      	.short	0x0602
 8005be4:	100b      	.short	0x100b
            if (val == LSM6DSO_GY_ODR_OFF)
 8005be6:	2d01      	cmp	r5, #1
 8005be8:	bf38      	it	cc
 8005bea:	2501      	movcc	r5, #1
 8005bec:	e7d3      	b.n	8005b96 <lsm6dso_gy_data_rate_set+0x7a>
            if (val == LSM6DSO_GY_ODR_OFF)
 8005bee:	2d02      	cmp	r5, #2
 8005bf0:	bf38      	it	cc
 8005bf2:	2502      	movcc	r5, #2
 8005bf4:	b2ed      	uxtb	r5, r5
 8005bf6:	e7ce      	b.n	8005b96 <lsm6dso_gy_data_rate_set+0x7a>
            if (val == LSM6DSO_GY_ODR_OFF)
 8005bf8:	2d03      	cmp	r5, #3
 8005bfa:	bf38      	it	cc
 8005bfc:	2503      	movcc	r5, #3
 8005bfe:	b2ed      	uxtb	r5, r5
 8005c00:	e7c9      	b.n	8005b96 <lsm6dso_gy_data_rate_set+0x7a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005c02:	2d03      	cmp	r5, #3
 8005c04:	bf98      	it	ls
 8005c06:	2504      	movls	r5, #4
 8005c08:	e7c5      	b.n	8005b96 <lsm6dso_gy_data_rate_set+0x7a>

08005c0a <STTS751_GetCapabilities>:
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 0;
 8005c0e:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8005c10:	2301      	movs	r3, #1
 8005c12:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8005c14:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005c16:	2300      	movs	r3, #0
 8005c18:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8005c1a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005c1e:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8005c20:	60cb      	str	r3, [r1, #12]
  return STTS751_OK;
}
 8005c22:	4770      	bx	lr

08005c24 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005c2a:	6880      	ldr	r0, [r0, #8]
 8005c2c:	b9a8      	cbnz	r0, 8005c5a <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8005c2e:	b1c3      	cbz	r3, 8005c62 <ReadRegWrap+0x3e>
 8005c30:	1c50      	adds	r0, r2, #1
 8005c32:	3b01      	subs	r3, #1
 8005c34:	fa10 f983 	uxtah	r9, r0, r3
 8005c38:	4614      	mov	r4, r2
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005c3a:	1a8f      	subs	r7, r1, r2
 8005c3c:	f04f 0801 	mov.w	r8, #1
 8005c40:	1939      	adds	r1, r7, r4
 8005c42:	4643      	mov	r3, r8
 8005c44:	4622      	mov	r2, r4
 8005c46:	b289      	uxth	r1, r1
 8005c48:	7b28      	ldrb	r0, [r5, #12]
 8005c4a:	696e      	ldr	r6, [r5, #20]
 8005c4c:	47b0      	blx	r6
      if (ret != STTS751_OK)
 8005c4e:	4603      	mov	r3, r0
 8005c50:	b948      	cbnz	r0, 8005c66 <ReadRegWrap+0x42>
    for (i = 0; i < Length; i++)
 8005c52:	3401      	adds	r4, #1
 8005c54:	454c      	cmp	r4, r9
 8005c56:	d1f3      	bne.n	8005c40 <ReadRegWrap+0x1c>
 8005c58:	e000      	b.n	8005c5c <ReadRegWrap+0x38>
  int32_t ret = STTS751_OK;
 8005c5a:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = STTS751_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e7fa      	b.n	8005c5c <ReadRegWrap+0x38>
        return STTS751_ERROR;
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	e7f7      	b.n	8005c5c <ReadRegWrap+0x38>

08005c6c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c70:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005c72:	6880      	ldr	r0, [r0, #8]
 8005c74:	b9a8      	cbnz	r0, 8005ca2 <WriteRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8005c76:	b1c3      	cbz	r3, 8005caa <WriteRegWrap+0x3e>
 8005c78:	1c50      	adds	r0, r2, #1
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	fa10 f983 	uxtah	r9, r0, r3
 8005c80:	4614      	mov	r4, r2
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005c82:	1a8f      	subs	r7, r1, r2
 8005c84:	f04f 0801 	mov.w	r8, #1
 8005c88:	1939      	adds	r1, r7, r4
 8005c8a:	4643      	mov	r3, r8
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	b289      	uxth	r1, r1
 8005c90:	7b28      	ldrb	r0, [r5, #12]
 8005c92:	692e      	ldr	r6, [r5, #16]
 8005c94:	47b0      	blx	r6
      if (ret != STTS751_OK)
 8005c96:	4603      	mov	r3, r0
 8005c98:	b948      	cbnz	r0, 8005cae <WriteRegWrap+0x42>
    for (i = 0; i < Length; i++)
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	454c      	cmp	r4, r9
 8005c9e:	d1f3      	bne.n	8005c88 <WriteRegWrap+0x1c>
 8005ca0:	e000      	b.n	8005ca4 <WriteRegWrap+0x38>
  int32_t ret = STTS751_OK;
 8005ca2:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = STTS751_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e7fa      	b.n	8005ca4 <WriteRegWrap+0x38>
        return STTS751_ERROR;
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb2:	e7f7      	b.n	8005ca4 <WriteRegWrap+0x38>

08005cb4 <STTS751_Init>:
{
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8005cb8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005cbc:	b123      	cbz	r3, 8005cc8 <STTS751_Init+0x14>
  pObj->is_initialized = 1;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return STTS751_OK;
 8005cc4:	2000      	movs	r0, #0
}
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8005cc8:	f100 0520 	add.w	r5, r0, #32
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 fa78 	bl	80061c4 <stts751_pin_event_route_set>
 8005cd4:	b980      	cbnz	r0, 8005cf8 <STTS751_Init+0x44>
    pObj->temp_odr = 1.0f;
 8005cd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005cda:	6363      	str	r3, [r4, #52]	; 0x34
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8005cdc:	2103      	movs	r1, #3
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 fa21 	bl	8006126 <stts751_resolution_set>
 8005ce4:	b958      	cbnz	r0, 8005cfe <STTS751_Init+0x4a>
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 f998 	bl	800601e <stts751_temp_data_rate_set>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0e5      	beq.n	8005cbe <STTS751_Init+0xa>
      return STTS751_ERROR;
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	e7e6      	b.n	8005cc6 <STTS751_Init+0x12>
      return STTS751_ERROR;
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	e7e3      	b.n	8005cc6 <STTS751_Init+0x12>
      return STTS751_ERROR;
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005d02:	e7e0      	b.n	8005cc6 <STTS751_Init+0x12>

08005d04 <STTS751_ReadID>:
{
 8005d04:	b510      	push	{r4, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	460c      	mov	r4, r1
  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8005d0a:	a901      	add	r1, sp, #4
 8005d0c:	3020      	adds	r0, #32
 8005d0e:	f000 fa72 	bl	80061f6 <stts751_device_id_get>
 8005d12:	b920      	cbnz	r0, 8005d1e <STTS751_ReadID+0x1a>
  *Id = buf.manufacturer_id;
 8005d14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005d18:	7023      	strb	r3, [r4, #0]
}
 8005d1a:	b002      	add	sp, #8
 8005d1c:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	e7fa      	b.n	8005d1a <STTS751_ReadID+0x16>

08005d24 <STTS751_TEMP_GetOutputDataRate>:
{
 8005d24:	b510      	push	{r4, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	460c      	mov	r4, r1
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8005d2a:	f10d 0107 	add.w	r1, sp, #7
 8005d2e:	3020      	adds	r0, #32
 8005d30:	f000 f9b9 	bl	80060a6 <stts751_temp_data_rate_get>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d13f      	bne.n	8005db8 <STTS751_TEMP_GetOutputDataRate+0x94>
  switch (odr_low_level)
 8005d38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d3c:	2b09      	cmp	r3, #9
 8005d3e:	d808      	bhi.n	8005d52 <STTS751_TEMP_GetOutputDataRate+0x2e>
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d83c      	bhi.n	8005dbe <STTS751_TEMP_GetOutputDataRate+0x9a>
 8005d44:	e8df f003 	tbb	[pc, r3]
 8005d48:	1c181410 	.word	0x1c181410
 8005d4c:	2c282420 	.word	0x2c282420
 8005d50:	3430      	.short	0x3430
 8005d52:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d003      	beq.n	8005d62 <STTS751_TEMP_GetOutputDataRate+0x3e>
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005d5e:	b002      	add	sp, #8
 8005d60:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8005d62:	2300      	movs	r3, #0
 8005d64:	6023      	str	r3, [r4, #0]
      break;
 8005d66:	e7fa      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.0625f;
 8005d68:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8005d6c:	6023      	str	r3, [r4, #0]
      break;
 8005d6e:	e7f6      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.125f;
 8005d70:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8005d74:	6023      	str	r3, [r4, #0]
      break;
 8005d76:	e7f2      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.250f;
 8005d78:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005d7c:	6023      	str	r3, [r4, #0]
      break;
 8005d7e:	e7ee      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.500f;
 8005d80:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8005d84:	6023      	str	r3, [r4, #0]
      break;
 8005d86:	e7ea      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 1.0f;
 8005d88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005d8c:	6023      	str	r3, [r4, #0]
      break;
 8005d8e:	e7e6      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 2.0f;
 8005d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d94:	6023      	str	r3, [r4, #0]
      break;
 8005d96:	e7e2      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 4.0f;
 8005d98:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8005d9c:	6023      	str	r3, [r4, #0]
      break;
 8005d9e:	e7de      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 8.0f;
 8005da0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005da4:	6023      	str	r3, [r4, #0]
      break;
 8005da6:	e7da      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 16.0f;
 8005da8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8005dac:	6023      	str	r3, [r4, #0]
      break;
 8005dae:	e7d6      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 32.0f;
 8005db0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8005db4:	6023      	str	r3, [r4, #0]
      break;
 8005db6:	e7d2      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
    return STTS751_ERROR;
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e7cf      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>
  switch (odr_low_level)
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	e7cc      	b.n	8005d5e <STTS751_TEMP_GetOutputDataRate+0x3a>

08005dc4 <STTS751_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8005dc4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005dc8:	b90b      	cbnz	r3, 8005dce <STTS751_TEMP_Disable+0xa>
    return STTS751_OK;
 8005dca:	2000      	movs	r0, #0
}
 8005dcc:	4770      	bx	lr
{
 8005dce:	b510      	push	{r4, lr}
 8005dd0:	4604      	mov	r4, r0
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8005dd2:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8005dd6:	f7ff ffa5 	bl	8005d24 <STTS751_TEMP_GetOutputDataRate>
 8005dda:	b940      	cbnz	r0, 8005dee <STTS751_TEMP_Disable+0x2a>
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	f104 0020 	add.w	r0, r4, #32
 8005de2:	f000 f91c 	bl	800601e <stts751_temp_data_rate_set>
 8005de6:	b928      	cbnz	r0, 8005df4 <STTS751_TEMP_Disable+0x30>
  pObj->temp_is_enabled = 0;
 8005de8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8005dec:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	e7fb      	b.n	8005dec <STTS751_TEMP_Disable+0x28>
    return STTS751_ERROR;
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	e7f8      	b.n	8005dec <STTS751_TEMP_Disable+0x28>

08005dfa <STTS751_DeInit>:
{
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005dfe:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d003      	beq.n	8005e0e <STTS751_DeInit+0x14>
  pObj->is_initialized = 0;
 8005e06:	2000      	movs	r0, #0
 8005e08:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8005e0c:	bd10      	pop	{r4, pc}
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8005e0e:	f7ff ffd9 	bl	8005dc4 <STTS751_TEMP_Disable>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f7      	beq.n	8005e06 <STTS751_DeInit+0xc>
      return STTS751_ERROR;
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	e7f7      	b.n	8005e0c <STTS751_DeInit+0x12>

08005e1c <STTS751_TEMP_SetOutputDataRate>:
{
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	ed2d 8b02 	vpush	{d8}
 8005e22:	b082      	sub	sp, #8
 8005e24:	eeb0 8a40 	vmov.f32	s16, s0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005e28:	f100 0420 	add.w	r4, r0, #32
 8005e2c:	f10d 0107 	add.w	r1, sp, #7
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 f991 	bl	8006158 <stts751_resolution_get>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f040 808a 	bne.w	8005f50 <STTS751_TEMP_SetOutputDataRate+0x134>
  if (Odr == 16.0f && res == STTS751_12bit)
 8005e3c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8005e40:	eeb4 8a67 	vcmp.f32	s16, s15
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	d118      	bne.n	8005e7c <STTS751_TEMP_SetOutputDataRate+0x60>
 8005e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d00b      	beq.n	8005e6a <STTS751_TEMP_SetOutputDataRate+0x4e>
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8005e52:	2108      	movs	r1, #8
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 f8e2 	bl	800601e <stts751_temp_data_rate_set>
 8005e5a:	3800      	subs	r0, #0
 8005e5c:	bf18      	it	ne
 8005e5e:	2001      	movne	r0, #1
 8005e60:	4240      	negs	r0, r0
}
 8005e62:	b002      	add	sp, #8
 8005e64:	ecbd 8b02 	vpop	{d8}
 8005e68:	bd10      	pop	{r4, pc}
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 f95a 	bl	8006126 <stts751_resolution_set>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0ed      	beq.n	8005e52 <STTS751_TEMP_SetOutputDataRate+0x36>
      return STTS751_ERROR;
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	e7f2      	b.n	8005e62 <STTS751_TEMP_SetOutputDataRate+0x46>
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8005e7c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005f58 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8005e80:	eeb4 8a67 	vcmp.f32	s16, s15
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d110      	bne.n	8005eac <STTS751_TEMP_SetOutputDataRate+0x90>
 8005e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e8e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d001      	beq.n	8005e9a <STTS751_TEMP_SetOutputDataRate+0x7e>
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8005e96:	2109      	movs	r1, #9
 8005e98:	e7dc      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f942 	bl	8006126 <stts751_resolution_set>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f7      	beq.n	8005e96 <STTS751_TEMP_SetOutputDataRate+0x7a>
      return STTS751_ERROR;
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	e7da      	b.n	8005e62 <STTS751_TEMP_SetOutputDataRate+0x46>
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8005eac:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005f5c <STTS751_TEMP_SetOutputDataRate+0x140>
 8005eb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb8:	d801      	bhi.n	8005ebe <STTS751_TEMP_SetOutputDataRate+0xa2>
 8005eba:	2100      	movs	r1, #0
 8005ebc:	e7ca      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005ebe:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8005ec2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eca:	d801      	bhi.n	8005ed0 <STTS751_TEMP_SetOutputDataRate+0xb4>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	e7c1      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005ed0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005ed4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d801      	bhi.n	8005ee2 <STTS751_TEMP_SetOutputDataRate+0xc6>
 8005ede:	2102      	movs	r1, #2
 8005ee0:	e7b8      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005ee2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005ee6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d801      	bhi.n	8005ef4 <STTS751_TEMP_SetOutputDataRate+0xd8>
 8005ef0:	2103      	movs	r1, #3
 8005ef2:	e7af      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005ef4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005ef8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f00:	d924      	bls.n	8005f4c <STTS751_TEMP_SetOutputDataRate+0x130>
 8005f02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005f06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0e:	d801      	bhi.n	8005f14 <STTS751_TEMP_SetOutputDataRate+0xf8>
 8005f10:	2105      	movs	r1, #5
 8005f12:	e79f      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005f14:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8005f18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f20:	d801      	bhi.n	8005f26 <STTS751_TEMP_SetOutputDataRate+0x10a>
 8005f22:	2106      	movs	r1, #6
 8005f24:	e796      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005f26:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005f2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	bf98      	it	ls
 8005f34:	2107      	movls	r1, #7
 8005f36:	d98d      	bls.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005f38:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8005f3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f44:	bf94      	ite	ls
 8005f46:	2108      	movls	r1, #8
 8005f48:	2109      	movhi	r1, #9
 8005f4a:	e783      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	e781      	b.n	8005e54 <STTS751_TEMP_SetOutputDataRate+0x38>
    return STTS751_ERROR;
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e785      	b.n	8005e62 <STTS751_TEMP_SetOutputDataRate+0x46>
 8005f56:	bf00      	nop
 8005f58:	42000000 	.word	0x42000000
 8005f5c:	3d800000 	.word	0x3d800000

08005f60 <STTS751_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8005f60:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d00a      	beq.n	8005f7e <STTS751_TEMP_Enable+0x1e>
{
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8005f6c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8005f70:	f7ff ff54 	bl	8005e1c <STTS751_TEMP_SetOutputDataRate>
 8005f74:	b928      	cbnz	r0, 8005f82 <STTS751_TEMP_Enable+0x22>
  pObj->temp_is_enabled = 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8005f7c:	bd10      	pop	{r4, pc}
    return STTS751_OK;
 8005f7e:	2000      	movs	r0, #0
}
 8005f80:	4770      	bx	lr
    return STTS751_ERROR;
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e7f9      	b.n	8005f7c <STTS751_TEMP_Enable+0x1c>

08005f88 <STTS751_TEMP_GetTemperature>:
{
 8005f88:	b530      	push	{r4, r5, lr}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	460c      	mov	r4, r1
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8005f8e:	f10d 0106 	add.w	r1, sp, #6
 8005f92:	3020      	adds	r0, #32
 8005f94:	f000 f8fb 	bl	800618e <stts751_temperature_raw_get>
 8005f98:	b948      	cbnz	r0, 8005fae <STTS751_TEMP_GetTemperature+0x26>
 8005f9a:	4605      	mov	r5, r0
  *Value = stts751_from_lsb_to_celsius(raw_value);
 8005f9c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005fa0:	f000 f838 	bl	8006014 <stts751_from_lsb_to_celsius>
 8005fa4:	ed84 0a00 	vstr	s0, [r4]
}
 8005fa8:	4628      	mov	r0, r5
 8005faa:	b003      	add	sp, #12
 8005fac:	bd30      	pop	{r4, r5, pc}
    return STTS751_ERROR;
 8005fae:	f04f 35ff 	mov.w	r5, #4294967295
 8005fb2:	e7f9      	b.n	8005fa8 <STTS751_TEMP_GetTemperature+0x20>

08005fb4 <STTS751_RegisterBusIO>:
  if (pObj == NULL)
 8005fb4:	b1c8      	cbz	r0, 8005fea <STTS751_RegisterBusIO+0x36>
{
 8005fb6:	b508      	push	{r3, lr}
 8005fb8:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8005fba:	680a      	ldr	r2, [r1, #0]
 8005fbc:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005fbe:	6848      	ldr	r0, [r1, #4]
 8005fc0:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005fc2:	6888      	ldr	r0, [r1, #8]
 8005fc4:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005fc6:	7b08      	ldrb	r0, [r1, #12]
 8005fc8:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005fca:	6908      	ldr	r0, [r1, #16]
 8005fcc:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005fce:	6948      	ldr	r0, [r1, #20]
 8005fd0:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005fd2:	6988      	ldr	r0, [r1, #24]
 8005fd4:	6198      	str	r0, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005fd6:	4808      	ldr	r0, [pc, #32]	; (8005ff8 <STTS751_RegisterBusIO+0x44>)
 8005fd8:	6258      	str	r0, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005fda:	4808      	ldr	r0, [pc, #32]	; (8005ffc <STTS751_RegisterBusIO+0x48>)
 8005fdc:	6218      	str	r0, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005fde:	69c9      	ldr	r1, [r1, #28]
 8005fe0:	6299      	str	r1, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005fe2:	62db      	str	r3, [r3, #44]	; 0x2c
    if (pObj->IO.Init != NULL)
 8005fe4:	b122      	cbz	r2, 8005ff0 <STTS751_RegisterBusIO+0x3c>
      ret = pObj->IO.Init();
 8005fe6:	4790      	blx	r2
}
 8005fe8:	bd08      	pop	{r3, pc}
    ret = STTS751_ERROR;
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005fee:	4770      	bx	lr
      ret = STTS751_ERROR;
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005ff4:	e7f8      	b.n	8005fe8 <STTS751_RegisterBusIO+0x34>
 8005ff6:	bf00      	nop
 8005ff8:	08005c25 	.word	0x08005c25
 8005ffc:	08005c6d 	.word	0x08005c6d

08006000 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006000:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006002:	6844      	ldr	r4, [r0, #4]
 8006004:	68c0      	ldr	r0, [r0, #12]
 8006006:	47a0      	blx	r4

  return ret;
}
 8006008:	bd10      	pop	{r4, pc}

0800600a <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800600a:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800600c:	6804      	ldr	r4, [r0, #0]
 800600e:	68c0      	ldr	r0, [r0, #12]
 8006010:	47a0      	blx	r4

  return ret;
}
 8006012:	bd10      	pop	{r4, pc}

08006014 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8006014:	ee00 0a10 	vmov	s0, r0
  return ((float_t)lsb) / 256.0f;
}
 8006018:	eeba 0acc 	vcvt.f32.s32	s0, s0, #8
 800601c:	4770      	bx	lr

0800601e <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800601e:	b530      	push	{r4, r5, lr}
 8006020:	b085      	sub	sp, #20
 8006022:	4605      	mov	r5, r0
 8006024:	460c      	mov	r4, r1
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8006026:	23aa      	movs	r3, #170	; 0xaa
 8006028:	f88d 3007 	strb.w	r3, [sp, #7]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800602c:	2301      	movs	r3, #1
 800602e:	aa02      	add	r2, sp, #8
 8006030:	2104      	movs	r1, #4
 8006032:	f7ff ffe5 	bl	8006000 <stts751_read_reg>
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8006036:	4603      	mov	r3, r0
 8006038:	b110      	cbz	r0, 8006040 <stts751_temp_data_rate_set+0x22>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
  }

  return ret;
}
 800603a:	4618      	mov	r0, r3
 800603c:	b005      	add	sp, #20
 800603e:	bd30      	pop	{r4, r5, pc}
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8006040:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006044:	f364 0303 	bfi	r3, r4, #0, #4
 8006048:	f88d 3008 	strb.w	r3, [sp, #8]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800604c:	2301      	movs	r3, #1
 800604e:	aa02      	add	r2, sp, #8
 8006050:	2104      	movs	r1, #4
 8006052:	4628      	mov	r0, r5
 8006054:	f7ff ffd9 	bl	800600a <stts751_write_reg>
  if (ret == 0)
 8006058:	4603      	mov	r3, r0
 800605a:	2800      	cmp	r0, #0
 800605c:	d1ed      	bne.n	800603a <stts751_temp_data_rate_set+0x1c>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800605e:	2301      	movs	r3, #1
 8006060:	aa03      	add	r2, sp, #12
 8006062:	2103      	movs	r1, #3
 8006064:	4628      	mov	r0, r5
 8006066:	f7ff ffcb 	bl	8006000 <stts751_read_reg>
  if (ret == 0)
 800606a:	4603      	mov	r3, r0
 800606c:	2800      	cmp	r0, #0
 800606e:	d1e4      	bne.n	800603a <stts751_temp_data_rate_set+0x1c>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8006070:	09e3      	lsrs	r3, r4, #7
 8006072:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8006076:	f363 1286 	bfi	r2, r3, #6, #1
 800607a:	f88d 200c 	strb.w	r2, [sp, #12]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800607e:	2301      	movs	r3, #1
 8006080:	aa03      	add	r2, sp, #12
 8006082:	2103      	movs	r1, #3
 8006084:	4628      	mov	r0, r5
 8006086:	f7ff ffc0 	bl	800600a <stts751_write_reg>
  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800608a:	4603      	mov	r3, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	d1d4      	bne.n	800603a <stts751_temp_data_rate_set+0x1c>
 8006090:	2c90      	cmp	r4, #144	; 0x90
 8006092:	d1d2      	bne.n	800603a <stts751_temp_data_rate_set+0x1c>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8006094:	2301      	movs	r3, #1
 8006096:	f10d 0207 	add.w	r2, sp, #7
 800609a:	210f      	movs	r1, #15
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff ffb4 	bl	800600a <stts751_write_reg>
 80060a2:	4603      	mov	r3, r0
  return ret;
 80060a4:	e7c9      	b.n	800603a <stts751_temp_data_rate_set+0x1c>

080060a6 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80060a6:	b530      	push	{r4, r5, lr}
 80060a8:	b083      	sub	sp, #12
 80060aa:	4605      	mov	r5, r0
 80060ac:	460c      	mov	r4, r1
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80060ae:	2301      	movs	r3, #1
 80060b0:	aa01      	add	r2, sp, #4
 80060b2:	2104      	movs	r1, #4
 80060b4:	f7ff ffa4 	bl	8006000 <stts751_read_reg>
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80060b8:	b1a0      	cbz	r0, 80060e4 <stts751_temp_data_rate_get+0x3e>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 80060ba:	f89d 2000 	ldrb.w	r2, [sp]
 80060be:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80060c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d823      	bhi.n	800611a <stts751_temp_data_rate_get+0x74>
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d80d      	bhi.n	80060f2 <stts751_temp_data_rate_get+0x4c>
 80060d6:	e8df f003 	tbb	[pc, r3]
 80060da:	0e24      	.short	0x0e24
 80060dc:	16141210 	.word	0x16141210
 80060e0:	1e1c1a18 	.word	0x1e1c1a18
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80060e4:	2301      	movs	r3, #1
 80060e6:	466a      	mov	r2, sp
 80060e8:	2103      	movs	r1, #3
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff ff88 	bl	8006000 <stts751_read_reg>
 80060f0:	e7e3      	b.n	80060ba <stts751_temp_data_rate_get+0x14>
  switch ((configuration.stop << 7) + conversion_rate.conv)
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	e012      	b.n	800611c <stts751_temp_data_rate_get+0x76>
      *val = STTS751_TEMP_ODR_62mHz5;
      break;

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
      break;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e010      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
      break;
 80060fa:	2302      	movs	r3, #2
 80060fc:	e00e      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
      break;
 80060fe:	2303      	movs	r3, #3
 8006100:	e00c      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
      break;
 8006102:	2304      	movs	r3, #4
 8006104:	e00a      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
      break;
 8006106:	2305      	movs	r3, #5
 8006108:	e008      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
      break;
 800610a:	2306      	movs	r3, #6
 800610c:	e006      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
      break;
 800610e:	2307      	movs	r3, #7
 8006110:	e004      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
      break;
 8006112:	2308      	movs	r3, #8
 8006114:	e002      	b.n	800611c <stts751_temp_data_rate_get+0x76>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
      break;
 8006116:	2309      	movs	r3, #9
 8006118:	e000      	b.n	800611c <stts751_temp_data_rate_get+0x76>
  switch ((configuration.stop << 7) + conversion_rate.conv)
 800611a:	2380      	movs	r3, #128	; 0x80
      *val = STTS751_TEMP_ODR_OFF;
 800611c:	7023      	strb	r3, [r4, #0]
      *val = STTS751_TEMP_ODR_OFF;
      break;
  }

  return ret;
}
 800611e:	b003      	add	sp, #12
 8006120:	bd30      	pop	{r4, r5, pc}
  switch ((configuration.stop << 7) + conversion_rate.conv)
 8006122:	2300      	movs	r3, #0
 8006124:	e7fa      	b.n	800611c <stts751_temp_data_rate_get+0x76>

08006126 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8006126:	b530      	push	{r4, r5, lr}
 8006128:	b083      	sub	sp, #12
 800612a:	4604      	mov	r4, r0
 800612c:	460d      	mov	r5, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800612e:	2301      	movs	r3, #1
 8006130:	aa01      	add	r2, sp, #4
 8006132:	2103      	movs	r1, #3
 8006134:	f7ff ff64 	bl	8006000 <stts751_read_reg>

  if (ret == 0)
 8006138:	b108      	cbz	r0, 800613e <stts751_resolution_set+0x18>
    reg.tres = (uint8_t) val;
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800613a:	b003      	add	sp, #12
 800613c:	bd30      	pop	{r4, r5, pc}
    reg.tres = (uint8_t) val;
 800613e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006142:	f365 0383 	bfi	r3, r5, #2, #2
 8006146:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800614a:	2301      	movs	r3, #1
 800614c:	aa01      	add	r2, sp, #4
 800614e:	2103      	movs	r1, #3
 8006150:	4620      	mov	r0, r4
 8006152:	f7ff ff5a 	bl	800600a <stts751_write_reg>
  return ret;
 8006156:	e7f0      	b.n	800613a <stts751_resolution_set+0x14>

08006158 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8006158:	b510      	push	{r4, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	460c      	mov	r4, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800615e:	2301      	movs	r3, #1
 8006160:	aa01      	add	r2, sp, #4
 8006162:	2103      	movs	r1, #3
 8006164:	f7ff ff4c 	bl	8006000 <stts751_read_reg>

  switch (reg.tres)
 8006168:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800616c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006170:	2b01      	cmp	r3, #1
 8006172:	d008      	beq.n	8006186 <stts751_resolution_get+0x2e>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d008      	beq.n	800618a <stts751_resolution_get+0x32>
 8006178:	3b00      	subs	r3, #0
 800617a:	bf18      	it	ne
 800617c:	2301      	movne	r3, #1
 800617e:	005b      	lsls	r3, r3, #1
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8006180:	7023      	strb	r3, [r4, #0]
      *val = STTS751_9bit;
      break;
  }

  return ret;
}
 8006182:	b002      	add	sp, #8
 8006184:	bd10      	pop	{r4, pc}
  switch (reg.tres)
 8006186:	2301      	movs	r3, #1
 8006188:	e7fa      	b.n	8006180 <stts751_resolution_get+0x28>
 800618a:	2303      	movs	r3, #3
 800618c:	e7f8      	b.n	8006180 <stts751_resolution_get+0x28>

0800618e <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800618e:	b530      	push	{r4, r5, lr}
 8006190:	b083      	sub	sp, #12
 8006192:	4605      	mov	r5, r0
 8006194:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8006196:	2301      	movs	r3, #1
 8006198:	f10d 0205 	add.w	r2, sp, #5
 800619c:	2100      	movs	r1, #0
 800619e:	f7ff ff2f 	bl	8006000 <stts751_read_reg>
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80061a2:	b108      	cbz	r0, 80061a8 <stts751_temperature_raw_get+0x1a>
    *val = (int16_t)buff[1];
    *val = (*val * 256) + (int16_t)buff[0];
  }

  return ret;
}
 80061a4:	b003      	add	sp, #12
 80061a6:	bd30      	pop	{r4, r5, pc}
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80061a8:	2301      	movs	r3, #1
 80061aa:	aa01      	add	r2, sp, #4
 80061ac:	2102      	movs	r1, #2
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7ff ff26 	bl	8006000 <stts751_read_reg>
    *val = (*val * 256) + (int16_t)buff[0];
 80061b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80061b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80061c0:	8023      	strh	r3, [r4, #0]
  return ret;
 80061c2:	e7ef      	b.n	80061a4 <stts751_temperature_raw_get+0x16>

080061c4 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061c4:	b530      	push	{r4, r5, lr}
 80061c6:	b083      	sub	sp, #12
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80061cc:	2301      	movs	r3, #1
 80061ce:	aa01      	add	r2, sp, #4
 80061d0:	2103      	movs	r1, #3
 80061d2:	f7ff ff15 	bl	8006000 <stts751_read_reg>

  if (ret == 0)
 80061d6:	b108      	cbz	r0, 80061dc <stts751_pin_event_route_set+0x18>
    reg.mask1 = val;
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80061d8:	b003      	add	sp, #12
 80061da:	bd30      	pop	{r4, r5, pc}
    reg.mask1 = val;
 80061dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061e0:	f365 13c7 	bfi	r3, r5, #7, #1
 80061e4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80061e8:	2301      	movs	r3, #1
 80061ea:	aa01      	add	r2, sp, #4
 80061ec:	2103      	movs	r1, #3
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ff0b 	bl	800600a <stts751_write_reg>
  return ret;
 80061f4:	e7f0      	b.n	80061d8 <stts751_pin_event_route_set+0x14>

080061f6 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80061f6:	b538      	push	{r3, r4, r5, lr}
 80061f8:	4605      	mov	r5, r0
 80061fa:	460c      	mov	r4, r1
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80061fc:	2301      	movs	r3, #1
 80061fe:	460a      	mov	r2, r1
 8006200:	21fd      	movs	r1, #253	; 0xfd
 8006202:	f7ff fefd 	bl	8006000 <stts751_read_reg>
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8006206:	4603      	mov	r3, r0
 8006208:	b108      	cbz	r0, 800620e <stts751_device_id_get+0x18>
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
}
 800620a:	4618      	mov	r0, r3
 800620c:	bd38      	pop	{r3, r4, r5, pc}
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800620e:	2301      	movs	r3, #1
 8006210:	18e2      	adds	r2, r4, r3
 8006212:	21fe      	movs	r1, #254	; 0xfe
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fef3 	bl	8006000 <stts751_read_reg>
  if (ret == 0)
 800621a:	4603      	mov	r3, r0
 800621c:	2800      	cmp	r0, #0
 800621e:	d1f4      	bne.n	800620a <stts751_device_id_get+0x14>
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8006220:	2301      	movs	r3, #1
 8006222:	1ca2      	adds	r2, r4, #2
 8006224:	21ff      	movs	r1, #255	; 0xff
 8006226:	4628      	mov	r0, r5
 8006228:	f7ff feea 	bl	8006000 <stts751_read_reg>
 800622c:	4603      	mov	r3, r0
  return ret;
 800622e:	e7ec      	b.n	800620a <stts751_device_id_get+0x14>

08006230 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	b093      	sub	sp, #76	; 0x4c
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
  uint32_t function = ENV_TEMPERATURE;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800623a:	2801      	cmp	r0, #1
 800623c:	f000 808e 	beq.w	800635c <IKS01A3_ENV_SENSOR_Init+0x12c>
 8006240:	2802      	cmp	r0, #2
 8006242:	f000 812d 	beq.w	80064a0 <IKS01A3_ENV_SENSOR_Init+0x270>
 8006246:	b120      	cbz	r0, 8006252 <IKS01A3_ENV_SENSOR_Init+0x22>
 8006248:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 800624c:	b013      	add	sp, #76	; 0x4c
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int32_t                ret = BSP_ERROR_NONE;
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8006252:	2300      	movs	r3, #0
 8006254:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006256:	23bf      	movs	r3, #191	; 0xbf
 8006258:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 800625c:	4b7e      	ldr	r3, [pc, #504]	; (8006458 <IKS01A3_ENV_SENSOR_Init+0x228>)
 800625e:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006260:	4b7e      	ldr	r3, [pc, #504]	; (800645c <IKS01A3_ENV_SENSOR_Init+0x22c>)
 8006262:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006264:	4b7e      	ldr	r3, [pc, #504]	; (8006460 <IKS01A3_ENV_SENSOR_Init+0x230>)
 8006266:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006268:	4b7e      	ldr	r3, [pc, #504]	; (8006464 <IKS01A3_ENV_SENSOR_Init+0x234>)
 800626a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 800626c:	4b7e      	ldr	r3, [pc, #504]	; (8006468 <IKS01A3_ENV_SENSOR_Init+0x238>)
 800626e:	930c      	str	r3, [sp, #48]	; 0x30

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006270:	a906      	add	r1, sp, #24
 8006272:	487e      	ldr	r0, [pc, #504]	; (800646c <IKS01A3_ENV_SENSOR_Init+0x23c>)
 8006274:	f7fc fb64 	bl	8002940 <HTS221_RegisterBusIO>
 8006278:	2800      	cmp	r0, #0
 800627a:	d15d      	bne.n	8006338 <IKS01A3_ENV_SENSOR_Init+0x108>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800627c:	f10d 0107 	add.w	r1, sp, #7
 8006280:	487a      	ldr	r0, [pc, #488]	; (800646c <IKS01A3_ENV_SENSOR_Init+0x23c>)
 8006282:	f7fc fa63 	bl	800274c <HTS221_ReadID>
 8006286:	2800      	cmp	r0, #0
 8006288:	d156      	bne.n	8006338 <IKS01A3_ENV_SENSOR_Init+0x108>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 800628a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800628e:	2bbc      	cmp	r3, #188	; 0xbc
 8006290:	d152      	bne.n	8006338 <IKS01A3_ENV_SENSOR_Init+0x108>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8006292:	4c76      	ldr	r4, [pc, #472]	; (800646c <IKS01A3_ENV_SENSOR_Init+0x23c>)
 8006294:	a902      	add	r1, sp, #8
 8006296:	4620      	mov	r0, r4
 8006298:	f7fc f96e 	bl	8002578 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800629c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80062a0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80062a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
                                           uint32_t)cap.Humidity << 2);
 80062a8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80062aa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80062ae:	4313      	orrs	r3, r2
 80062b0:	496f      	ldr	r1, [pc, #444]	; (8006470 <IKS01A3_ENV_SENSOR_Init+0x240>)
 80062b2:	600b      	str	r3, [r1, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80062b4:	4b6f      	ldr	r3, [pc, #444]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 80062b6:	601c      	str	r4, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80062b8:	4b6f      	ldr	r3, [pc, #444]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 80062ba:	4970      	ldr	r1, [pc, #448]	; (800647c <IKS01A3_ENV_SENSOR_Init+0x24c>)
 80062bc:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80062be:	f017 0f01 	tst.w	r7, #1
 80062c2:	d001      	beq.n	80062c8 <IKS01A3_ENV_SENSOR_Init+0x98>
 80062c4:	2a01      	cmp	r2, #1
 80062c6:	d02f      	beq.n	8006328 <IKS01A3_ENV_SENSOR_Init+0xf8>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80062c8:	f017 0f04 	tst.w	r7, #4
 80062cc:	d003      	beq.n	80062d6 <IKS01A3_ENV_SENSOR_Init+0xa6>
 80062ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d033      	beq.n	800633e <IKS01A3_ENV_SENSOR_Init+0x10e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80062d6:	f017 0f02 	tst.w	r7, #2
 80062da:	d12d      	bne.n	8006338 <IKS01A3_ENV_SENSOR_Init+0x108>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80062dc:	4b66      	ldr	r3, [pc, #408]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	a90e      	add	r1, sp, #56	; 0x38
 80062e4:	4a63      	ldr	r2, [pc, #396]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 80062e6:	6810      	ldr	r0, [r2, #0]
 80062e8:	4798      	blx	r3
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f040 815c 	bne.w	80065a8 <IKS01A3_ENV_SENSOR_Init+0x378>
      if (cap.Temperature == 1U)
 80062f0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
 80062f4:	f1b8 0f01 	cmp.w	r8, #1
 80062f8:	bf14      	ite	ne
 80062fa:	f04f 0800 	movne.w	r8, #0
 80062fe:	f04f 0801 	moveq.w	r8, #1
      if (cap.Humidity == 1U)
 8006302:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8006306:	2b01      	cmp	r3, #1
        component_functions |= ENV_HUMIDITY;
 8006308:	bf08      	it	eq
 800630a:	f048 0804 	orreq.w	r8, r8, #4
      if (cap.Pressure == 1U)
 800630e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006312:	2b01      	cmp	r3, #1
 8006314:	d01f      	beq.n	8006356 <IKS01A3_ENV_SENSOR_Init+0x126>
{
 8006316:	2503      	movs	r5, #3
 8006318:	2401      	movs	r4, #1
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800631a:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006474 <IKS01A3_ENV_SENSOR_Init+0x244>
 800631e:	f8df a160 	ldr.w	sl, [pc, #352]	; 8006480 <IKS01A3_ENV_SENSOR_Init+0x250>
 8006322:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800649c <IKS01A3_ENV_SENSOR_Init+0x26c>
 8006326:	e127      	b.n	8006578 <IKS01A3_ENV_SENSOR_Init+0x348>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006328:	4b55      	ldr	r3, [pc, #340]	; (8006480 <IKS01A3_ENV_SENSOR_Init+0x250>)
 800632a:	4a56      	ldr	r2, [pc, #344]	; (8006484 <IKS01A3_ENV_SENSOR_Init+0x254>)
 800632c:	601a      	str	r2, [r3, #0]
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800632e:	680b      	ldr	r3, [r1, #0]
 8006330:	4620      	mov	r0, r4
 8006332:	4798      	blx	r3
 8006334:	2800      	cmp	r0, #0
 8006336:	d0c7      	beq.n	80062c8 <IKS01A3_ENV_SENSOR_Init+0x98>
        return BSP_ERROR_NO_INIT;
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	e786      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800633e:	4b50      	ldr	r3, [pc, #320]	; (8006480 <IKS01A3_ENV_SENSOR_Init+0x250>)
 8006340:	4a51      	ldr	r2, [pc, #324]	; (8006488 <IKS01A3_ENV_SENSOR_Init+0x258>)
 8006342:	609a      	str	r2, [r3, #8]
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8006344:	4b4c      	ldr	r3, [pc, #304]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4a      	ldr	r2, [pc, #296]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 800634c:	6810      	ldr	r0, [r2, #0]
 800634e:	4798      	blx	r3
 8006350:	2800      	cmp	r0, #0
 8006352:	d0c0      	beq.n	80062d6 <IKS01A3_ENV_SENSOR_Init+0xa6>
 8006354:	e7f0      	b.n	8006338 <IKS01A3_ENV_SENSOR_Init+0x108>
        component_functions |= ENV_PRESSURE;
 8006356:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 800635a:	e7dc      	b.n	8006316 <IKS01A3_ENV_SENSOR_Init+0xe6>
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800635c:	2300      	movs	r3, #0
 800635e:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8006360:	23bb      	movs	r3, #187	; 0xbb
 8006362:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006366:	4b3c      	ldr	r3, [pc, #240]	; (8006458 <IKS01A3_ENV_SENSOR_Init+0x228>)
 8006368:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800636a:	4b3c      	ldr	r3, [pc, #240]	; (800645c <IKS01A3_ENV_SENSOR_Init+0x22c>)
 800636c:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800636e:	4b3c      	ldr	r3, [pc, #240]	; (8006460 <IKS01A3_ENV_SENSOR_Init+0x230>)
 8006370:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006372:	4b3c      	ldr	r3, [pc, #240]	; (8006464 <IKS01A3_ENV_SENSOR_Init+0x234>)
 8006374:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006376:	4b3c      	ldr	r3, [pc, #240]	; (8006468 <IKS01A3_ENV_SENSOR_Init+0x238>)
 8006378:	930c      	str	r3, [sp, #48]	; 0x30

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800637a:	a906      	add	r1, sp, #24
 800637c:	4843      	ldr	r0, [pc, #268]	; (800648c <IKS01A3_ENV_SENSOR_Init+0x25c>)
 800637e:	f7fe f953 	bl	8004628 <LPS22HH_RegisterBusIO>
 8006382:	2800      	cmp	r0, #0
 8006384:	d158      	bne.n	8006438 <IKS01A3_ENV_SENSOR_Init+0x208>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8006386:	f10d 0107 	add.w	r1, sp, #7
 800638a:	4840      	ldr	r0, [pc, #256]	; (800648c <IKS01A3_ENV_SENSOR_Init+0x25c>)
 800638c:	f7fd fff6 	bl	800437c <LPS22HH_ReadID>
 8006390:	2800      	cmp	r0, #0
 8006392:	d151      	bne.n	8006438 <IKS01A3_ENV_SENSOR_Init+0x208>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 8006394:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006398:	2bb3      	cmp	r3, #179	; 0xb3
 800639a:	d14d      	bne.n	8006438 <IKS01A3_ENV_SENSOR_Init+0x208>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800639c:	4c3b      	ldr	r4, [pc, #236]	; (800648c <IKS01A3_ENV_SENSOR_Init+0x25c>)
 800639e:	a902      	add	r1, sp, #8
 80063a0:	4620      	mov	r0, r4
 80063a2:	f7fd ff3d 	bl	8004220 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80063a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80063aa:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80063ae:	f89d 300a 	ldrb.w	r3, [sp, #10]
                                            uint32_t)cap.Humidity << 2);
 80063b2:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80063b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	492d      	ldr	r1, [pc, #180]	; (8006470 <IKS01A3_ENV_SENSOR_Init+0x240>)
 80063bc:	604b      	str	r3, [r1, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80063be:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 80063c0:	605c      	str	r4, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80063c2:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 80063c4:	4932      	ldr	r1, [pc, #200]	; (8006490 <IKS01A3_ENV_SENSOR_Init+0x260>)
 80063c6:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80063c8:	f017 0f01 	tst.w	r7, #1
 80063cc:	d001      	beq.n	80063d2 <IKS01A3_ENV_SENSOR_Init+0x1a2>
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	d02a      	beq.n	8006428 <IKS01A3_ENV_SENSOR_Init+0x1f8>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80063d2:	f017 0f02 	tst.w	r7, #2
 80063d6:	d003      	beq.n	80063e0 <IKS01A3_ENV_SENSOR_Init+0x1b0>
 80063d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d02e      	beq.n	800643e <IKS01A3_ENV_SENSOR_Init+0x20e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80063e0:	f017 0f04 	tst.w	r7, #4
 80063e4:	d128      	bne.n	8006438 <IKS01A3_ENV_SENSOR_Init+0x208>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	a90e      	add	r1, sp, #56	; 0x38
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 80063f0:	6850      	ldr	r0, [r2, #4]
 80063f2:	4798      	blx	r3
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 80da 	bne.w	80065ae <IKS01A3_ENV_SENSOR_Init+0x37e>
      if (cap.Temperature == 1U)
 80063fa:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
 80063fe:	f1b8 0f01 	cmp.w	r8, #1
 8006402:	bf14      	ite	ne
 8006404:	f04f 0800 	movne.w	r8, #0
 8006408:	f04f 0801 	moveq.w	r8, #1
      if (cap.Humidity == 1U)
 800640c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8006410:	2b01      	cmp	r3, #1
        component_functions |= ENV_HUMIDITY;
 8006412:	bf08      	it	eq
 8006414:	f048 0804 	orreq.w	r8, r8, #4
      if (cap.Pressure == 1U)
 8006418:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800641c:	2b01      	cmp	r3, #1
 800641e:	f47f af7a 	bne.w	8006316 <IKS01A3_ENV_SENSOR_Init+0xe6>
        component_functions |= ENV_PRESSURE;
 8006422:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 8006426:	e776      	b.n	8006316 <IKS01A3_ENV_SENSOR_Init+0xe6>
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8006428:	4b15      	ldr	r3, [pc, #84]	; (8006480 <IKS01A3_ENV_SENSOR_Init+0x250>)
 800642a:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <IKS01A3_ENV_SENSOR_Init+0x264>)
 800642c:	60da      	str	r2, [r3, #12]
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800642e:	680b      	ldr	r3, [r1, #0]
 8006430:	4620      	mov	r0, r4
 8006432:	4798      	blx	r3
 8006434:	2800      	cmp	r0, #0
 8006436:	d0cc      	beq.n	80063d2 <IKS01A3_ENV_SENSOR_Init+0x1a2>
        return BSP_ERROR_NO_INIT;
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	e706      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <IKS01A3_ENV_SENSOR_Init+0x250>)
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <IKS01A3_ENV_SENSOR_Init+0x268>)
 8006442:	611a      	str	r2, [r3, #16]
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <IKS01A3_ENV_SENSOR_Init+0x248>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <IKS01A3_ENV_SENSOR_Init+0x244>)
 800644c:	6850      	ldr	r0, [r2, #4]
 800644e:	4798      	blx	r3
 8006450:	2800      	cmp	r0, #0
 8006452:	d0c5      	beq.n	80063e0 <IKS01A3_ENV_SENSOR_Init+0x1b0>
 8006454:	e7f0      	b.n	8006438 <IKS01A3_ENV_SENSOR_Init+0x208>
 8006456:	bf00      	nop
 8006458:	080023a1 	.word	0x080023a1
 800645c:	08002179 	.word	0x08002179
 8006460:	08002211 	.word	0x08002211
 8006464:	080021d5 	.word	0x080021d5
 8006468:	0800224d 	.word	0x0800224d
 800646c:	2000f670 	.word	0x2000f670
 8006470:	2000f634 	.word	0x2000f634
 8006474:	2000f628 	.word	0x2000f628
 8006478:	2000f640 	.word	0x2000f640
 800647c:	20000008 	.word	0x20000008
 8006480:	2000f64c 	.word	0x2000f64c
 8006484:	2000002c 	.word	0x2000002c
 8006488:	20000018 	.word	0x20000018
 800648c:	2000f6a4 	.word	0x2000f6a4
 8006490:	200000a8 	.word	0x200000a8
 8006494:	200000cc 	.word	0x200000cc
 8006498:	200000b8 	.word	0x200000b8
 800649c:	0800e468 	.word	0x0800e468
  int32_t                 ret = BSP_ERROR_NONE;
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80064a0:	2300      	movs	r3, #0
 80064a2:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80064a4:	2395      	movs	r3, #149	; 0x95
 80064a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 80064aa:	4b44      	ldr	r3, [pc, #272]	; (80065bc <IKS01A3_ENV_SENSOR_Init+0x38c>)
 80064ac:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <IKS01A3_ENV_SENSOR_Init+0x390>)
 80064b0:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80064b2:	4b44      	ldr	r3, [pc, #272]	; (80065c4 <IKS01A3_ENV_SENSOR_Init+0x394>)
 80064b4:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <IKS01A3_ENV_SENSOR_Init+0x398>)
 80064b8:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 80064ba:	4b44      	ldr	r3, [pc, #272]	; (80065cc <IKS01A3_ENV_SENSOR_Init+0x39c>)
 80064bc:	930c      	str	r3, [sp, #48]	; 0x30

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80064be:	a906      	add	r1, sp, #24
 80064c0:	4843      	ldr	r0, [pc, #268]	; (80065d0 <IKS01A3_ENV_SENSOR_Init+0x3a0>)
 80064c2:	f7ff fd77 	bl	8005fb4 <STTS751_RegisterBusIO>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d150      	bne.n	800656c <IKS01A3_ENV_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 80064ca:	f10d 0107 	add.w	r1, sp, #7
 80064ce:	4840      	ldr	r0, [pc, #256]	; (80065d0 <IKS01A3_ENV_SENSOR_Init+0x3a0>)
 80064d0:	f7ff fc18 	bl	8005d04 <STTS751_ReadID>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d149      	bne.n	800656c <IKS01A3_ENV_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS751_ID_MAN)
 80064d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80064dc:	2b53      	cmp	r3, #83	; 0x53
 80064de:	d145      	bne.n	800656c <IKS01A3_ENV_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80064e0:	4c3b      	ldr	r4, [pc, #236]	; (80065d0 <IKS01A3_ENV_SENSOR_Init+0x3a0>)
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff fb90 	bl	8005c0a <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80064ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80064ee:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80064f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
                                            uint32_t)cap.Humidity << 2);
 80064f6:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80064f8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	4935      	ldr	r1, [pc, #212]	; (80065d4 <IKS01A3_ENV_SENSOR_Init+0x3a4>)
 8006500:	608b      	str	r3, [r1, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8006502:	4b35      	ldr	r3, [pc, #212]	; (80065d8 <IKS01A3_ENV_SENSOR_Init+0x3a8>)
 8006504:	609c      	str	r4, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8006506:	4b35      	ldr	r3, [pc, #212]	; (80065dc <IKS01A3_ENV_SENSOR_Init+0x3ac>)
 8006508:	4935      	ldr	r1, [pc, #212]	; (80065e0 <IKS01A3_ENV_SENSOR_Init+0x3b0>)
 800650a:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800650c:	f017 0f01 	tst.w	r7, #1
 8006510:	d001      	beq.n	8006516 <IKS01A3_ENV_SENSOR_Init+0x2e6>
 8006512:	2a01      	cmp	r2, #1
 8006514:	d022      	beq.n	800655c <IKS01A3_ENV_SENSOR_Init+0x32c>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8006516:	f017 0f06 	tst.w	r7, #6
 800651a:	d127      	bne.n	800656c <IKS01A3_ENV_SENSOR_Init+0x33c>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800651c:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <IKS01A3_ENV_SENSOR_Init+0x3ac>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	a90e      	add	r1, sp, #56	; 0x38
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <IKS01A3_ENV_SENSOR_Init+0x3a8>)
 8006526:	6890      	ldr	r0, [r2, #8]
 8006528:	4798      	blx	r3
 800652a:	2800      	cmp	r0, #0
 800652c:	d142      	bne.n	80065b4 <IKS01A3_ENV_SENSOR_Init+0x384>
      if (cap.Temperature == 1U)
 800652e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
 8006532:	f1b8 0f01 	cmp.w	r8, #1
 8006536:	bf14      	ite	ne
 8006538:	f04f 0800 	movne.w	r8, #0
 800653c:	f04f 0801 	moveq.w	r8, #1
      if (cap.Humidity == 1U)
 8006540:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8006544:	2b01      	cmp	r3, #1
        component_functions |= ENV_HUMIDITY;
 8006546:	bf08      	it	eq
 8006548:	f048 0804 	orreq.w	r8, r8, #4
      if (cap.Pressure == 1U)
 800654c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006550:	2b01      	cmp	r3, #1
 8006552:	f47f aee0 	bne.w	8006316 <IKS01A3_ENV_SENSOR_Init+0xe6>
        component_functions |= ENV_PRESSURE;
 8006556:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 800655a:	e6dc      	b.n	8006316 <IKS01A3_ENV_SENSOR_Init+0xe6>
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <IKS01A3_ENV_SENSOR_Init+0x3b4>)
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <IKS01A3_ENV_SENSOR_Init+0x3b8>)
 8006560:	619a      	str	r2, [r3, #24]
      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8006562:	680b      	ldr	r3, [r1, #0]
 8006564:	4620      	mov	r0, r4
 8006566:	4798      	blx	r3
 8006568:	2800      	cmp	r0, #0
 800656a:	d0d4      	beq.n	8006516 <IKS01A3_ENV_SENSOR_Init+0x2e6>
        return BSP_ERROR_NO_INIT;
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	e66c      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
    function = function << 1;
 8006572:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8006574:	3d01      	subs	r5, #1
 8006576:	d015      	beq.n	80065a4 <IKS01A3_ENV_SENSOR_Init+0x374>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006578:	ea34 0307 	bics.w	r3, r4, r7
 800657c:	d1f9      	bne.n	8006572 <IKS01A3_ENV_SENSOR_Init+0x342>
 800657e:	ea34 0308 	bics.w	r3, r4, r8
 8006582:	d1f6      	bne.n	8006572 <IKS01A3_ENV_SENSOR_Init+0x342>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8006584:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006588:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800658c:	4413      	add	r3, r2
 800658e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8006598:	4798      	blx	r3
 800659a:	2800      	cmp	r0, #0
 800659c:	d0e9      	beq.n	8006572 <IKS01A3_ENV_SENSOR_Init+0x342>
        return BSP_ERROR_COMPONENT_FAILURE;
 800659e:	f06f 0004 	mvn.w	r0, #4
 80065a2:	e653      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
 80065a4:	2000      	movs	r0, #0
 80065a6:	e651      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065a8:	f06f 0006 	mvn.w	r0, #6
 80065ac:	e64e      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065ae:	f06f 0006 	mvn.w	r0, #6
 80065b2:	e64b      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065b4:	f06f 0006 	mvn.w	r0, #6
 80065b8:	e648      	b.n	800624c <IKS01A3_ENV_SENSOR_Init+0x1c>
 80065ba:	bf00      	nop
 80065bc:	080023a1 	.word	0x080023a1
 80065c0:	08002179 	.word	0x08002179
 80065c4:	08002211 	.word	0x08002211
 80065c8:	080021d5 	.word	0x080021d5
 80065cc:	0800224d 	.word	0x0800224d
 80065d0:	2000f6d8 	.word	0x2000f6d8
 80065d4:	2000f634 	.word	0x2000f634
 80065d8:	2000f628 	.word	0x2000f628
 80065dc:	2000f640 	.word	0x2000f640
 80065e0:	20000138 	.word	0x20000138
 80065e4:	2000f64c 	.word	0x2000f64c
 80065e8:	20000148 	.word	0x20000148

080065ec <IKS01A3_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80065ec:	2802      	cmp	r0, #2
 80065ee:	d819      	bhi.n	8006624 <IKS01A3_ENV_SENSOR_Enable+0x38>
{
 80065f0:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <IKS01A3_ENV_SENSOR_Enable+0x44>)
 80065f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80065f8:	ea31 0303 	bics.w	r3, r1, r3
 80065fc:	d115      	bne.n	800662a <IKS01A3_ENV_SENSOR_Enable+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80065fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006602:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <IKS01A3_ENV_SENSOR_Enable+0x48>)
 8006604:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006608:	4413      	add	r3, r2
 800660a:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <IKS01A3_ENV_SENSOR_Enable+0x4c>)
 800660c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <IKS01A3_ENV_SENSOR_Enable+0x50>)
 8006614:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006618:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800661a:	2800      	cmp	r0, #0
 800661c:	bf18      	it	ne
 800661e:	f06f 0004 	mvnne.w	r0, #4
}
 8006622:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006624:	f06f 0001 	mvn.w	r0, #1
}
 8006628:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800662a:	f06f 0001 	mvn.w	r0, #1
 800662e:	e7f8      	b.n	8006622 <IKS01A3_ENV_SENSOR_Enable+0x36>
 8006630:	2000f634 	.word	0x2000f634
 8006634:	0800e468 	.word	0x0800e468
 8006638:	2000f64c 	.word	0x2000f64c
 800663c:	2000f628 	.word	0x2000f628

08006640 <IKS01A3_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8006640:	2802      	cmp	r0, #2
 8006642:	d81b      	bhi.n	800667c <IKS01A3_ENV_SENSOR_GetValue+0x3c>
 8006644:	460b      	mov	r3, r1
 8006646:	4611      	mov	r1, r2
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006648:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <IKS01A3_ENV_SENSOR_GetValue+0x48>)
 800664a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800664e:	ea33 0202 	bics.w	r2, r3, r2
 8006652:	d116      	bne.n	8006682 <IKS01A3_ENV_SENSOR_GetValue+0x42>
{
 8006654:	b510      	push	{r4, lr}
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8006656:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <IKS01A3_ENV_SENSOR_GetValue+0x4c>)
 800665c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006660:	4413      	add	r3, r2
 8006662:	4a0b      	ldr	r2, [pc, #44]	; (8006690 <IKS01A3_ENV_SENSOR_GetValue+0x50>)
 8006664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <IKS01A3_ENV_SENSOR_GetValue+0x54>)
 800666c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006670:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006672:	2800      	cmp	r0, #0
 8006674:	bf18      	it	ne
 8006676:	f06f 0004 	mvnne.w	r0, #4
}
 800667a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800667c:	f06f 0001 	mvn.w	r0, #1
 8006680:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006682:	f06f 0001 	mvn.w	r0, #1
}
 8006686:	4770      	bx	lr
 8006688:	2000f634 	.word	0x2000f634
 800668c:	0800e468 	.word	0x0800e468
 8006690:	2000f64c 	.word	0x2000f64c
 8006694:	2000f628 	.word	0x2000f628

08006698 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	b099      	sub	sp, #100	; 0x64
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80066a2:	2801      	cmp	r0, #1
 80066a4:	f000 8092 	beq.w	80067cc <IKS01A3_MOTION_SENSOR_Init+0x134>
 80066a8:	2802      	cmp	r0, #2
 80066aa:	f000 8121 	beq.w	80068f0 <IKS01A3_MOTION_SENSOR_Init+0x258>
 80066ae:	b120      	cbz	r0, 80066ba <IKS01A3_MOTION_SENSOR_Init+0x22>
 80066b0:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 80066b4:	b019      	add	sp, #100	; 0x64
 80066b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80066ba:	2300      	movs	r3, #0
 80066bc:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80066be:	23d7      	movs	r3, #215	; 0xd7
 80066c0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80066c4:	4b78      	ldr	r3, [pc, #480]	; (80068a8 <IKS01A3_MOTION_SENSOR_Init+0x210>)
 80066c6:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80066c8:	4b78      	ldr	r3, [pc, #480]	; (80068ac <IKS01A3_MOTION_SENSOR_Init+0x214>)
 80066ca:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80066cc:	4b78      	ldr	r3, [pc, #480]	; (80068b0 <IKS01A3_MOTION_SENSOR_Init+0x218>)
 80066ce:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80066d0:	4b78      	ldr	r3, [pc, #480]	; (80068b4 <IKS01A3_MOTION_SENSOR_Init+0x21c>)
 80066d2:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80066d4:	4b78      	ldr	r3, [pc, #480]	; (80068b8 <IKS01A3_MOTION_SENSOR_Init+0x220>)
 80066d6:	930f      	str	r3, [sp, #60]	; 0x3c
  io_ctx.Delay       = IKS01A3_Delay;
 80066d8:	4b78      	ldr	r3, [pc, #480]	; (80068bc <IKS01A3_MOTION_SENSOR_Init+0x224>)
 80066da:	9310      	str	r3, [sp, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80066dc:	a909      	add	r1, sp, #36	; 0x24
 80066de:	4878      	ldr	r0, [pc, #480]	; (80068c0 <IKS01A3_MOTION_SENSOR_Init+0x228>)
 80066e0:	f7fe ff72 	bl	80055c8 <LSM6DSO_RegisterBusIO>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d15f      	bne.n	80067a8 <IKS01A3_MOTION_SENSOR_Init+0x110>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80066e8:	f10d 0107 	add.w	r1, sp, #7
 80066ec:	4874      	ldr	r0, [pc, #464]	; (80068c0 <IKS01A3_MOTION_SENSOR_Init+0x228>)
 80066ee:	f7fe f9ef 	bl	8004ad0 <LSM6DSO_ReadID>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d158      	bne.n	80067a8 <IKS01A3_MOTION_SENSOR_Init+0x110>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSO_ID)
 80066f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066fa:	2b6c      	cmp	r3, #108	; 0x6c
 80066fc:	d154      	bne.n	80067a8 <IKS01A3_MOTION_SENSOR_Init+0x110>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80066fe:	4c70      	ldr	r4, [pc, #448]	; (80068c0 <IKS01A3_MOTION_SENSOR_Init+0x228>)
 8006700:	a902      	add	r1, sp, #8
 8006702:	4620      	mov	r0, r4
 8006704:	f7fe f91e 	bl	8004944 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006708:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800670c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006710:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800671a:	4313      	orrs	r3, r2
 800671c:	4969      	ldr	r1, [pc, #420]	; (80068c4 <IKS01A3_MOTION_SENSOR_Init+0x22c>)
 800671e:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006720:	4b69      	ldr	r3, [pc, #420]	; (80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>)
 8006722:	601c      	str	r4, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006724:	4b69      	ldr	r3, [pc, #420]	; (80068cc <IKS01A3_MOTION_SENSOR_Init+0x234>)
 8006726:	496a      	ldr	r1, [pc, #424]	; (80068d0 <IKS01A3_MOTION_SENSOR_Init+0x238>)
 8006728:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800672a:	f017 0f01 	tst.w	r7, #1
 800672e:	d001      	beq.n	8006734 <IKS01A3_MOTION_SENSOR_Init+0x9c>
 8006730:	2a01      	cmp	r2, #1
 8006732:	d031      	beq.n	8006798 <IKS01A3_MOTION_SENSOR_Init+0x100>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006734:	f017 0f02 	tst.w	r7, #2
 8006738:	d003      	beq.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0xaa>
 800673a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d035      	beq.n	80067ae <IKS01A3_MOTION_SENSOR_Init+0x116>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006742:	f017 0f04 	tst.w	r7, #4
 8006746:	d12f      	bne.n	80067a8 <IKS01A3_MOTION_SENSOR_Init+0x110>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006748:	4b60      	ldr	r3, [pc, #384]	; (80068cc <IKS01A3_MOTION_SENSOR_Init+0x234>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	a911      	add	r1, sp, #68	; 0x44
 8006750:	4a5d      	ldr	r2, [pc, #372]	; (80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>)
 8006752:	6810      	ldr	r0, [r2, #0]
 8006754:	4798      	blx	r3
 8006756:	2800      	cmp	r0, #0
 8006758:	f040 8152 	bne.w	8006a00 <IKS01A3_MOTION_SENSOR_Init+0x368>
      if (cap.Acc == 1U)
 800675c:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
 8006760:	f1b8 0f01 	cmp.w	r8, #1
 8006764:	bf14      	ite	ne
 8006766:	f04f 0800 	movne.w	r8, #0
 800676a:	f04f 0801 	moveq.w	r8, #1
 800676e:	ea4f 0848 	mov.w	r8, r8, lsl #1
      if (cap.Gyro == 1U)
 8006772:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8006776:	2b01      	cmp	r3, #1
        component_functions |= MOTION_GYRO;
 8006778:	bf08      	it	eq
 800677a:	f048 0801 	orreq.w	r8, r8, #1
      if (cap.Magneto == 1U)
 800677e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8006782:	2b01      	cmp	r3, #1
 8006784:	d01f      	beq.n	80067c6 <IKS01A3_MOTION_SENSOR_Init+0x12e>
{
 8006786:	2503      	movs	r5, #3
 8006788:	2401      	movs	r4, #1
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800678a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>
 800678e:	f8df a144 	ldr.w	sl, [pc, #324]	; 80068d4 <IKS01A3_MOTION_SENSOR_Init+0x23c>
 8006792:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80068ec <IKS01A3_MOTION_SENSOR_Init+0x254>
 8006796:	e11b      	b.n	80069d0 <IKS01A3_MOTION_SENSOR_Init+0x338>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006798:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <IKS01A3_MOTION_SENSOR_Init+0x23c>)
 800679a:	4a4f      	ldr	r2, [pc, #316]	; (80068d8 <IKS01A3_MOTION_SENSOR_Init+0x240>)
 800679c:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800679e:	680b      	ldr	r3, [r1, #0]
 80067a0:	4620      	mov	r0, r4
 80067a2:	4798      	blx	r3
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d0c5      	beq.n	8006734 <IKS01A3_MOTION_SENSOR_Init+0x9c>
        return BSP_ERROR_NO_INIT;
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	e782      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80067ae:	4b49      	ldr	r3, [pc, #292]	; (80068d4 <IKS01A3_MOTION_SENSOR_Init+0x23c>)
 80067b0:	4a4a      	ldr	r2, [pc, #296]	; (80068dc <IKS01A3_MOTION_SENSOR_Init+0x244>)
 80067b2:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80067b4:	4b45      	ldr	r3, [pc, #276]	; (80068cc <IKS01A3_MOTION_SENSOR_Init+0x234>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a43      	ldr	r2, [pc, #268]	; (80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>)
 80067bc:	6810      	ldr	r0, [r2, #0]
 80067be:	4798      	blx	r3
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0be      	beq.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0xaa>
 80067c4:	e7f0      	b.n	80067a8 <IKS01A3_MOTION_SENSOR_Init+0x110>
        component_functions |= MOTION_MAGNETO;
 80067c6:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 80067ca:	e7dc      	b.n	8006786 <IKS01A3_MOTION_SENSOR_Init+0xee>
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80067cc:	2300      	movs	r3, #0
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80067d0:	2333      	movs	r3, #51	; 0x33
 80067d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80067d6:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <IKS01A3_MOTION_SENSOR_Init+0x210>)
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80067da:	4b34      	ldr	r3, [pc, #208]	; (80068ac <IKS01A3_MOTION_SENSOR_Init+0x214>)
 80067dc:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80067de:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <IKS01A3_MOTION_SENSOR_Init+0x218>)
 80067e0:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <IKS01A3_MOTION_SENSOR_Init+0x21c>)
 80067e4:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80067e6:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <IKS01A3_MOTION_SENSOR_Init+0x220>)
 80067e8:	930f      	str	r3, [sp, #60]	; 0x3c
  io_ctx.Delay       = IKS01A3_Delay;
 80067ea:	4b34      	ldr	r3, [pc, #208]	; (80068bc <IKS01A3_MOTION_SENSOR_Init+0x224>)
 80067ec:	9310      	str	r3, [sp, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80067ee:	a909      	add	r1, sp, #36	; 0x24
 80067f0:	483b      	ldr	r0, [pc, #236]	; (80068e0 <IKS01A3_MOTION_SENSOR_Init+0x248>)
 80067f2:	f7fc fe27 	bl	8003444 <LIS2DW12_RegisterBusIO>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d153      	bne.n	80068a2 <IKS01A3_MOTION_SENSOR_Init+0x20a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80067fa:	f10d 0107 	add.w	r1, sp, #7
 80067fe:	4838      	ldr	r0, [pc, #224]	; (80068e0 <IKS01A3_MOTION_SENSOR_Init+0x248>)
 8006800:	f7fc fba1 	bl	8002f46 <LIS2DW12_ReadID>
 8006804:	2800      	cmp	r0, #0
 8006806:	d14c      	bne.n	80068a2 <IKS01A3_MOTION_SENSOR_Init+0x20a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2DW12_ID)
 8006808:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800680c:	2b44      	cmp	r3, #68	; 0x44
 800680e:	d148      	bne.n	80068a2 <IKS01A3_MOTION_SENSOR_Init+0x20a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006810:	4c33      	ldr	r4, [pc, #204]	; (80068e0 <IKS01A3_MOTION_SENSOR_Init+0x248>)
 8006812:	a902      	add	r1, sp, #8
 8006814:	4620      	mov	r0, r4
 8006816:	f7fc fa1b 	bl	8002c50 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800681a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800681e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8006822:	0053      	lsls	r3, r2, #1
 8006824:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8006828:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800682c:	430b      	orrs	r3, r1
 800682e:	4925      	ldr	r1, [pc, #148]	; (80068c4 <IKS01A3_MOTION_SENSOR_Init+0x22c>)
 8006830:	604b      	str	r3, [r1, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>)
 8006834:	605c      	str	r4, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006836:	4b25      	ldr	r3, [pc, #148]	; (80068cc <IKS01A3_MOTION_SENSOR_Init+0x234>)
 8006838:	492a      	ldr	r1, [pc, #168]	; (80068e4 <IKS01A3_MOTION_SENSOR_Init+0x24c>)
 800683a:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800683c:	f017 0f02 	tst.w	r7, #2
 8006840:	d001      	beq.n	8006846 <IKS01A3_MOTION_SENSOR_Init+0x1ae>
 8006842:	2a01      	cmp	r2, #1
 8006844:	d025      	beq.n	8006892 <IKS01A3_MOTION_SENSOR_Init+0x1fa>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006846:	f017 0f05 	tst.w	r7, #5
 800684a:	d12a      	bne.n	80068a2 <IKS01A3_MOTION_SENSOR_Init+0x20a>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800684c:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <IKS01A3_MOTION_SENSOR_Init+0x234>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	a911      	add	r1, sp, #68	; 0x44
 8006854:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <IKS01A3_MOTION_SENSOR_Init+0x230>)
 8006856:	6850      	ldr	r0, [r2, #4]
 8006858:	4798      	blx	r3
 800685a:	2800      	cmp	r0, #0
 800685c:	f040 80d3 	bne.w	8006a06 <IKS01A3_MOTION_SENSOR_Init+0x36e>
      if (cap.Acc == 1U)
 8006860:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
 8006864:	f1b8 0f01 	cmp.w	r8, #1
 8006868:	bf14      	ite	ne
 800686a:	f04f 0800 	movne.w	r8, #0
 800686e:	f04f 0801 	moveq.w	r8, #1
 8006872:	ea4f 0848 	mov.w	r8, r8, lsl #1
      if (cap.Gyro == 1U)
 8006876:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800687a:	2b01      	cmp	r3, #1
        component_functions |= MOTION_GYRO;
 800687c:	bf08      	it	eq
 800687e:	f048 0801 	orreq.w	r8, r8, #1
      if (cap.Magneto == 1U)
 8006882:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8006886:	2b01      	cmp	r3, #1
 8006888:	f47f af7d 	bne.w	8006786 <IKS01A3_MOTION_SENSOR_Init+0xee>
        component_functions |= MOTION_MAGNETO;
 800688c:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8006890:	e779      	b.n	8006786 <IKS01A3_MOTION_SENSOR_Init+0xee>
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <IKS01A3_MOTION_SENSOR_Init+0x23c>)
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <IKS01A3_MOTION_SENSOR_Init+0x250>)
 8006896:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006898:	680b      	ldr	r3, [r1, #0]
 800689a:	4620      	mov	r0, r4
 800689c:	4798      	blx	r3
 800689e:	2800      	cmp	r0, #0
 80068a0:	d0d1      	beq.n	8006846 <IKS01A3_MOTION_SENSOR_Init+0x1ae>
        return BSP_ERROR_NO_INIT;
 80068a2:	f04f 30ff 	mov.w	r0, #4294967295
 80068a6:	e705      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 80068a8:	080023a1 	.word	0x080023a1
 80068ac:	08002179 	.word	0x08002179
 80068b0:	08002211 	.word	0x08002211
 80068b4:	080021d5 	.word	0x080021d5
 80068b8:	0800224d 	.word	0x0800224d
 80068bc:	08006e1d 	.word	0x08006e1d
 80068c0:	2000f7c8 	.word	0x2000f7c8
 80068c4:	2000f71c 	.word	0x2000f71c
 80068c8:	2000f710 	.word	0x2000f710
 80068cc:	2000f728 	.word	0x2000f728
 80068d0:	20000104 	.word	0x20000104
 80068d4:	2000f734 	.word	0x2000f734
 80068d8:	20000114 	.word	0x20000114
 80068dc:	200000e0 	.word	0x200000e0
 80068e0:	2000f758 	.word	0x2000f758
 80068e4:	20000064 	.word	0x20000064
 80068e8:	20000040 	.word	0x20000040
 80068ec:	0800e47c 	.word	0x0800e47c
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80068f0:	2300      	movs	r3, #0
 80068f2:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80068f4:	233d      	movs	r3, #61	; 0x3d
 80068f6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80068fa:	4b46      	ldr	r3, [pc, #280]	; (8006a14 <IKS01A3_MOTION_SENSOR_Init+0x37c>)
 80068fc:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80068fe:	4b46      	ldr	r3, [pc, #280]	; (8006a18 <IKS01A3_MOTION_SENSOR_Init+0x380>)
 8006900:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006902:	4b46      	ldr	r3, [pc, #280]	; (8006a1c <IKS01A3_MOTION_SENSOR_Init+0x384>)
 8006904:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006906:	4b46      	ldr	r3, [pc, #280]	; (8006a20 <IKS01A3_MOTION_SENSOR_Init+0x388>)
 8006908:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800690a:	4b46      	ldr	r3, [pc, #280]	; (8006a24 <IKS01A3_MOTION_SENSOR_Init+0x38c>)
 800690c:	930f      	str	r3, [sp, #60]	; 0x3c
  io_ctx.Delay       = IKS01A3_Delay;
 800690e:	4b46      	ldr	r3, [pc, #280]	; (8006a28 <IKS01A3_MOTION_SENSOR_Init+0x390>)
 8006910:	9310      	str	r3, [sp, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006912:	a909      	add	r1, sp, #36	; 0x24
 8006914:	4845      	ldr	r0, [pc, #276]	; (8006a2c <IKS01A3_MOTION_SENSOR_Init+0x394>)
 8006916:	f7fd fb75 	bl	8004004 <LIS2MDL_RegisterBusIO>
 800691a:	2800      	cmp	r0, #0
 800691c:	d152      	bne.n	80069c4 <IKS01A3_MOTION_SENSOR_Init+0x32c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800691e:	f10d 0107 	add.w	r1, sp, #7
 8006922:	4842      	ldr	r0, [pc, #264]	; (8006a2c <IKS01A3_MOTION_SENSOR_Init+0x394>)
 8006924:	f7fd fa9e 	bl	8003e64 <LIS2MDL_ReadID>
 8006928:	2800      	cmp	r0, #0
 800692a:	d14b      	bne.n	80069c4 <IKS01A3_MOTION_SENSOR_Init+0x32c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 800692c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006930:	2b40      	cmp	r3, #64	; 0x40
 8006932:	d147      	bne.n	80069c4 <IKS01A3_MOTION_SENSOR_Init+0x32c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006934:	4c3d      	ldr	r4, [pc, #244]	; (8006a2c <IKS01A3_MOTION_SENSOR_Init+0x394>)
 8006936:	a902      	add	r1, sp, #8
 8006938:	4620      	mov	r0, r4
 800693a:	f7fc ffa5 	bl	8003888 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800693e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006942:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006946:	0093      	lsls	r3, r2, #2
 8006948:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800694c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8006950:	430b      	orrs	r3, r1
 8006952:	4937      	ldr	r1, [pc, #220]	; (8006a30 <IKS01A3_MOTION_SENSOR_Init+0x398>)
 8006954:	608b      	str	r3, [r1, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <IKS01A3_MOTION_SENSOR_Init+0x39c>)
 8006958:	609c      	str	r4, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800695a:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <IKS01A3_MOTION_SENSOR_Init+0x3a0>)
 800695c:	4937      	ldr	r1, [pc, #220]	; (8006a3c <IKS01A3_MOTION_SENSOR_Init+0x3a4>)
 800695e:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006960:	f017 0f04 	tst.w	r7, #4
 8006964:	d001      	beq.n	800696a <IKS01A3_MOTION_SENSOR_Init+0x2d2>
 8006966:	2a01      	cmp	r2, #1
 8006968:	d024      	beq.n	80069b4 <IKS01A3_MOTION_SENSOR_Init+0x31c>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800696a:	f017 0f03 	tst.w	r7, #3
 800696e:	d129      	bne.n	80069c4 <IKS01A3_MOTION_SENSOR_Init+0x32c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <IKS01A3_MOTION_SENSOR_Init+0x3a0>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	a911      	add	r1, sp, #68	; 0x44
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <IKS01A3_MOTION_SENSOR_Init+0x39c>)
 800697a:	6890      	ldr	r0, [r2, #8]
 800697c:	4798      	blx	r3
 800697e:	2800      	cmp	r0, #0
 8006980:	d144      	bne.n	8006a0c <IKS01A3_MOTION_SENSOR_Init+0x374>
      if (cap.Acc == 1U)
 8006982:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
 8006986:	f1b8 0f01 	cmp.w	r8, #1
 800698a:	bf14      	ite	ne
 800698c:	f04f 0800 	movne.w	r8, #0
 8006990:	f04f 0801 	moveq.w	r8, #1
 8006994:	ea4f 0848 	mov.w	r8, r8, lsl #1
      if (cap.Gyro == 1U)
 8006998:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800699c:	2b01      	cmp	r3, #1
        component_functions |= MOTION_GYRO;
 800699e:	bf08      	it	eq
 80069a0:	f048 0801 	orreq.w	r8, r8, #1
      if (cap.Magneto == 1U)
 80069a4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f47f aeec 	bne.w	8006786 <IKS01A3_MOTION_SENSOR_Init+0xee>
        component_functions |= MOTION_MAGNETO;
 80069ae:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 80069b2:	e6e8      	b.n	8006786 <IKS01A3_MOTION_SENSOR_Init+0xee>
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069b4:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <IKS01A3_MOTION_SENSOR_Init+0x3a8>)
 80069b6:	4a23      	ldr	r2, [pc, #140]	; (8006a44 <IKS01A3_MOTION_SENSOR_Init+0x3ac>)
 80069b8:	621a      	str	r2, [r3, #32]
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80069ba:	680b      	ldr	r3, [r1, #0]
 80069bc:	4620      	mov	r0, r4
 80069be:	4798      	blx	r3
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d0d2      	beq.n	800696a <IKS01A3_MOTION_SENSOR_Init+0x2d2>
        return BSP_ERROR_NO_INIT;
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	e674      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
    function = function << 1;
 80069ca:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80069cc:	3d01      	subs	r5, #1
 80069ce:	d015      	beq.n	80069fc <IKS01A3_MOTION_SENSOR_Init+0x364>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80069d0:	ea34 0307 	bics.w	r3, r4, r7
 80069d4:	d1f9      	bne.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x332>
 80069d6:	ea34 0308 	bics.w	r3, r4, r8
 80069da:	d1f6      	bne.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x332>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80069dc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80069e0:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80069e4:	4413      	add	r3, r2
 80069e6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80069f0:	4798      	blx	r3
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0e9      	beq.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x332>
        return BSP_ERROR_COMPONENT_FAILURE;
 80069f6:	f06f 0004 	mvn.w	r0, #4
 80069fa:	e65b      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 80069fc:	2000      	movs	r0, #0
 80069fe:	e659      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006a00:	f06f 0006 	mvn.w	r0, #6
 8006a04:	e656      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006a06:	f06f 0006 	mvn.w	r0, #6
 8006a0a:	e653      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006a0c:	f06f 0006 	mvn.w	r0, #6
 8006a10:	e650      	b.n	80066b4 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 8006a12:	bf00      	nop
 8006a14:	080023a1 	.word	0x080023a1
 8006a18:	08002179 	.word	0x08002179
 8006a1c:	08002211 	.word	0x08002211
 8006a20:	080021d5 	.word	0x080021d5
 8006a24:	0800224d 	.word	0x0800224d
 8006a28:	08006e1d 	.word	0x08006e1d
 8006a2c:	2000f794 	.word	0x2000f794
 8006a30:	2000f71c 	.word	0x2000f71c
 8006a34:	2000f710 	.word	0x2000f710
 8006a38:	2000f728 	.word	0x2000f728
 8006a3c:	20000074 	.word	0x20000074
 8006a40:	2000f734 	.word	0x2000f734
 8006a44:	20000084 	.word	0x20000084

08006a48 <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006a48:	2802      	cmp	r0, #2
 8006a4a:	d819      	bhi.n	8006a80 <IKS01A3_MOTION_SENSOR_Enable+0x38>
{
 8006a4c:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <IKS01A3_MOTION_SENSOR_Enable+0x44>)
 8006a50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006a54:	ea31 0303 	bics.w	r3, r1, r3
 8006a58:	d115      	bne.n	8006a86 <IKS01A3_MOTION_SENSOR_Enable+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006a5a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006a5e:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 8006a60:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 8006a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <IKS01A3_MOTION_SENSOR_Enable+0x50>)
 8006a70:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006a74:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a76:	2800      	cmp	r0, #0
 8006a78:	bf18      	it	ne
 8006a7a:	f06f 0004 	mvnne.w	r0, #4
}
 8006a7e:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006a80:	f06f 0001 	mvn.w	r0, #1
}
 8006a84:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006a86:	f06f 0001 	mvn.w	r0, #1
 8006a8a:	e7f8      	b.n	8006a7e <IKS01A3_MOTION_SENSOR_Enable+0x36>
 8006a8c:	2000f71c 	.word	0x2000f71c
 8006a90:	0800e47c 	.word	0x0800e47c
 8006a94:	2000f734 	.word	0x2000f734
 8006a98:	2000f710 	.word	0x2000f710

08006a9c <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006a9c:	2802      	cmp	r0, #2
 8006a9e:	d81b      	bhi.n	8006ad8 <IKS01A3_MOTION_SENSOR_GetAxes+0x3c>
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006aa4:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <IKS01A3_MOTION_SENSOR_GetAxes+0x48>)
 8006aa6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006aaa:	ea33 0202 	bics.w	r2, r3, r2
 8006aae:	d116      	bne.n	8006ade <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
{
 8006ab0:	b510      	push	{r4, lr}
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006ab2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8006ab6:	4c0c      	ldr	r4, [pc, #48]	; (8006ae8 <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 8006ab8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006abc:	4413      	add	r3, r2
 8006abe:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 8006ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <IKS01A3_MOTION_SENSOR_GetAxes+0x54>)
 8006ac8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006acc:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	bf18      	it	ne
 8006ad2:	f06f 0004 	mvnne.w	r0, #4
}
 8006ad6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006ad8:	f06f 0001 	mvn.w	r0, #1
 8006adc:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006ade:	f06f 0001 	mvn.w	r0, #1
}
 8006ae2:	4770      	bx	lr
 8006ae4:	2000f71c 	.word	0x2000f71c
 8006ae8:	0800e47c 	.word	0x0800e47c
 8006aec:	2000f734 	.word	0x2000f734
 8006af0:	2000f710 	.word	0x2000f710

08006af4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006af4:	b530      	push	{r4, r5, lr}
 8006af6:	b089      	sub	sp, #36	; 0x24
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af8:	2400      	movs	r4, #0
 8006afa:	9401      	str	r4, [sp, #4]
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <BSP_LED_Init+0x60>)
 8006afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b00:	f042 0201 	orr.w	r2, r2, #1
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
 8006b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b08:	f002 0201 	and.w	r2, r2, #1
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	9a01      	ldr	r2, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b10:	9403      	str	r4, [sp, #12]
 8006b12:	9404      	str	r4, [sp, #16]
 8006b14:	9405      	str	r4, [sp, #20]
 8006b16:	9406      	str	r4, [sp, #24]
 8006b18:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b1a:	9402      	str	r4, [sp, #8]
 8006b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	9302      	str	r3, [sp, #8]
 8006b2c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8006b2e:	4d0a      	ldr	r5, [pc, #40]	; (8006b58 <BSP_LED_Init+0x64>)
 8006b30:	4622      	mov	r2, r4
 8006b32:	2120      	movs	r1, #32
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fb9d 	bl	8007274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b44:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8006b46:	a903      	add	r1, sp, #12
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 fa17 	bl	8006f7c <HAL_GPIO_Init>
}
 8006b4e:	4620      	mov	r0, r4
 8006b50:	b009      	add	sp, #36	; 0x24
 8006b52:	bd30      	pop	{r4, r5, pc}
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40020000 	.word	0x40020000

08006b5c <BSP_LED_On>:
{
 8006b5c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2120      	movs	r1, #32
 8006b62:	4802      	ldr	r0, [pc, #8]	; (8006b6c <BSP_LED_On+0x10>)
 8006b64:	f000 fb86 	bl	8007274 <HAL_GPIO_WritePin>
}
 8006b68:	2000      	movs	r0, #0
 8006b6a:	bd08      	pop	{r3, pc}
 8006b6c:	40020000 	.word	0x40020000

08006b70 <BSP_LED_Off>:
{
 8006b70:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8006b72:	2200      	movs	r2, #0
 8006b74:	2120      	movs	r1, #32
 8006b76:	4802      	ldr	r0, [pc, #8]	; (8006b80 <BSP_LED_Off+0x10>)
 8006b78:	f000 fb7c 	bl	8007274 <HAL_GPIO_WritePin>
}
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	bd08      	pop	{r3, pc}
 8006b80:	40020000 	.word	0x40020000

08006b84 <BSP_LED_Toggle>:
{
 8006b84:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8006b86:	2120      	movs	r1, #32
 8006b88:	4802      	ldr	r0, [pc, #8]	; (8006b94 <BSP_LED_Toggle+0x10>)
 8006b8a:	f000 fb79 	bl	8007280 <HAL_GPIO_TogglePin>
}
 8006b8e:	2000      	movs	r0, #0
 8006b90:	bd08      	pop	{r3, pc}
 8006b92:	bf00      	nop
 8006b94:	40020000 	.word	0x40020000

08006b98 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006b98:	b530      	push	{r4, r5, lr}
 8006b9a:	b089      	sub	sp, #36	; 0x24
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	460c      	mov	r4, r1
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	9201      	str	r2, [sp, #4]
 8006ba4:	4b21      	ldr	r3, [pc, #132]	; (8006c2c <BSP_PB_Init+0x94>)
 8006ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ba8:	f041 0104 	orr.w	r1, r1, #4
 8006bac:	6319      	str	r1, [r3, #48]	; 0x30
 8006bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bb0:	f001 0104 	and.w	r1, r1, #4
 8006bb4:	9101      	str	r1, [sp, #4]
 8006bb6:	9901      	ldr	r1, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb8:	9205      	str	r2, [sp, #20]
 8006bba:	9206      	str	r2, [sp, #24]
 8006bbc:	9207      	str	r2, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc2:	f042 0204 	orr.w	r2, r2, #4
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8006bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bd6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bd8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006bdc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006bde:	a903      	add	r1, sp, #12
 8006be0:	4813      	ldr	r0, [pc, #76]	; (8006c30 <BSP_PB_Init+0x98>)
 8006be2:	f000 f9cb 	bl	8006f7c <HAL_GPIO_Init>
  if (ButtonMode == BUTTON_MODE_EXTI)
 8006be6:	2c01      	cmp	r4, #1
 8006be8:	d002      	beq.n	8006bf0 <BSP_PB_Init+0x58>
  int32_t ret = BSP_ERROR_NONE;
 8006bea:	2000      	movs	r0, #0
}
 8006bec:	b009      	add	sp, #36	; 0x24
 8006bee:	bd30      	pop	{r4, r5, pc}
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006bf0:	4c10      	ldr	r4, [pc, #64]	; (8006c34 <BSP_PB_Init+0x9c>)
 8006bf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bf6:	4910      	ldr	r1, [pc, #64]	; (8006c38 <BSP_PB_Init+0xa0>)
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 f9a6 	bl	8006f4a <HAL_EXTI_GetHandle>
 8006bfe:	b978      	cbnz	r0, 8006c20 <BSP_PB_Init+0x88>
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8006c00:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <BSP_PB_Init+0xa4>)
 8006c02:	2100      	movs	r1, #0
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 f999 	bl	8006f3c <HAL_EXTI_RegisterCallback>
 8006c0a:	b960      	cbnz	r0, 8006c26 <BSP_PB_Init+0x8e>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	210f      	movs	r1, #15
 8006c10:	2028      	movs	r0, #40	; 0x28
 8006c12:	f000 f929 	bl	8006e68 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006c16:	2028      	movs	r0, #40	; 0x28
 8006c18:	f000 f95c 	bl	8006ed4 <HAL_NVIC_EnableIRQ>
  int32_t ret = BSP_ERROR_NONE;
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7e5      	b.n	8006bec <BSP_PB_Init+0x54>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006c20:	f06f 0003 	mvn.w	r0, #3
 8006c24:	e7e2      	b.n	8006bec <BSP_PB_Init+0x54>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006c26:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006c2a:	e7df      	b.n	8006bec <BSP_PB_Init+0x54>
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	40020800 	.word	0x40020800
 8006c34:	20000160 	.word	0x20000160
 8006c38:	0600000d 	.word	0x0600000d
 8006c3c:	08006c59 	.word	0x08006c59

08006c40 <BSP_PB_GetState>:
{
 8006c40:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8006c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c46:	4803      	ldr	r0, [pc, #12]	; (8006c54 <BSP_PB_GetState+0x14>)
 8006c48:	f000 fb0e 	bl	8007268 <HAL_GPIO_ReadPin>
}
 8006c4c:	fab0 f080 	clz	r0, r0
 8006c50:	0940      	lsrs	r0, r0, #5
 8006c52:	bd08      	pop	{r3, pc}
 8006c54:	40020800 	.word	0x40020800

08006c58 <BUTTON_USER_EXTI_Callback>:
{
 8006c58:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f7fa fc88 	bl	8001570 <BSP_PB_Callback>
}
 8006c60:	bd08      	pop	{r3, pc}
	...

08006c64 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006c64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_OK;

  huart->Instance = USART2;
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <MX_USART2_UART_Init+0x28>)
 8006c68:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate = 115200;
 8006c6a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c6e:	6042      	str	r2, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006c70:	2200      	movs	r2, #0
 8006c72:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006c74:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006c76:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006c78:	210c      	movs	r1, #12
 8006c7a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c7c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006c7e:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8006c80:	f002 f92d 	bl	8008ede <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8006c84:	3800      	subs	r0, #0
 8006c86:	bf18      	it	ne
 8006c88:	2001      	movne	r0, #1
 8006c8a:	bd08      	pop	{r3, pc}
 8006c8c:	40004400 	.word	0x40004400

08006c90 <BSP_COM_Init>:
  if(COM > COMn)
 8006c90:	2801      	cmp	r0, #1
 8006c92:	d84d      	bhi.n	8006d30 <BSP_COM_Init+0xa0>
{
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	4604      	mov	r4, r0
     hcom_uart[COM].Instance = COM_USART[COM];
 8006c9c:	4f26      	ldr	r7, [pc, #152]	; (8006d38 <BSP_COM_Init+0xa8>)
 8006c9e:	0106      	lsls	r6, r0, #4
 8006ca0:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8006ca4:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <BSP_COM_Init+0xac>)
 8006ca6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006caa:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cae:	2500      	movs	r5, #0
 8006cb0:	9501      	str	r5, [sp, #4]
 8006cb2:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <BSP_COM_Init+0xb0>)
 8006cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
 8006cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cbe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cc6:	9502      	str	r5, [sp, #8]
 8006cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006cda:	2304      	movs	r3, #4
 8006cdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	f04f 0a02 	mov.w	sl, #2
 8006ce2:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ce8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006cea:	f04f 0907 	mov.w	r9, #7
 8006cee:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006cf2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8006d44 <BSP_COM_Init+0xb4>
 8006cf6:	a903      	add	r1, sp, #12
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	f000 f93f 	bl	8006f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006cfe:	2308      	movs	r3, #8
 8006d00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d02:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d06:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d08:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006d0a:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006d0e:	a903      	add	r1, sp, #12
 8006d10:	4640      	mov	r0, r8
 8006d12:	f000 f933 	bl	8006f7c <HAL_GPIO_Init>
    USART2_MspInit(&hcom_uart[COM]);
 8006d16:	1930      	adds	r0, r6, r4
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006d18:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006d1c:	f7ff ffa2 	bl	8006c64 <MX_USART2_UART_Init>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006d20:	42a8      	cmp	r0, r5
 8006d22:	bf0c      	ite	eq
 8006d24:	4628      	moveq	r0, r5
 8006d26:	f06f 0003 	mvnne.w	r0, #3
}
 8006d2a:	b008      	add	sp, #32
 8006d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006d30:	f06f 0001 	mvn.w	r0, #1
}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2000f804 	.word	0x2000f804
 8006d3c:	2000015c 	.word	0x2000015c
 8006d40:	40023800 	.word	0x40023800
 8006d44:	40020000 	.word	0x40020000

08006d48 <__io_putchar>:
{
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	9001      	str	r0, [sp, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <__io_putchar+0x28>)
 8006d50:	7818      	ldrb	r0, [r3, #0]
 8006d52:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8006d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	a901      	add	r1, sp, #4
 8006d5e:	4c05      	ldr	r4, [pc, #20]	; (8006d74 <__io_putchar+0x2c>)
 8006d60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006d64:	f002 f8ea 	bl	8008f3c <HAL_UART_Transmit>
}
 8006d68:	9801      	ldr	r0, [sp, #4]
 8006d6a:	b002      	add	sp, #8
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000f800 	.word	0x2000f800
 8006d74:	2000f804 	.word	0x2000f804

08006d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <HAL_InitTick+0x40>)
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d88:	4a0c      	ldr	r2, [pc, #48]	; (8006dbc <HAL_InitTick+0x44>)
 8006d8a:	6810      	ldr	r0, [r2, #0]
 8006d8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d90:	f000 f8c0 	bl	8006f14 <HAL_SYSTICK_Config>
 8006d94:	b968      	cbnz	r0, 8006db2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d96:	2c0f      	cmp	r4, #15
 8006d98:	d901      	bls.n	8006d9e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	e00a      	b.n	8006db4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	4621      	mov	r1, r4
 8006da2:	f04f 30ff 	mov.w	r0, #4294967295
 8006da6:	f000 f85f 	bl	8006e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_InitTick+0x48>)
 8006dac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dae:	2000      	movs	r0, #0
 8006db0:	e000      	b.n	8006db4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8006db2:	2001      	movs	r0, #1
}
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	20000168 	.word	0x20000168
 8006dbc:	20000004 	.word	0x20000004
 8006dc0:	2000016c 	.word	0x2000016c

08006dc4 <HAL_Init>:
{
 8006dc4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <HAL_Init+0x30>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dde:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006de0:	2003      	movs	r0, #3
 8006de2:	f000 f82f 	bl	8006e44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7ff ffc6 	bl	8006d78 <HAL_InitTick>
  HAL_MspInit();
 8006dec:	f7fb f89c 	bl	8001f28 <HAL_MspInit>
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	bd08      	pop	{r3, pc}
 8006df4:	40023c00 	.word	0x40023c00

08006df8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006df8:	4a03      	ldr	r2, [pc, #12]	; (8006e08 <HAL_IncTick+0x10>)
 8006dfa:	6811      	ldr	r1, [r2, #0]
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <HAL_IncTick+0x14>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	440b      	add	r3, r1
 8006e02:	6013      	str	r3, [r2, #0]
}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	2000f848 	.word	0x2000f848
 8006e0c:	20000168 	.word	0x20000168

08006e10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006e10:	4b01      	ldr	r3, [pc, #4]	; (8006e18 <HAL_GetTick+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	2000f848 	.word	0x2000f848

08006e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006e20:	f7ff fff6 	bl	8006e10 <HAL_GetTick>
 8006e24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006e2a:	d002      	beq.n	8006e32 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <HAL_Delay+0x24>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e32:	f7ff ffed 	bl	8006e10 <HAL_GetTick>
 8006e36:	1b40      	subs	r0, r0, r5
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d3fa      	bcc.n	8006e32 <HAL_Delay+0x16>
  {
  }
}
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000168 	.word	0x20000168

08006e44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e44:	4907      	ldr	r1, [pc, #28]	; (8006e64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006e46:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e48:	0203      	lsls	r3, r0, #8
 8006e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e52:	0412      	lsls	r2, r2, #16
 8006e54:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006e60:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e62:	4770      	bx	lr
 8006e64:	e000ed00 	.word	0xe000ed00

08006e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e68:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <HAL_NVIC_SetPriority+0x64>)
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e72:	f1c3 0c07 	rsb	ip, r3, #7
 8006e76:	f1bc 0f04 	cmp.w	ip, #4
 8006e7a:	bf28      	it	cs
 8006e7c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e80:	f103 0e04 	add.w	lr, r3, #4
 8006e84:	f1be 0f06 	cmp.w	lr, #6
 8006e88:	bf8c      	ite	hi
 8006e8a:	3b03      	subhi	r3, #3
 8006e8c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e8e:	f04f 3eff 	mov.w	lr, #4294967295
 8006e92:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006e96:	ea21 010c 	bic.w	r1, r1, ip
 8006e9a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e9c:	fa0e fe03 	lsl.w	lr, lr, r3
 8006ea0:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	db09      	blt.n	8006ebe <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eaa:	0109      	lsls	r1, r1, #4
 8006eac:	b2c9      	uxtb	r1, r1
 8006eae:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006eb2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006eb6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006eba:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ebe:	f000 000f 	and.w	r0, r0, #15
 8006ec2:	0109      	lsls	r1, r1, #4
 8006ec4:	b2c9      	uxtb	r1, r1
 8006ec6:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <HAL_NVIC_SetPriority+0x68>)
 8006ec8:	5419      	strb	r1, [r3, r0]
 8006eca:	e7f6      	b.n	8006eba <HAL_NVIC_SetPriority+0x52>
 8006ecc:	e000ed00 	.word	0xe000ed00
 8006ed0:	e000ed14 	.word	0xe000ed14

08006ed4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	db07      	blt.n	8006ee8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ed8:	0941      	lsrs	r1, r0, #5
 8006eda:	f000 001f 	and.w	r0, r0, #31
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4083      	lsls	r3, r0
 8006ee2:	4a02      	ldr	r2, [pc, #8]	; (8006eec <HAL_NVIC_EnableIRQ+0x18>)
 8006ee4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	e000e100 	.word	0xe000e100

08006ef0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ef0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ef4:	4905      	ldr	r1, [pc, #20]	; (8006f0c <HAL_NVIC_SystemReset+0x1c>)
 8006ef6:	68ca      	ldr	r2, [r1, #12]
 8006ef8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006efc:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <HAL_NVIC_SystemReset+0x20>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60cb      	str	r3, [r1, #12]
 8006f02:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006f06:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006f08:	e7fd      	b.n	8006f06 <HAL_NVIC_SystemReset+0x16>
 8006f0a:	bf00      	nop
 8006f0c:	e000ed00 	.word	0xe000ed00
 8006f10:	05fa0004 	.word	0x05fa0004

08006f14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f14:	3801      	subs	r0, #1
 8006f16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006f1a:	d20b      	bcs.n	8006f34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f22:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <HAL_SYSTICK_Config+0x24>)
 8006f24:	21f0      	movs	r1, #240	; 0xf0
 8006f26:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f2e:	2207      	movs	r2, #7
 8006f30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006f34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006f36:	4770      	bx	lr
 8006f38:	e000ed00 	.word	0xe000ed00

08006f3c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006f3c:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8006f3e:	4608      	mov	r0, r1
 8006f40:	b909      	cbnz	r1, 8006f46 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006f42:	605a      	str	r2, [r3, #4]
      break;
 8006f44:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8006f46:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8006f48:	4770      	bx	lr

08006f4a <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006f4a:	b110      	cbz	r0, 8006f52 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006f4c:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4770      	bx	lr
    return HAL_ERROR;
 8006f52:	2001      	movs	r0, #1
  }
}
 8006f54:	4770      	bx	lr
	...

08006f58 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006f58:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	f003 021f 	and.w	r2, r3, #31
 8006f60:	2301      	movs	r3, #1
 8006f62:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006f64:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <HAL_EXTI_IRQHandler+0x20>)
 8006f66:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 8006f68:	421a      	tst	r2, r3
 8006f6a:	d004      	beq.n	8006f76 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006f6c:	4a02      	ldr	r2, [pc, #8]	; (8006f78 <HAL_EXTI_IRQHandler+0x20>)
 8006f6e:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006f70:	6843      	ldr	r3, [r0, #4]
 8006f72:	b103      	cbz	r3, 8006f76 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8006f74:	4798      	blx	r3
    }
  }
}
 8006f76:	bd08      	pop	{r3, pc}
 8006f78:	40013c00 	.word	0x40013c00

08006f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	b083      	sub	sp, #12
 8006f82:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f84:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f86:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f8a:	2503      	movs	r5, #3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f8c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8007144 <HAL_GPIO_Init+0x1c8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f90:	4c6a      	ldr	r4, [pc, #424]	; (800713c <HAL_GPIO_Init+0x1c0>)
 8006f92:	e04b      	b.n	800702c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8006f94:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f96:	fa05 fa02 	lsl.w	sl, r5, r2
 8006f9a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f9e:	68cf      	ldr	r7, [r1, #12]
 8006fa0:	4097      	lsls	r7, r2
 8006fa2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006fa6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006fa8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006faa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fae:	684f      	ldr	r7, [r1, #4]
 8006fb0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8006fb4:	409f      	lsls	r7, r3
 8006fb6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8006fba:	6047      	str	r7, [r0, #4]
 8006fbc:	e044      	b.n	8007048 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fbe:	f04f 0c00 	mov.w	ip, #0
 8006fc2:	fa0c fc0b 	lsl.w	ip, ip, fp
 8006fc6:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fca:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8006fce:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8006fd0:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fd4:	684e      	ldr	r6, [r1, #4]
 8006fd6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8006fda:	bf0c      	ite	eq
 8006fdc:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8006fe0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8006fe4:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8006fe6:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fe8:	684e      	ldr	r6, [r1, #4]
 8006fea:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8006fee:	bf0c      	ite	eq
 8006ff0:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8006ff4:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8006ff8:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8006ffa:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ffc:	684e      	ldr	r6, [r1, #4]
 8006ffe:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8007002:	bf0c      	ite	eq
 8007004:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8007008:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 800700c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800700e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007010:	684e      	ldr	r6, [r1, #4]
 8007012:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8007016:	bf0c      	ite	eq
 8007018:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800701c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8007020:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007022:	3301      	adds	r3, #1
 8007024:	3202      	adds	r2, #2
 8007026:	2b10      	cmp	r3, #16
 8007028:	f000 8085 	beq.w	8007136 <HAL_GPIO_Init+0x1ba>
    ioposition = 0x01U << position;
 800702c:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007030:	680f      	ldr	r7, [r1, #0]
 8007032:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8007036:	ea3c 0707 	bics.w	r7, ip, r7
 800703a:	d1f2      	bne.n	8007022 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800703c:	684f      	ldr	r7, [r1, #4]
 800703e:	f007 0703 	and.w	r7, r7, #3
 8007042:	3f01      	subs	r7, #1
 8007044:	2f01      	cmp	r7, #1
 8007046:	d9a5      	bls.n	8006f94 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007048:	684f      	ldr	r7, [r1, #4]
 800704a:	f007 0703 	and.w	r7, r7, #3
 800704e:	2f03      	cmp	r7, #3
 8007050:	d024      	beq.n	800709c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8007052:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007054:	fa05 fc02 	lsl.w	ip, r5, r2
 8007058:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800705c:	688f      	ldr	r7, [r1, #8]
 800705e:	4097      	lsls	r7, r2
 8007060:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8007064:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007066:	684f      	ldr	r7, [r1, #4]
 8007068:	f007 0703 	and.w	r7, r7, #3
 800706c:	2f02      	cmp	r7, #2
 800706e:	d115      	bne.n	800709c <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8007070:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8007074:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007078:	f8dc a020 	ldr.w	sl, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800707c:	f003 0b07 	and.w	fp, r3, #7
 8007080:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007084:	270f      	movs	r7, #15
 8007086:	fa07 f70b 	lsl.w	r7, r7, fp
 800708a:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800708e:	690f      	ldr	r7, [r1, #16]
 8007090:	fa07 f70b 	lsl.w	r7, r7, fp
 8007094:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8007098:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 800709c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800709e:	fa05 fc02 	lsl.w	ip, r5, r2
 80070a2:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070a6:	684f      	ldr	r7, [r1, #4]
 80070a8:	f007 0703 	and.w	r7, r7, #3
 80070ac:	4097      	lsls	r7, r2
 80070ae:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80070b2:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070b4:	684f      	ldr	r7, [r1, #4]
 80070b6:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 80070ba:	d0b2      	beq.n	8007022 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070bc:	2700      	movs	r7, #0
 80070be:	9701      	str	r7, [sp, #4]
 80070c0:	4e1f      	ldr	r6, [pc, #124]	; (8007140 <HAL_GPIO_Init+0x1c4>)
 80070c2:	6c77      	ldr	r7, [r6, #68]	; 0x44
 80070c4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80070c8:	6477      	str	r7, [r6, #68]	; 0x44
 80070ca:	6c77      	ldr	r7, [r6, #68]	; 0x44
 80070cc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80070d0:	9701      	str	r7, [sp, #4]
 80070d2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80070d4:	f023 0703 	bic.w	r7, r3, #3
 80070d8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80070dc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80070e0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070e4:	f003 0b03 	and.w	fp, r3, #3
 80070e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80070ec:	f04f 0c0f 	mov.w	ip, #15
 80070f0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80070f4:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070f8:	4540      	cmp	r0, r8
 80070fa:	f43f af60 	beq.w	8006fbe <HAL_GPIO_Init+0x42>
 80070fe:	f5a6 5650 	sub.w	r6, r6, #13312	; 0x3400
 8007102:	42b0      	cmp	r0, r6
 8007104:	d010      	beq.n	8007128 <HAL_GPIO_Init+0x1ac>
 8007106:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800710a:	42b0      	cmp	r0, r6
 800710c:	d00e      	beq.n	800712c <HAL_GPIO_Init+0x1b0>
 800710e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007112:	42b0      	cmp	r0, r6
 8007114:	d00d      	beq.n	8007132 <HAL_GPIO_Init+0x1b6>
 8007116:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800711a:	42b0      	cmp	r0, r6
 800711c:	bf0c      	ite	eq
 800711e:	f04f 0c04 	moveq.w	ip, #4
 8007122:	f04f 0c07 	movne.w	ip, #7
 8007126:	e74c      	b.n	8006fc2 <HAL_GPIO_Init+0x46>
 8007128:	46f4      	mov	ip, lr
 800712a:	e74a      	b.n	8006fc2 <HAL_GPIO_Init+0x46>
 800712c:	f04f 0c02 	mov.w	ip, #2
 8007130:	e747      	b.n	8006fc2 <HAL_GPIO_Init+0x46>
 8007132:	46ac      	mov	ip, r5
 8007134:	e745      	b.n	8006fc2 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8007136:	b003      	add	sp, #12
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	40013c00 	.word	0x40013c00
 8007140:	40023800 	.word	0x40023800
 8007144:	40020000 	.word	0x40020000

08007148 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800714e:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007150:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007152:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007156:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800715a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8007264 <HAL_GPIO_DeInit+0x11c>
 800715e:	e029      	b.n	80071b4 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007160:	f04f 0900 	mov.w	r9, #0
 8007164:	9d01      	ldr	r5, [sp, #4]
 8007166:	fa09 f505 	lsl.w	r5, r9, r5
 800716a:	4565      	cmp	r5, ip
 800716c:	d058      	beq.n	8007220 <HAL_GPIO_DeInit+0xd8>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800716e:	6805      	ldr	r5, [r0, #0]
 8007170:	005c      	lsls	r4, r3, #1
 8007172:	fa0b f404 	lsl.w	r4, fp, r4
 8007176:	ea25 0504 	bic.w	r5, r5, r4
 800717a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800717c:	08de      	lsrs	r6, r3, #3
 800717e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007182:	f8d6 c020 	ldr.w	ip, [r6, #32]
 8007186:	f003 0507 	and.w	r5, r3, #7
 800718a:	00ad      	lsls	r5, r5, #2
 800718c:	fa0a f505 	lsl.w	r5, sl, r5
 8007190:	ea2c 0505 	bic.w	r5, ip, r5
 8007194:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007196:	68c5      	ldr	r5, [r0, #12]
 8007198:	ea25 0504 	bic.w	r5, r5, r4
 800719c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800719e:	6845      	ldr	r5, [r0, #4]
 80071a0:	ea25 0202 	bic.w	r2, r5, r2
 80071a4:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071a6:	6882      	ldr	r2, [r0, #8]
 80071a8:	ea22 0204 	bic.w	r2, r2, r4
 80071ac:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071ae:	3301      	adds	r3, #1
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d052      	beq.n	800725a <HAL_GPIO_DeInit+0x112>
    ioposition = 0x01U << position;
 80071b4:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80071b8:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 80071bc:	ea32 0401 	bics.w	r4, r2, r1
 80071c0:	d1f5      	bne.n	80071ae <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80071c2:	f023 0403 	bic.w	r4, r3, #3
 80071c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80071ca:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 80071ce:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80071d2:	f003 0503 	and.w	r5, r3, #3
 80071d6:	00ad      	lsls	r5, r5, #2
 80071d8:	9501      	str	r5, [sp, #4]
 80071da:	fa0a fe05 	lsl.w	lr, sl, r5
 80071de:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80071e2:	4d1f      	ldr	r5, [pc, #124]	; (8007260 <HAL_GPIO_DeInit+0x118>)
 80071e4:	42a8      	cmp	r0, r5
 80071e6:	d0bb      	beq.n	8007160 <HAL_GPIO_DeInit+0x18>
 80071e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80071ec:	42a8      	cmp	r0, r5
 80071ee:	d010      	beq.n	8007212 <HAL_GPIO_DeInit+0xca>
 80071f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80071f4:	42a8      	cmp	r0, r5
 80071f6:	d00e      	beq.n	8007216 <HAL_GPIO_DeInit+0xce>
 80071f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80071fc:	42a8      	cmp	r0, r5
 80071fe:	d00d      	beq.n	800721c <HAL_GPIO_DeInit+0xd4>
 8007200:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007204:	42a8      	cmp	r0, r5
 8007206:	bf0c      	ite	eq
 8007208:	f04f 0904 	moveq.w	r9, #4
 800720c:	f04f 0907 	movne.w	r9, #7
 8007210:	e7a8      	b.n	8007164 <HAL_GPIO_DeInit+0x1c>
 8007212:	46b9      	mov	r9, r7
 8007214:	e7a6      	b.n	8007164 <HAL_GPIO_DeInit+0x1c>
 8007216:	f04f 0902 	mov.w	r9, #2
 800721a:	e7a3      	b.n	8007164 <HAL_GPIO_DeInit+0x1c>
 800721c:	46d9      	mov	r9, fp
 800721e:	e7a1      	b.n	8007164 <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007220:	f8d8 5000 	ldr.w	r5, [r8]
 8007224:	ea25 0506 	bic.w	r5, r5, r6
 8007228:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800722c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007230:	ea25 0506 	bic.w	r5, r5, r6
 8007234:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007238:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800723c:	ea25 0506 	bic.w	r5, r5, r6
 8007240:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007244:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8007248:	ea25 0506 	bic.w	r5, r5, r6
 800724c:	f8c8 5008 	str.w	r5, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007250:	68a5      	ldr	r5, [r4, #8]
 8007252:	ea25 050e 	bic.w	r5, r5, lr
 8007256:	60a5      	str	r5, [r4, #8]
 8007258:	e789      	b.n	800716e <HAL_GPIO_DeInit+0x26>
    }
  }
}
 800725a:	b003      	add	sp, #12
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007260:	40020000 	.word	0x40020000
 8007264:	40013c00 	.word	0x40013c00

08007268 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007268:	6903      	ldr	r3, [r0, #16]
 800726a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800726c:	bf14      	ite	ne
 800726e:	2001      	movne	r0, #1
 8007270:	2000      	moveq	r0, #0
 8007272:	4770      	bx	lr

08007274 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007274:	b10a      	cbz	r2, 800727a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007276:	6181      	str	r1, [r0, #24]
 8007278:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800727a:	0409      	lsls	r1, r1, #16
 800727c:	6181      	str	r1, [r0, #24]
  }
}
 800727e:	4770      	bx	lr

08007280 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007280:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007282:	ea01 0203 	and.w	r2, r1, r3
 8007286:	ea21 0103 	bic.w	r1, r1, r3
 800728a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800728e:	6181      	str	r1, [r0, #24]
}
 8007290:	4770      	bx	lr

08007292 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007292:	6803      	ldr	r3, [r0, #0]
 8007294:	695a      	ldr	r2, [r3, #20]
 8007296:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800729a:	d101      	bne.n	80072a0 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800729c:	2000      	movs	r0, #0
}
 800729e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072a4:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072aa:	2220      	movs	r2, #32
 80072ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80072b6:	f042 0204 	orr.w	r2, r2, #4
 80072ba:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80072bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80072c0:	2001      	movs	r0, #1
 80072c2:	4770      	bx	lr

080072c4 <I2C_WaitOnFlagUntilTimeout>:
{
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4606      	mov	r6, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4617      	mov	r7, r2
 80072ce:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80072d4:	f1b8 0f01 	cmp.w	r8, #1
 80072d8:	6833      	ldr	r3, [r6, #0]
 80072da:	bf0c      	ite	eq
 80072dc:	695b      	ldreq	r3, [r3, #20]
 80072de:	699b      	ldrne	r3, [r3, #24]
 80072e0:	ea24 0c03 	bic.w	ip, r4, r3
 80072e4:	fa1f fc8c 	uxth.w	ip, ip
 80072e8:	fabc fc8c 	clz	ip, ip
 80072ec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80072f0:	4567      	cmp	r7, ip
 80072f2:	d119      	bne.n	8007328 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80072f8:	d0ec      	beq.n	80072d4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fa:	f7ff fd89 	bl	8006e10 <HAL_GetTick>
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	1ac0      	subs	r0, r0, r3
 8007302:	42a8      	cmp	r0, r5
 8007304:	d801      	bhi.n	800730a <I2C_WaitOnFlagUntilTimeout+0x46>
 8007306:	2d00      	cmp	r5, #0
 8007308:	d1e4      	bne.n	80072d4 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800730a:	2300      	movs	r3, #0
 800730c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800730e:	2220      	movs	r2, #32
 8007310:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007314:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007318:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800731a:	f042 0220 	orr.w	r2, r2, #32
 800731e:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007320:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8007324:	2001      	movs	r0, #1
 8007326:	e000      	b.n	800732a <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8007328:	2000      	movs	r0, #0
}
 800732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800732e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007332:	4605      	mov	r5, r0
 8007334:	460e      	mov	r6, r1
 8007336:	4617      	mov	r7, r2
 8007338:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800733a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800733e:	e03b      	b.n	80073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007346:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800734e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007350:	2300      	movs	r3, #0
 8007352:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007354:	2220      	movs	r2, #32
 8007356:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800735e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007360:	f042 0204 	orr.w	r2, r2, #4
 8007364:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007366:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800736a:	2001      	movs	r0, #1
}
 800736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007370:	f7ff fd4e 	bl	8006e10 <HAL_GetTick>
 8007374:	eba0 0009 	sub.w	r0, r0, r9
 8007378:	42b8      	cmp	r0, r7
 800737a:	d800      	bhi.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 800737c:	b9e7      	cbnz	r7, 80073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	2300      	movs	r3, #0
 8007380:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007382:	2220      	movs	r2, #32
 8007384:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800738c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800738e:	f042 0220 	orr.w	r2, r2, #32
 8007392:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007394:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8007398:	2001      	movs	r0, #1
 800739a:	e7e7      	b.n	800736c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	ea26 0303 	bic.w	r3, r6, r3
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b19b      	cbz	r3, 80073d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	695a      	ldr	r2, [r3, #20]
 80073ac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80073b0:	d1c6      	bne.n	8007340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    if (Timeout != HAL_MAX_DELAY)
 80073b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80073b6:	d1db      	bne.n	8007370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073b8:	f1b8 0f01 	cmp.w	r8, #1
 80073bc:	d0ee      	beq.n	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	699c      	ldr	r4, [r3, #24]
 80073c2:	ea26 0404 	bic.w	r4, r6, r4
 80073c6:	b2a4      	uxth	r4, r4
 80073c8:	2c00      	cmp	r4, #0
 80073ca:	d1ed      	bne.n	80073a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  return HAL_OK;
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7cd      	b.n	800736c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7cb      	b.n	800736c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080073d4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80073e4:	d11c      	bne.n	8007420 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff ff53 	bl	8007292 <I2C_IsAcknowledgeFailed>
 80073ec:	b9d0      	cbnz	r0, 8007424 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80073ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80073f2:	d0f3      	beq.n	80073dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f4:	f7ff fd0c 	bl	8006e10 <HAL_GetTick>
 80073f8:	1b80      	subs	r0, r0, r6
 80073fa:	42a8      	cmp	r0, r5
 80073fc:	d801      	bhi.n	8007402 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80073fe:	2d00      	cmp	r5, #0
 8007400:	d1ec      	bne.n	80073dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007402:	2300      	movs	r3, #0
 8007404:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007406:	2220      	movs	r2, #32
 8007408:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007410:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007412:	f042 0220 	orr.w	r2, r2, #32
 8007416:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007418:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800741c:	2001      	movs	r0, #1
 800741e:	e000      	b.n	8007422 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007420:	2000      	movs	r0, #0
}
 8007422:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007424:	2001      	movs	r0, #1
 8007426:	e7fc      	b.n	8007422 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08007428 <I2C_RequestMemoryWrite>:
{
 8007428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800742c:	b085      	sub	sp, #20
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	4691      	mov	r9, r2
 8007434:	461f      	mov	r7, r3
 8007436:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800743a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743c:	6803      	ldr	r3, [r0, #0]
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007444:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007446:	9600      	str	r6, [sp, #0]
 8007448:	4643      	mov	r3, r8
 800744a:	2200      	movs	r2, #0
 800744c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007450:	f7ff ff38 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007454:	b970      	cbnz	r0, 8007474 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800745c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800745e:	4633      	mov	r3, r6
 8007460:	4642      	mov	r2, r8
 8007462:	4928      	ldr	r1, [pc, #160]	; (8007504 <I2C_RequestMemoryWrite+0xdc>)
 8007464:	4620      	mov	r0, r4
 8007466:	f7ff ff62 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800746a:	b168      	cbz	r0, 8007488 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800746c:	2001      	movs	r0, #1
}
 800746e:	b005      	add	sp, #20
 8007470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f413 7f80 	tst.w	r3, #256	; 0x100
 800747c:	d040      	beq.n	8007500 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800747e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007482:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007484:	2003      	movs	r0, #3
 8007486:	e7f2      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007488:	2300      	movs	r3, #0
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	9203      	str	r2, [sp, #12]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	9303      	str	r3, [sp, #12]
 8007496:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007498:	4632      	mov	r2, r6
 800749a:	4641      	mov	r1, r8
 800749c:	4620      	mov	r0, r4
 800749e:	f7ff ff99 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074a2:	b930      	cbnz	r0, 80074b2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074a4:	2f01      	cmp	r7, #1
 80074a6:	d110      	bne.n	80074ca <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	fa5f f689 	uxtb.w	r6, r9
 80074ae:	611e      	str	r6, [r3, #16]
 80074b0:	e7dd      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d001      	beq.n	80074bc <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80074b8:	2001      	movs	r0, #1
 80074ba:	e7d8      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074c4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80074c6:	2001      	movs	r0, #1
 80074c8:	e7d1      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80074d0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074d2:	4632      	mov	r2, r6
 80074d4:	4641      	mov	r1, r8
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7ff ff7c 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074dc:	b920      	cbnz	r0, 80074e8 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	fa5f f689 	uxtb.w	r6, r9
 80074e4:	611e      	str	r6, [r3, #16]
 80074e6:	e7c2      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d001      	beq.n	80074f2 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7bd      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	6813      	ldr	r3, [r2, #0]
 80074f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074fa:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80074fc:	2001      	movs	r0, #1
 80074fe:	e7b6      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8007500:	2003      	movs	r0, #3
 8007502:	e7b4      	b.n	800746e <I2C_RequestMemoryWrite+0x46>
 8007504:	00010002 	.word	0x00010002

08007508 <I2C_RequestMemoryRead>:
{
 8007508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	4616      	mov	r6, r2
 8007514:	4699      	mov	r9, r3
 8007516:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007518:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751c:	6802      	ldr	r2, [r0, #0]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007524:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007526:	6803      	ldr	r3, [r0, #0]
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800752e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	f8cd 8000 	str.w	r8, [sp]
 8007534:	463b      	mov	r3, r7
 8007536:	2200      	movs	r2, #0
 8007538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800753c:	f7ff fec2 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007540:	b980      	cbnz	r0, 8007564 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007542:	fa5f fa85 	uxtb.w	sl, r5
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800754c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800754e:	4643      	mov	r3, r8
 8007550:	463a      	mov	r2, r7
 8007552:	4945      	ldr	r1, [pc, #276]	; (8007668 <I2C_RequestMemoryRead+0x160>)
 8007554:	4620      	mov	r0, r4
 8007556:	f7ff feea 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800755a:	b168      	cbz	r0, 8007578 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 800755c:	2001      	movs	r0, #1
}
 800755e:	b004      	add	sp, #16
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f413 7f80 	tst.w	r3, #256	; 0x100
 800756c:	d077      	beq.n	800765e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800756e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007572:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007574:	2003      	movs	r0, #3
 8007576:	e7f2      	b.n	800755e <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007578:	2300      	movs	r3, #0
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	9203      	str	r2, [sp, #12]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	9303      	str	r3, [sp, #12]
 8007586:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007588:	4642      	mov	r2, r8
 800758a:	4639      	mov	r1, r7
 800758c:	4620      	mov	r0, r4
 800758e:	f7ff ff21 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007592:	b988      	cbnz	r0, 80075b8 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007594:	f1b9 0f01 	cmp.w	r9, #1
 8007598:	d11a      	bne.n	80075d0 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	b2f6      	uxtb	r6, r6
 800759e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075a0:	4642      	mov	r2, r8
 80075a2:	4639      	mov	r1, r7
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff ff15 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d030      	beq.n	8007610 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d026      	beq.n	8007602 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 80075b4:	2001      	movs	r0, #1
 80075b6:	e7d2      	b.n	800755e <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d001      	beq.n	80075c2 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 80075be:	2001      	movs	r0, #1
 80075c0:	e7cd      	b.n	800755e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c2:	6822      	ldr	r2, [r4, #0]
 80075c4:	6813      	ldr	r3, [r2, #0]
 80075c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075ca:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80075cc:	2001      	movs	r0, #1
 80075ce:	e7c6      	b.n	800755e <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	0a32      	lsrs	r2, r6, #8
 80075d4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d6:	4642      	mov	r2, r8
 80075d8:	4639      	mov	r1, r7
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff fefa 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80075e0:	b918      	cbnz	r0, 80075ea <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	b2f6      	uxtb	r6, r6
 80075e6:	611e      	str	r6, [r3, #16]
 80075e8:	e7da      	b.n	80075a0 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d001      	beq.n	80075f4 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7b4      	b.n	800755e <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	6813      	ldr	r3, [r2, #0]
 80075f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075fc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80075fe:	2001      	movs	r0, #1
 8007600:	e7ad      	b.n	800755e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800760a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800760c:	2001      	movs	r0, #1
 800760e:	e7a6      	b.n	800755e <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007618:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800761a:	f8cd 8000 	str.w	r8, [sp]
 800761e:	463b      	mov	r3, r7
 8007620:	2200      	movs	r2, #0
 8007622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff fe4c 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 800762c:	b968      	cbnz	r0, 800764a <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	f04a 0301 	orr.w	r3, sl, #1
 8007634:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007636:	4643      	mov	r3, r8
 8007638:	463a      	mov	r2, r7
 800763a:	490b      	ldr	r1, [pc, #44]	; (8007668 <I2C_RequestMemoryRead+0x160>)
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff fe76 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8007642:	3800      	subs	r0, #0
 8007644:	bf18      	it	ne
 8007646:	2001      	movne	r0, #1
 8007648:	e789      	b.n	800755e <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007652:	d006      	beq.n	8007662 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007658:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800765a:	2003      	movs	r0, #3
 800765c:	e77f      	b.n	800755e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 800765e:	2003      	movs	r0, #3
 8007660:	e77d      	b.n	800755e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8007662:	2003      	movs	r0, #3
 8007664:	e77b      	b.n	800755e <I2C_RequestMemoryRead+0x56>
 8007666:	bf00      	nop
 8007668:	00010002 	.word	0x00010002

0800766c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	460d      	mov	r5, r1
 8007672:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	f013 0f04 	tst.w	r3, #4
 800767c:	d11c      	bne.n	80076b8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fe07 	bl	8007292 <I2C_IsAcknowledgeFailed>
 8007684:	b9d0      	cbnz	r0, 80076bc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007686:	f1b5 3fff 	cmp.w	r5, #4294967295
 800768a:	d0f3      	beq.n	8007674 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768c:	f7ff fbc0 	bl	8006e10 <HAL_GetTick>
 8007690:	1b80      	subs	r0, r0, r6
 8007692:	42a8      	cmp	r0, r5
 8007694:	d801      	bhi.n	800769a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007696:	2d00      	cmp	r5, #0
 8007698:	d1ec      	bne.n	8007674 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800769a:	2300      	movs	r3, #0
 800769c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800769e:	2220      	movs	r2, #32
 80076a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80076aa:	f042 0220 	orr.w	r2, r2, #32
 80076ae:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80076b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80076b4:	2001      	movs	r0, #1
 80076b6:	e000      	b.n	80076ba <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80076b8:	2000      	movs	r0, #0
}
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80076bc:	2001      	movs	r0, #1
 80076be:	e7fc      	b.n	80076ba <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080076c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4605      	mov	r5, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	6959      	ldr	r1, [r3, #20]
 80076cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80076d0:	d129      	bne.n	8007726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076d2:	6959      	ldr	r1, [r3, #20]
 80076d4:	f011 0f10 	tst.w	r1, #16
 80076d8:	d115      	bne.n	8007706 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076da:	f7ff fb99 	bl	8006e10 <HAL_GetTick>
 80076de:	1b80      	subs	r0, r0, r6
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d801      	bhi.n	80076e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	d1ef      	bne.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076ec:	2220      	movs	r2, #32
 80076ee:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076f6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80076f8:	f042 0220 	orr.w	r2, r2, #32
 80076fc:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80076fe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007702:	2001      	movs	r0, #1
}
 8007704:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007706:	f06f 0210 	mvn.w	r2, #16
 800770a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800770c:	2300      	movs	r3, #0
 800770e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007710:	2220      	movs	r2, #32
 8007712:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007716:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800771a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800771c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800771e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007722:	2001      	movs	r0, #1
 8007724:	e7ee      	b.n	8007704 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8007726:	2000      	movs	r0, #0
 8007728:	e7ec      	b.n	8007704 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

0800772a <HAL_I2C_MspInit>:
}
 800772a:	4770      	bx	lr

0800772c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800772c:	2800      	cmp	r0, #0
 800772e:	f000 80b0 	beq.w	8007892 <HAL_I2C_Init+0x166>
{
 8007732:	b570      	push	{r4, r5, r6, lr}
 8007734:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007736:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800773a:	2b00      	cmp	r3, #0
 800773c:	d073      	beq.n	8007826 <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800773e:	2324      	movs	r3, #36	; 0x24
 8007740:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007756:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007760:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007762:	f000 fe11 	bl	8008388 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007766:	6862      	ldr	r2, [r4, #4]
 8007768:	4b4c      	ldr	r3, [pc, #304]	; (800789c <HAL_I2C_Init+0x170>)
 800776a:	429a      	cmp	r2, r3
 800776c:	d860      	bhi.n	8007830 <HAL_I2C_Init+0x104>
 800776e:	4b4c      	ldr	r3, [pc, #304]	; (80078a0 <HAL_I2C_Init+0x174>)
 8007770:	4298      	cmp	r0, r3
 8007772:	f240 8090 	bls.w	8007896 <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8007776:	494b      	ldr	r1, [pc, #300]	; (80078a4 <HAL_I2C_Init+0x178>)
 8007778:	fba1 3100 	umull	r3, r1, r1, r0
 800777c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800777e:	6825      	ldr	r5, [r4, #0]
 8007780:	686a      	ldr	r2, [r5, #4]
 8007782:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007786:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800778a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800778c:	6821      	ldr	r1, [r4, #0]
 800778e:	6a0a      	ldr	r2, [r1, #32]
 8007790:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007794:	4d41      	ldr	r5, [pc, #260]	; (800789c <HAL_I2C_Init+0x170>)
 8007796:	6866      	ldr	r6, [r4, #4]
 8007798:	42ae      	cmp	r6, r5
 800779a:	d84e      	bhi.n	800783a <HAL_I2C_Init+0x10e>
 800779c:	3301      	adds	r3, #1
 800779e:	4313      	orrs	r3, r2
 80077a0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80077a2:	6821      	ldr	r1, [r4, #0]
 80077a4:	69ca      	ldr	r2, [r1, #28]
 80077a6:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80077aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80077ae:	6865      	ldr	r5, [r4, #4]
 80077b0:	4b3a      	ldr	r3, [pc, #232]	; (800789c <HAL_I2C_Init+0x170>)
 80077b2:	429d      	cmp	r5, r3
 80077b4:	d84b      	bhi.n	800784e <HAL_I2C_Init+0x122>
 80077b6:	1e43      	subs	r3, r0, #1
 80077b8:	006d      	lsls	r5, r5, #1
 80077ba:	fbb3 f3f5 	udiv	r3, r3, r5
 80077be:	3301      	adds	r3, #1
 80077c0:	f640 70fc 	movw	r0, #4092	; 0xffc
 80077c4:	4203      	tst	r3, r0
 80077c6:	d05e      	beq.n	8007886 <HAL_I2C_Init+0x15a>
 80077c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077cc:	431a      	orrs	r2, r3
 80077ce:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077d0:	6821      	ldr	r1, [r4, #0]
 80077d2:	680a      	ldr	r2, [r1, #0]
 80077d4:	69e3      	ldr	r3, [r4, #28]
 80077d6:	6a20      	ldr	r0, [r4, #32]
 80077d8:	4303      	orrs	r3, r0
 80077da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80077de:	4313      	orrs	r3, r2
 80077e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	688a      	ldr	r2, [r1, #8]
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	68e0      	ldr	r0, [r4, #12]
 80077ea:	4303      	orrs	r3, r0
 80077ec:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80077f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80077f4:	4313      	orrs	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80077f8:	6821      	ldr	r1, [r4, #0]
 80077fa:	68ca      	ldr	r2, [r1, #12]
 80077fc:	6963      	ldr	r3, [r4, #20]
 80077fe:	69a0      	ldr	r0, [r4, #24]
 8007800:	4303      	orrs	r3, r0
 8007802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007806:	4313      	orrs	r3, r2
 8007808:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	6813      	ldr	r3, [r2, #0]
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007814:	2000      	movs	r0, #0
 8007816:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007818:	2320      	movs	r3, #32
 800781a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800781e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007820:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8007824:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007826:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800782a:	f7ff ff7e 	bl	800772a <HAL_I2C_MspInit>
 800782e:	e786      	b.n	800773e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <HAL_I2C_Init+0x17c>)
 8007832:	4298      	cmp	r0, r3
 8007834:	d89f      	bhi.n	8007776 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8007836:	2001      	movs	r0, #1
 8007838:	e7f4      	b.n	8007824 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800783a:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800783e:	fb05 f303 	mul.w	r3, r5, r3
 8007842:	4d1a      	ldr	r5, [pc, #104]	; (80078ac <HAL_I2C_Init+0x180>)
 8007844:	fba5 5303 	umull	r5, r3, r5, r3
 8007848:	099b      	lsrs	r3, r3, #6
 800784a:	3301      	adds	r3, #1
 800784c:	e7a7      	b.n	800779e <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	b95b      	cbnz	r3, 800786a <HAL_I2C_Init+0x13e>
 8007852:	1e43      	subs	r3, r0, #1
 8007854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007858:	fbb3 f3f5 	udiv	r3, r3, r5
 800785c:	3301      	adds	r3, #1
 800785e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007862:	b193      	cbz	r3, 800788a <HAL_I2C_Init+0x15e>
 8007864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007868:	e7b0      	b.n	80077cc <HAL_I2C_Init+0xa0>
 800786a:	1e43      	subs	r3, r0, #1
 800786c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007870:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007874:	fbb3 f3f5 	udiv	r3, r3, r5
 8007878:	3301      	adds	r3, #1
 800787a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800787e:	b133      	cbz	r3, 800788e <HAL_I2C_Init+0x162>
 8007880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007884:	e7a2      	b.n	80077cc <HAL_I2C_Init+0xa0>
 8007886:	2304      	movs	r3, #4
 8007888:	e7a0      	b.n	80077cc <HAL_I2C_Init+0xa0>
 800788a:	2301      	movs	r3, #1
 800788c:	e79e      	b.n	80077cc <HAL_I2C_Init+0xa0>
 800788e:	2301      	movs	r3, #1
 8007890:	e79c      	b.n	80077cc <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 8007892:	2001      	movs	r0, #1
}
 8007894:	4770      	bx	lr
    return HAL_ERROR;
 8007896:	2001      	movs	r0, #1
 8007898:	e7c4      	b.n	8007824 <HAL_I2C_Init+0xf8>
 800789a:	bf00      	nop
 800789c:	000186a0 	.word	0x000186a0
 80078a0:	001e847f 	.word	0x001e847f
 80078a4:	431bde83 	.word	0x431bde83
 80078a8:	003d08ff 	.word	0x003d08ff
 80078ac:	10624dd3 	.word	0x10624dd3

080078b0 <HAL_I2C_MspDeInit>:
}
 80078b0:	4770      	bx	lr

080078b2 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80078b2:	b1a8      	cbz	r0, 80078e0 <HAL_I2C_DeInit+0x2e>
{
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80078b8:	2324      	movs	r3, #36	; 0x24
 80078ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80078be:	6802      	ldr	r2, [r0, #0]
 80078c0:	6813      	ldr	r3, [r2, #0]
 80078c2:	f023 0301 	bic.w	r3, r3, #1
 80078c6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80078c8:	f7ff fff2 	bl	80078b0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80078cc:	2000      	movs	r0, #0
 80078ce:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80078d0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80078d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078d6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80078da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80078de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80078e0:	2001      	movs	r0, #1
}
 80078e2:	4770      	bx	lr

080078e4 <HAL_I2C_Mem_Write>:
{
 80078e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078e8:	b083      	sub	sp, #12
 80078ea:	4604      	mov	r4, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	4690      	mov	r8, r2
 80078f0:	4699      	mov	r9, r3
 80078f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80078f4:	f7ff fa8c 	bl	8006e10 <HAL_GetTick>
 80078f8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80078fe:	b2c0      	uxtb	r0, r0
 8007900:	2820      	cmp	r0, #32
 8007902:	d003      	beq.n	800790c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8007904:	2002      	movs	r0, #2
}
 8007906:	b003      	add	sp, #12
 8007908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800790c:	9500      	str	r5, [sp, #0]
 800790e:	2319      	movs	r3, #25
 8007910:	2201      	movs	r2, #1
 8007912:	494d      	ldr	r1, [pc, #308]	; (8007a48 <HAL_I2C_Mem_Write+0x164>)
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff fcd5 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 800791a:	2800      	cmp	r0, #0
 800791c:	f040 808d 	bne.w	8007a3a <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8007920:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007924:	2b01      	cmp	r3, #1
 8007926:	f000 808a 	beq.w	8007a3e <HAL_I2C_Mem_Write+0x15a>
 800792a:	2301      	movs	r3, #1
 800792c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	f012 0f01 	tst.w	r2, #1
 8007938:	d103      	bne.n	8007942 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f042 0201 	orr.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007942:	6822      	ldr	r2, [r4, #0]
 8007944:	6813      	ldr	r3, [r2, #0]
 8007946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800794a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800794c:	2321      	movs	r3, #33	; 0x21
 800794e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007952:	2340      	movs	r3, #64	; 0x40
 8007954:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007958:	2300      	movs	r3, #0
 800795a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007960:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007964:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007968:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796a:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <HAL_I2C_Mem_Write+0x168>)
 800796c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800796e:	9501      	str	r5, [sp, #4]
 8007970:	9600      	str	r6, [sp, #0]
 8007972:	464b      	mov	r3, r9
 8007974:	4642      	mov	r2, r8
 8007976:	4639      	mov	r1, r7
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fd55 	bl	8007428 <I2C_RequestMemoryWrite>
 800797e:	2800      	cmp	r0, #0
 8007980:	d15f      	bne.n	8007a42 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8007982:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007984:	b9d3      	cbnz	r3, 80079bc <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007986:	462a      	mov	r2, r5
 8007988:	4631      	mov	r1, r6
 800798a:	4620      	mov	r0, r4
 800798c:	f7ff fe6e 	bl	800766c <I2C_WaitOnBTFFlagUntilTimeout>
 8007990:	2800      	cmp	r0, #0
 8007992:	d044      	beq.n	8007a1e <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007996:	2b04      	cmp	r3, #4
 8007998:	d03a      	beq.n	8007a10 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 800799a:	2001      	movs	r0, #1
 800799c:	e7b3      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800799e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d001      	beq.n	80079a8 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7ae      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079b0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80079b2:	2001      	movs	r0, #1
 80079b4:	e7a7      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 80079b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0e4      	beq.n	8007986 <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079bc:	462a      	mov	r2, r5
 80079be:	4631      	mov	r1, r6
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff fd07 	bl	80073d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d1e9      	bne.n	800799e <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80079d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80079d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80079e0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80079e2:	3901      	subs	r1, #1
 80079e4:	b289      	uxth	r1, r1
 80079e6:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	6951      	ldr	r1, [r2, #20]
 80079ec:	f011 0f04 	tst.w	r1, #4
 80079f0:	d0e1      	beq.n	80079b6 <HAL_I2C_Mem_Write+0xd2>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0c7      	beq.n	8007986 <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079f6:	7843      	ldrb	r3, [r0, #1]
 80079f8:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80079fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079fc:	3301      	adds	r3, #1
 80079fe:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007a00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007a0e:	e7d2      	b.n	80079b6 <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a18:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e773      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	6813      	ldr	r3, [r2, #0]
 8007a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a26:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8007a34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8007a38:	e765      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8007a3a:	2002      	movs	r0, #2
 8007a3c:	e763      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8007a3e:	2002      	movs	r0, #2
 8007a40:	e761      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8007a42:	2001      	movs	r0, #1
 8007a44:	e75f      	b.n	8007906 <HAL_I2C_Mem_Write+0x22>
 8007a46:	bf00      	nop
 8007a48:	00100002 	.word	0x00100002
 8007a4c:	ffff0000 	.word	0xffff0000

08007a50 <HAL_I2C_Mem_Read>:
{
 8007a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a54:	b087      	sub	sp, #28
 8007a56:	4604      	mov	r4, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	4690      	mov	r8, r2
 8007a5c:	4699      	mov	r9, r3
 8007a5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007a60:	f7ff f9d6 	bl	8006e10 <HAL_GetTick>
 8007a64:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a66:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8007a6a:	b2c0      	uxtb	r0, r0
 8007a6c:	2820      	cmp	r0, #32
 8007a6e:	d005      	beq.n	8007a7c <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8007a70:	f04f 0902 	mov.w	r9, #2
}
 8007a74:	4648      	mov	r0, r9
 8007a76:	b007      	add	sp, #28
 8007a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a7c:	9500      	str	r5, [sp, #0]
 8007a7e:	2319      	movs	r3, #25
 8007a80:	2201      	movs	r2, #1
 8007a82:	499c      	ldr	r1, [pc, #624]	; (8007cf4 <HAL_I2C_Mem_Read+0x2a4>)
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7ff fc1d 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f040 8141 	bne.w	8007d12 <HAL_I2C_Mem_Read+0x2c2>
    __HAL_LOCK(hi2c);
 8007a90:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f000 813f 	beq.w	8007d18 <HAL_I2C_Mem_Read+0x2c8>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	f012 0f01 	tst.w	r2, #1
 8007aa8:	d103      	bne.n	8007ab2 <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f042 0201 	orr.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	6813      	ldr	r3, [r2, #0]
 8007ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aba:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007abc:	2322      	movs	r3, #34	; 0x22
 8007abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ac2:	2340      	movs	r3, #64	; 0x40
 8007ac4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ace:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ad0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007ad4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ad6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ad8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ada:	4b87      	ldr	r3, [pc, #540]	; (8007cf8 <HAL_I2C_Mem_Read+0x2a8>)
 8007adc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ade:	9501      	str	r5, [sp, #4]
 8007ae0:	9600      	str	r6, [sp, #0]
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7ff fd0d 	bl	8007508 <I2C_RequestMemoryRead>
 8007aee:	4681      	mov	r9, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f040 8114 	bne.w	8007d1e <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 8007af6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007af8:	b993      	cbnz	r3, 8007b20 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0e:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8007b10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80f4 	beq.w	8007d00 <HAL_I2C_Mem_Read+0x2b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b18:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8007cfc <HAL_I2C_Mem_Read+0x2ac>
 8007b1c:	2700      	movs	r7, #0
 8007b1e:	e075      	b.n	8007c0c <HAL_I2C_Mem_Read+0x1bc>
    else if (hi2c->XferSize == 1U)
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d00a      	beq.n	8007b3a <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d01a      	beq.n	8007b5e <HAL_I2C_Mem_Read+0x10e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b28:	2200      	movs	r2, #0
 8007b2a:	9205      	str	r2, [sp, #20]
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	6951      	ldr	r1, [r2, #20]
 8007b30:	9105      	str	r1, [sp, #20]
 8007b32:	6992      	ldr	r2, [r2, #24]
 8007b34:	9205      	str	r2, [sp, #20]
 8007b36:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 8007b38:	e7ee      	b.n	8007b18 <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b42:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b44:	2300      	movs	r3, #0
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	9203      	str	r2, [sp, #12]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e7d8      	b.n	8007b10 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b66:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b70:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b72:	2300      	movs	r3, #0
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	695a      	ldr	r2, [r3, #20]
 8007b7a:	9204      	str	r2, [sp, #16]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	e7c5      	b.n	8007b10 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b84:	462a      	mov	r2, r5
 8007b86:	4631      	mov	r1, r6
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f7ff fd99 	bl	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f040 80c8 	bne.w	8007d24 <HAL_I2C_Mem_Read+0x2d4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007ba8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007bb0:	e029      	b.n	8007c06 <HAL_I2C_Mem_Read+0x1b6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bb2:	9500      	str	r5, [sp, #0]
 8007bb4:	4633      	mov	r3, r6
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	4641      	mov	r1, r8
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7ff fb82 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 80b2 	bne.w	8007d2a <HAL_I2C_Mem_Read+0x2da>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	6813      	ldr	r3, [r2, #0]
 8007bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bce:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007bd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007bda:	1c53      	adds	r3, r2, #1
 8007bdc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007bde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007be0:	3b01      	subs	r3, #1
 8007be2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007be4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007bf8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d079      	beq.n	8007d00 <HAL_I2C_Mem_Read+0x2b0>
      if (hi2c->XferSize <= 3U)
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d84a      	bhi.n	8007ca6 <HAL_I2C_Mem_Read+0x256>
        if (hi2c->XferSize == 1U)
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d0b7      	beq.n	8007b84 <HAL_I2C_Mem_Read+0x134>
        else if (hi2c->XferSize == 2U)
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d0cc      	beq.n	8007bb2 <HAL_I2C_Mem_Read+0x162>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c18:	9500      	str	r5, [sp, #0]
 8007c1a:	4633      	mov	r3, r6
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	4641      	mov	r1, r8
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff fb4f 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8082 	bne.w	8007d30 <HAL_I2C_Mem_Read+0x2e0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2c:	6822      	ldr	r2, [r4, #0]
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c3c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	3301      	adds	r3, #1
 8007c42:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007c44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c46:	3b01      	subs	r3, #1
 8007c48:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007c4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c52:	9500      	str	r5, [sp, #0]
 8007c54:	4633      	mov	r3, r6
 8007c56:	463a      	mov	r2, r7
 8007c58:	4641      	mov	r1, r8
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff fb32 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d168      	bne.n	8007d36 <HAL_I2C_Mem_Read+0x2e6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c64:	6822      	ldr	r2, [r4, #0]
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c6c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c74:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007c76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c78:	1c53      	adds	r3, r2, #1
 8007c7a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007c7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c92:	3301      	adds	r3, #1
 8007c94:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007c96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007ca4:	e7af      	b.n	8007c06 <HAL_I2C_Mem_Read+0x1b6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca6:	462a      	mov	r2, r5
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fd08 	bl	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d143      	bne.n	8007d3c <HAL_I2C_Mem_Read+0x2ec>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007cbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007cbe:	1c53      	adds	r3, r2, #1
 8007cc0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007cc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007cc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	6959      	ldr	r1, [r3, #20]
 8007cd4:	f011 0f04 	tst.w	r1, #4
 8007cd8:	d095      	beq.n	8007c06 <HAL_I2C_Mem_Read+0x1b6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007ce4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007cea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007cf2:	e788      	b.n	8007c06 <HAL_I2C_Mem_Read+0x1b6>
 8007cf4:	00100002 	.word	0x00100002
 8007cf8:	ffff0000 	.word	0xffff0000
 8007cfc:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	2320      	movs	r3, #32
 8007d02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8007d0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8007d10:	e6b0      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 8007d12:	f04f 0902 	mov.w	r9, #2
 8007d16:	e6ad      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8007d18:	f04f 0902 	mov.w	r9, #2
 8007d1c:	e6aa      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8007d1e:	f04f 0901 	mov.w	r9, #1
 8007d22:	e6a7      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8007d24:	f04f 0901 	mov.w	r9, #1
 8007d28:	e6a4      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8007d2a:	f04f 0901 	mov.w	r9, #1
 8007d2e:	e6a1      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8007d30:	f04f 0901 	mov.w	r9, #1
 8007d34:	e69e      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8007d36:	f04f 0901 	mov.w	r9, #1
 8007d3a:	e69b      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 8007d3c:	f04f 0901 	mov.w	r9, #1
 8007d40:	e698      	b.n	8007a74 <HAL_I2C_Mem_Read+0x24>
 8007d42:	bf00      	nop

08007d44 <HAL_I2C_GetState>:
  return hi2c->State;
 8007d44:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8007d48:	4770      	bx	lr

08007d4a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007d4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f000 81e1 	beq.w	8008118 <HAL_RCC_OscConfig+0x3c8>
{
 8007d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d5e:	6803      	ldr	r3, [r0, #0]
 8007d60:	f013 0f01 	tst.w	r3, #1
 8007d64:	d03b      	beq.n	8007dde <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d66:	4b9f      	ldr	r3, [pc, #636]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 030c 	and.w	r3, r3, #12
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d02c      	beq.n	8007dcc <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d72:	4b9c      	ldr	r3, [pc, #624]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d021      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d7e:	6863      	ldr	r3, [r4, #4]
 8007d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d84:	d04f      	beq.n	8007e26 <HAL_RCC_OscConfig+0xd6>
 8007d86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d8a:	d052      	beq.n	8007e32 <HAL_RCC_OscConfig+0xe2>
 8007d8c:	4b95      	ldr	r3, [pc, #596]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d050      	beq.n	8007e46 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da4:	f7ff f834 	bl	8006e10 <HAL_GetTick>
 8007da8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007daa:	4e8e      	ldr	r6, [pc, #568]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007dac:	6833      	ldr	r3, [r6, #0]
 8007dae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007db2:	d114      	bne.n	8007dde <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007db4:	f7ff f82c 	bl	8006e10 <HAL_GetTick>
 8007db8:	1b40      	subs	r0, r0, r5
 8007dba:	2864      	cmp	r0, #100	; 0x64
 8007dbc:	d9f6      	bls.n	8007dac <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8007dbe:	2003      	movs	r0, #3
 8007dc0:	e1b1      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dc2:	4b88      	ldr	r3, [pc, #544]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007dca:	d0d8      	beq.n	8007d7e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dcc:	4b85      	ldr	r3, [pc, #532]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007dd4:	d003      	beq.n	8007dde <HAL_RCC_OscConfig+0x8e>
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 819f 	beq.w	800811c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f013 0f02 	tst.w	r3, #2
 8007de4:	d054      	beq.n	8007e90 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007de6:	4b7f      	ldr	r3, [pc, #508]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f013 0f0c 	tst.w	r3, #12
 8007dee:	d03e      	beq.n	8007e6e <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007df0:	4b7c      	ldr	r3, [pc, #496]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d033      	beq.n	8007e64 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dfc:	68e3      	ldr	r3, [r4, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d068      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e02:	4b79      	ldr	r3, [pc, #484]	; (8007fe8 <HAL_RCC_OscConfig+0x298>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e08:	f7ff f802 	bl	8006e10 <HAL_GetTick>
 8007e0c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0e:	4e75      	ldr	r6, [pc, #468]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e10:	6833      	ldr	r3, [r6, #0]
 8007e12:	f013 0f02 	tst.w	r3, #2
 8007e16:	d154      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e18:	f7fe fffa 	bl	8006e10 <HAL_GetTick>
 8007e1c:	1b40      	subs	r0, r0, r5
 8007e1e:	2802      	cmp	r0, #2
 8007e20:	d9f6      	bls.n	8007e10 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8007e22:	2003      	movs	r0, #3
 8007e24:	e17f      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e26:	4a6f      	ldr	r2, [pc, #444]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e7b5      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e>
 8007e32:	4b6c      	ldr	r3, [pc, #432]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e7ab      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8007e46:	f7fe ffe3 	bl	8006e10 <HAL_GetTick>
 8007e4a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4c:	4e65      	ldr	r6, [pc, #404]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e4e:	6833      	ldr	r3, [r6, #0]
 8007e50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007e54:	d0c3      	beq.n	8007dde <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e56:	f7fe ffdb 	bl	8006e10 <HAL_GetTick>
 8007e5a:	1b40      	subs	r0, r0, r5
 8007e5c:	2864      	cmp	r0, #100	; 0x64
 8007e5e:	d9f6      	bls.n	8007e4e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8007e60:	2003      	movs	r0, #3
 8007e62:	e160      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e64:	4b5f      	ldr	r3, [pc, #380]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007e6c:	d1c6      	bne.n	8007dfc <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e6e:	4b5d      	ldr	r3, [pc, #372]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f013 0f02 	tst.w	r3, #2
 8007e76:	d003      	beq.n	8007e80 <HAL_RCC_OscConfig+0x130>
 8007e78:	68e3      	ldr	r3, [r4, #12]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f040 8150 	bne.w	8008120 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e80:	4a58      	ldr	r2, [pc, #352]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	6921      	ldr	r1, [r4, #16]
 8007e86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007e8e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	f013 0f08 	tst.w	r3, #8
 8007e96:	d042      	beq.n	8007f1e <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e98:	6963      	ldr	r3, [r4, #20]
 8007e9a:	b36b      	cbz	r3, 8007ef8 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e9c:	4b52      	ldr	r3, [pc, #328]	; (8007fe8 <HAL_RCC_OscConfig+0x298>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea4:	f7fe ffb4 	bl	8006e10 <HAL_GetTick>
 8007ea8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eaa:	4e4e      	ldr	r6, [pc, #312]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007eac:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007eae:	f013 0f02 	tst.w	r3, #2
 8007eb2:	d134      	bne.n	8007f1e <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb4:	f7fe ffac 	bl	8006e10 <HAL_GetTick>
 8007eb8:	1b40      	subs	r0, r0, r5
 8007eba:	2802      	cmp	r0, #2
 8007ebc:	d9f6      	bls.n	8007eac <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8007ebe:	2003      	movs	r0, #3
 8007ec0:	e131      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec2:	4a48      	ldr	r2, [pc, #288]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007ec4:	6813      	ldr	r3, [r2, #0]
 8007ec6:	6921      	ldr	r1, [r4, #16]
 8007ec8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ecc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	e7dd      	b.n	8007e90 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8007ed4:	4b44      	ldr	r3, [pc, #272]	; (8007fe8 <HAL_RCC_OscConfig+0x298>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007eda:	f7fe ff99 	bl	8006e10 <HAL_GetTick>
 8007ede:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee0:	4e40      	ldr	r6, [pc, #256]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007ee2:	6833      	ldr	r3, [r6, #0]
 8007ee4:	f013 0f02 	tst.w	r3, #2
 8007ee8:	d0d2      	beq.n	8007e90 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eea:	f7fe ff91 	bl	8006e10 <HAL_GetTick>
 8007eee:	1b40      	subs	r0, r0, r5
 8007ef0:	2802      	cmp	r0, #2
 8007ef2:	d9f6      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8007ef4:	2003      	movs	r0, #3
 8007ef6:	e116      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef8:	4b3b      	ldr	r3, [pc, #236]	; (8007fe8 <HAL_RCC_OscConfig+0x298>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f00:	f7fe ff86 	bl	8006e10 <HAL_GetTick>
 8007f04:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f06:	4e37      	ldr	r6, [pc, #220]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007f08:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007f0a:	f013 0f02 	tst.w	r3, #2
 8007f0e:	d006      	beq.n	8007f1e <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f10:	f7fe ff7e 	bl	8006e10 <HAL_GetTick>
 8007f14:	1b40      	subs	r0, r0, r5
 8007f16:	2802      	cmp	r0, #2
 8007f18:	d9f6      	bls.n	8007f08 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8007f1a:	2003      	movs	r0, #3
 8007f1c:	e103      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f013 0f04 	tst.w	r3, #4
 8007f24:	d076      	beq.n	8008014 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f26:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007f2e:	d133      	bne.n	8007f98 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f30:	2300      	movs	r3, #0
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	4b2b      	ldr	r3, [pc, #172]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007f48:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4a:	4b28      	ldr	r3, [pc, #160]	; (8007fec <HAL_RCC_OscConfig+0x29c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007f52:	d023      	beq.n	8007f9c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f54:	68a3      	ldr	r3, [r4, #8]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d034      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x274>
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d038      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x280>
 8007f5e:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	671a      	str	r2, [r3, #112]	; 0x70
 8007f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f6a:	f022 0204 	bic.w	r2, r2, #4
 8007f6e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f70:	68a3      	ldr	r3, [r4, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d03c      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f76:	f7fe ff4b 	bl	8006e10 <HAL_GetTick>
 8007f7a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f7c:	4f19      	ldr	r7, [pc, #100]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f7e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f84:	f013 0f02 	tst.w	r3, #2
 8007f88:	d143      	bne.n	8008012 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f8a:	f7fe ff41 	bl	8006e10 <HAL_GetTick>
 8007f8e:	1b80      	subs	r0, r0, r6
 8007f90:	4540      	cmp	r0, r8
 8007f92:	d9f6      	bls.n	8007f82 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8007f94:	2003      	movs	r0, #3
 8007f96:	e0c6      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8007f98:	2500      	movs	r5, #0
 8007f9a:	e7d6      	b.n	8007f4a <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <HAL_RCC_OscConfig+0x29c>)
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007fa6:	f7fe ff33 	bl	8006e10 <HAL_GetTick>
 8007faa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fac:	4f0f      	ldr	r7, [pc, #60]	; (8007fec <HAL_RCC_OscConfig+0x29c>)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007fb4:	d1ce      	bne.n	8007f54 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb6:	f7fe ff2b 	bl	8006e10 <HAL_GetTick>
 8007fba:	1b80      	subs	r0, r0, r6
 8007fbc:	2802      	cmp	r0, #2
 8007fbe:	d9f6      	bls.n	8007fae <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8007fc0:	2003      	movs	r0, #3
 8007fc2:	e0b0      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc4:	4a07      	ldr	r2, [pc, #28]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007fc6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007fc8:	f043 0301 	orr.w	r3, r3, #1
 8007fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fce:	e7cf      	b.n	8007f70 <HAL_RCC_OscConfig+0x220>
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <HAL_RCC_OscConfig+0x294>)
 8007fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fd4:	f042 0204 	orr.w	r2, r2, #4
 8007fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8007fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fdc:	f042 0201 	orr.w	r2, r2, #1
 8007fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8007fe2:	e7c5      	b.n	8007f70 <HAL_RCC_OscConfig+0x220>
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	42470000 	.word	0x42470000
 8007fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff0:	f7fe ff0e 	bl	8006e10 <HAL_GetTick>
 8007ff4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff6:	4f52      	ldr	r7, [pc, #328]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ffe:	f013 0f02 	tst.w	r3, #2
 8008002:	d006      	beq.n	8008012 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008004:	f7fe ff04 	bl	8006e10 <HAL_GetTick>
 8008008:	1b80      	subs	r0, r0, r6
 800800a:	4540      	cmp	r0, r8
 800800c:	d9f6      	bls.n	8007ffc <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800800e:	2003      	movs	r0, #3
 8008010:	e089      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008012:	b9ed      	cbnz	r5, 8008050 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008014:	69a3      	ldr	r3, [r4, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8084 	beq.w	8008124 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800801c:	4a48      	ldr	r2, [pc, #288]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 800801e:	6892      	ldr	r2, [r2, #8]
 8008020:	f002 020c 	and.w	r2, r2, #12
 8008024:	2a08      	cmp	r2, #8
 8008026:	d051      	beq.n	80080cc <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008028:	2b02      	cmp	r3, #2
 800802a:	d017      	beq.n	800805c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800802c:	4b45      	ldr	r3, [pc, #276]	; (8008144 <HAL_RCC_OscConfig+0x3f4>)
 800802e:	2200      	movs	r2, #0
 8008030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008032:	f7fe feed 	bl	8006e10 <HAL_GetTick>
 8008036:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008038:	4d41      	ldr	r5, [pc, #260]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008040:	d042      	beq.n	80080c8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008042:	f7fe fee5 	bl	8006e10 <HAL_GetTick>
 8008046:	1b00      	subs	r0, r0, r4
 8008048:	2802      	cmp	r0, #2
 800804a:	d9f6      	bls.n	800803a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800804c:	2003      	movs	r0, #3
 800804e:	e06a      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008050:	4a3b      	ldr	r2, [pc, #236]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 8008052:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008058:	6413      	str	r3, [r2, #64]	; 0x40
 800805a:	e7db      	b.n	8008014 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800805c:	4b39      	ldr	r3, [pc, #228]	; (8008144 <HAL_RCC_OscConfig+0x3f4>)
 800805e:	2200      	movs	r2, #0
 8008060:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008062:	f7fe fed5 	bl	8006e10 <HAL_GetTick>
 8008066:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008068:	4e35      	ldr	r6, [pc, #212]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 800806a:	6833      	ldr	r3, [r6, #0]
 800806c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008070:	d006      	beq.n	8008080 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008072:	f7fe fecd 	bl	8006e10 <HAL_GetTick>
 8008076:	1b40      	subs	r0, r0, r5
 8008078:	2802      	cmp	r0, #2
 800807a:	d9f6      	bls.n	800806a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800807c:	2003      	movs	r0, #3
 800807e:	e052      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008080:	69e3      	ldr	r3, [r4, #28]
 8008082:	6a22      	ldr	r2, [r4, #32]
 8008084:	4313      	orrs	r3, r2
 8008086:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008088:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800808c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800808e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008092:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008094:	0852      	lsrs	r2, r2, #1
 8008096:	3a01      	subs	r2, #1
 8008098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800809c:	4a28      	ldr	r2, [pc, #160]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 800809e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80080a0:	4b28      	ldr	r3, [pc, #160]	; (8008144 <HAL_RCC_OscConfig+0x3f4>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80080a6:	f7fe feb3 	bl	8006e10 <HAL_GetTick>
 80080aa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ac:	4d24      	ldr	r5, [pc, #144]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80080b4:	d106      	bne.n	80080c4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b6:	f7fe feab 	bl	8006e10 <HAL_GetTick>
 80080ba:	1b00      	subs	r0, r0, r4
 80080bc:	2802      	cmp	r0, #2
 80080be:	d9f6      	bls.n	80080ae <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80080c0:	2003      	movs	r0, #3
 80080c2:	e030      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80080c4:	2000      	movs	r0, #0
 80080c6:	e02e      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 80080c8:	2000      	movs	r0, #0
 80080ca:	e02c      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d02d      	beq.n	800812c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <HAL_RCC_OscConfig+0x3f0>)
 80080d2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d8:	69e2      	ldr	r2, [r4, #28]
 80080da:	4291      	cmp	r1, r2
 80080dc:	d128      	bne.n	8008130 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e2:	6a21      	ldr	r1, [r4, #32]
 80080e4:	428a      	cmp	r2, r1
 80080e6:	d125      	bne.n	8008134 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ea:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80080ee:	401a      	ands	r2, r3
 80080f0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80080f4:	d120      	bne.n	8008138 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080f6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80080fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80080fc:	0852      	lsrs	r2, r2, #1
 80080fe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008100:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8008104:	d11a      	bne.n	800813c <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008106:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008108:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800810c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8008110:	bf14      	ite	ne
 8008112:	2001      	movne	r0, #1
 8008114:	2000      	moveq	r0, #0
 8008116:	e006      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 8008118:	2001      	movs	r0, #1
}
 800811a:	4770      	bx	lr
        return HAL_ERROR;
 800811c:	2001      	movs	r0, #1
 800811e:	e002      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8008120:	2001      	movs	r0, #1
 8008122:	e000      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8008124:	2000      	movs	r0, #0
}
 8008126:	b002      	add	sp, #8
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800812c:	2001      	movs	r0, #1
 800812e:	e7fa      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8008130:	2001      	movs	r0, #1
 8008132:	e7f8      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 8008134:	2001      	movs	r0, #1
 8008136:	e7f6      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 8008138:	2001      	movs	r0, #1
 800813a:	e7f4      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 800813c:	2001      	movs	r0, #1
 800813e:	e7f2      	b.n	8008126 <HAL_RCC_OscConfig+0x3d6>
 8008140:	40023800 	.word	0x40023800
 8008144:	42470000 	.word	0x42470000

08008148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008148:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800814a:	4b33      	ldr	r3, [pc, #204]	; (8008218 <HAL_RCC_GetSysClockFreq+0xd0>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 030c 	and.w	r3, r3, #12
 8008152:	2b04      	cmp	r3, #4
 8008154:	d05b      	beq.n	800820e <HAL_RCC_GetSysClockFreq+0xc6>
 8008156:	2b08      	cmp	r3, #8
 8008158:	d15b      	bne.n	8008212 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <HAL_RCC_GetSysClockFreq+0xd0>)
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008168:	d02c      	beq.n	80081c4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800816a:	4b2b      	ldr	r3, [pc, #172]	; (8008218 <HAL_RCC_GetSysClockFreq+0xd0>)
 800816c:	6858      	ldr	r0, [r3, #4]
 800816e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008172:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8008176:	ebbc 0c00 	subs.w	ip, ip, r0
 800817a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800817e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8008182:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8008186:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800818a:	ebb1 010c 	subs.w	r1, r1, ip
 800818e:	eb63 030e 	sbc.w	r3, r3, lr
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008198:	00c9      	lsls	r1, r1, #3
 800819a:	eb11 0c00 	adds.w	ip, r1, r0
 800819e:	f143 0300 	adc.w	r3, r3, #0
 80081a2:	0259      	lsls	r1, r3, #9
 80081a4:	2300      	movs	r3, #0
 80081a6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80081aa:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80081ae:	f7f8 fd53 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081b2:	4b19      	ldr	r3, [pc, #100]	; (8008218 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80081ba:	3301      	adds	r3, #1
 80081bc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80081be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80081c2:	e027      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081c4:	4b14      	ldr	r3, [pc, #80]	; (8008218 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081c6:	6858      	ldr	r0, [r3, #4]
 80081c8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80081cc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80081d0:	ebbc 0c00 	subs.w	ip, ip, r0
 80081d4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80081d8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80081dc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80081e0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80081e4:	ebb1 010c 	subs.w	r1, r1, ip
 80081e8:	eb63 030e 	sbc.w	r3, r3, lr
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f2:	00c9      	lsls	r1, r1, #3
 80081f4:	eb11 0c00 	adds.w	ip, r1, r0
 80081f8:	f143 0300 	adc.w	r3, r3, #0
 80081fc:	0299      	lsls	r1, r3, #10
 80081fe:	2300      	movs	r3, #0
 8008200:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8008204:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8008208:	f7f8 fd26 	bl	8000c58 <__aeabi_uldivmod>
 800820c:	e7d1      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800820e:	4803      	ldr	r0, [pc, #12]	; (800821c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008210:	e000      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0xcc>
      sysclockfreq = HSI_VALUE;
 8008212:	4803      	ldr	r0, [pc, #12]	; (8008220 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008214:	bd08      	pop	{r3, pc}
 8008216:	bf00      	nop
 8008218:	40023800 	.word	0x40023800
 800821c:	007a1200 	.word	0x007a1200
 8008220:	00f42400 	.word	0x00f42400

08008224 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008224:	2800      	cmp	r0, #0
 8008226:	f000 809d 	beq.w	8008364 <HAL_RCC_ClockConfig+0x140>
{
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	460d      	mov	r5, r1
 8008230:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008232:	4b50      	ldr	r3, [pc, #320]	; (8008374 <HAL_RCC_ClockConfig+0x150>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	428b      	cmp	r3, r1
 800823c:	d208      	bcs.n	8008250 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823e:	b2cb      	uxtb	r3, r1
 8008240:	4a4c      	ldr	r2, [pc, #304]	; (8008374 <HAL_RCC_ClockConfig+0x150>)
 8008242:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008244:	6813      	ldr	r3, [r2, #0]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	428b      	cmp	r3, r1
 800824c:	f040 808c 	bne.w	8008368 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	f013 0f02 	tst.w	r3, #2
 8008256:	d017      	beq.n	8008288 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008258:	f013 0f04 	tst.w	r3, #4
 800825c:	d004      	beq.n	8008268 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800825e:	4a46      	ldr	r2, [pc, #280]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 8008260:	6893      	ldr	r3, [r2, #8]
 8008262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008266:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	f013 0f08 	tst.w	r3, #8
 800826e:	d004      	beq.n	800827a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008270:	4a41      	ldr	r2, [pc, #260]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 8008272:	6893      	ldr	r3, [r2, #8]
 8008274:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008278:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800827a:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 800827c:	6893      	ldr	r3, [r2, #8]
 800827e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008282:	68a1      	ldr	r1, [r4, #8]
 8008284:	430b      	orrs	r3, r1
 8008286:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f013 0f01 	tst.w	r3, #1
 800828e:	d032      	beq.n	80082f6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008290:	6862      	ldr	r2, [r4, #4]
 8008292:	2a01      	cmp	r2, #1
 8008294:	d021      	beq.n	80082da <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008296:	1e93      	subs	r3, r2, #2
 8008298:	2b01      	cmp	r3, #1
 800829a:	d925      	bls.n	80082e8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f013 0f02 	tst.w	r3, #2
 80082a4:	d062      	beq.n	800836c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082a6:	4934      	ldr	r1, [pc, #208]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 80082a8:	688b      	ldr	r3, [r1, #8]
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80082b2:	f7fe fdad 	bl	8006e10 <HAL_GetTick>
 80082b6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b8:	4f2f      	ldr	r7, [pc, #188]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082ba:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f003 030c 	and.w	r3, r3, #12
 80082c4:	6862      	ldr	r2, [r4, #4]
 80082c6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80082ca:	d014      	beq.n	80082f6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082cc:	f7fe fda0 	bl	8006e10 <HAL_GetTick>
 80082d0:	1b80      	subs	r0, r0, r6
 80082d2:	4540      	cmp	r0, r8
 80082d4:	d9f3      	bls.n	80082be <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80082d6:	2003      	movs	r0, #3
 80082d8:	e042      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082da:	4b27      	ldr	r3, [pc, #156]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80082e2:	d1e0      	bne.n	80082a6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80082e4:	2001      	movs	r0, #1
 80082e6:	e03b      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e8:	4b23      	ldr	r3, [pc, #140]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80082f0:	d1d9      	bne.n	80082a6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80082f2:	2001      	movs	r0, #1
 80082f4:	e034      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082f6:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <HAL_RCC_ClockConfig+0x150>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	42ab      	cmp	r3, r5
 8008300:	d907      	bls.n	8008312 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008302:	b2ea      	uxtb	r2, r5
 8008304:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <HAL_RCC_ClockConfig+0x150>)
 8008306:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	42ab      	cmp	r3, r5
 8008310:	d12e      	bne.n	8008370 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	f013 0f04 	tst.w	r3, #4
 8008318:	d006      	beq.n	8008328 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 800831c:	6893      	ldr	r3, [r2, #8]
 800831e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008322:	68e1      	ldr	r1, [r4, #12]
 8008324:	430b      	orrs	r3, r1
 8008326:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	f013 0f08 	tst.w	r3, #8
 800832e:	d007      	beq.n	8008340 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008330:	4a11      	ldr	r2, [pc, #68]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 8008332:	6893      	ldr	r3, [r2, #8]
 8008334:	6921      	ldr	r1, [r4, #16]
 8008336:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800833a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800833e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008340:	f7ff ff02 	bl	8008148 <HAL_RCC_GetSysClockFreq>
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <HAL_RCC_ClockConfig+0x154>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800834c:	4a0b      	ldr	r2, [pc, #44]	; (800837c <HAL_RCC_ClockConfig+0x158>)
 800834e:	5cd3      	ldrb	r3, [r2, r3]
 8008350:	40d8      	lsrs	r0, r3
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_ClockConfig+0x15c>)
 8008354:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_RCC_ClockConfig+0x160>)
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f7fe fd0d 	bl	8006d78 <HAL_InitTick>
  return HAL_OK;
 800835e:	2000      	movs	r0, #0
}
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8008364:	2001      	movs	r0, #1
}
 8008366:	4770      	bx	lr
      return HAL_ERROR;
 8008368:	2001      	movs	r0, #1
 800836a:	e7f9      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800836c:	2001      	movs	r0, #1
 800836e:	e7f7      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8008370:	2001      	movs	r0, #1
 8008372:	e7f5      	b.n	8008360 <HAL_RCC_ClockConfig+0x13c>
 8008374:	40023c00 	.word	0x40023c00
 8008378:	40023800 	.word	0x40023800
 800837c:	0800e450 	.word	0x0800e450
 8008380:	20000004 	.word	0x20000004
 8008384:	2000016c 	.word	0x2000016c

08008388 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <HAL_RCC_GetPCLK1Freq+0x14>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008390:	4a03      	ldr	r2, [pc, #12]	; (80083a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008392:	5cd3      	ldrb	r3, [r2, r3]
 8008394:	4a03      	ldr	r2, [pc, #12]	; (80083a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008396:	6810      	ldr	r0, [r2, #0]
}
 8008398:	40d8      	lsrs	r0, r3
 800839a:	4770      	bx	lr
 800839c:	40023800 	.word	0x40023800
 80083a0:	0800e460 	.word	0x0800e460
 80083a4:	20000004 	.word	0x20000004

080083a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80083b0:	4a03      	ldr	r2, [pc, #12]	; (80083c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80083b2:	5cd3      	ldrb	r3, [r2, r3]
 80083b4:	4a03      	ldr	r2, [pc, #12]	; (80083c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80083b6:	6810      	ldr	r0, [r2, #0]
}
 80083b8:	40d8      	lsrs	r0, r3
 80083ba:	4770      	bx	lr
 80083bc:	40023800 	.word	0x40023800
 80083c0:	0800e460 	.word	0x0800e460
 80083c4:	20000004 	.word	0x20000004

080083c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	4681      	mov	r9, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	4616      	mov	r6, r2
 80083d4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083d6:	f7fe fd1b 	bl	8006e10 <HAL_GetTick>
 80083da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083dc:	442b      	add	r3, r5
 80083de:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80083e2:	f7fe fd15 	bl	8006e10 <HAL_GetTick>
 80083e6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083e8:	4b2c      	ldr	r3, [pc, #176]	; (800849c <SPI_WaitFlagStateUntilTimeout+0xd4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80083f0:	fb08 f303 	mul.w	r3, r8, r3
 80083f4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083f6:	f8d9 2000 	ldr.w	r2, [r9]
 80083fa:	6894      	ldr	r4, [r2, #8]
 80083fc:	ea37 0404 	bics.w	r4, r7, r4
 8008400:	bf0c      	ite	eq
 8008402:	2301      	moveq	r3, #1
 8008404:	2300      	movne	r3, #0
 8008406:	42b3      	cmp	r3, r6
 8008408:	d044      	beq.n	8008494 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800840a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800840e:	d0f4      	beq.n	80083fa <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008410:	f7fe fcfe 	bl	8006e10 <HAL_GetTick>
 8008414:	eba0 000a 	sub.w	r0, r0, sl
 8008418:	4540      	cmp	r0, r8
 800841a:	d207      	bcs.n	800842c <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800841c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800841e:	2b00      	cmp	r3, #0
 8008420:	bf08      	it	eq
 8008422:	4698      	moveq	r8, r3
      }
      count--;
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	3b01      	subs	r3, #1
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	e7e4      	b.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800842c:	f8d9 2000 	ldr.w	r2, [r9]
 8008430:	6853      	ldr	r3, [r2, #4]
 8008432:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008436:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008438:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800843c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008440:	d00c      	beq.n	800845c <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008442:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844a:	d016      	beq.n	800847a <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 800844c:	2301      	movs	r3, #1
 800844e:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8008452:	2300      	movs	r3, #0
 8008454:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8008458:	2003      	movs	r0, #3
 800845a:	e01c      	b.n	8008496 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800845c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008464:	d002      	beq.n	800846c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846a:	d1ea      	bne.n	8008442 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800846c:	f8d9 2000 	ldr.w	r2, [r9]
 8008470:	6813      	ldr	r3, [r2, #0]
 8008472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e7e3      	b.n	8008442 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800847a:	f8d9 2000 	ldr.w	r2, [r9]
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	f8d9 2000 	ldr.w	r2, [r9]
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	e7db      	b.n	800844c <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8008494:	2000      	movs	r0, #0
}
 8008496:	b002      	add	sp, #8
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	20000004 	.word	0x20000004

080084a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084a0:	b510      	push	{r4, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084a6:	4b16      	ldr	r3, [pc, #88]	; (8008500 <SPI_EndRxTxTransaction+0x60>)
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	4b16      	ldr	r3, [pc, #88]	; (8008504 <SPI_EndRxTxTransaction+0x64>)
 80084ac:	fba3 3000 	umull	r3, r0, r3, r0
 80084b0:	0d40      	lsrs	r0, r0, #21
 80084b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b6:	fb03 f000 	mul.w	r0, r3, r0
 80084ba:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c2:	d00b      	beq.n	80084dc <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	b1bb      	cbz	r3, 80084f8 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084d6:	d1f5      	bne.n	80084c4 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80084d8:	2000      	movs	r0, #0
 80084da:	e00e      	b.n	80084fa <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084dc:	9200      	str	r2, [sp, #0]
 80084de:	460b      	mov	r3, r1
 80084e0:	2200      	movs	r2, #0
 80084e2:	2180      	movs	r1, #128	; 0x80
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff ff6f 	bl	80083c8 <SPI_WaitFlagStateUntilTimeout>
 80084ea:	b130      	cbz	r0, 80084fa <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80084ee:	f043 0320 	orr.w	r3, r3, #32
 80084f2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80084f4:	2003      	movs	r0, #3
 80084f6:	e000      	b.n	80084fa <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80084f8:	2000      	movs	r0, #0
}
 80084fa:	b004      	add	sp, #16
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	20000004 	.word	0x20000004
 8008504:	165e9f81 	.word	0x165e9f81

08008508 <HAL_SPI_MspInit>:
}
 8008508:	4770      	bx	lr

0800850a <HAL_SPI_Init>:
  if (hspi == NULL)
 800850a:	2800      	cmp	r0, #0
 800850c:	d05a      	beq.n	80085c4 <HAL_SPI_Init+0xba>
{
 800850e:	b510      	push	{r4, lr}
 8008510:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008512:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008514:	b933      	cbnz	r3, 8008524 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008516:	6843      	ldr	r3, [r0, #4]
 8008518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800851c:	d005      	beq.n	800852a <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800851e:	2300      	movs	r3, #0
 8008520:	61c3      	str	r3, [r0, #28]
 8008522:	e002      	b.n	800852a <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008524:	2300      	movs	r3, #0
 8008526:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008528:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800852a:	2300      	movs	r3, #0
 800852c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800852e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008532:	2b00      	cmp	r3, #0
 8008534:	d040      	beq.n	80085b8 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008536:	2302      	movs	r3, #2
 8008538:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008544:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800854e:	68a1      	ldr	r1, [r4, #8]
 8008550:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8008554:	430b      	orrs	r3, r1
 8008556:	68e1      	ldr	r1, [r4, #12]
 8008558:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800855c:	430b      	orrs	r3, r1
 800855e:	6921      	ldr	r1, [r4, #16]
 8008560:	f001 0102 	and.w	r1, r1, #2
 8008564:	430b      	orrs	r3, r1
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	f001 0101 	and.w	r1, r1, #1
 800856c:	430b      	orrs	r3, r1
 800856e:	69a1      	ldr	r1, [r4, #24]
 8008570:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8008574:	430b      	orrs	r3, r1
 8008576:	69e1      	ldr	r1, [r4, #28]
 8008578:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800857c:	430b      	orrs	r3, r1
 800857e:	6a21      	ldr	r1, [r4, #32]
 8008580:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008584:	430b      	orrs	r3, r1
 8008586:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008588:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800858c:	430b      	orrs	r3, r1
 800858e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	8b63      	ldrh	r3, [r4, #26]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800859a:	f002 0210 	and.w	r2, r2, #16
 800859e:	4313      	orrs	r3, r2
 80085a0:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	69d3      	ldr	r3, [r2, #28]
 80085a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085aa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085ac:	2000      	movs	r0, #0
 80085ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80085b6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80085b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80085bc:	4620      	mov	r0, r4
 80085be:	f7ff ffa3 	bl	8008508 <HAL_SPI_MspInit>
 80085c2:	e7b8      	b.n	8008536 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80085c4:	2001      	movs	r0, #1
}
 80085c6:	4770      	bx	lr

080085c8 <HAL_SPI_TransmitReceive>:
{
 80085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085cc:	b083      	sub	sp, #12
 80085ce:	461f      	mov	r7, r3
 80085d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80085d2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	f000 810e 	beq.w	80087f8 <HAL_SPI_TransmitReceive+0x230>
 80085dc:	4604      	mov	r4, r0
 80085de:	4688      	mov	r8, r1
 80085e0:	4691      	mov	r9, r2
 80085e2:	2301      	movs	r3, #1
 80085e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80085e8:	f7fe fc12 	bl	8006e10 <HAL_GetTick>
 80085ec:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80085ee:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80085f2:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80085f4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085f6:	2801      	cmp	r0, #1
 80085f8:	d00a      	beq.n	8008610 <HAL_SPI_TransmitReceive+0x48>
 80085fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fe:	f040 80e3 	bne.w	80087c8 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 80e9 	bne.w	80087dc <HAL_SPI_TransmitReceive+0x214>
 800860a:	2804      	cmp	r0, #4
 800860c:	f040 80e8 	bne.w	80087e0 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	f000 80e6 	beq.w	80087e4 <HAL_SPI_TransmitReceive+0x21c>
 8008618:	f1b9 0f00 	cmp.w	r9, #0
 800861c:	f000 80e4 	beq.w	80087e8 <HAL_SPI_TransmitReceive+0x220>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80e3 	beq.w	80087ec <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008626:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800862e:	bf1c      	itt	ne
 8008630:	2305      	movne	r3, #5
 8008632:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008636:	2300      	movs	r3, #0
 8008638:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800863a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800863e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008640:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008642:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008646:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008648:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800864a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800864c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008656:	d103      	bne.n	8008660 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800865e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008660:	68e3      	ldr	r3, [r4, #12]
 8008662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008666:	d012      	beq.n	800868e <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	b10b      	cbz	r3, 8008670 <HAL_SPI_TransmitReceive+0xa8>
 800866c:	2f01      	cmp	r7, #1
 800866e:	d10a      	bne.n	8008686 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008674:	7812      	ldrb	r2, [r2, #0]
 8008676:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800867a:	3301      	adds	r3, #1
 800867c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800867e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008680:	3b01      	subs	r3, #1
 8008682:	b29b      	uxth	r3, r3
 8008684:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8008686:	2701      	movs	r7, #1
        txallowed = 0U;
 8008688:	f04f 0800 	mov.w	r8, #0
 800868c:	e067      	b.n	800875e <HAL_SPI_TransmitReceive+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	b10b      	cbz	r3, 8008696 <HAL_SPI_TransmitReceive+0xce>
 8008692:	2f01      	cmp	r7, #1
 8008694:	d10a      	bne.n	80086ac <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800869a:	8812      	ldrh	r2, [r2, #0]
 800869c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800869e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086a0:	3302      	adds	r3, #2
 80086a2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80086a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80086ac:	2701      	movs	r7, #1
        txallowed = 0U;
 80086ae:	f04f 0800 	mov.w	r8, #0
 80086b2:	e01b      	b.n	80086ec <HAL_SPI_TransmitReceive+0x124>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	6893      	ldr	r3, [r2, #8]
 80086b8:	f013 0301 	ands.w	r3, r3, #1
 80086bc:	d00d      	beq.n	80086da <HAL_SPI_TransmitReceive+0x112>
 80086be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80086c0:	b289      	uxth	r1, r1
 80086c2:	b151      	cbz	r1, 80086da <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086c4:	68d1      	ldr	r1, [r2, #12]
 80086c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086c8:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086cc:	3202      	adds	r2, #2
 80086ce:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80086d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80086d2:	3a01      	subs	r2, #1
 80086d4:	b292      	uxth	r2, r2
 80086d6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80086d8:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086da:	f7fe fb99 	bl	8006e10 <HAL_GetTick>
 80086de:	1b80      	subs	r0, r0, r6
 80086e0:	42a8      	cmp	r0, r5
 80086e2:	d303      	bcc.n	80086ec <HAL_SPI_TransmitReceive+0x124>
 80086e4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80086e8:	f040 8082 	bne.w	80087f0 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	b91b      	cbnz	r3, 80086fa <HAL_SPI_TransmitReceive+0x132>
 80086f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d052      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	f012 0f02 	tst.w	r2, #2
 8008702:	d0d7      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0xec>
 8008704:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008706:	b292      	uxth	r2, r2
 8008708:	2a00      	cmp	r2, #0
 800870a:	d0d3      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0xec>
 800870c:	2f00      	cmp	r7, #0
 800870e:	d0d1      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008710:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008712:	8812      	ldrh	r2, [r2, #0]
 8008714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008718:	3302      	adds	r3, #2
 800871a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800871c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800871e:	3b01      	subs	r3, #1
 8008720:	b29b      	uxth	r3, r3
 8008722:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8008724:	4647      	mov	r7, r8
 8008726:	e7c5      	b.n	80086b4 <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	6893      	ldr	r3, [r2, #8]
 800872c:	f013 0301 	ands.w	r3, r3, #1
 8008730:	d00d      	beq.n	800874e <HAL_SPI_TransmitReceive+0x186>
 8008732:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8008734:	b289      	uxth	r1, r1
 8008736:	b151      	cbz	r1, 800874e <HAL_SPI_TransmitReceive+0x186>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008738:	68d1      	ldr	r1, [r2, #12]
 800873a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800873c:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 800873e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008740:	3201      	adds	r2, #1
 8008742:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008744:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008746:	3a01      	subs	r2, #1
 8008748:	b292      	uxth	r2, r2
 800874a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 800874c:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800874e:	f7fe fb5f 	bl	8006e10 <HAL_GetTick>
 8008752:	1b83      	subs	r3, r0, r6
 8008754:	42ab      	cmp	r3, r5
 8008756:	d31f      	bcc.n	8008798 <HAL_SPI_TransmitReceive+0x1d0>
 8008758:	f1b5 3fff 	cmp.w	r5, #4294967295
 800875c:	d14a      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x22c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800875e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008760:	b29b      	uxth	r3, r3
 8008762:	b913      	cbnz	r3, 800876a <HAL_SPI_TransmitReceive+0x1a2>
 8008764:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008766:	b29b      	uxth	r3, r3
 8008768:	b1d3      	cbz	r3, 80087a0 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	f012 0f02 	tst.w	r2, #2
 8008772:	d0d9      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x160>
 8008774:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008776:	b292      	uxth	r2, r2
 8008778:	2a00      	cmp	r2, #0
 800877a:	d0d5      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x160>
 800877c:	2f01      	cmp	r7, #1
 800877e:	d1d3      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008780:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008786:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008788:	3301      	adds	r3, #1
 800878a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800878c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800878e:	3b01      	subs	r3, #1
 8008790:	b29b      	uxth	r3, r3
 8008792:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8008794:	4647      	mov	r7, r8
 8008796:	e7c7      	b.n	8008728 <HAL_SPI_TransmitReceive+0x160>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008798:	2d00      	cmp	r5, #0
 800879a:	d1e0      	bne.n	800875e <HAL_SPI_TransmitReceive+0x196>
        errorcode = HAL_TIMEOUT;
 800879c:	2003      	movs	r0, #3
 800879e:	e014      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087a0:	4632      	mov	r2, r6
 80087a2:	4629      	mov	r1, r5
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7ff fe7b 	bl	80084a0 <SPI_EndRxTxTransaction>
 80087aa:	b948      	cbnz	r0, 80087c0 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	b963      	cbnz	r3, 80087ca <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	9201      	str	r2, [sp, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	e004      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087c0:	2320      	movs	r3, #32
 80087c2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80087c4:	2001      	movs	r0, #1
    goto error;
 80087c6:	e000      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80087c8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087d0:	2300      	movs	r3, #0
 80087d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80087d6:	b003      	add	sp, #12
 80087d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80087dc:	2002      	movs	r0, #2
 80087de:	e7f4      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
 80087e0:	2002      	movs	r0, #2
 80087e2:	e7f2      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80087e4:	2001      	movs	r0, #1
 80087e6:	e7f0      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
 80087e8:	2001      	movs	r0, #1
 80087ea:	e7ee      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
 80087ec:	2001      	movs	r0, #1
 80087ee:	e7ec      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80087f0:	2003      	movs	r0, #3
 80087f2:	e7ea      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80087f4:	2003      	movs	r0, #3
 80087f6:	e7e8      	b.n	80087ca <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80087f8:	2002      	movs	r0, #2
 80087fa:	e7ec      	b.n	80087d6 <HAL_SPI_TransmitReceive+0x20e>

080087fc <HAL_SPI_GetState>:
  return hspi->State;
 80087fc:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8008800:	4770      	bx	lr
	...

08008804 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008804:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d12f      	bne.n	800886e <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800880e:	2302      	movs	r3, #2
 8008810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008814:	6802      	ldr	r2, [r0, #0]
 8008816:	68d3      	ldr	r3, [r2, #12]
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881e:	6803      	ldr	r3, [r0, #0]
 8008820:	4a15      	ldr	r2, [pc, #84]	; (8008878 <HAL_TIM_Base_Start_IT+0x74>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
 8008826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882a:	d015      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
 800882c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008830:	4293      	cmp	r3, r2
 8008832:	d011      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
 8008834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008838:	4293      	cmp	r3, r2
 800883a:	d00d      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
 800883c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
 8008844:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008848:	4293      	cmp	r3, r2
 800884a:	d005      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008854:	2000      	movs	r0, #0
 8008856:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885e:	2a06      	cmp	r2, #6
 8008860:	d007      	beq.n	8008872 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800886a:	2000      	movs	r0, #0
 800886c:	4770      	bx	lr
    return HAL_ERROR;
 800886e:	2001      	movs	r0, #1
 8008870:	4770      	bx	lr
  return HAL_OK;
 8008872:	2000      	movs	r0, #0
}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40010000 	.word	0x40010000

0800887c <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800887c:	6802      	ldr	r2, [r0, #0]
 800887e:	68d3      	ldr	r3, [r2, #12]
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	6a19      	ldr	r1, [r3, #32]
 800888a:	f241 1211 	movw	r2, #4369	; 0x1111
 800888e:	4211      	tst	r1, r2
 8008890:	d108      	bne.n	80088a4 <HAL_TIM_Base_Stop_IT+0x28>
 8008892:	6a19      	ldr	r1, [r3, #32]
 8008894:	f240 4244 	movw	r2, #1092	; 0x444
 8008898:	4211      	tst	r1, r2
 800889a:	d103      	bne.n	80088a4 <HAL_TIM_Base_Stop_IT+0x28>
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80088aa:	2000      	movs	r0, #0
 80088ac:	4770      	bx	lr

080088ae <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088b0:	4770      	bx	lr

080088b2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088b2:	4770      	bx	lr

080088b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_IRQHandler>:
{
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088bc:	6803      	ldr	r3, [r0, #0]
 80088be:	691a      	ldr	r2, [r3, #16]
 80088c0:	f012 0f02 	tst.w	r2, #2
 80088c4:	d011      	beq.n	80088ea <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	f012 0f02 	tst.w	r2, #2
 80088cc:	d00d      	beq.n	80088ea <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088ce:	f06f 0202 	mvn.w	r2, #2
 80088d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d4:	2301      	movs	r3, #1
 80088d6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088d8:	6803      	ldr	r3, [r0, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f013 0f03 	tst.w	r3, #3
 80088e0:	d070      	beq.n	80089c4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80088e2:	f7ff ffe6 	bl	80088b2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088e6:	2300      	movs	r3, #0
 80088e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	f012 0f04 	tst.w	r2, #4
 80088f2:	d012      	beq.n	800891a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	f012 0f04 	tst.w	r2, #4
 80088fa:	d00e      	beq.n	800891a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088fc:	f06f 0204 	mvn.w	r2, #4
 8008900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008902:	2302      	movs	r3, #2
 8008904:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800890e:	d05f      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8008910:	4620      	mov	r0, r4
 8008912:	f7ff ffce 	bl	80088b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008916:	2300      	movs	r3, #0
 8008918:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	f012 0f08 	tst.w	r2, #8
 8008922:	d012      	beq.n	800894a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	f012 0f08 	tst.w	r2, #8
 800892a:	d00e      	beq.n	800894a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800892c:	f06f 0208 	mvn.w	r2, #8
 8008930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008932:	2304      	movs	r3, #4
 8008934:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f013 0f03 	tst.w	r3, #3
 800893e:	d04e      	beq.n	80089de <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff ffb6 	bl	80088b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008946:	2300      	movs	r3, #0
 8008948:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	f012 0f10 	tst.w	r2, #16
 8008952:	d012      	beq.n	800897a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	f012 0f10 	tst.w	r2, #16
 800895a:	d00e      	beq.n	800897a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800895c:	f06f 0210 	mvn.w	r2, #16
 8008960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008962:	2308      	movs	r3, #8
 8008964:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800896e:	d03d      	beq.n	80089ec <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ff9e 	bl	80088b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008976:	2300      	movs	r3, #0
 8008978:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	f012 0f01 	tst.w	r2, #1
 8008982:	d003      	beq.n	800898c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	f012 0f01 	tst.w	r2, #1
 800898a:	d136      	bne.n	80089fa <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008994:	d003      	beq.n	800899e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	f012 0f80 	tst.w	r2, #128	; 0x80
 800899c:	d134      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80089a6:	d003      	beq.n	80089b0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80089ae:	d132      	bne.n	8008a16 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	f012 0f20 	tst.w	r2, #32
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	f012 0f20 	tst.w	r2, #32
 80089c0:	d130      	bne.n	8008a24 <HAL_TIM_IRQHandler+0x16c>
}
 80089c2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c4:	f7ff ff74 	bl	80088b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7ff ff73 	bl	80088b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80089ce:	e78a      	b.n	80088e6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff ff6d 	bl	80088b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff ff6c 	bl	80088b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80089dc:	e79b      	b.n	8008916 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff ff66 	bl	80088b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff ff65 	bl	80088b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80089ea:	e7ac      	b.n	8008946 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7ff ff5f 	bl	80088b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff ff5e 	bl	80088b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80089f8:	e7bd      	b.n	8008976 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089fa:	f06f 0201 	mvn.w	r2, #1
 80089fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff ff54 	bl	80088ae <HAL_TIM_PeriodElapsedCallback>
 8008a06:	e7c1      	b.n	800898c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 f99f 	bl	8008d52 <HAL_TIMEx_BreakCallback>
 8008a14:	e7c3      	b.n	800899e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff ff4a 	bl	80088b6 <HAL_TIM_TriggerCallback>
 8008a22:	e7c5      	b.n	80089b0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a24:	f06f 0220 	mvn.w	r2, #32
 8008a28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f990 	bl	8008d50 <HAL_TIMEx_CommutCallback>
}
 8008a30:	e7c7      	b.n	80089c2 <HAL_TIM_IRQHandler+0x10a>
	...

08008a34 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a34:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a36:	4a30      	ldr	r2, [pc, #192]	; (8008af8 <TIM_Base_SetConfig+0xc4>)
 8008a38:	4290      	cmp	r0, r2
 8008a3a:	d033      	beq.n	8008aa4 <TIM_Base_SetConfig+0x70>
 8008a3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a40:	d045      	beq.n	8008ace <TIM_Base_SetConfig+0x9a>
 8008a42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008a46:	4290      	cmp	r0, r2
 8008a48:	d01d      	beq.n	8008a86 <TIM_Base_SetConfig+0x52>
 8008a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a4e:	4290      	cmp	r0, r2
 8008a50:	d01e      	beq.n	8008a90 <TIM_Base_SetConfig+0x5c>
 8008a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a56:	4290      	cmp	r0, r2
 8008a58:	d01f      	beq.n	8008a9a <TIM_Base_SetConfig+0x66>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008a5e:	4290      	cmp	r0, r2
 8008a60:	d039      	beq.n	8008ad6 <TIM_Base_SetConfig+0xa2>
 8008a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a66:	4290      	cmp	r0, r2
 8008a68:	d035      	beq.n	8008ad6 <TIM_Base_SetConfig+0xa2>
 8008a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a6e:	4290      	cmp	r0, r2
 8008a70:	d031      	beq.n	8008ad6 <TIM_Base_SetConfig+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a76:	694a      	ldr	r2, [r1, #20]
 8008a78:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008a7a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a7c:	688b      	ldr	r3, [r1, #8]
 8008a7e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a80:	680b      	ldr	r3, [r1, #0]
 8008a82:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a84:	e034      	b.n	8008af0 <TIM_Base_SetConfig+0xbc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a8a:	684a      	ldr	r2, [r1, #4]
 8008a8c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a8e:	e022      	b.n	8008ad6 <TIM_Base_SetConfig+0xa2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a94:	684a      	ldr	r2, [r1, #4]
 8008a96:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a98:	e01d      	b.n	8008ad6 <TIM_Base_SetConfig+0xa2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a9e:	684a      	ldr	r2, [r1, #4]
 8008aa0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aa2:	e018      	b.n	8008ad6 <TIM_Base_SetConfig+0xa2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008aa8:	684a      	ldr	r2, [r1, #4]
 8008aaa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ab0:	68ca      	ldr	r2, [r1, #12]
 8008ab2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ab8:	694a      	ldr	r2, [r1, #20]
 8008aba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008abc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008abe:	688b      	ldr	r3, [r1, #8]
 8008ac0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ac2:	680b      	ldr	r3, [r1, #0]
 8008ac4:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ac6:	690a      	ldr	r2, [r1, #16]
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <TIM_Base_SetConfig+0xc4>)
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
 8008acc:	e010      	b.n	8008af0 <TIM_Base_SetConfig+0xbc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ad2:	684a      	ldr	r2, [r1, #4]
 8008ad4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ada:	68ca      	ldr	r2, [r1, #12]
 8008adc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae2:	694a      	ldr	r2, [r1, #20]
 8008ae4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ae6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ae8:	688b      	ldr	r3, [r1, #8]
 8008aea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008aec:	680b      	ldr	r3, [r1, #0]
 8008aee:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af0:	2301      	movs	r3, #1
 8008af2:	6143      	str	r3, [r0, #20]
}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40010000 	.word	0x40010000

08008afc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008afc:	b340      	cbz	r0, 8008b50 <HAL_TIM_Base_Init+0x54>
{
 8008afe:	b510      	push	{r4, lr}
 8008b00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b06:	b1f3      	cbz	r3, 8008b46 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f851 0b04 	ldr.w	r0, [r1], #4
 8008b14:	f7ff ff8e 	bl	8008a34 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008b22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008b26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008b3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008b42:	2000      	movs	r0, #0
}
 8008b44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008b46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008b4a:	f7f9 fa0d 	bl	8001f68 <HAL_TIM_Base_MspInit>
 8008b4e:	e7db      	b.n	8008b08 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008b50:	2001      	movs	r0, #1
}
 8008b52:	4770      	bx	lr

08008b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b54:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b56:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b58:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008b62:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b66:	6082      	str	r2, [r0, #8]
}
 8008b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_ConfigClockSource>:
{
 8008b6e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008b70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	f000 80ad 	beq.w	8008cd4 <HAL_TIM_ConfigClockSource+0x166>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008b82:	2302      	movs	r3, #2
 8008b84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008b88:	6802      	ldr	r2, [r0, #0]
 8008b8a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008b94:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	2b60      	cmp	r3, #96	; 0x60
 8008b9a:	d060      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0xf0>
 8008b9c:	d83d      	bhi.n	8008c1a <HAL_TIM_ConfigClockSource+0xac>
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d079      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0x128>
 8008ba2:	d91c      	bls.n	8008bde <HAL_TIM_ConfigClockSource+0x70>
 8008ba4:	2b50      	cmp	r3, #80	; 0x50
 8008ba6:	d136      	bne.n	8008c16 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba8:	6803      	ldr	r3, [r0, #0]
 8008baa:	6848      	ldr	r0, [r1, #4]
 8008bac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008bae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	f022 0201 	bic.w	r2, r2, #1
 8008bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bbe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008bc6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bcc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008bce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bd4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8008bd8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2000      	movs	r0, #0
}
 8008bdc:	e012      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d002      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x7a>
 8008be2:	d90b      	bls.n	8008bfc <HAL_TIM_ConfigClockSource+0x8e>
 8008be4:	2b30      	cmp	r3, #48	; 0x30
 8008be6:	d114      	bne.n	8008c12 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008be8:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008bea:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008bf6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf8:	2000      	movs	r0, #0
}
 8008bfa:	e003      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8008bfc:	f033 0210 	bics.w	r2, r3, #16
 8008c00:	d0f2      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x7a>
 8008c02:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8008c12:	2001      	movs	r0, #1
 8008c14:	e7f6      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7f4      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
 8008c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1e:	d055      	beq.n	8008ccc <HAL_TIM_ConfigClockSource+0x15e>
 8008c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c24:	d10c      	bne.n	8008c40 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8008c26:	68cb      	ldr	r3, [r1, #12]
 8008c28:	684a      	ldr	r2, [r1, #4]
 8008c2a:	6889      	ldr	r1, [r1, #8]
 8008c2c:	6800      	ldr	r0, [r0, #0]
 8008c2e:	f7ff ff91 	bl	8008b54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	6893      	ldr	r3, [r2, #8]
 8008c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c3a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3c:	2000      	movs	r0, #0
      break;
 8008c3e:	e7e1      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8008c40:	2b70      	cmp	r3, #112	; 0x70
 8008c42:	d145      	bne.n	8008cd0 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8008c44:	68cb      	ldr	r3, [r1, #12]
 8008c46:	684a      	ldr	r2, [r1, #4]
 8008c48:	6889      	ldr	r1, [r1, #8]
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	f7ff ff82 	bl	8008b54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c50:	6822      	ldr	r2, [r4, #0]
 8008c52:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008c58:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5a:	2000      	movs	r0, #0
      break;
 8008c5c:	e7d2      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c5e:	6803      	ldr	r3, [r0, #0]
 8008c60:	6848      	ldr	r0, [r1, #4]
 8008c62:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c64:	6a1a      	ldr	r2, [r3, #32]
 8008c66:	f022 0210 	bic.w	r2, r2, #16
 8008c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8008c6e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c70:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c74:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c7c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008c80:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c82:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c84:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008c86:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8008c90:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c92:	2000      	movs	r0, #0
}
 8008c94:	e7b6      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c96:	6803      	ldr	r3, [r0, #0]
 8008c98:	6848      	ldr	r0, [r1, #4]
 8008c9a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008c9c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9e:	6a1a      	ldr	r2, [r3, #32]
 8008ca0:	f022 0201 	bic.w	r2, r2, #1
 8008ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ca6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cb0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008cb4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cba:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008cbc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cc2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8008cc6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc8:	2000      	movs	r0, #0
}
 8008cca:	e79b      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e799      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	e797      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8008cd4:	2002      	movs	r0, #2
 8008cd6:	e79b      	b.n	8008c10 <HAL_TIM_ConfigClockSource+0xa2>

08008cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8008cdc:	2a01      	cmp	r2, #1
 8008cde:	d033      	beq.n	8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8008ce0:	b430      	push	{r4, r5}
 8008ce2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cea:	2202      	movs	r2, #2
 8008cec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf0:	6804      	ldr	r4, [r0, #0]
 8008cf2:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cfa:	680d      	ldr	r5, [r1, #0]
 8008cfc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cfe:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4c12      	ldr	r4, [pc, #72]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8008d04:	42a2      	cmp	r2, r4
 8008d06:	d012      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d08:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008d0c:	d00f      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d0e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8008d12:	42a2      	cmp	r2, r4
 8008d14:	d00b      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008d1a:	42a2      	cmp	r2, r4
 8008d1c:	d007      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008d22:	42a2      	cmp	r2, r4
 8008d24:	d003      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d26:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8008d2a:	42a2      	cmp	r2, r4
 8008d2c:	d104      	bne.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d2e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d36:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8008d44:	bc30      	pop	{r4, r5}
 8008d46:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008d48:	2002      	movs	r0, #2
}
 8008d4a:	4770      	bx	lr
 8008d4c:	40010000 	.word	0x40010000

08008d50 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d50:	4770      	bx	lr

08008d52 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d52:	4770      	bx	lr

08008d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d58:	6802      	ldr	r2, [r0, #0]
 8008d5a:	6913      	ldr	r3, [r2, #16]
 8008d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008d60:	68c1      	ldr	r1, [r0, #12]
 8008d62:	430b      	orrs	r3, r1
 8008d64:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8008d66:	6801      	ldr	r1, [r0, #0]
 8008d68:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d6a:	6883      	ldr	r3, [r0, #8]
 8008d6c:	6900      	ldr	r0, [r0, #16]
 8008d6e:	4303      	orrs	r3, r0
 8008d70:	6960      	ldr	r0, [r4, #20]
 8008d72:	4303      	orrs	r3, r0
 8008d74:	69e0      	ldr	r0, [r4, #28]
 8008d76:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8008d78:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8008d7c:	f022 020c 	bic.w	r2, r2, #12
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	6953      	ldr	r3, [r2, #20]
 8008d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d8c:	69a1      	ldr	r1, [r4, #24]
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	4a2e      	ldr	r2, [pc, #184]	; (8008e50 <UART_SetConfig+0xfc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d006      	beq.n	8008da8 <UART_SetConfig+0x54>
 8008d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d002      	beq.n	8008da8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008da2:	f7ff faf1 	bl	8008388 <HAL_RCC_GetPCLK1Freq>
 8008da6:	e001      	b.n	8008dac <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008da8:	f7ff fafe 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dac:	69e3      	ldr	r3, [r4, #28]
 8008dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db2:	d024      	beq.n	8008dfe <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008db4:	2100      	movs	r1, #0
 8008db6:	1803      	adds	r3, r0, r0
 8008db8:	4149      	adcs	r1, r1
 8008dba:	181b      	adds	r3, r3, r0
 8008dbc:	f141 0100 	adc.w	r1, r1, #0
 8008dc0:	00c9      	lsls	r1, r1, #3
 8008dc2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	1818      	adds	r0, r3, r0
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008dd0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8008dd4:	f141 0100 	adc.w	r1, r1, #0
 8008dd8:	f7f7 ff3e 	bl	8000c58 <__aeabi_uldivmod>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <UART_SetConfig+0x100>)
 8008de0:	fba2 4300 	umull	r4, r3, r2, r0
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	2464      	movs	r4, #100	; 0x64
 8008de8:	fb04 0013 	mls	r0, r4, r3, r0
 8008dec:	0100      	lsls	r0, r0, #4
 8008dee:	3032      	adds	r0, #50	; 0x32
 8008df0:	fba2 2000 	umull	r2, r0, r2, r0
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8008dfa:	608b      	str	r3, [r1, #8]
  }
}
 8008dfc:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dfe:	2300      	movs	r3, #0
 8008e00:	1802      	adds	r2, r0, r0
 8008e02:	eb43 0103 	adc.w	r1, r3, r3
 8008e06:	1812      	adds	r2, r2, r0
 8008e08:	f141 0100 	adc.w	r1, r1, #0
 8008e0c:	00c9      	lsls	r1, r1, #3
 8008e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e12:	00d2      	lsls	r2, r2, #3
 8008e14:	1810      	adds	r0, r2, r0
 8008e16:	f141 0100 	adc.w	r1, r1, #0
 8008e1a:	6862      	ldr	r2, [r4, #4]
 8008e1c:	1892      	adds	r2, r2, r2
 8008e1e:	415b      	adcs	r3, r3
 8008e20:	f7f7 ff1a 	bl	8000c58 <__aeabi_uldivmod>
 8008e24:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <UART_SetConfig+0x100>)
 8008e26:	fba2 3100 	umull	r3, r1, r2, r0
 8008e2a:	0949      	lsrs	r1, r1, #5
 8008e2c:	2364      	movs	r3, #100	; 0x64
 8008e2e:	fb03 0311 	mls	r3, r3, r1, r0
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	3332      	adds	r3, #50	; 0x32
 8008e36:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8008e40:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008e44:	091b      	lsrs	r3, r3, #4
 8008e46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e4a:	4413      	add	r3, r2
 8008e4c:	6083      	str	r3, [r0, #8]
 8008e4e:	e7d5      	b.n	8008dfc <UART_SetConfig+0xa8>
 8008e50:	40011000 	.word	0x40011000
 8008e54:	51eb851f 	.word	0x51eb851f

08008e58 <UART_WaitOnFlagUntilTimeout>:
{
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	460e      	mov	r6, r1
 8008e60:	4615      	mov	r5, r2
 8008e62:	4699      	mov	r9, r3
 8008e64:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e66:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6a:	681c      	ldr	r4, [r3, #0]
 8008e6c:	ea36 0404 	bics.w	r4, r6, r4
 8008e70:	bf0c      	ite	eq
 8008e72:	2401      	moveq	r4, #1
 8008e74:	2400      	movne	r4, #0
 8008e76:	42ac      	cmp	r4, r5
 8008e78:	d12d      	bne.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8008e7a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008e7e:	d0f4      	beq.n	8008e6a <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e80:	b12f      	cbz	r7, 8008e8e <UART_WaitOnFlagUntilTimeout+0x36>
 8008e82:	f7fd ffc5 	bl	8006e10 <HAL_GetTick>
 8008e86:	eba0 0009 	sub.w	r0, r0, r9
 8008e8a:	42b8      	cmp	r0, r7
 8008e8c:	d9eb      	bls.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e8e:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	f102 030c 	add.w	r3, r2, #12
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	320c      	adds	r2, #12
 8008ea0:	e842 3100 	strex	r1, r3, [r2]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d1f2      	bne.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x36>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	f102 0314 	add.w	r3, r2, #20
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	3214      	adds	r2, #20
 8008eba:	e842 3100 	strex	r1, r3, [r2]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d1f2      	bne.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState  = HAL_UART_STATE_READY;
 8008ec2:	2320      	movs	r3, #32
 8008ec4:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8008ed2:	2003      	movs	r0, #3
 8008ed4:	e000      	b.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8008ed6:	2000      	movs	r0, #0
}
 8008ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008edc <HAL_UART_MspInit>:
}
 8008edc:	4770      	bx	lr

08008ede <HAL_UART_Init>:
  if (huart == NULL)
 8008ede:	b358      	cbz	r0, 8008f38 <HAL_UART_Init+0x5a>
{
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008ee4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008ee8:	b30b      	cbz	r3, 8008f2e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008eea:	2324      	movs	r3, #36	; 0x24
 8008eec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8008ef0:	6822      	ldr	r2, [r4, #0]
 8008ef2:	68d3      	ldr	r3, [r2, #12]
 8008ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ef8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ff2a 	bl	8008d54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f00:	6822      	ldr	r2, [r4, #0]
 8008f02:	6913      	ldr	r3, [r2, #16]
 8008f04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008f08:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	6953      	ldr	r3, [r2, #20]
 8008f0e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008f12:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	68d3      	ldr	r3, [r2, #12]
 8008f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f1c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1e:	2000      	movs	r0, #0
 8008f20:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f22:	2320      	movs	r3, #32
 8008f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8008f2c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008f2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8008f32:	f7ff ffd3 	bl	8008edc <HAL_UART_MspInit>
 8008f36:	e7d8      	b.n	8008eea <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8008f38:	2001      	movs	r0, #1
}
 8008f3a:	4770      	bx	lr

08008f3c <HAL_UART_Transmit>:
{
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008f44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d15a      	bne.n	8009004 <HAL_UART_Transmit+0xc8>
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d059      	beq.n	800900c <HAL_UART_Transmit+0xd0>
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	d059      	beq.n	8009010 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8008f5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d057      	beq.n	8009014 <HAL_UART_Transmit+0xd8>
 8008f64:	2301      	movs	r3, #1
 8008f66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f6e:	2321      	movs	r3, #33	; 0x21
 8008f70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8008f74:	f7fd ff4c 	bl	8006e10 <HAL_GetTick>
 8008f78:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008f7a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f7e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f82:	68a3      	ldr	r3, [r4, #8]
 8008f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f88:	d00c      	beq.n	8008fa4 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8008f8a:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8008f94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	b343      	cbz	r3, 8008fec <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	f04f 0880 	mov.w	r8, #128	; 0x80
 8008fa2:	e014      	b.n	8008fce <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	b913      	cbnz	r3, 8008fae <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8008fa8:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8008faa:	2500      	movs	r5, #0
 8008fac:	e7ef      	b.n	8008f8e <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8008fae:	f04f 0a00 	mov.w	sl, #0
 8008fb2:	e7ec      	b.n	8008f8e <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8008fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbe:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8008fc0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008fc2:	3a01      	subs	r2, #1
 8008fc4:	b292      	uxth	r2, r2
 8008fc6:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b173      	cbz	r3, 8008fec <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fce:	9600      	str	r6, [sp, #0]
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	464a      	mov	r2, r9
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7ff ff3e 	bl	8008e58 <UART_WaitOnFlagUntilTimeout>
 8008fdc:	b9e0      	cbnz	r0, 8009018 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	d0e8      	beq.n	8008fb4 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008fe8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fea:	e7e9      	b.n	8008fc0 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fec:	9600      	str	r6, [sp, #0]
 8008fee:	463b      	mov	r3, r7
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2140      	movs	r1, #64	; 0x40
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff ff2f 	bl	8008e58 <UART_WaitOnFlagUntilTimeout>
 8008ffa:	b978      	cbnz	r0, 800901c <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8009002:	e000      	b.n	8009006 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8009004:	2002      	movs	r0, #2
}
 8009006:	b002      	add	sp, #8
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800900c:	2001      	movs	r0, #1
 800900e:	e7fa      	b.n	8009006 <HAL_UART_Transmit+0xca>
 8009010:	2001      	movs	r0, #1
 8009012:	e7f8      	b.n	8009006 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8009014:	2002      	movs	r0, #2
 8009016:	e7f6      	b.n	8009006 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8009018:	2003      	movs	r0, #3
 800901a:	e7f4      	b.n	8009006 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 800901c:	2003      	movs	r0, #3
 800901e:	e7f2      	b.n	8009006 <HAL_UART_Transmit+0xca>

08009020 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009020:	b510      	push	{r4, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009026:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800902a:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 800902e:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009032:	2100      	movs	r1, #0
 8009034:	9101      	str	r1, [sp, #4]
 8009036:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800903a:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 800903c:	233f      	movs	r3, #63	; 0x3f
 800903e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8009042:	238a      	movs	r3, #138	; 0x8a
 8009044:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8009048:	ab03      	add	r3, sp, #12
 800904a:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800904c:	2303      	movs	r3, #3
 800904e:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 8009050:	ab01      	add	r3, sp, #4
 8009052:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8009054:	2307      	movs	r3, #7
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009058:	a804      	add	r0, sp, #16
 800905a:	f000 fbf9 	bl	8009850 <hci_send_req>
 800905e:	2800      	cmp	r0, #0
 8009060:	db15      	blt.n	800908e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009062:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009066:	b980      	cbnz	r0, 800908a <aci_gap_init_IDB05A1+0x6a>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800906e:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009074:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800907c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800907e:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009088:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800908a:	b00a      	add	sp, #40	; 0x28
 800908c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800908e:	20ff      	movs	r0, #255	; 0xff
 8009090:	e7fb      	b.n	800908a <aci_gap_init_IDB05A1+0x6a>

08009092 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009092:	b570      	push	{r4, r5, r6, lr}
 8009094:	b08a      	sub	sp, #40	; 0x28
 8009096:	460e      	mov	r6, r1
 8009098:	4615      	mov	r5, r2
 800909a:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800909c:	f88d 000c 	strb.w	r0, [sp, #12]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80090a0:	2100      	movs	r1, #0
 80090a2:	9101      	str	r1, [sp, #4]
 80090a4:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80090a8:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 80090aa:	233f      	movs	r3, #63	; 0x3f
 80090ac:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80090b0:	238a      	movs	r3, #138	; 0x8a
 80090b2:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80090ba:	2301      	movs	r3, #1
 80090bc:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 80090be:	ab01      	add	r3, sp, #4
 80090c0:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80090c2:	2307      	movs	r3, #7
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80090c6:	a804      	add	r0, sp, #16
 80090c8:	f000 fbc2 	bl	8009850 <hci_send_req>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	db13      	blt.n	80090f8 <aci_gap_init_IDB04A1+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80090d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80090d4:	b970      	cbnz	r0, 80090f4 <aci_gap_init_IDB04A1+0x62>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80090dc:	8033      	strh	r3, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80090de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80090e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80090e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090ea:	802b      	strh	r3, [r5, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80090f2:	8023      	strh	r3, [r4, #0]
  
  return 0;
}
 80090f4:	b00a      	add	sp, #40	; 0x28
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80090f8:	20ff      	movs	r0, #255	; 0xff
 80090fa:	e7fb      	b.n	80090f4 <aci_gap_init_IDB04A1+0x62>

080090fc <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	b092      	sub	sp, #72	; 0x48
 8009100:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8009104:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009108:	eb05 0c04 	add.w	ip, r5, r4
 800910c:	f10c 0c0e 	add.w	ip, ip, #14
 8009110:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8009114:	d84c      	bhi.n	80091b0 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8009116:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800911a:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800911e:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8009122:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8009126:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800912a:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800912e:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009132:	ae01      	add	r6, sp, #4
 8009134:	462a      	mov	r2, r5
 8009136:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009138:	a803      	add	r0, sp, #12
 800913a:	f002 fe5c 	bl	800bdf6 <memcpy>
  indx +=  LocalNameLen;
 800913e:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8009142:	aa12      	add	r2, sp, #72	; 0x48
 8009144:	fa52 f383 	uxtab	r3, r2, r3
 8009148:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800914c:	3509      	adds	r5, #9
 800914e:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009150:	4622      	mov	r2, r4
 8009152:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009154:	1970      	adds	r0, r6, r5
 8009156:	f002 fe4e 	bl	800bdf6 <memcpy>
  indx +=  ServiceUUIDLen;  
 800915a:	442c      	add	r4, r5
 800915c:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800915e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009162:	446b      	add	r3, sp
 8009164:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009168:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800916c:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800916e:	aa12      	add	r2, sp, #72	; 0x48
 8009170:	fa52 f383 	uxtab	r3, r2, r3
 8009174:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009178:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800917c:	2100      	movs	r1, #0
 800917e:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8009180:	233f      	movs	r3, #63	; 0x3f
 8009182:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009186:	2383      	movs	r3, #131	; 0x83
 8009188:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800918c:	960e      	str	r6, [sp, #56]	; 0x38
  indx +=  2;    
 800918e:	3404      	adds	r4, #4
  rq.clen = indx;
 8009190:	b2e4      	uxtb	r4, r4
 8009192:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 8009194:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009198:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 800919a:	2301      	movs	r3, #1
 800919c:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800919e:	a80c      	add	r0, sp, #48	; 0x30
 80091a0:	f000 fb56 	bl	8009850 <hci_send_req>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	db05      	blt.n	80091b4 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80091a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 80091ac:	b012      	add	sp, #72	; 0x48
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80091b0:	2042      	movs	r0, #66	; 0x42
 80091b2:	e7fb      	b.n	80091ac <aci_gap_set_discoverable+0xb0>
    return BLE_STATUS_TIMEOUT;
 80091b4:	20ff      	movs	r0, #255	; 0xff
 80091b6:	e7f9      	b.n	80091ac <aci_gap_set_discoverable+0xb0>

080091b8 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80091b8:	b500      	push	{lr}
 80091ba:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80091bc:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 80091c0:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80091c4:	b161      	cbz	r1, 80091e0 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80091c6:	f8d2 c000 	ldr.w	ip, [r2]
 80091ca:	6850      	ldr	r0, [r2, #4]
 80091cc:	6891      	ldr	r1, [r2, #8]
 80091ce:	68d2      	ldr	r2, [r2, #12]
 80091d0:	f8cd c006 	str.w	ip, [sp, #6]
 80091d4:	f8cd 000a 	str.w	r0, [sp, #10]
 80091d8:	f8cd 100e 	str.w	r1, [sp, #14]
 80091dc:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80091e0:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 80091e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80091e8:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 80091ec:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80091f0:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 80091f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f6:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 80091fa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80091fe:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009202:	2100      	movs	r1, #0
 8009204:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8009206:	233f      	movs	r3, #63	; 0x3f
 8009208:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800920c:	2386      	movs	r3, #134	; 0x86
 800920e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 8009212:	ab01      	add	r3, sp, #4
 8009214:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 8009216:	231a      	movs	r3, #26
 8009218:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800921a:	f10d 0303 	add.w	r3, sp, #3
 800921e:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8009220:	2301      	movs	r3, #1
 8009222:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009224:	a808      	add	r0, sp, #32
 8009226:	f000 fb13 	bl	8009850 <hci_send_req>
 800922a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800922c:	bfac      	ite	ge
 800922e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8009232:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8009234:	b00f      	add	sp, #60	; 0x3c
 8009236:	f85d fb04 	ldr.w	pc, [sp], #4

0800923a <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800923a:	b500      	push	{lr}
 800923c:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800923e:	f8ad 0008 	strh.w	r0, [sp, #8]
  cp.scanWindow = htobs(scanWindow);
 8009242:	f8ad 100a 	strh.w	r1, [sp, #10]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8009246:	f88d 200c 	strb.w	r2, [sp, #12]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f8cd 200d 	str.w	r2, [sp, #13]
 8009250:	889b      	ldrh	r3, [r3, #4]
 8009252:	f8ad 3011 	strh.w	r3, [sp, #17]
  cp.own_bdaddr_type = own_bdaddr_type;
 8009256:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800925a:	f88d 3013 	strb.w	r3, [sp, #19]
  cp.conn_min_interval = htobs(conn_min_interval);
 800925e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8009262:	f8ad 3014 	strh.w	r3, [sp, #20]
  cp.conn_max_interval = htobs(conn_max_interval);
 8009266:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800926a:	f8ad 3016 	strh.w	r3, [sp, #22]
  cp.conn_latency = htobs(conn_latency);
 800926e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009272:	f8ad 3018 	strh.w	r3, [sp, #24]
  cp.supervision_timeout = htobs(supervision_timeout);
 8009276:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800927a:	f8ad 301a 	strh.w	r3, [sp, #26]
  cp.min_conn_length = htobs(min_conn_length);
 800927e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8009282:	f8ad 301c 	strh.w	r3, [sp, #28]
  cp.max_conn_length = htobs(max_conn_length);
 8009286:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800928a:	f8ad 301e 	strh.w	r3, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800928e:	233f      	movs	r3, #63	; 0x3f
 8009290:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8009294:	239c      	movs	r3, #156	; 0x9c
 8009296:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800929a:	ab02      	add	r3, sp, #8
 800929c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800929e:	2318      	movs	r3, #24
 80092a0:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.event = EVT_CMD_STATUS;
 80092a2:	230f      	movs	r3, #15
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 80092a6:	f10d 0307 	add.w	r3, sp, #7
 80092aa:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 80092ac:	2301      	movs	r3, #1
 80092ae:	930d      	str	r3, [sp, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80092b0:	2100      	movs	r1, #0
 80092b2:	a808      	add	r0, sp, #32
 80092b4:	f000 facc 	bl	8009850 <hci_send_req>
 80092b8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80092ba:	bfac      	ite	ge
 80092bc:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80092c0:	20ff      	movlt	r0, #255	; 0xff
}
 80092c2:	b00f      	add	sp, #60	; 0x3c
 80092c4:	f85d fb04 	ldr.w	pc, [sp], #4

080092c8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80092c8:	b500      	push	{lr}
 80092ca:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092cc:	2100      	movs	r1, #0
 80092ce:	9103      	str	r1, [sp, #12]
 80092d0:	9104      	str	r1, [sp, #16]
 80092d2:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 80092d4:	233f      	movs	r3, #63	; 0x3f
 80092d6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80092da:	f240 1301 	movw	r3, #257	; 0x101
 80092de:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80092e2:	f10d 0307 	add.w	r3, sp, #7
 80092e6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80092e8:	2301      	movs	r3, #1
 80092ea:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80092ec:	a802      	add	r0, sp, #8
 80092ee:	f000 faaf 	bl	8009850 <hci_send_req>
 80092f2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80092f4:	bfac      	ite	ge
 80092f6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80092fa:	20ff      	movlt	r0, #255	; 0xff
}
 80092fc:	b009      	add	sp, #36	; 0x24
 80092fe:	f85d fb04 	ldr.w	pc, [sp], #4

08009302 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	b08c      	sub	sp, #48	; 0x30
 8009306:	4616      	mov	r6, r2
 8009308:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800930a:	f88d 0000 	strb.w	r0, [sp]
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800930e:	2801      	cmp	r0, #1
 8009310:	bf0c      	ite	eq
 8009312:	2402      	moveq	r4, #2
 8009314:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009316:	4622      	mov	r2, r4
 8009318:	f10d 0001 	add.w	r0, sp, #1
 800931c:	f002 fd6b 	bl	800bdf6 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8009320:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009324:	446b      	add	r3, sp
 8009326:	f803 6c2f 	strb.w	r6, [r3, #-47]
  indx++;
    
  buffer[indx] = max_attr_records;
 800932a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800932e:	446b      	add	r3, sp
 8009330:	f803 5c2e 	strb.w	r5, [r3, #-46]
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009334:	ab05      	add	r3, sp, #20
 8009336:	2100      	movs	r1, #0
 8009338:	f8ad 1014 	strh.w	r1, [sp, #20]
 800933c:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009340:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 8009342:	223f      	movs	r2, #63	; 0x3f
 8009344:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8009348:	f44f 7281 	mov.w	r2, #258	; 0x102
 800934c:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 8009350:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 8009354:	3403      	adds	r4, #3
 8009356:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8009358:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800935a:	2303      	movs	r3, #3
 800935c:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800935e:	a806      	add	r0, sp, #24
 8009360:	f000 fa76 	bl	8009850 <hci_send_req>
 8009364:	2800      	cmp	r0, #0
 8009366:	db09      	blt.n	800937c <aci_gatt_add_serv+0x7a>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009368:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800936c:	b920      	cbnz	r0, 8009378 <aci_gatt_add_serv+0x76>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800936e:	9b05      	ldr	r3, [sp, #20]
 8009370:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009376:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8009378:	b00c      	add	sp, #48	; 0x30
 800937a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800937c:	20ff      	movs	r0, #255	; 0xff
 800937e:	e7fb      	b.n	8009378 <aci_gatt_add_serv+0x76>

08009380 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009380:	b530      	push	{r4, r5, lr}
 8009382:	b08f      	sub	sp, #60	; 0x3c
 8009384:	460c      	mov	r4, r1
 8009386:	4611      	mov	r1, r2
 8009388:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800938a:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800938e:	f88d 4002 	strb.w	r4, [sp, #2]
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8009392:	2c01      	cmp	r4, #1
 8009394:	bf0c      	ite	eq
 8009396:	2402      	moveq	r4, #2
 8009398:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800939a:	4622      	mov	r2, r4
 800939c:	f10d 0003 	add.w	r0, sp, #3
 80093a0:	f002 fd29 	bl	800bdf6 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80093a4:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093a8:	446b      	add	r3, sp
 80093aa:	f803 5c35 	strb.w	r5, [r3, #-53]
  indx++;
    
  buffer[indx] = charProperties;
 80093ae:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093b2:	446b      	add	r3, sp
 80093b4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80093b8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
    
  buffer[indx] = secPermissions;
 80093bc:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093c0:	446b      	add	r3, sp
 80093c2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80093c6:	f803 2c33 	strb.w	r2, [r3, #-51]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80093ca:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093ce:	446b      	add	r3, sp
 80093d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80093d4:	f803 2c32 	strb.w	r2, [r3, #-50]
  indx++;
    
  buffer[indx] = encryKeySize;
 80093d8:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093dc:	446b      	add	r3, sp
 80093de:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80093e2:	f803 2c31 	strb.w	r2, [r3, #-49]
  indx++;
    
  buffer[indx] = isVariable;
 80093e6:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80093ea:	446b      	add	r3, sp
 80093ec:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80093f0:	f803 2c30 	strb.w	r2, [r3, #-48]
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80093f4:	ab07      	add	r3, sp, #28
 80093f6:	2100      	movs	r1, #0
 80093f8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80093fc:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009400:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8009402:	223f      	movs	r2, #63	; 0x3f
 8009404:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800940c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 8009410:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 8009414:	3409      	adds	r4, #9
 8009416:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 8009418:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800941a:	2303      	movs	r3, #3
 800941c:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800941e:	a808      	add	r0, sp, #32
 8009420:	f000 fa16 	bl	8009850 <hci_send_req>
 8009424:	2800      	cmp	r0, #0
 8009426:	db09      	blt.n	800943c <aci_gatt_add_char+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009428:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800942c:	b920      	cbnz	r0, 8009438 <aci_gatt_add_char+0xb8>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800942e:	9b07      	ldr	r3, [sp, #28]
 8009430:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009434:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009436:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8009438:	b00f      	add	sp, #60	; 0x3c
 800943a:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 800943c:	20ff      	movs	r0, #255	; 0xff
 800943e:	e7fb      	b.n	8009438 <aci_gatt_add_char+0xb8>

08009440 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009440:	2b7a      	cmp	r3, #122	; 0x7a
 8009442:	d82c      	bhi.n	800949e <aci_gatt_update_char_value+0x5e>
{
 8009444:	b510      	push	{r4, lr}
 8009446:	b0a8      	sub	sp, #160	; 0xa0
 8009448:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800944a:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800944e:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 8009452:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 8009456:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800945a:	461a      	mov	r2, r3
 800945c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800945e:	f10d 000a 	add.w	r0, sp, #10
 8009462:	f002 fcc8 	bl	800bdf6 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009466:	2100      	movs	r1, #0
 8009468:	9123      	str	r1, [sp, #140]	; 0x8c
  rq.ogf = OGF_VENDOR_CMD;
 800946a:	233f      	movs	r3, #63	; 0x3f
 800946c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009470:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009474:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009478:	ab01      	add	r3, sp, #4
 800947a:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  charValueLen;
 800947c:	3406      	adds	r4, #6
  rq.clen = indx;
 800947e:	b2e4      	uxtb	r4, r4
 8009480:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009482:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009486:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009488:	2301      	movs	r3, #1
 800948a:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800948c:	a822      	add	r0, sp, #136	; 0x88
 800948e:	f000 f9df 	bl	8009850 <hci_send_req>
 8009492:	2800      	cmp	r0, #0
 8009494:	db05      	blt.n	80094a2 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009496:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800949a:	b028      	add	sp, #160	; 0xa0
 800949c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800949e:	2042      	movs	r0, #66	; 0x42
}
 80094a0:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 80094a2:	20ff      	movs	r0, #255	; 0xff
 80094a4:	e7f9      	b.n	800949a <aci_gatt_update_char_value+0x5a>

080094a6 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80094a6:	b510      	push	{r4, lr}
 80094a8:	b08c      	sub	sp, #48	; 0x30
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80094aa:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  start_handle = htobs(start_handle);
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80094ae:	f8ad 1002 	strh.w	r1, [sp, #2]
  indx += 2;
  
  end_handle = htobs(end_handle);
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80094b2:	f8ad 2004 	strh.w	r2, [sp, #4]
  indx += 2;
  
  buffer[indx] = charUuidType;
 80094b6:	f88d 3006 	strb.w	r3, [sp, #6]
    
  if(charUuidType == 0x01){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	bf0c      	ite	eq
 80094be:	2402      	moveq	r4, #2
 80094c0:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80094c2:	4622      	mov	r2, r4
 80094c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094c6:	f10d 0007 	add.w	r0, sp, #7
 80094ca:	f002 fc94 	bl	800bdf6 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80094ce:	233f      	movs	r3, #63	; 0x3f
 80094d0:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80094d4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80094d8:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.cparam = (void *)buffer;
 80094dc:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 80094e0:	3407      	adds	r4, #7
 80094e2:	9409      	str	r4, [sp, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 80094e4:	230f      	movs	r3, #15
 80094e6:	9307      	str	r3, [sp, #28]
  rq.rparam = &status;
 80094e8:	f10d 0317 	add.w	r3, sp, #23
 80094ec:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = 1;
 80094ee:	2301      	movs	r3, #1
 80094f0:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 80094f2:	2100      	movs	r1, #0
 80094f4:	a806      	add	r0, sp, #24
 80094f6:	f000 f9ab 	bl	8009850 <hci_send_req>
 80094fa:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80094fc:	bfac      	ite	ge
 80094fe:	f89d 0017 	ldrbge.w	r0, [sp, #23]
    return BLE_STATUS_TIMEOUT;
 8009502:	20ff      	movlt	r0, #255	; 0xff
}
 8009504:	b00c      	add	sp, #48	; 0x30
 8009506:	bd10      	pop	{r4, pc}

08009508 <aci_gatt_write_charac_descriptor>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8009508:	2a7b      	cmp	r2, #123	; 0x7b
 800950a:	d82a      	bhi.n	8009562 <aci_gatt_write_charac_descriptor+0x5a>
{
 800950c:	b510      	push	{r4, lr}
 800950e:	b0a8      	sub	sp, #160	; 0xa0
 8009510:	4614      	mov	r4, r2
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8009512:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8009516:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;

  buffer[indx] = value_len;
 800951a:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800951e:	4619      	mov	r1, r3
 8009520:	f10d 0009 	add.w	r0, sp, #9
 8009524:	f002 fc67 	bl	800bdf6 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 8009528:	233f      	movs	r3, #63	; 0x3f
 800952a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800952e:	f240 1321 	movw	r3, #289	; 0x121
 8009532:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009536:	ab01      	add	r3, sp, #4
 8009538:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  value_len;
 800953a:	3405      	adds	r4, #5
  rq.clen = indx;
 800953c:	b2e4      	uxtb	r4, r4
 800953e:	9425      	str	r4, [sp, #148]	; 0x94
  rq.event = EVT_CMD_STATUS; 
 8009540:	230f      	movs	r3, #15
 8009542:	9323      	str	r3, [sp, #140]	; 0x8c
  rq.rparam = &status;
 8009544:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009548:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800954a:	2301      	movs	r3, #1
 800954c:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800954e:	2100      	movs	r1, #0
 8009550:	a822      	add	r0, sp, #136	; 0x88
 8009552:	f000 f97d 	bl	8009850 <hci_send_req>
 8009556:	2800      	cmp	r0, #0
 8009558:	db05      	blt.n	8009566 <aci_gatt_write_charac_descriptor+0x5e>
    return BLE_STATUS_TIMEOUT;

  return status;
 800955a:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 800955e:	b028      	add	sp, #160	; 0xa0
 8009560:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009562:	2042      	movs	r0, #66	; 0x42
}
 8009564:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8009566:	20ff      	movs	r0, #255	; 0xff
 8009568:	e7f9      	b.n	800955e <aci_gatt_write_charac_descriptor+0x56>

0800956a <aci_gatt_write_without_response>:
{
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800956a:	2a14      	cmp	r2, #20
 800956c:	d828      	bhi.n	80095c0 <aci_gatt_write_without_response+0x56>
{
 800956e:	b510      	push	{r4, lr}
 8009570:	b08e      	sub	sp, #56	; 0x38
 8009572:	4614      	mov	r4, r2
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8009574:	f8ad 0004 	strh.w	r0, [sp, #4]
  cp.attr_handle = htobs(attr_handle);
 8009578:	f8ad 1006 	strh.w	r1, [sp, #6]
  cp.val_len = val_len;
 800957c:	f88d 2008 	strb.w	r2, [sp, #8]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8009580:	4619      	mov	r1, r3
 8009582:	f10d 0009 	add.w	r0, sp, #9
 8009586:	f002 fc36 	bl	800bdf6 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800958a:	2100      	movs	r1, #0
 800958c:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800958e:	233f      	movs	r3, #63	; 0x3f
 8009590:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8009594:	f240 1323 	movw	r3, #291	; 0x123
 8009598:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800959c:	ab01      	add	r3, sp, #4
 800959e:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80095a0:	3405      	adds	r4, #5
 80095a2:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &status;
 80095a4:	f10d 031f 	add.w	r3, sp, #31
 80095a8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 80095aa:	2301      	movs	r3, #1
 80095ac:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 80095ae:	a808      	add	r0, sp, #32
 80095b0:	f000 f94e 	bl	8009850 <hci_send_req>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	db05      	blt.n	80095c4 <aci_gatt_write_without_response+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 80095b8:	f89d 001f 	ldrb.w	r0, [sp, #31]
}
 80095bc:	b00e      	add	sp, #56	; 0x38
 80095be:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80095c0:	2042      	movs	r0, #66	; 0x42
}
 80095c2:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 80095c4:	20ff      	movs	r0, #255	; 0xff
 80095c6:	e7f9      	b.n	80095bc <aci_gatt_write_without_response+0x52>

080095c8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80095c8:	b510      	push	{r4, lr}
 80095ca:	b0a8      	sub	sp, #160	; 0xa0
 80095cc:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80095ce:	297e      	cmp	r1, #126	; 0x7e
 80095d0:	d824      	bhi.n	800961c <aci_hal_write_config_data+0x54>
 80095d2:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 80095d4:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 80095d8:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80095dc:	4622      	mov	r2, r4
 80095de:	f10d 0006 	add.w	r0, sp, #6
 80095e2:	f002 fc08 	bl	800bdf6 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095e6:	2100      	movs	r1, #0
 80095e8:	9123      	str	r1, [sp, #140]	; 0x8c
  rq.ogf = OGF_VENDOR_CMD;
 80095ea:	233f      	movs	r3, #63	; 0x3f
 80095ec:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80095f0:	230c      	movs	r3, #12
 80095f2:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 80095f6:	ab01      	add	r3, sp, #4
 80095f8:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  len;
 80095fa:	3402      	adds	r4, #2
  rq.clen = indx;
 80095fc:	b2e4      	uxtb	r4, r4
 80095fe:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009600:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009604:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009606:	2301      	movs	r3, #1
 8009608:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800960a:	a822      	add	r0, sp, #136	; 0x88
 800960c:	f000 f920 	bl	8009850 <hci_send_req>
 8009610:	2800      	cmp	r0, #0
 8009612:	db05      	blt.n	8009620 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009614:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 8009618:	b028      	add	sp, #160	; 0xa0
 800961a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800961c:	2042      	movs	r0, #66	; 0x42
 800961e:	e7fb      	b.n	8009618 <aci_hal_write_config_data+0x50>
    return BLE_STATUS_TIMEOUT;
 8009620:	20ff      	movs	r0, #255	; 0xff
 8009622:	e7f9      	b.n	8009618 <aci_hal_write_config_data+0x50>

08009624 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8009624:	b500      	push	{lr}
 8009626:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8009628:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800962c:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009630:	2100      	movs	r1, #0
 8009632:	9103      	str	r1, [sp, #12]
  rq.ogf = OGF_VENDOR_CMD;
 8009634:	233f      	movs	r3, #63	; 0x3f
 8009636:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800963a:	230f      	movs	r3, #15
 800963c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8009640:	ab01      	add	r3, sp, #4
 8009642:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009644:	2302      	movs	r3, #2
 8009646:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8009648:	f10d 0303 	add.w	r3, sp, #3
 800964c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800964e:	2301      	movs	r3, #1
 8009650:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009652:	a802      	add	r0, sp, #8
 8009654:	f000 f8fc 	bl	8009850 <hci_send_req>
 8009658:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800965a:	bfac      	ite	ge
 800965c:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8009660:	20ff      	movlt	r0, #255	; 0xff
}
 8009662:	b009      	add	sp, #36	; 0x24
 8009664:	f85d fb04 	ldr.w	pc, [sp], #4

08009668 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009668:	b530      	push	{r4, r5, lr}
 800966a:	b085      	sub	sp, #20
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009670:	ab02      	add	r3, sp, #8
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	f10d 030a 	add.w	r3, sp, #10
 8009678:	f10d 020e 	add.w	r2, sp, #14
 800967c:	a903      	add	r1, sp, #12
 800967e:	f10d 000f 	add.w	r0, sp, #15
 8009682:	f000 f82e 	bl	80096e2 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009686:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800968a:	d10d      	bne.n	80096a8 <getBlueNRGVersion+0x40>
    *hwVersion = hci_revision >> 8;
 800968c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8009690:	0a0b      	lsrs	r3, r1, #8
 8009692:	702b      	strb	r3, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009694:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80096a4:	4313      	orrs	r3, r2
 80096a6:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 80096a8:	b005      	add	sp, #20
 80096aa:	bd30      	pop	{r4, r5, pc}

080096ac <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80096ac:	b500      	push	{lr}
 80096ae:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096b0:	2100      	movs	r1, #0
 80096b2:	9103      	str	r1, [sp, #12]
 80096b4:	9104      	str	r1, [sp, #16]
 80096b6:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_HOST_CTL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 80096be:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80096c2:	f10d 0307 	add.w	r3, sp, #7
 80096c6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80096c8:	2301      	movs	r3, #1
 80096ca:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80096cc:	a802      	add	r0, sp, #8
 80096ce:	f000 f8bf 	bl	8009850 <hci_send_req>
 80096d2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80096d4:	bfac      	ite	ge
 80096d6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80096da:	20ff      	movlt	r0, #255	; 0xff
}
 80096dc:	b009      	add	sp, #36	; 0x24
 80096de:	f85d fb04 	ldr.w	pc, [sp], #4

080096e2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80096e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	b08a      	sub	sp, #40	; 0x28
 80096e8:	4680      	mov	r8, r0
 80096ea:	460f      	mov	r7, r1
 80096ec:	4616      	mov	r6, r2
 80096ee:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80096f0:	ac01      	add	r4, sp, #4
 80096f2:	2100      	movs	r1, #0
 80096f4:	9101      	str	r1, [sp, #4]
 80096f6:	9102      	str	r1, [sp, #8]
 80096f8:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	9106      	str	r1, [sp, #24]
 8009700:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_INFO_PARAM;
 8009702:	2304      	movs	r3, #4
 8009704:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009708:	2301      	movs	r3, #1
 800970a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800970e:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009710:	2309      	movs	r3, #9
 8009712:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009714:	a804      	add	r0, sp, #16
 8009716:	f000 f89b 	bl	8009850 <hci_send_req>
 800971a:	2800      	cmp	r0, #0
 800971c:	db1b      	blt.n	8009756 <hci_le_read_local_version+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800971e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009722:	b9a8      	cbnz	r0, 8009750 <hci_le_read_local_version+0x6e>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8009724:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009728:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800972c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009730:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009732:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009736:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009738:	9b02      	ldr	r3, [sp, #8]
 800973a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800973e:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009740:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8009744:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009748:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800974c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800974e:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8009750:	b00a      	add	sp, #40	; 0x28
 8009752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8009756:	20ff      	movs	r0, #255	; 0xff
 8009758:	e7fa      	b.n	8009750 <hci_le_read_local_version+0x6e>

0800975a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800975a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975c:	b091      	sub	sp, #68	; 0x44
 800975e:	4604      	mov	r4, r0
 8009760:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009762:	af02      	add	r7, sp, #8
 8009764:	2620      	movs	r6, #32
 8009766:	4632      	mov	r2, r6
 8009768:	2100      	movs	r1, #0
 800976a:	4638      	mov	r0, r7
 800976c:	f002 fac4 	bl	800bcf8 <memset>
  scan_resp_cp.length = length;
 8009770:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009774:	4622      	mov	r2, r4
 8009776:	2c1f      	cmp	r4, #31
 8009778:	bf28      	it	cs
 800977a:	221f      	movcs	r2, #31
 800977c:	4629      	mov	r1, r5
 800977e:	f10d 0009 	add.w	r0, sp, #9
 8009782:	f002 fb38 	bl	800bdf6 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009786:	2100      	movs	r1, #0
 8009788:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_LE_CTL;
 800978a:	2308      	movs	r3, #8
 800978c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009790:	2309      	movs	r3, #9
 8009792:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 8009796:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009798:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 800979a:	f10d 0307 	add.w	r3, sp, #7
 800979e:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 80097a0:	2301      	movs	r3, #1
 80097a2:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80097a4:	a80a      	add	r0, sp, #40	; 0x28
 80097a6:	f000 f853 	bl	8009850 <hci_send_req>
 80097aa:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 80097ac:	bfac      	ite	ge
 80097ae:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80097b2:	20ff      	movlt	r0, #255	; 0xff
}
 80097b4:	b011      	add	sp, #68	; 0x44
 80097b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097b8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80097b8:	b530      	push	{r4, r5, lr}
 80097ba:	b083      	sub	sp, #12
 80097bc:	4605      	mov	r5, r0
 80097be:	460c      	mov	r4, r1
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80097c0:	e007      	b.n	80097d2 <move_list+0x1a>
  {
    list_remove_tail(src_list, &tmp_node);
 80097c2:	a901      	add	r1, sp, #4
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 f9b5 	bl	8009b34 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80097ca:	9901      	ldr	r1, [sp, #4]
 80097cc:	4628      	mov	r0, r5
 80097ce:	f000 f97d 	bl	8009acc <list_insert_head>
  while (!list_is_empty(src_list))
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 f96f 	bl	8009ab6 <list_is_empty>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0f2      	beq.n	80097c2 <move_list+0xa>
  }
}
 80097dc:	b003      	add	sp, #12
 80097de:	bd30      	pop	{r4, r5, pc}

080097e0 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 80097e2:	b108      	cbz	r0, 80097e8 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80097e4:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <hci_init+0x44>)
 80097e6:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80097e8:	480f      	ldr	r0, [pc, #60]	; (8009828 <hci_init+0x48>)
 80097ea:	f000 f961 	bl	8009ab0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80097ee:	480f      	ldr	r0, [pc, #60]	; (800982c <hci_init+0x4c>)
 80097f0:	f000 f95e 	bl	8009ab0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80097f4:	f7f8 fa4a 	bl	8001c8c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	; (8009830 <hci_init+0x50>)
 80097fa:	f504 762f 	add.w	r6, r4, #700	; 0x2bc
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80097fe:	4d0a      	ldr	r5, [pc, #40]	; (8009828 <hci_init+0x48>)
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f96e 	bl	8009ae4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009808:	348c      	adds	r4, #140	; 0x8c
 800980a:	42b4      	cmp	r4, r6
 800980c:	d1f8      	bne.n	8009800 <hci_init+0x20>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <hci_init+0x44>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	b10b      	cbz	r3, 8009818 <hci_init+0x38>
 8009814:	2000      	movs	r0, #0
 8009816:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <hci_init+0x44>)
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	b103      	cbz	r3, 8009820 <hci_init+0x40>
 800981e:	4798      	blx	r3
}
 8009820:	bd70      	pop	{r4, r5, r6, pc}
 8009822:	bf00      	nop
 8009824:	2000f84c 	.word	0x2000f84c
 8009828:	2000fb28 	.word	0x2000fb28
 800982c:	2000fb30 	.word	0x2000fb30
 8009830:	2000f86c 	.word	0x2000f86c

08009834 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <hci_register_io_bus+0x18>)
 8009836:	6802      	ldr	r2, [r0, #0]
 8009838:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800983a:	68c2      	ldr	r2, [r0, #12]
 800983c:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800983e:	6902      	ldr	r2, [r0, #16]
 8009840:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009842:	6982      	ldr	r2, [r0, #24]
 8009844:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8009846:	6882      	ldr	r2, [r0, #8]
 8009848:	609a      	str	r2, [r3, #8]
}
 800984a:	4770      	bx	lr
 800984c:	2000f84c 	.word	0x2000f84c

08009850 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009854:	b0a5      	sub	sp, #148	; 0x94
 8009856:	4606      	mov	r6, r0
 8009858:	4688      	mov	r8, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800985a:	8847      	ldrh	r7, [r0, #2]
 800985c:	f8b0 9000 	ldrh.w	r9, [r0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	9323      	str	r3, [sp, #140]	; 0x8c
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009864:	a821      	add	r0, sp, #132	; 0x84
 8009866:	f000 f923 	bl	8009ab0 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800986a:	4c5c      	ldr	r4, [pc, #368]	; (80099dc <hci_send_req+0x18c>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800986c:	4d5c      	ldr	r5, [pc, #368]	; (80099e0 <hci_send_req+0x190>)
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f971 	bl	8009b56 <list_get_size>
 8009874:	2801      	cmp	r0, #1
 8009876:	dc08      	bgt.n	800988a <hci_send_req+0x3a>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009878:	a901      	add	r1, sp, #4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f949 	bl	8009b12 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009880:	9901      	ldr	r1, [sp, #4]
 8009882:	4620      	mov	r0, r4
 8009884:	f000 f92e 	bl	8009ae4 <list_insert_tail>
 8009888:	e7f1      	b.n	800986e <hci_send_req+0x1e>

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800988a:	7b34      	ldrb	r4, [r6, #12]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800988c:	8873      	ldrh	r3, [r6, #2]
 800988e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009892:	8832      	ldrh	r2, [r6, #0]
 8009894:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8009898:	2201      	movs	r2, #1
 800989a:	f88d 2004 	strb.w	r2, [sp, #4]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800989e:	f8ad 3005 	strh.w	r3, [sp, #5]
 80098a2:	f88d 4007 	strb.w	r4, [sp, #7]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80098a6:	4622      	mov	r2, r4
 80098a8:	68b1      	ldr	r1, [r6, #8]
 80098aa:	a802      	add	r0, sp, #8
 80098ac:	f002 faa3 	bl	800bdf6 <memcpy>
  if (hciContext.io.Send)
 80098b0:	4b4c      	ldr	r3, [pc, #304]	; (80099e4 <hci_send_req+0x194>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	b113      	cbz	r3, 80098bc <hci_send_req+0x6c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80098b6:	1d21      	adds	r1, r4, #4
 80098b8:	a801      	add	r0, sp, #4
 80098ba:	4798      	blx	r3
  
  if (async)
 80098bc:	f1b8 0f00 	cmp.w	r8, #0
 80098c0:	f040 8088 	bne.w	80099d4 <hci_send_req+0x184>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80098c4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80098c8:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
 80098cc:	b2bf      	uxth	r7, r7
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80098ce:	4d44      	ldr	r5, [pc, #272]	; (80099e0 <hci_send_req+0x190>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80098d0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80099dc <hci_send_req+0x18c>
    uint32_t tickstart = HAL_GetTick();
 80098d4:	f7fd fa9c 	bl	8006e10 <HAL_GetTick>
 80098d8:	4604      	mov	r4, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80098da:	f7fd fa99 	bl	8006e10 <HAL_GetTick>
 80098de:	1b00      	subs	r0, r0, r4
 80098e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80098e4:	d868      	bhi.n	80099b8 <hci_send_req+0x168>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f8e5 	bl	8009ab6 <list_is_empty>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d1f4      	bne.n	80098da <hci_send_req+0x8a>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80098f0:	a923      	add	r1, sp, #140	; 0x8c
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 f90d 	bl	8009b12 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80098f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    if (hci_hdr->type == HCI_EVENT_PKT)
 80098fa:	7a0b      	ldrb	r3, [r1, #8]
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d119      	bne.n	8009934 <hci_send_req+0xe4>
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009900:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8009904:	7a4b      	ldrb	r3, [r1, #9]
 8009906:	2b10      	cmp	r3, #16
 8009908:	d066      	beq.n	80099d8 <hci_send_req+0x188>
 800990a:	d80d      	bhi.n	8009928 <hci_send_req+0xd8>
 800990c:	2b0e      	cmp	r3, #14
 800990e:	d02c      	beq.n	800996a <hci_send_req+0x11a>
 8009910:	2b0f      	cmp	r3, #15
 8009912:	d10f      	bne.n	8009934 <hci_send_req+0xe4>
        if (cs->opcode != opcode)
 8009914:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8009918:	42bb      	cmp	r3, r7
 800991a:	d14f      	bne.n	80099bc <hci_send_req+0x16c>
        if (r->event != EVT_CMD_STATUS) {
 800991c:	6873      	ldr	r3, [r6, #4]
 800991e:	2b0f      	cmp	r3, #15
 8009920:	d018      	beq.n	8009954 <hci_send_req+0x104>
          if (cs->status) {
 8009922:	7acb      	ldrb	r3, [r1, #11]
 8009924:	b133      	cbz	r3, 8009934 <hci_send_req+0xe4>
 8009926:	e049      	b.n	80099bc <hci_send_req+0x16c>
      switch (event_pckt->evt) 
 8009928:	2b3e      	cmp	r3, #62	; 0x3e
 800992a:	d103      	bne.n	8009934 <hci_send_req+0xe4>
        if (me->subevent != r->event)
 800992c:	7ac8      	ldrb	r0, [r1, #11]
 800992e:	6873      	ldr	r3, [r6, #4]
 8009930:	4298      	cmp	r0, r3
 8009932:	d031      	beq.n	8009998 <hci_send_req+0x148>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009934:	4640      	mov	r0, r8
 8009936:	f000 f8be 	bl	8009ab6 <list_is_empty>
 800993a:	b120      	cbz	r0, 8009946 <hci_send_req+0xf6>
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f8ba 	bl	8009ab6 <list_is_empty>
 8009942:	2800      	cmp	r0, #0
 8009944:	d133      	bne.n	80099ae <hci_send_req+0x15e>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009946:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009948:	a821      	add	r0, sp, #132	; 0x84
 800994a:	f000 f8cb 	bl	8009ae4 <list_insert_tail>
      hciReadPacket=NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	9323      	str	r3, [sp, #140]	; 0x8c
 8009952:	e7bf      	b.n	80098d4 <hci_send_req+0x84>
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009954:	3a03      	subs	r2, #3
        r->rlen = MIN(len, r->rlen);
 8009956:	6973      	ldr	r3, [r6, #20]
 8009958:	429a      	cmp	r2, r3
 800995a:	bf28      	it	cs
 800995c:	461a      	movcs	r2, r3
 800995e:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009960:	310b      	adds	r1, #11
 8009962:	6930      	ldr	r0, [r6, #16]
 8009964:	f002 fa47 	bl	800bdf6 <memcpy>
        goto done;
 8009968:	e00c      	b.n	8009984 <hci_send_req+0x134>
        if (cc->opcode != opcode)
 800996a:	898b      	ldrh	r3, [r1, #12]
 800996c:	42bb      	cmp	r3, r7
 800996e:	d125      	bne.n	80099bc <hci_send_req+0x16c>
        len -= EVT_CMD_COMPLETE_SIZE;
 8009970:	3a06      	subs	r2, #6
        r->rlen = MIN(len, r->rlen);
 8009972:	6973      	ldr	r3, [r6, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	bf28      	it	cs
 8009978:	461a      	movcs	r2, r3
 800997a:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800997c:	310e      	adds	r1, #14
 800997e:	6930      	ldr	r0, [r6, #16]
 8009980:	f002 fa39 	bl	800bdf6 <memcpy>

  return -1;
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009984:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009986:	4815      	ldr	r0, [pc, #84]	; (80099dc <hci_send_req+0x18c>)
 8009988:	f000 f8a0 	bl	8009acc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800998c:	a921      	add	r1, sp, #132	; 0x84
 800998e:	4814      	ldr	r0, [pc, #80]	; (80099e0 <hci_send_req+0x190>)
 8009990:	f7ff ff12 	bl	80097b8 <move_list>

  return 0;
 8009994:	2000      	movs	r0, #0
 8009996:	e01a      	b.n	80099ce <hci_send_req+0x17e>
        len -= 1;
 8009998:	3a04      	subs	r2, #4
        r->rlen = MIN(len, r->rlen);
 800999a:	6973      	ldr	r3, [r6, #20]
 800999c:	429a      	cmp	r2, r3
 800999e:	bf28      	it	cs
 80099a0:	461a      	movcs	r2, r3
 80099a2:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80099a4:	310c      	adds	r1, #12
 80099a6:	6930      	ldr	r0, [r6, #16]
 80099a8:	f002 fa25 	bl	800bdf6 <memcpy>
        goto done;
 80099ac:	e7ea      	b.n	8009984 <hci_send_req+0x134>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80099b0:	4640      	mov	r0, r8
 80099b2:	f000 f897 	bl	8009ae4 <list_insert_tail>
      hciReadPacket=NULL;
 80099b6:	e7ca      	b.n	800994e <hci_send_req+0xfe>
  if (hciReadPacket!=NULL) {
 80099b8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80099ba:	b111      	cbz	r1, 80099c2 <hci_send_req+0x172>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099bc:	4807      	ldr	r0, [pc, #28]	; (80099dc <hci_send_req+0x18c>)
 80099be:	f000 f885 	bl	8009acc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80099c2:	a921      	add	r1, sp, #132	; 0x84
 80099c4:	4806      	ldr	r0, [pc, #24]	; (80099e0 <hci_send_req+0x190>)
 80099c6:	f7ff fef7 	bl	80097b8 <move_list>
  return -1;
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80099ce:	b025      	add	sp, #148	; 0x94
 80099d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80099d4:	2000      	movs	r0, #0
 80099d6:	e7fa      	b.n	80099ce <hci_send_req+0x17e>
  if (hciReadPacket!=NULL) {
 80099d8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80099da:	e7ef      	b.n	80099bc <hci_send_req+0x16c>
 80099dc:	2000fb28 	.word	0x2000fb28
 80099e0:	2000fb30 	.word	0x2000fb30
 80099e4:	2000f84c 	.word	0x2000f84c

080099e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80099f0:	4c0c      	ldr	r4, [pc, #48]	; (8009a24 <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 80099f2:	4e0d      	ldr	r6, [pc, #52]	; (8009a28 <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099f4:	4d0d      	ldr	r5, [pc, #52]	; (8009a2c <hci_user_evt_proc+0x44>)
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80099f6:	e006      	b.n	8009a06 <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80099f8:	9801      	ldr	r0, [sp, #4]
 80099fa:	3008      	adds	r0, #8
 80099fc:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099fe:	9901      	ldr	r1, [sp, #4]
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 f86f 	bl	8009ae4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 f855 	bl	8009ab6 <list_is_empty>
 8009a0c:	b938      	cbnz	r0, 8009a1e <hci_user_evt_proc+0x36>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009a0e:	a901      	add	r1, sp, #4
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 f87e 	bl	8009b12 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8009a16:	69f3      	ldr	r3, [r6, #28]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1ed      	bne.n	80099f8 <hci_user_evt_proc+0x10>
 8009a1c:	e7ef      	b.n	80099fe <hci_user_evt_proc+0x16>
  }
}
 8009a1e:	b002      	add	sp, #8
 8009a20:	bd70      	pop	{r4, r5, r6, pc}
 8009a22:	bf00      	nop
 8009a24:	2000fb30 	.word	0x2000fb30
 8009a28:	2000f84c 	.word	0x2000f84c
 8009a2c:	2000fb28 	.word	0x2000fb28

08009a30 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009a30:	b510      	push	{r4, lr}
 8009a32:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8009a34:	2300      	movs	r3, #0
 8009a36:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009a38:	481a      	ldr	r0, [pc, #104]	; (8009aa4 <hci_notify_asynch_evt+0x74>)
 8009a3a:	f000 f83c 	bl	8009ab6 <list_is_empty>
 8009a3e:	b118      	cbz	r0, 8009a48 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 8009a40:	2401      	movs	r4, #1
  }
  return ret;

}
 8009a42:	4620      	mov	r0, r4
 8009a44:	b002      	add	sp, #8
 8009a46:	bd10      	pop	{r4, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	4816      	ldr	r0, [pc, #88]	; (8009aa4 <hci_notify_asynch_evt+0x74>)
 8009a4c:	f000 f861 	bl	8009b12 <list_remove_head>
    if (hciContext.io.Receive)
 8009a50:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <hci_notify_asynch_evt+0x78>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	b31b      	cbz	r3, 8009a9e <hci_notify_asynch_evt+0x6e>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009a56:	2180      	movs	r1, #128	; 0x80
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	3008      	adds	r0, #8
 8009a5c:	4798      	blx	r3
      if (data_len > 0)
 8009a5e:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8009a62:	d016      	beq.n	8009a92 <hci_notify_asynch_evt+0x62>
        hciReadPacket->data_len = data_len;
 8009a64:	9901      	ldr	r1, [sp, #4]
 8009a66:	f881 3088 	strb.w	r3, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009a6a:	7a0b      	ldrb	r3, [r1, #8]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d10b      	bne.n	8009a88 <hci_notify_asynch_evt+0x58>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009a70:	b2c0      	uxtb	r0, r0
 8009a72:	3803      	subs	r0, #3
 8009a74:	7a8b      	ldrb	r3, [r1, #10]
 8009a76:	1ac0      	subs	r0, r0, r3
 8009a78:	bf18      	it	ne
 8009a7a:	2001      	movne	r0, #1
        if (verify_packet(hciReadPacket) == 0)
 8009a7c:	0044      	lsls	r4, r0, #1
 8009a7e:	b918      	cbnz	r0, 8009a88 <hci_notify_asynch_evt+0x58>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009a80:	480a      	ldr	r0, [pc, #40]	; (8009aac <hci_notify_asynch_evt+0x7c>)
 8009a82:	f000 f82f 	bl	8009ae4 <list_insert_tail>
 8009a86:	e7dc      	b.n	8009a42 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009a88:	4806      	ldr	r0, [pc, #24]	; (8009aa4 <hci_notify_asynch_evt+0x74>)
 8009a8a:	f000 f81f 	bl	8009acc <list_insert_head>
  int32_t ret = 0;
 8009a8e:	2400      	movs	r4, #0
 8009a90:	e7d7      	b.n	8009a42 <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a92:	9901      	ldr	r1, [sp, #4]
 8009a94:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <hci_notify_asynch_evt+0x74>)
 8009a96:	f000 f819 	bl	8009acc <list_insert_head>
  int32_t ret = 0;
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	e7d1      	b.n	8009a42 <hci_notify_asynch_evt+0x12>
 8009a9e:	2400      	movs	r4, #0
  return ret;
 8009aa0:	e7cf      	b.n	8009a42 <hci_notify_asynch_evt+0x12>
 8009aa2:	bf00      	nop
 8009aa4:	2000fb28 	.word	0x2000fb28
 8009aa8:	2000f84c 	.word	0x2000f84c
 8009aac:	2000fb30 	.word	0x2000fb30

08009ab0 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8009ab0:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8009ab2:	6040      	str	r0, [r0, #4]
}
 8009ab4:	4770      	bx	lr

08009ab6 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009aba:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009abc:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8009abe:	4283      	cmp	r3, r0
 8009ac0:	bf14      	ite	ne
 8009ac2:	2000      	movne	r0, #0
 8009ac4:	2001      	moveq	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac6:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8009aca:	4770      	bx	lr

08009acc <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009acc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad0:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009ad2:	6802      	ldr	r2, [r0, #0]
 8009ad4:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8009ad6:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8009ad8:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8009ada:	680a      	ldr	r2, [r1, #0]
 8009adc:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ade:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009ae2:	4770      	bx	lr

08009ae4 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ae4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009ae8:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009aea:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8009aec:	6842      	ldr	r2, [r0, #4]
 8009aee:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8009af0:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8009af2:	684a      	ldr	r2, [r1, #4]
 8009af4:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af6:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009afa:	4770      	bx	lr

08009afc <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009afc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b00:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009b02:	6841      	ldr	r1, [r0, #4]
 8009b04:	6803      	ldr	r3, [r0, #0]
 8009b06:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 8009b08:	6841      	ldr	r1, [r0, #4]
 8009b0a:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b0c:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b10:	4770      	bx	lr

08009b12 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009b12:	b538      	push	{r3, r4, r5, lr}
 8009b14:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b16:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b1a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 8009b20:	f7ff ffec 	bl	8009afc <list_remove_node>
  (*node)->next = NULL;
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	2300      	movs	r3, #0
 8009b28:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b2e:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b32:	bd38      	pop	{r3, r4, r5, pc}

08009b34 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b38:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b3c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009b3e:	6840      	ldr	r0, [r0, #4]
 8009b40:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 8009b42:	f7ff ffdb 	bl	8009afc <list_remove_node>
  (*node)->next = NULL;
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b50:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b54:	bd38      	pop	{r3, r4, r5, pc}

08009b56 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009b56:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b5c:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009b5e:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 8009b60:	4298      	cmp	r0, r3
 8009b62:	d007      	beq.n	8009b74 <list_get_size+0x1e>
  int size = 0;
 8009b64:	2000      	movs	r0, #0
  {
    size++;
 8009b66:	3001      	adds	r0, #1
    temp = temp->next;		
 8009b68:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d1fb      	bne.n	8009b66 <list_get_size+0x10>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b6e:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8009b72:	4770      	bx	lr
  int size = 0;
 8009b74:	2000      	movs	r0, #0
 8009b76:	e7fa      	b.n	8009b6e <list_get_size+0x18>

08009b78 <arm_max_f32>:
 8009b78:	f101 3cff 	add.w	ip, r1, #4294967295
 8009b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7e:	4607      	mov	r7, r0
 8009b80:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8009b84:	ecf7 7a01 	vldmia	r7!, {s15}
 8009b88:	d060      	beq.n	8009c4c <arm_max_f32+0xd4>
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	3014      	adds	r0, #20
 8009b8e:	4625      	mov	r5, r4
 8009b90:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8009b94:	ed10 7a04 	vldr	s14, [r0, #-16]
 8009b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba0:	bf48      	it	mi
 8009ba2:	eef0 7a47 	vmovmi.f32	s15, s14
 8009ba6:	ed10 7a03 	vldr	s14, [r0, #-12]
 8009baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bae:	bf48      	it	mi
 8009bb0:	1c65      	addmi	r5, r4, #1
 8009bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb6:	bf48      	it	mi
 8009bb8:	eef0 7a47 	vmovmi.f32	s15, s14
 8009bbc:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bc4:	bf48      	it	mi
 8009bc6:	1ca5      	addmi	r5, r4, #2
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	bf48      	it	mi
 8009bce:	eef0 7a47 	vmovmi.f32	s15, s14
 8009bd2:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bda:	bf48      	it	mi
 8009bdc:	1ce5      	addmi	r5, r4, #3
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	f104 0404 	add.w	r4, r4, #4
 8009be6:	bf44      	itt	mi
 8009be8:	eef0 7a47 	vmovmi.f32	s15, s14
 8009bec:	4625      	movmi	r5, r4
 8009bee:	42a6      	cmp	r6, r4
 8009bf0:	f100 0010 	add.w	r0, r0, #16
 8009bf4:	d1ce      	bne.n	8009b94 <arm_max_f32+0x1c>
 8009bf6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8009bfa:	f01c 0003 	ands.w	r0, ip, #3
 8009bfe:	d021      	beq.n	8009c44 <arm_max_f32+0xcc>
 8009c00:	ed97 7a00 	vldr	s14, [r7]
 8009c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0c:	bfc4      	itt	gt
 8009c0e:	eef0 7a47 	vmovgt.f32	s15, s14
 8009c12:	1a0d      	subgt	r5, r1, r0
 8009c14:	3801      	subs	r0, #1
 8009c16:	d015      	beq.n	8009c44 <arm_max_f32+0xcc>
 8009c18:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	bf44      	itt	mi
 8009c26:	eef0 7a47 	vmovmi.f32	s15, s14
 8009c2a:	1a0d      	submi	r5, r1, r0
 8009c2c:	2801      	cmp	r0, #1
 8009c2e:	d009      	beq.n	8009c44 <arm_max_f32+0xcc>
 8009c30:	ed97 7a02 	vldr	s14, [r7, #8]
 8009c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	bfc4      	itt	gt
 8009c3e:	eef0 7a47 	vmovgt.f32	s15, s14
 8009c42:	4665      	movgt	r5, ip
 8009c44:	edc2 7a00 	vstr	s15, [r2]
 8009c48:	601d      	str	r5, [r3, #0]
 8009c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4c:	4675      	mov	r5, lr
 8009c4e:	e7d4      	b.n	8009bfa <arm_max_f32+0x82>

08009c50 <arm_rfft_32_fast_init_f32>:
 8009c50:	b178      	cbz	r0, 8009c72 <arm_rfft_32_fast_init_f32+0x22>
 8009c52:	b430      	push	{r4, r5}
 8009c54:	4908      	ldr	r1, [pc, #32]	; (8009c78 <arm_rfft_32_fast_init_f32+0x28>)
 8009c56:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <arm_rfft_32_fast_init_f32+0x2c>)
 8009c58:	2310      	movs	r3, #16
 8009c5a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c5e:	8003      	strh	r3, [r0, #0]
 8009c60:	2520      	movs	r5, #32
 8009c62:	2414      	movs	r4, #20
 8009c64:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <arm_rfft_32_fast_init_f32+0x30>)
 8009c66:	8205      	strh	r5, [r0, #16]
 8009c68:	8184      	strh	r4, [r0, #12]
 8009c6a:	6143      	str	r3, [r0, #20]
 8009c6c:	bc30      	pop	{r4, r5}
 8009c6e:	2000      	movs	r0, #0
 8009c70:	4770      	bx	lr
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	4770      	bx	lr
 8009c78:	0800f440 	.word	0x0800f440
 8009c7c:	08014578 	.word	0x08014578
 8009c80:	080252f8 	.word	0x080252f8

08009c84 <arm_rfft_64_fast_init_f32>:
 8009c84:	b178      	cbz	r0, 8009ca6 <arm_rfft_64_fast_init_f32+0x22>
 8009c86:	b430      	push	{r4, r5}
 8009c88:	4908      	ldr	r1, [pc, #32]	; (8009cac <arm_rfft_64_fast_init_f32+0x28>)
 8009c8a:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <arm_rfft_64_fast_init_f32+0x2c>)
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c92:	8003      	strh	r3, [r0, #0]
 8009c94:	2540      	movs	r5, #64	; 0x40
 8009c96:	2430      	movs	r4, #48	; 0x30
 8009c98:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <arm_rfft_64_fast_init_f32+0x30>)
 8009c9a:	8205      	strh	r5, [r0, #16]
 8009c9c:	8184      	strh	r4, [r0, #12]
 8009c9e:	6143      	str	r3, [r0, #20]
 8009ca0:	bc30      	pop	{r4, r5}
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	4770      	bx	lr
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	4770      	bx	lr
 8009cac:	08011598 	.word	0x08011598
 8009cb0:	08018df8 	.word	0x08018df8
 8009cb4:	08029b78 	.word	0x08029b78

08009cb8 <arm_rfft_256_fast_init_f32>:
 8009cb8:	b180      	cbz	r0, 8009cdc <arm_rfft_256_fast_init_f32+0x24>
 8009cba:	b430      	push	{r4, r5}
 8009cbc:	4909      	ldr	r1, [pc, #36]	; (8009ce4 <arm_rfft_256_fast_init_f32+0x2c>)
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <arm_rfft_256_fast_init_f32+0x30>)
 8009cc0:	2380      	movs	r3, #128	; 0x80
 8009cc2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009cc6:	8003      	strh	r3, [r0, #0]
 8009cc8:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009ccc:	24d0      	movs	r4, #208	; 0xd0
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <arm_rfft_256_fast_init_f32+0x34>)
 8009cd0:	8205      	strh	r5, [r0, #16]
 8009cd2:	8184      	strh	r4, [r0, #12]
 8009cd4:	6143      	str	r3, [r0, #20]
 8009cd6:	bc30      	pop	{r4, r5}
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4770      	bx	lr
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	0800f2a0 	.word	0x0800f2a0
 8009ce8:	08014178 	.word	0x08014178
 8009cec:	08024ef8 	.word	0x08024ef8

08009cf0 <arm_rfft_512_fast_init_f32>:
 8009cf0:	b190      	cbz	r0, 8009d18 <arm_rfft_512_fast_init_f32+0x28>
 8009cf2:	b430      	push	{r4, r5}
 8009cf4:	490a      	ldr	r1, [pc, #40]	; (8009d20 <arm_rfft_512_fast_init_f32+0x30>)
 8009cf6:	4a0b      	ldr	r2, [pc, #44]	; (8009d24 <arm_rfft_512_fast_init_f32+0x34>)
 8009cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cfc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009d00:	8003      	strh	r3, [r0, #0]
 8009d02:	f44f 7500 	mov.w	r5, #512	; 0x200
 8009d06:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <arm_rfft_512_fast_init_f32+0x38>)
 8009d0c:	8205      	strh	r5, [r0, #16]
 8009d0e:	8184      	strh	r4, [r0, #12]
 8009d10:	6143      	str	r3, [r0, #20]
 8009d12:	bc30      	pop	{r4, r5}
 8009d14:	2000      	movs	r0, #0
 8009d16:	4770      	bx	lr
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	08011228 	.word	0x08011228
 8009d24:	080185f8 	.word	0x080185f8
 8009d28:	08029378 	.word	0x08029378

08009d2c <arm_rfft_1024_fast_init_f32>:
 8009d2c:	b190      	cbz	r0, 8009d54 <arm_rfft_1024_fast_init_f32+0x28>
 8009d2e:	b430      	push	{r4, r5}
 8009d30:	490a      	ldr	r1, [pc, #40]	; (8009d5c <arm_rfft_1024_fast_init_f32+0x30>)
 8009d32:	4a0b      	ldr	r2, [pc, #44]	; (8009d60 <arm_rfft_1024_fast_init_f32+0x34>)
 8009d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d38:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009d3c:	8003      	strh	r3, [r0, #0]
 8009d3e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009d42:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <arm_rfft_1024_fast_init_f32+0x38>)
 8009d48:	8205      	strh	r5, [r0, #16]
 8009d4a:	8184      	strh	r4, [r0, #12]
 8009d4c:	6143      	str	r3, [r0, #20]
 8009d4e:	bc30      	pop	{r4, r5}
 8009d50:	2000      	movs	r0, #0
 8009d52:	4770      	bx	lr
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	080115f8 	.word	0x080115f8
 8009d60:	08020ef8 	.word	0x08020ef8
 8009d64:	08021ef8 	.word	0x08021ef8

08009d68 <arm_rfft_2048_fast_init_f32>:
 8009d68:	b190      	cbz	r0, 8009d90 <arm_rfft_2048_fast_init_f32+0x28>
 8009d6a:	b430      	push	{r4, r5}
 8009d6c:	490a      	ldr	r1, [pc, #40]	; (8009d98 <arm_rfft_2048_fast_init_f32+0x30>)
 8009d6e:	4a0b      	ldr	r2, [pc, #44]	; (8009d9c <arm_rfft_2048_fast_init_f32+0x34>)
 8009d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d74:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009d78:	8003      	strh	r3, [r0, #0]
 8009d7a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009d7e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8009d82:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <arm_rfft_2048_fast_init_f32+0x38>)
 8009d84:	8205      	strh	r5, [r0, #16]
 8009d86:	8184      	strh	r4, [r0, #12]
 8009d88:	6143      	str	r3, [r0, #20]
 8009d8a:	bc30      	pop	{r4, r5}
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	4770      	bx	lr
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	0800e490 	.word	0x0800e490
 8009d9c:	08012178 	.word	0x08012178
 8009da0:	08022ef8 	.word	0x08022ef8

08009da4 <arm_rfft_4096_fast_init_f32>:
 8009da4:	b190      	cbz	r0, 8009dcc <arm_rfft_4096_fast_init_f32+0x28>
 8009da6:	b430      	push	{r4, r5}
 8009da8:	490a      	ldr	r1, [pc, #40]	; (8009dd4 <arm_rfft_4096_fast_init_f32+0x30>)
 8009daa:	4a0b      	ldr	r2, [pc, #44]	; (8009dd8 <arm_rfft_4096_fast_init_f32+0x34>)
 8009dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009db0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009db4:	8003      	strh	r3, [r0, #0]
 8009db6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009dba:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009dbe:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <arm_rfft_4096_fast_init_f32+0x38>)
 8009dc0:	8205      	strh	r5, [r0, #16]
 8009dc2:	8184      	strh	r4, [r0, #12]
 8009dc4:	6143      	str	r3, [r0, #20]
 8009dc6:	bc30      	pop	{r4, r5}
 8009dc8:	2000      	movs	r0, #0
 8009dca:	4770      	bx	lr
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	0800f468 	.word	0x0800f468
 8009dd8:	080145f8 	.word	0x080145f8
 8009ddc:	08025378 	.word	0x08025378

08009de0 <arm_rfft_fast_init_f32>:
 8009de0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009de4:	d01f      	beq.n	8009e26 <arm_rfft_fast_init_f32+0x46>
 8009de6:	d90b      	bls.n	8009e00 <arm_rfft_fast_init_f32+0x20>
 8009de8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009dec:	d019      	beq.n	8009e22 <arm_rfft_fast_init_f32+0x42>
 8009dee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009df2:	d012      	beq.n	8009e1a <arm_rfft_fast_init_f32+0x3a>
 8009df4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009df8:	d00d      	beq.n	8009e16 <arm_rfft_fast_init_f32+0x36>
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	4770      	bx	lr
 8009e00:	2940      	cmp	r1, #64	; 0x40
 8009e02:	d00c      	beq.n	8009e1e <arm_rfft_fast_init_f32+0x3e>
 8009e04:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009e08:	d003      	beq.n	8009e12 <arm_rfft_fast_init_f32+0x32>
 8009e0a:	2920      	cmp	r1, #32
 8009e0c:	d1f5      	bne.n	8009dfa <arm_rfft_fast_init_f32+0x1a>
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <arm_rfft_fast_init_f32+0x4c>)
 8009e10:	4718      	bx	r3
 8009e12:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <arm_rfft_fast_init_f32+0x50>)
 8009e14:	4718      	bx	r3
 8009e16:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <arm_rfft_fast_init_f32+0x54>)
 8009e18:	4718      	bx	r3
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <arm_rfft_fast_init_f32+0x58>)
 8009e1c:	4718      	bx	r3
 8009e1e:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <arm_rfft_fast_init_f32+0x5c>)
 8009e20:	e7f6      	b.n	8009e10 <arm_rfft_fast_init_f32+0x30>
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <arm_rfft_fast_init_f32+0x60>)
 8009e24:	e7f4      	b.n	8009e10 <arm_rfft_fast_init_f32+0x30>
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <arm_rfft_fast_init_f32+0x64>)
 8009e28:	e7f2      	b.n	8009e10 <arm_rfft_fast_init_f32+0x30>
 8009e2a:	bf00      	nop
 8009e2c:	08009c51 	.word	0x08009c51
 8009e30:	08009cb9 	.word	0x08009cb9
 8009e34:	08009d2d 	.word	0x08009d2d
 8009e38:	08009da5 	.word	0x08009da5
 8009e3c:	08009c85 	.word	0x08009c85
 8009e40:	08009d69 	.word	0x08009d69
 8009e44:	08009cf1 	.word	0x08009cf1

08009e48 <arm_cfft_radix8by2_f32>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	ed2d 8b08 	vpush	{d8-d11}
 8009e50:	4607      	mov	r7, r0
 8009e52:	4608      	mov	r0, r1
 8009e54:	f8b7 c000 	ldrh.w	ip, [r7]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009e5e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009e62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009e66:	f000 80b0 	beq.w	8009fca <arm_cfft_radix8by2_f32+0x182>
 8009e6a:	008c      	lsls	r4, r1, #2
 8009e6c:	3410      	adds	r4, #16
 8009e6e:	f100 0310 	add.w	r3, r0, #16
 8009e72:	1906      	adds	r6, r0, r4
 8009e74:	3210      	adds	r2, #16
 8009e76:	4444      	add	r4, r8
 8009e78:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009e7c:	f108 0510 	add.w	r5, r8, #16
 8009e80:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009e84:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009e88:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009e8c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009e90:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009e94:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009e98:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009e9c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009ea0:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009ea4:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009ea8:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009eac:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009eb0:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009eb4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009eb8:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009ebc:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009ec0:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009ec4:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009ec8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009ecc:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009ed0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009ed4:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009ed8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009edc:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009ee0:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009ee4:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009ee8:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009eec:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009ef0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009ef4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009ef8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009efc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009f00:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009f04:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009f08:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009f0c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009f10:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009f14:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009f18:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009f1c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009f20:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009f24:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009f28:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009f2c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009f30:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009f34:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009f38:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009f3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009f40:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009f44:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009f48:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009f4c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009f50:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009f54:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009f58:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009f5c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009f60:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009f64:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009f68:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009f6c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009f70:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009f74:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009f78:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009f7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009f80:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009f84:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009f88:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009f8c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009f90:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009f94:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009f98:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009f9c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009fa0:	3310      	adds	r3, #16
 8009fa2:	4563      	cmp	r3, ip
 8009fa4:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009fa8:	f106 0610 	add.w	r6, r6, #16
 8009fac:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009fb0:	f102 0210 	add.w	r2, r2, #16
 8009fb4:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009fb8:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009fbc:	f105 0510 	add.w	r5, r5, #16
 8009fc0:	f104 0410 	add.w	r4, r4, #16
 8009fc4:	f47f af5c 	bne.w	8009e80 <arm_cfft_radix8by2_f32+0x38>
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	b28c      	uxth	r4, r1
 8009fcc:	4621      	mov	r1, r4
 8009fce:	2302      	movs	r3, #2
 8009fd0:	f000 fc7a 	bl	800a8c8 <arm_radix8_butterfly_f32>
 8009fd4:	ecbd 8b08 	vpop	{d8-d11}
 8009fd8:	4621      	mov	r1, r4
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	4640      	mov	r0, r8
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe4:	f000 bc70 	b.w	800a8c8 <arm_radix8_butterfly_f32>

08009fe8 <arm_cfft_radix8by4_f32>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ed2d 8b0a 	vpush	{d8-d12}
 8009ff0:	b08d      	sub	sp, #52	; 0x34
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ff6:	8801      	ldrh	r1, [r0, #0]
 8009ff8:	6842      	ldr	r2, [r0, #4]
 8009ffa:	900a      	str	r0, [sp, #40]	; 0x28
 8009ffc:	0849      	lsrs	r1, r1, #1
 8009ffe:	008b      	lsls	r3, r1, #2
 800a000:	18ee      	adds	r6, r5, r3
 800a002:	18f0      	adds	r0, r6, r3
 800a004:	edd0 5a00 	vldr	s11, [r0]
 800a008:	edd5 7a00 	vldr	s15, [r5]
 800a00c:	ed96 7a00 	vldr	s14, [r6]
 800a010:	edd0 3a01 	vldr	s7, [r0, #4]
 800a014:	ed96 4a01 	vldr	s8, [r6, #4]
 800a018:	ed95 5a01 	vldr	s10, [r5, #4]
 800a01c:	9008      	str	r0, [sp, #32]
 800a01e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a022:	18c7      	adds	r7, r0, r3
 800a024:	edd7 4a00 	vldr	s9, [r7]
 800a028:	ed97 3a01 	vldr	s6, [r7, #4]
 800a02c:	9701      	str	r7, [sp, #4]
 800a02e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a032:	462c      	mov	r4, r5
 800a034:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a038:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a03c:	ee16 ca90 	vmov	ip, s13
 800a040:	f844 cb08 	str.w	ip, [r4], #8
 800a044:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a048:	edd6 5a01 	vldr	s11, [r6, #4]
 800a04c:	edd7 2a01 	vldr	s5, [r7, #4]
 800a050:	9404      	str	r4, [sp, #16]
 800a052:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a056:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a05a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a05e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a062:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a066:	0849      	lsrs	r1, r1, #1
 800a068:	f102 0e08 	add.w	lr, r2, #8
 800a06c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a070:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a074:	9109      	str	r1, [sp, #36]	; 0x24
 800a076:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a07a:	f1a1 0902 	sub.w	r9, r1, #2
 800a07e:	f8cd e00c 	str.w	lr, [sp, #12]
 800a082:	4631      	mov	r1, r6
 800a084:	ee13 ea90 	vmov	lr, s7
 800a088:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a08c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a090:	4604      	mov	r4, r0
 800a092:	edc5 5a01 	vstr	s11, [r5, #4]
 800a096:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a09a:	f841 eb08 	str.w	lr, [r1], #8
 800a09e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a0a2:	ee16 ea10 	vmov	lr, s12
 800a0a6:	ed86 5a01 	vstr	s10, [r6, #4]
 800a0aa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a0ae:	f844 eb08 	str.w	lr, [r4], #8
 800a0b2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a0b6:	edc0 6a01 	vstr	s13, [r0, #4]
 800a0ba:	9405      	str	r4, [sp, #20]
 800a0bc:	4604      	mov	r4, r0
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	9106      	str	r1, [sp, #24]
 800a0c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a0c8:	f102 0110 	add.w	r1, r2, #16
 800a0cc:	46bc      	mov	ip, r7
 800a0ce:	9100      	str	r1, [sp, #0]
 800a0d0:	f847 0b08 	str.w	r0, [r7], #8
 800a0d4:	f102 0118 	add.w	r1, r2, #24
 800a0d8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a0dc:	9102      	str	r1, [sp, #8]
 800a0de:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a0e2:	9007      	str	r0, [sp, #28]
 800a0e4:	f000 8134 	beq.w	800a350 <arm_cfft_radix8by4_f32+0x368>
 800a0e8:	f102 0920 	add.w	r9, r2, #32
 800a0ec:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	f8dd a000 	ldr.w	sl, [sp]
 800a0f6:	3b0c      	subs	r3, #12
 800a0f8:	4683      	mov	fp, r0
 800a0fa:	4463      	add	r3, ip
 800a0fc:	f105 0e10 	add.w	lr, r5, #16
 800a100:	f1a4 010c 	sub.w	r1, r4, #12
 800a104:	f104 0510 	add.w	r5, r4, #16
 800a108:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a10c:	f1a2 040c 	sub.w	r4, r2, #12
 800a110:	f106 0010 	add.w	r0, r6, #16
 800a114:	3210      	adds	r2, #16
 800a116:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a11a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a11e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a122:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a126:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a12a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a12e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a132:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a136:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a13a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a13e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a142:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a146:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a14a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a14e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a152:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a156:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a15a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a15e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a162:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a166:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a16a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a16e:	ed94 7a02 	vldr	s14, [r4, #8]
 800a172:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a176:	ed91 ba02 	vldr	s22, [r1, #8]
 800a17a:	edd3 9a02 	vldr	s19, [r3, #8]
 800a17e:	edd4 2a01 	vldr	s5, [r4, #4]
 800a182:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a186:	ed93 5a01 	vldr	s10, [r3, #4]
 800a18a:	edd1 0a01 	vldr	s1, [r1, #4]
 800a18e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a192:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a196:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a19a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a19e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a1a2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a1a6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a1aa:	ed91 7a01 	vldr	s14, [r1, #4]
 800a1ae:	edd3 8a01 	vldr	s17, [r3, #4]
 800a1b2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a1b6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a1ba:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a1be:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a1c2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a1c6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a1ca:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a1ce:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a1d2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a1d6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a1da:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a1de:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a1e2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a1e6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a1ea:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a1ee:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a1f2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a1f6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a1fa:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a1fe:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a202:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a206:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a20a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a20e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a212:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a216:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a21a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a21e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a222:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a226:	edc1 8a01 	vstr	s17, [r1, #4]
 800a22a:	ed81 aa02 	vstr	s20, [r1, #8]
 800a22e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a232:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a236:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a23a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a23e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a242:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a246:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a24a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a24e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a252:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a256:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a25a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a25e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a262:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a266:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a26a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a26e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a272:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a276:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a27a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a27e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a282:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a286:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a28a:	ed84 7a01 	vstr	s14, [r4, #4]
 800a28e:	ed84 4a02 	vstr	s8, [r4, #8]
 800a292:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a296:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a29a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a29e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a2a2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a2a6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a2aa:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a2ae:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a2b2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a2b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a2ba:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a2be:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a2c2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a2c6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a2ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a2ce:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a2d2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a2d6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a2da:	f1bb 0b01 	subs.w	fp, fp, #1
 800a2de:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a2e2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a2e6:	f10e 0e08 	add.w	lr, lr, #8
 800a2ea:	ed83 3a02 	vstr	s6, [r3, #8]
 800a2ee:	ed83 7a01 	vstr	s14, [r3, #4]
 800a2f2:	f1ac 0c08 	sub.w	ip, ip, #8
 800a2f6:	f10a 0a08 	add.w	sl, sl, #8
 800a2fa:	f100 0008 	add.w	r0, r0, #8
 800a2fe:	f1a1 0108 	sub.w	r1, r1, #8
 800a302:	f109 0910 	add.w	r9, r9, #16
 800a306:	f105 0508 	add.w	r5, r5, #8
 800a30a:	f1a4 0408 	sub.w	r4, r4, #8
 800a30e:	f108 0818 	add.w	r8, r8, #24
 800a312:	f102 0208 	add.w	r2, r2, #8
 800a316:	f1a3 0308 	sub.w	r3, r3, #8
 800a31a:	f47f aefc 	bne.w	800a116 <arm_cfft_radix8by4_f32+0x12e>
 800a31e:	9907      	ldr	r1, [sp, #28]
 800a320:	9800      	ldr	r0, [sp, #0]
 800a322:	00cb      	lsls	r3, r1, #3
 800a324:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a328:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a32c:	9100      	str	r1, [sp, #0]
 800a32e:	9904      	ldr	r1, [sp, #16]
 800a330:	4419      	add	r1, r3
 800a332:	9104      	str	r1, [sp, #16]
 800a334:	9903      	ldr	r1, [sp, #12]
 800a336:	4419      	add	r1, r3
 800a338:	9103      	str	r1, [sp, #12]
 800a33a:	9906      	ldr	r1, [sp, #24]
 800a33c:	4419      	add	r1, r3
 800a33e:	9106      	str	r1, [sp, #24]
 800a340:	9905      	ldr	r1, [sp, #20]
 800a342:	441f      	add	r7, r3
 800a344:	4419      	add	r1, r3
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	9904      	ldr	r1, [sp, #16]
 800a352:	9805      	ldr	r0, [sp, #20]
 800a354:	ed91 4a00 	vldr	s8, [r1]
 800a358:	edd0 6a00 	vldr	s13, [r0]
 800a35c:	9b06      	ldr	r3, [sp, #24]
 800a35e:	ed97 3a00 	vldr	s6, [r7]
 800a362:	edd3 7a00 	vldr	s15, [r3]
 800a366:	edd0 4a01 	vldr	s9, [r0, #4]
 800a36a:	edd1 3a01 	vldr	s7, [r1, #4]
 800a36e:	ed97 2a01 	vldr	s4, [r7, #4]
 800a372:	ed93 7a01 	vldr	s14, [r3, #4]
 800a376:	9a03      	ldr	r2, [sp, #12]
 800a378:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a37c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a380:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a384:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a388:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a38c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a390:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a394:	ed81 5a00 	vstr	s10, [r1]
 800a398:	ed93 5a01 	vldr	s10, [r3, #4]
 800a39c:	edd7 4a01 	vldr	s9, [r7, #4]
 800a3a0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a3a4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a3a8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a3ac:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a3b0:	ed81 5a01 	vstr	s10, [r1, #4]
 800a3b4:	edd2 1a00 	vldr	s3, [r2]
 800a3b8:	edd2 2a01 	vldr	s5, [r2, #4]
 800a3bc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a3c0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a3c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a3c8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a3cc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a3d0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a3d4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a3d8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a3dc:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a3e0:	edc3 2a00 	vstr	s5, [r3]
 800a3e4:	ed83 5a01 	vstr	s10, [r3, #4]
 800a3e8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a3ec:	9b00      	ldr	r3, [sp, #0]
 800a3ee:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a3f2:	ed93 4a01 	vldr	s8, [r3, #4]
 800a3f6:	ed93 5a00 	vldr	s10, [r3]
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a400:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a404:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a408:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a40c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a410:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a414:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a418:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a41c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a420:	ed80 6a01 	vstr	s12, [r0, #4]
 800a424:	edc0 5a00 	vstr	s11, [r0]
 800a428:	edd3 5a01 	vldr	s11, [r3, #4]
 800a42c:	edd3 6a00 	vldr	s13, [r3]
 800a430:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a434:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a438:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a43c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a440:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a444:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a448:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a44c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a450:	ed87 7a01 	vstr	s14, [r7, #4]
 800a454:	edc7 7a00 	vstr	s15, [r7]
 800a458:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a45c:	4621      	mov	r1, r4
 800a45e:	686a      	ldr	r2, [r5, #4]
 800a460:	2304      	movs	r3, #4
 800a462:	f000 fa31 	bl	800a8c8 <arm_radix8_butterfly_f32>
 800a466:	4630      	mov	r0, r6
 800a468:	4621      	mov	r1, r4
 800a46a:	686a      	ldr	r2, [r5, #4]
 800a46c:	2304      	movs	r3, #4
 800a46e:	f000 fa2b 	bl	800a8c8 <arm_radix8_butterfly_f32>
 800a472:	9808      	ldr	r0, [sp, #32]
 800a474:	686a      	ldr	r2, [r5, #4]
 800a476:	4621      	mov	r1, r4
 800a478:	2304      	movs	r3, #4
 800a47a:	f000 fa25 	bl	800a8c8 <arm_radix8_butterfly_f32>
 800a47e:	686a      	ldr	r2, [r5, #4]
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	4621      	mov	r1, r4
 800a484:	2304      	movs	r3, #4
 800a486:	b00d      	add	sp, #52	; 0x34
 800a488:	ecbd 8b0a 	vpop	{d8-d12}
 800a48c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	f000 ba1a 	b.w	800a8c8 <arm_radix8_butterfly_f32>

0800a494 <arm_cfft_f32>:
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	2a01      	cmp	r2, #1
 800a49a:	4606      	mov	r6, r0
 800a49c:	4617      	mov	r7, r2
 800a49e:	460c      	mov	r4, r1
 800a4a0:	4698      	mov	r8, r3
 800a4a2:	8805      	ldrh	r5, [r0, #0]
 800a4a4:	d056      	beq.n	800a554 <arm_cfft_f32+0xc0>
 800a4a6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a4aa:	d063      	beq.n	800a574 <arm_cfft_f32+0xe0>
 800a4ac:	d916      	bls.n	800a4dc <arm_cfft_f32+0x48>
 800a4ae:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a4b2:	d01a      	beq.n	800a4ea <arm_cfft_f32+0x56>
 800a4b4:	d947      	bls.n	800a546 <arm_cfft_f32+0xb2>
 800a4b6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a4ba:	d05b      	beq.n	800a574 <arm_cfft_f32+0xe0>
 800a4bc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a4c0:	d105      	bne.n	800a4ce <arm_cfft_f32+0x3a>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	6872      	ldr	r2, [r6, #4]
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 f9fd 	bl	800a8c8 <arm_radix8_butterfly_f32>
 800a4ce:	f1b8 0f00 	cmp.w	r8, #0
 800a4d2:	d111      	bne.n	800a4f8 <arm_cfft_f32+0x64>
 800a4d4:	2f01      	cmp	r7, #1
 800a4d6:	d016      	beq.n	800a506 <arm_cfft_f32+0x72>
 800a4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4dc:	2d20      	cmp	r5, #32
 800a4de:	d049      	beq.n	800a574 <arm_cfft_f32+0xe0>
 800a4e0:	d935      	bls.n	800a54e <arm_cfft_f32+0xba>
 800a4e2:	2d40      	cmp	r5, #64	; 0x40
 800a4e4:	d0ed      	beq.n	800a4c2 <arm_cfft_f32+0x2e>
 800a4e6:	2d80      	cmp	r5, #128	; 0x80
 800a4e8:	d1f1      	bne.n	800a4ce <arm_cfft_f32+0x3a>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fcab 	bl	8009e48 <arm_cfft_radix8by2_f32>
 800a4f2:	f1b8 0f00 	cmp.w	r8, #0
 800a4f6:	d0ed      	beq.n	800a4d4 <arm_cfft_f32+0x40>
 800a4f8:	68b2      	ldr	r2, [r6, #8]
 800a4fa:	89b1      	ldrh	r1, [r6, #12]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f89f 	bl	800a640 <arm_bitreversal_32>
 800a502:	2f01      	cmp	r7, #1
 800a504:	d1e8      	bne.n	800a4d8 <arm_cfft_f32+0x44>
 800a506:	ee07 5a90 	vmov	s15, r5
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a512:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a516:	2d00      	cmp	r5, #0
 800a518:	d0de      	beq.n	800a4d8 <arm_cfft_f32+0x44>
 800a51a:	f104 0108 	add.w	r1, r4, #8
 800a51e:	2300      	movs	r3, #0
 800a520:	3301      	adds	r3, #1
 800a522:	429d      	cmp	r5, r3
 800a524:	f101 0108 	add.w	r1, r1, #8
 800a528:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a52c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a530:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a534:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a538:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a53c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a540:	d1ee      	bne.n	800a520 <arm_cfft_f32+0x8c>
 800a542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a546:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a54a:	d0ba      	beq.n	800a4c2 <arm_cfft_f32+0x2e>
 800a54c:	e7bf      	b.n	800a4ce <arm_cfft_f32+0x3a>
 800a54e:	2d10      	cmp	r5, #16
 800a550:	d0cb      	beq.n	800a4ea <arm_cfft_f32+0x56>
 800a552:	e7bc      	b.n	800a4ce <arm_cfft_f32+0x3a>
 800a554:	b19d      	cbz	r5, 800a57e <arm_cfft_f32+0xea>
 800a556:	f101 030c 	add.w	r3, r1, #12
 800a55a:	2200      	movs	r2, #0
 800a55c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a560:	3201      	adds	r2, #1
 800a562:	eef1 7a67 	vneg.f32	s15, s15
 800a566:	4295      	cmp	r5, r2
 800a568:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a56c:	f103 0308 	add.w	r3, r3, #8
 800a570:	d1f4      	bne.n	800a55c <arm_cfft_f32+0xc8>
 800a572:	e798      	b.n	800a4a6 <arm_cfft_f32+0x12>
 800a574:	4621      	mov	r1, r4
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff fd36 	bl	8009fe8 <arm_cfft_radix8by4_f32>
 800a57c:	e7a7      	b.n	800a4ce <arm_cfft_f32+0x3a>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0aa      	beq.n	800a4d8 <arm_cfft_f32+0x44>
 800a582:	e7b9      	b.n	800a4f8 <arm_cfft_f32+0x64>

0800a584 <arm_cfft_radix4_init_f32>:
 800a584:	b410      	push	{r4}
 800a586:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a58a:	4c27      	ldr	r4, [pc, #156]	; (800a628 <arm_cfft_radix4_init_f32+0xa4>)
 800a58c:	7082      	strb	r2, [r0, #2]
 800a58e:	70c3      	strb	r3, [r0, #3]
 800a590:	8001      	strh	r1, [r0, #0]
 800a592:	6044      	str	r4, [r0, #4]
 800a594:	d027      	beq.n	800a5e6 <arm_cfft_radix4_init_f32+0x62>
 800a596:	d911      	bls.n	800a5bc <arm_cfft_radix4_init_f32+0x38>
 800a598:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a59c:	d02f      	beq.n	800a5fe <arm_cfft_radix4_init_f32+0x7a>
 800a59e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a5a2:	d11b      	bne.n	800a5dc <arm_cfft_radix4_init_f32+0x58>
 800a5a4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800a5a8:	4b20      	ldr	r3, [pc, #128]	; (800a62c <arm_cfft_radix4_init_f32+0xa8>)
 800a5aa:	6102      	str	r2, [r0, #16]
 800a5ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800a5b0:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	2910      	cmp	r1, #16
 800a5be:	d028      	beq.n	800a612 <arm_cfft_radix4_init_f32+0x8e>
 800a5c0:	2940      	cmp	r1, #64	; 0x40
 800a5c2:	d10b      	bne.n	800a5dc <arm_cfft_radix4_init_f32+0x58>
 800a5c4:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800a5c8:	4b19      	ldr	r3, [pc, #100]	; (800a630 <arm_cfft_radix4_init_f32+0xac>)
 800a5ca:	6102      	str	r2, [r0, #16]
 800a5cc:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 800a5d0:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800a5ea:	4b12      	ldr	r3, [pc, #72]	; (800a634 <arm_cfft_radix4_init_f32+0xb0>)
 800a5ec:	6102      	str	r2, [r0, #16]
 800a5ee:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 800a5f2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800a602:	4b0d      	ldr	r3, [pc, #52]	; (800a638 <arm_cfft_radix4_init_f32+0xb4>)
 800a604:	6102      	str	r2, [r0, #16]
 800a606:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800a60a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a60e:	2000      	movs	r0, #0
 800a610:	e7d1      	b.n	800a5b6 <arm_cfft_radix4_init_f32+0x32>
 800a612:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <arm_cfft_radix4_init_f32+0xb8>)
 800a618:	6102      	str	r2, [r0, #16]
 800a61a:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800a61e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a622:	2000      	movs	r0, #0
 800a624:	e7c7      	b.n	800a5b6 <arm_cfft_radix4_init_f32+0x32>
 800a626:	bf00      	nop
 800a628:	08018ef8 	.word	0x08018ef8
 800a62c:	08011978 	.word	0x08011978
 800a630:	080119f6 	.word	0x080119f6
 800a634:	08011996 	.word	0x08011996
 800a638:	0801197e 	.word	0x0801197e
 800a63c:	08011b76 	.word	0x08011b76

0800a640 <arm_bitreversal_32>:
 800a640:	b1e9      	cbz	r1, 800a67e <arm_bitreversal_32+0x3e>
 800a642:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a644:	2500      	movs	r5, #0
 800a646:	f102 0e02 	add.w	lr, r2, #2
 800a64a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a64e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a652:	08a4      	lsrs	r4, r4, #2
 800a654:	089b      	lsrs	r3, r3, #2
 800a656:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a65a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a65e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a662:	00a6      	lsls	r6, r4, #2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a66a:	3304      	adds	r3, #4
 800a66c:	1d34      	adds	r4, r6, #4
 800a66e:	3502      	adds	r5, #2
 800a670:	58c6      	ldr	r6, [r0, r3]
 800a672:	5907      	ldr	r7, [r0, r4]
 800a674:	50c7      	str	r7, [r0, r3]
 800a676:	428d      	cmp	r5, r1
 800a678:	5106      	str	r6, [r0, r4]
 800a67a:	d3e6      	bcc.n	800a64a <arm_bitreversal_32+0xa>
 800a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a67e:	4770      	bx	lr

0800a680 <arm_cmplx_mag_f32>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	ed2d 8b02 	vpush	{d8}
 800a688:	0897      	lsrs	r7, r2, #2
 800a68a:	b084      	sub	sp, #16
 800a68c:	d077      	beq.n	800a77e <arm_cmplx_mag_f32+0xfe>
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	f100 0420 	add.w	r4, r0, #32
 800a696:	f101 0510 	add.w	r5, r1, #16
 800a69a:	463e      	mov	r6, r7
 800a69c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800a6a0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800a6a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b8:	f2c0 80c5 	blt.w	800a846 <arm_cmplx_mag_f32+0x1c6>
 800a6bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a6c8:	f100 80cb 	bmi.w	800a862 <arm_cmplx_mag_f32+0x1e2>
 800a6cc:	ed05 8a04 	vstr	s16, [r5, #-16]
 800a6d0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800a6d4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800a6d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	f2c0 80a8 	blt.w	800a840 <arm_cmplx_mag_f32+0x1c0>
 800a6f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a6fc:	f100 80a8 	bmi.w	800a850 <arm_cmplx_mag_f32+0x1d0>
 800a700:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a704:	ed14 0a04 	vldr	s0, [r4, #-16]
 800a708:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a70c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a710:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a714:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a718:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a720:	f2c0 808b 	blt.w	800a83a <arm_cmplx_mag_f32+0x1ba>
 800a724:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a730:	f100 80a9 	bmi.w	800a886 <arm_cmplx_mag_f32+0x206>
 800a734:	ed05 8a02 	vstr	s16, [r5, #-8]
 800a738:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a73c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a740:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a744:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a748:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a74c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a754:	db6e      	blt.n	800a834 <arm_cmplx_mag_f32+0x1b4>
 800a756:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a762:	f100 8087 	bmi.w	800a874 <arm_cmplx_mag_f32+0x1f4>
 800a766:	ed05 8a01 	vstr	s16, [r5, #-4]
 800a76a:	3e01      	subs	r6, #1
 800a76c:	f104 0420 	add.w	r4, r4, #32
 800a770:	f105 0510 	add.w	r5, r5, #16
 800a774:	d192      	bne.n	800a69c <arm_cmplx_mag_f32+0x1c>
 800a776:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800a77a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a77e:	f012 0203 	ands.w	r2, r2, #3
 800a782:	d052      	beq.n	800a82a <arm_cmplx_mag_f32+0x1aa>
 800a784:	ed90 0a00 	vldr	s0, [r0]
 800a788:	edd0 7a01 	vldr	s15, [r0, #4]
 800a78c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a790:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a794:	2300      	movs	r3, #0
 800a796:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a79a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	bfb8      	it	lt
 800a7a4:	600b      	strlt	r3, [r1, #0]
 800a7a6:	db08      	blt.n	800a7ba <arm_cmplx_mag_f32+0x13a>
 800a7a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a7b4:	d479      	bmi.n	800a8aa <arm_cmplx_mag_f32+0x22a>
 800a7b6:	ed81 8a00 	vstr	s16, [r1]
 800a7ba:	3a01      	subs	r2, #1
 800a7bc:	d035      	beq.n	800a82a <arm_cmplx_mag_f32+0x1aa>
 800a7be:	ed90 0a02 	vldr	s0, [r0, #8]
 800a7c2:	edd0 7a03 	vldr	s15, [r0, #12]
 800a7c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a7ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a7d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7dc:	bfb8      	it	lt
 800a7de:	604b      	strlt	r3, [r1, #4]
 800a7e0:	db08      	blt.n	800a7f4 <arm_cmplx_mag_f32+0x174>
 800a7e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a7ee:	d453      	bmi.n	800a898 <arm_cmplx_mag_f32+0x218>
 800a7f0:	ed81 8a01 	vstr	s16, [r1, #4]
 800a7f4:	2a01      	cmp	r2, #1
 800a7f6:	d018      	beq.n	800a82a <arm_cmplx_mag_f32+0x1aa>
 800a7f8:	ed90 0a04 	vldr	s0, [r0, #16]
 800a7fc:	edd0 7a05 	vldr	s15, [r0, #20]
 800a800:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a804:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a808:	2300      	movs	r3, #0
 800a80a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a80e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	db19      	blt.n	800a84c <arm_cmplx_mag_f32+0x1cc>
 800a818:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a820:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a824:	d44a      	bmi.n	800a8bc <arm_cmplx_mag_f32+0x23c>
 800a826:	ed81 8a02 	vstr	s16, [r1, #8]
 800a82a:	b004      	add	sp, #16
 800a82c:	ecbd 8b02 	vpop	{d8}
 800a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a834:	f845 8c04 	str.w	r8, [r5, #-4]
 800a838:	e797      	b.n	800a76a <arm_cmplx_mag_f32+0xea>
 800a83a:	f845 8c08 	str.w	r8, [r5, #-8]
 800a83e:	e77b      	b.n	800a738 <arm_cmplx_mag_f32+0xb8>
 800a840:	f845 8c0c 	str.w	r8, [r5, #-12]
 800a844:	e75e      	b.n	800a704 <arm_cmplx_mag_f32+0x84>
 800a846:	f845 8c10 	str.w	r8, [r5, #-16]
 800a84a:	e741      	b.n	800a6d0 <arm_cmplx_mag_f32+0x50>
 800a84c:	608b      	str	r3, [r1, #8]
 800a84e:	e7ec      	b.n	800a82a <arm_cmplx_mag_f32+0x1aa>
 800a850:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a854:	9001      	str	r0, [sp, #4]
 800a856:	f003 fa3d 	bl	800dcd4 <sqrtf>
 800a85a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a85e:	9801      	ldr	r0, [sp, #4]
 800a860:	e74e      	b.n	800a700 <arm_cmplx_mag_f32+0x80>
 800a862:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a866:	9001      	str	r0, [sp, #4]
 800a868:	f003 fa34 	bl	800dcd4 <sqrtf>
 800a86c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a870:	9801      	ldr	r0, [sp, #4]
 800a872:	e72b      	b.n	800a6cc <arm_cmplx_mag_f32+0x4c>
 800a874:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a878:	9001      	str	r0, [sp, #4]
 800a87a:	f003 fa2b 	bl	800dcd4 <sqrtf>
 800a87e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a882:	9801      	ldr	r0, [sp, #4]
 800a884:	e76f      	b.n	800a766 <arm_cmplx_mag_f32+0xe6>
 800a886:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a88a:	9001      	str	r0, [sp, #4]
 800a88c:	f003 fa22 	bl	800dcd4 <sqrtf>
 800a890:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a894:	9801      	ldr	r0, [sp, #4]
 800a896:	e74d      	b.n	800a734 <arm_cmplx_mag_f32+0xb4>
 800a898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a89c:	9201      	str	r2, [sp, #4]
 800a89e:	f003 fa19 	bl	800dcd4 <sqrtf>
 800a8a2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a8a6:	9903      	ldr	r1, [sp, #12]
 800a8a8:	e7a2      	b.n	800a7f0 <arm_cmplx_mag_f32+0x170>
 800a8aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	f003 fa10 	bl	800dcd4 <sqrtf>
 800a8b4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a8b8:	9903      	ldr	r1, [sp, #12]
 800a8ba:	e77c      	b.n	800a7b6 <arm_cmplx_mag_f32+0x136>
 800a8bc:	9101      	str	r1, [sp, #4]
 800a8be:	f003 fa09 	bl	800dcd4 <sqrtf>
 800a8c2:	9901      	ldr	r1, [sp, #4]
 800a8c4:	e7af      	b.n	800a826 <arm_cmplx_mag_f32+0x1a6>
 800a8c6:	bf00      	nop

0800a8c8 <arm_radix8_butterfly_f32>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	ed2d 8b10 	vpush	{d8-d15}
 800a8d0:	b095      	sub	sp, #84	; 0x54
 800a8d2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	3304      	adds	r3, #4
 800a8da:	ed9f bab9 	vldr	s22, [pc, #740]	; 800abc0 <arm_radix8_butterfly_f32+0x2f8>
 800a8de:	9012      	str	r0, [sp, #72]	; 0x48
 800a8e0:	468b      	mov	fp, r1
 800a8e2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8e4:	4689      	mov	r9, r1
 800a8e6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ec:	960f      	str	r6, [sp, #60]	; 0x3c
 800a8ee:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a8f2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a8f6:	eb03 0508 	add.w	r5, r3, r8
 800a8fa:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a8fe:	eb05 040e 	add.w	r4, r5, lr
 800a902:	0137      	lsls	r7, r6, #4
 800a904:	eba6 030a 	sub.w	r3, r6, sl
 800a908:	eb04 000e 	add.w	r0, r4, lr
 800a90c:	44b2      	add	sl, r6
 800a90e:	1d3a      	adds	r2, r7, #4
 800a910:	9702      	str	r7, [sp, #8]
 800a912:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a916:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a91a:	ebae 0c06 	sub.w	ip, lr, r6
 800a91e:	9703      	str	r7, [sp, #12]
 800a920:	eb03 0708 	add.w	r7, r3, r8
 800a924:	9701      	str	r7, [sp, #4]
 800a926:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a92a:	9706      	str	r7, [sp, #24]
 800a92c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a92e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a932:	f10e 0104 	add.w	r1, lr, #4
 800a936:	4439      	add	r1, r7
 800a938:	443a      	add	r2, r7
 800a93a:	0137      	lsls	r7, r6, #4
 800a93c:	00f6      	lsls	r6, r6, #3
 800a93e:	9704      	str	r7, [sp, #16]
 800a940:	9605      	str	r6, [sp, #20]
 800a942:	9f01      	ldr	r7, [sp, #4]
 800a944:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a946:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a94a:	f04f 0c00 	mov.w	ip, #0
 800a94e:	edd4 6a00 	vldr	s13, [r4]
 800a952:	edd7 1a00 	vldr	s3, [r7]
 800a956:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a95a:	edd5 5a00 	vldr	s11, [r5]
 800a95e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a962:	ed90 6a00 	vldr	s12, [r0]
 800a966:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a96a:	ed93 3a00 	vldr	s6, [r3]
 800a96e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a972:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a976:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a97a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a97e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a982:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a98a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a98e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a992:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a996:	ed85 4a00 	vstr	s8, [r5]
 800a99a:	edd1 6a00 	vldr	s13, [r1]
 800a99e:	ed94 9a01 	vldr	s18, [r4, #4]
 800a9a2:	edd3 2a01 	vldr	s5, [r3, #4]
 800a9a6:	edd7 8a01 	vldr	s17, [r7, #4]
 800a9aa:	edd6 0a00 	vldr	s1, [r6]
 800a9ae:	edd5 3a01 	vldr	s7, [r5, #4]
 800a9b2:	ed90 8a01 	vldr	s16, [r0, #4]
 800a9b6:	ed92 7a00 	vldr	s14, [r2]
 800a9ba:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a9be:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a9c2:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a9c6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a9ca:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a9ce:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a9d2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a9d6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a9da:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a9de:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a9e2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a9e6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a9ea:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a9ee:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a9f2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a9f6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a9fa:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a9fe:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800aa02:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800aa06:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800aa0a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800aa0e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800aa12:	ee33 2a20 	vadd.f32	s4, s6, s1
 800aa16:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800aa1a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800aa1e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800aa22:	ee77 0a01 	vadd.f32	s1, s14, s2
 800aa26:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800aa2a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800aa2e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800aa32:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800aa36:	ee76 3a27 	vadd.f32	s7, s12, s15
 800aa3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa3e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800aa42:	ee33 1a45 	vsub.f32	s2, s6, s10
 800aa46:	ee32 2a40 	vsub.f32	s4, s4, s0
 800aa4a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aa4e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800aa52:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800aa56:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800aa5a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800aa5e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800aa62:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800aa66:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800aa6a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800aa6e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800aa72:	44dc      	add	ip, fp
 800aa74:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800aa78:	45e1      	cmp	r9, ip
 800aa7a:	ed86 8a00 	vstr	s16, [r6]
 800aa7e:	ed85 2a01 	vstr	s4, [r5, #4]
 800aa82:	4456      	add	r6, sl
 800aa84:	ed02 0a01 	vstr	s0, [r2, #-4]
 800aa88:	4455      	add	r5, sl
 800aa8a:	edc0 6a00 	vstr	s13, [r0]
 800aa8e:	ed82 1a00 	vstr	s2, [r2]
 800aa92:	ed80 5a01 	vstr	s10, [r0, #4]
 800aa96:	4452      	add	r2, sl
 800aa98:	ed01 3a01 	vstr	s6, [r1, #-4]
 800aa9c:	4450      	add	r0, sl
 800aa9e:	edc7 2a00 	vstr	s5, [r7]
 800aaa2:	edc4 4a00 	vstr	s9, [r4]
 800aaa6:	ed83 7a00 	vstr	s14, [r3]
 800aaaa:	edc1 5a00 	vstr	s11, [r1]
 800aaae:	edc7 3a01 	vstr	s7, [r7, #4]
 800aab2:	4451      	add	r1, sl
 800aab4:	ed84 6a01 	vstr	s12, [r4, #4]
 800aab8:	4457      	add	r7, sl
 800aaba:	edc3 7a01 	vstr	s15, [r3, #4]
 800aabe:	4454      	add	r4, sl
 800aac0:	4453      	add	r3, sl
 800aac2:	f63f af44 	bhi.w	800a94e <arm_radix8_butterfly_f32+0x86>
 800aac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aac8:	2b07      	cmp	r3, #7
 800aaca:	f240 81b7 	bls.w	800ae3c <arm_radix8_butterfly_f32+0x574>
 800aace:	9b06      	ldr	r3, [sp, #24]
 800aad0:	9903      	ldr	r1, [sp, #12]
 800aad2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aad4:	9e05      	ldr	r6, [sp, #20]
 800aad6:	9a04      	ldr	r2, [sp, #16]
 800aad8:	f103 0c08 	add.w	ip, r3, #8
 800aadc:	9b02      	ldr	r3, [sp, #8]
 800aade:	3108      	adds	r1, #8
 800aae0:	f108 0808 	add.w	r8, r8, #8
 800aae4:	1841      	adds	r1, r0, r1
 800aae6:	3608      	adds	r6, #8
 800aae8:	330c      	adds	r3, #12
 800aaea:	4604      	mov	r4, r0
 800aaec:	4444      	add	r4, r8
 800aaee:	18c3      	adds	r3, r0, r3
 800aaf0:	9109      	str	r1, [sp, #36]	; 0x24
 800aaf2:	1981      	adds	r1, r0, r6
 800aaf4:	f10e 0e08 	add.w	lr, lr, #8
 800aaf8:	3208      	adds	r2, #8
 800aafa:	940b      	str	r4, [sp, #44]	; 0x2c
 800aafc:	9107      	str	r1, [sp, #28]
 800aafe:	4604      	mov	r4, r0
 800ab00:	4601      	mov	r1, r0
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	f100 030c 	add.w	r3, r0, #12
 800ab08:	4474      	add	r4, lr
 800ab0a:	f04f 0801 	mov.w	r8, #1
 800ab0e:	1882      	adds	r2, r0, r2
 800ab10:	4461      	add	r1, ip
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	464b      	mov	r3, r9
 800ab16:	940a      	str	r4, [sp, #40]	; 0x28
 800ab18:	46c1      	mov	r9, r8
 800ab1a:	9208      	str	r2, [sp, #32]
 800ab1c:	46d8      	mov	r8, fp
 800ab1e:	9106      	str	r1, [sp, #24]
 800ab20:	f04f 0e00 	mov.w	lr, #0
 800ab24:	469b      	mov	fp, r3
 800ab26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab2a:	449e      	add	lr, r3
 800ab2c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800ab30:	441a      	add	r2, r3
 800ab32:	920e      	str	r2, [sp, #56]	; 0x38
 800ab34:	441a      	add	r2, r3
 800ab36:	18d4      	adds	r4, r2, r3
 800ab38:	18e5      	adds	r5, r4, r3
 800ab3a:	18ee      	adds	r6, r5, r3
 800ab3c:	18f7      	adds	r7, r6, r3
 800ab3e:	eb07 0c03 	add.w	ip, r7, r3
 800ab42:	920d      	str	r2, [sp, #52]	; 0x34
 800ab44:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800ab48:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800ab4c:	910c      	str	r1, [sp, #48]	; 0x30
 800ab4e:	4419      	add	r1, r3
 800ab50:	9103      	str	r1, [sp, #12]
 800ab52:	4419      	add	r1, r3
 800ab54:	18ca      	adds	r2, r1, r3
 800ab56:	9202      	str	r2, [sp, #8]
 800ab58:	441a      	add	r2, r3
 800ab5a:	18d0      	adds	r0, r2, r3
 800ab5c:	ed92 ea01 	vldr	s28, [r2, #4]
 800ab60:	9a02      	ldr	r2, [sp, #8]
 800ab62:	edd4 7a00 	vldr	s15, [r4]
 800ab66:	edd2 da01 	vldr	s27, [r2, #4]
 800ab6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab6c:	ed91 da01 	vldr	s26, [r1, #4]
 800ab70:	ed92 ca01 	vldr	s24, [r2, #4]
 800ab74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab76:	9903      	ldr	r1, [sp, #12]
 800ab78:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab7c:	edd2 7a00 	vldr	s15, [r2]
 800ab80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab82:	edcd 7a02 	vstr	s15, [sp, #8]
 800ab86:	edd2 7a00 	vldr	s15, [r2]
 800ab8a:	edd0 ea01 	vldr	s29, [r0, #4]
 800ab8e:	edd1 ca01 	vldr	s25, [r1, #4]
 800ab92:	eddc ba00 	vldr	s23, [ip]
 800ab96:	edd7 aa00 	vldr	s21, [r7]
 800ab9a:	ed96 aa00 	vldr	s20, [r6]
 800ab9e:	edd5 9a00 	vldr	s19, [r5]
 800aba2:	edcd 7a01 	vstr	s15, [sp, #4]
 800aba6:	4403      	add	r3, r0
 800aba8:	ed93 fa01 	vldr	s30, [r3, #4]
 800abac:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800abb0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800abb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abbc:	46cc      	mov	ip, r9
 800abbe:	e001      	b.n	800abc4 <arm_radix8_butterfly_f32+0x2fc>
 800abc0:	3f3504f3 	.word	0x3f3504f3
 800abc4:	ed91 6a00 	vldr	s12, [r1]
 800abc8:	ed93 5a00 	vldr	s10, [r3]
 800abcc:	edd0 fa00 	vldr	s31, [r0]
 800abd0:	edd4 7a00 	vldr	s15, [r4]
 800abd4:	ed95 7a00 	vldr	s14, [r5]
 800abd8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800abdc:	ed17 3a01 	vldr	s6, [r7, #-4]
 800abe0:	ed92 2a00 	vldr	s4, [r2]
 800abe4:	ed96 0a00 	vldr	s0, [r6]
 800abe8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800abec:	ee32 1a06 	vadd.f32	s2, s4, s12
 800abf0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800abf4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800abf8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800abfc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ac00:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ac04:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ac08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac0c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800ac10:	edd4 8a01 	vldr	s17, [r4, #4]
 800ac14:	ed92 9a01 	vldr	s18, [r2, #4]
 800ac18:	edd7 0a00 	vldr	s1, [r7]
 800ac1c:	edd1 2a01 	vldr	s5, [r1, #4]
 800ac20:	ed95 7a01 	vldr	s14, [r5, #4]
 800ac24:	ed93 6a01 	vldr	s12, [r3, #4]
 800ac28:	edd0 5a01 	vldr	s11, [r0, #4]
 800ac2c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ac30:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800ac34:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ac38:	ee78 fac7 	vsub.f32	s31, s17, s14
 800ac3c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ac40:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ac44:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ac48:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ac4c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800ac50:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ac54:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ac58:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ac5c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ac60:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ac64:	ee32 1a08 	vadd.f32	s2, s4, s16
 800ac68:	ee72 fa87 	vadd.f32	s31, s5, s14
 800ac6c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800ac70:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ac74:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800ac78:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800ac7c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ac80:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800ac84:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800ac88:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800ac8c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ac90:	ee30 6a46 	vsub.f32	s12, s0, s12
 800ac94:	ee74 0a22 	vadd.f32	s1, s8, s5
 800ac98:	ee36 0a28 	vadd.f32	s0, s12, s17
 800ac9c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800aca0:	ee36 6a68 	vsub.f32	s12, s12, s17
 800aca4:	ee32 4a64 	vsub.f32	s8, s4, s9
 800aca8:	ee73 8a09 	vadd.f32	s17, s6, s18
 800acac:	ee74 4a82 	vadd.f32	s9, s9, s4
 800acb0:	ee33 9a49 	vsub.f32	s18, s6, s18
 800acb4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800acb8:	ee35 3a85 	vadd.f32	s6, s11, s10
 800acbc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800acc0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800acc4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800acc8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800accc:	ee30 7a68 	vsub.f32	s14, s0, s17
 800acd0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800acd4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800acd8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800acdc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800ace0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800ace4:	eddd 1a02 	vldr	s3, [sp, #8]
 800ace8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800acec:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800acf0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800acf4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800acf8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800acfc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800ad00:	ee76 5a49 	vsub.f32	s11, s12, s18
 800ad04:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800ad08:	ee39 6a06 	vadd.f32	s12, s18, s12
 800ad0c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800ad10:	ee21 4a84 	vmul.f32	s8, s3, s8
 800ad14:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800ad18:	ee22 7a07 	vmul.f32	s14, s4, s14
 800ad1c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800ad20:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ad24:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800ad28:	ee31 1a09 	vadd.f32	s2, s2, s18
 800ad2c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800ad30:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800ad34:	ee74 0a60 	vsub.f32	s1, s8, s1
 800ad38:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ad3c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800ad40:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800ad44:	ee72 1a21 	vadd.f32	s3, s4, s3
 800ad48:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800ad4c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800ad50:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800ad54:	ee38 8a04 	vadd.f32	s16, s16, s8
 800ad58:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800ad5c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800ad60:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800ad64:	eddd 5a03 	vldr	s11, [sp, #12]
 800ad68:	edc6 fa00 	vstr	s31, [r6]
 800ad6c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800ad70:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800ad74:	ee30 0a45 	vsub.f32	s0, s0, s10
 800ad78:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800ad7c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800ad80:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800ad84:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800ad88:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800ad8c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800ad90:	ee74 4a89 	vadd.f32	s9, s9, s18
 800ad94:	ee34 3a43 	vsub.f32	s6, s8, s6
 800ad98:	ee78 8a85 	vadd.f32	s17, s17, s10
 800ad9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ada0:	44c4      	add	ip, r8
 800ada2:	45e3      	cmp	fp, ip
 800ada4:	edc3 3a00 	vstr	s7, [r3]
 800ada8:	edc3 6a01 	vstr	s13, [r3, #4]
 800adac:	4456      	add	r6, sl
 800adae:	ed07 1a01 	vstr	s2, [r7, #-4]
 800adb2:	edc7 0a00 	vstr	s1, [r7]
 800adb6:	4453      	add	r3, sl
 800adb8:	ed80 2a00 	vstr	s4, [r0]
 800adbc:	edc0 2a01 	vstr	s5, [r0, #4]
 800adc0:	4457      	add	r7, sl
 800adc2:	edc2 1a00 	vstr	s3, [r2]
 800adc6:	ed82 7a01 	vstr	s14, [r2, #4]
 800adca:	4450      	add	r0, sl
 800adcc:	ed85 8a00 	vstr	s16, [r5]
 800add0:	ed85 0a01 	vstr	s0, [r5, #4]
 800add4:	4452      	add	r2, sl
 800add6:	edc1 4a00 	vstr	s9, [r1]
 800adda:	4455      	add	r5, sl
 800addc:	ed81 3a01 	vstr	s6, [r1, #4]
 800ade0:	edc4 8a00 	vstr	s17, [r4]
 800ade4:	ed84 6a01 	vstr	s12, [r4, #4]
 800ade8:	4451      	add	r1, sl
 800adea:	4454      	add	r4, sl
 800adec:	f63f aeea 	bhi.w	800abc4 <arm_radix8_butterfly_f32+0x2fc>
 800adf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf2:	3308      	adds	r3, #8
 800adf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	3308      	adds	r3, #8
 800adfa:	930a      	str	r3, [sp, #40]	; 0x28
 800adfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfe:	3308      	adds	r3, #8
 800ae00:	9309      	str	r3, [sp, #36]	; 0x24
 800ae02:	9b08      	ldr	r3, [sp, #32]
 800ae04:	3308      	adds	r3, #8
 800ae06:	9308      	str	r3, [sp, #32]
 800ae08:	9b07      	ldr	r3, [sp, #28]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	9b06      	ldr	r3, [sp, #24]
 800ae10:	3308      	adds	r3, #8
 800ae12:	9306      	str	r3, [sp, #24]
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	3308      	adds	r3, #8
 800ae18:	9305      	str	r3, [sp, #20]
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae22:	f109 0901 	add.w	r9, r9, #1
 800ae26:	454b      	cmp	r3, r9
 800ae28:	f47f ae7d 	bne.w	800ab26 <arm_radix8_butterfly_f32+0x25e>
 800ae2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	46d9      	mov	r9, fp
 800ae34:	9310      	str	r3, [sp, #64]	; 0x40
 800ae36:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800ae3a:	e554      	b.n	800a8e6 <arm_radix8_butterfly_f32+0x1e>
 800ae3c:	b015      	add	sp, #84	; 0x54
 800ae3e:	ecbd 8b10 	vpop	{d8-d15}
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	bf00      	nop

0800ae48 <__cvt>:
 800ae48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	ec55 4b10 	vmov	r4, r5, d0
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	460e      	mov	r6, r1
 800ae54:	4619      	mov	r1, r3
 800ae56:	462b      	mov	r3, r5
 800ae58:	bfbb      	ittet	lt
 800ae5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae5e:	461d      	movlt	r5, r3
 800ae60:	2300      	movge	r3, #0
 800ae62:	232d      	movlt	r3, #45	; 0x2d
 800ae64:	700b      	strb	r3, [r1, #0]
 800ae66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae6c:	4691      	mov	r9, r2
 800ae6e:	f023 0820 	bic.w	r8, r3, #32
 800ae72:	bfbc      	itt	lt
 800ae74:	4622      	movlt	r2, r4
 800ae76:	4614      	movlt	r4, r2
 800ae78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae7c:	d005      	beq.n	800ae8a <__cvt+0x42>
 800ae7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae82:	d100      	bne.n	800ae86 <__cvt+0x3e>
 800ae84:	3601      	adds	r6, #1
 800ae86:	2102      	movs	r1, #2
 800ae88:	e000      	b.n	800ae8c <__cvt+0x44>
 800ae8a:	2103      	movs	r1, #3
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	ab02      	add	r3, sp, #8
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	ec45 4b10 	vmov	d0, r4, r5
 800ae98:	4653      	mov	r3, sl
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	f001 f844 	bl	800bf28 <_dtoa_r>
 800aea0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aea4:	4607      	mov	r7, r0
 800aea6:	d102      	bne.n	800aeae <__cvt+0x66>
 800aea8:	f019 0f01 	tst.w	r9, #1
 800aeac:	d022      	beq.n	800aef4 <__cvt+0xac>
 800aeae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeb2:	eb07 0906 	add.w	r9, r7, r6
 800aeb6:	d110      	bne.n	800aeda <__cvt+0x92>
 800aeb8:	783b      	ldrb	r3, [r7, #0]
 800aeba:	2b30      	cmp	r3, #48	; 0x30
 800aebc:	d10a      	bne.n	800aed4 <__cvt+0x8c>
 800aebe:	2200      	movs	r2, #0
 800aec0:	2300      	movs	r3, #0
 800aec2:	4620      	mov	r0, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7f5 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeca:	b918      	cbnz	r0, 800aed4 <__cvt+0x8c>
 800aecc:	f1c6 0601 	rsb	r6, r6, #1
 800aed0:	f8ca 6000 	str.w	r6, [sl]
 800aed4:	f8da 3000 	ldr.w	r3, [sl]
 800aed8:	4499      	add	r9, r3
 800aeda:	2200      	movs	r2, #0
 800aedc:	2300      	movs	r3, #0
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800aee6:	b108      	cbz	r0, 800aeec <__cvt+0xa4>
 800aee8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aeec:	2230      	movs	r2, #48	; 0x30
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	454b      	cmp	r3, r9
 800aef2:	d307      	bcc.n	800af04 <__cvt+0xbc>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aef8:	1bdb      	subs	r3, r3, r7
 800aefa:	4638      	mov	r0, r7
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	b004      	add	sp, #16
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	1c59      	adds	r1, r3, #1
 800af06:	9103      	str	r1, [sp, #12]
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	e7f0      	b.n	800aeee <__cvt+0xa6>

0800af0c <__exponent>:
 800af0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af0e:	4603      	mov	r3, r0
 800af10:	2900      	cmp	r1, #0
 800af12:	bfb8      	it	lt
 800af14:	4249      	neglt	r1, r1
 800af16:	f803 2b02 	strb.w	r2, [r3], #2
 800af1a:	bfb4      	ite	lt
 800af1c:	222d      	movlt	r2, #45	; 0x2d
 800af1e:	222b      	movge	r2, #43	; 0x2b
 800af20:	2909      	cmp	r1, #9
 800af22:	7042      	strb	r2, [r0, #1]
 800af24:	dd2a      	ble.n	800af7c <__exponent+0x70>
 800af26:	f10d 0207 	add.w	r2, sp, #7
 800af2a:	4617      	mov	r7, r2
 800af2c:	260a      	movs	r6, #10
 800af2e:	4694      	mov	ip, r2
 800af30:	fb91 f5f6 	sdiv	r5, r1, r6
 800af34:	fb06 1415 	mls	r4, r6, r5, r1
 800af38:	3430      	adds	r4, #48	; 0x30
 800af3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800af3e:	460c      	mov	r4, r1
 800af40:	2c63      	cmp	r4, #99	; 0x63
 800af42:	f102 32ff 	add.w	r2, r2, #4294967295
 800af46:	4629      	mov	r1, r5
 800af48:	dcf1      	bgt.n	800af2e <__exponent+0x22>
 800af4a:	3130      	adds	r1, #48	; 0x30
 800af4c:	f1ac 0402 	sub.w	r4, ip, #2
 800af50:	f802 1c01 	strb.w	r1, [r2, #-1]
 800af54:	1c41      	adds	r1, r0, #1
 800af56:	4622      	mov	r2, r4
 800af58:	42ba      	cmp	r2, r7
 800af5a:	d30a      	bcc.n	800af72 <__exponent+0x66>
 800af5c:	f10d 0209 	add.w	r2, sp, #9
 800af60:	eba2 020c 	sub.w	r2, r2, ip
 800af64:	42bc      	cmp	r4, r7
 800af66:	bf88      	it	hi
 800af68:	2200      	movhi	r2, #0
 800af6a:	4413      	add	r3, r2
 800af6c:	1a18      	subs	r0, r3, r0
 800af6e:	b003      	add	sp, #12
 800af70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af72:	f812 5b01 	ldrb.w	r5, [r2], #1
 800af76:	f801 5f01 	strb.w	r5, [r1, #1]!
 800af7a:	e7ed      	b.n	800af58 <__exponent+0x4c>
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	3130      	adds	r1, #48	; 0x30
 800af80:	7083      	strb	r3, [r0, #2]
 800af82:	70c1      	strb	r1, [r0, #3]
 800af84:	1d03      	adds	r3, r0, #4
 800af86:	e7f1      	b.n	800af6c <__exponent+0x60>

0800af88 <_printf_float>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	ed2d 8b02 	vpush	{d8}
 800af90:	b08d      	sub	sp, #52	; 0x34
 800af92:	460c      	mov	r4, r1
 800af94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af98:	4616      	mov	r6, r2
 800af9a:	461f      	mov	r7, r3
 800af9c:	4605      	mov	r5, r0
 800af9e:	f000 feb3 	bl	800bd08 <_localeconv_r>
 800afa2:	f8d0 a000 	ldr.w	sl, [r0]
 800afa6:	4650      	mov	r0, sl
 800afa8:	f7f5 f96a 	bl	8000280 <strlen>
 800afac:	2300      	movs	r3, #0
 800afae:	930a      	str	r3, [sp, #40]	; 0x28
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	9305      	str	r3, [sp, #20]
 800afb4:	f8d8 3000 	ldr.w	r3, [r8]
 800afb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afbc:	3307      	adds	r3, #7
 800afbe:	f023 0307 	bic.w	r3, r3, #7
 800afc2:	f103 0208 	add.w	r2, r3, #8
 800afc6:	f8c8 2000 	str.w	r2, [r8]
 800afca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afd2:	9307      	str	r3, [sp, #28]
 800afd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800afd8:	ee08 0a10 	vmov	s16, r0
 800afdc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800afe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afe4:	4b9e      	ldr	r3, [pc, #632]	; (800b260 <_printf_float+0x2d8>)
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	f7f5 fda7 	bl	8000b3c <__aeabi_dcmpun>
 800afee:	bb88      	cbnz	r0, 800b054 <_printf_float+0xcc>
 800aff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aff4:	4b9a      	ldr	r3, [pc, #616]	; (800b260 <_printf_float+0x2d8>)
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	f7f5 fd81 	bl	8000b00 <__aeabi_dcmple>
 800affe:	bb48      	cbnz	r0, 800b054 <_printf_float+0xcc>
 800b000:	2200      	movs	r2, #0
 800b002:	2300      	movs	r3, #0
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 fd70 	bl	8000aec <__aeabi_dcmplt>
 800b00c:	b110      	cbz	r0, 800b014 <_printf_float+0x8c>
 800b00e:	232d      	movs	r3, #45	; 0x2d
 800b010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b014:	4a93      	ldr	r2, [pc, #588]	; (800b264 <_printf_float+0x2dc>)
 800b016:	4b94      	ldr	r3, [pc, #592]	; (800b268 <_printf_float+0x2e0>)
 800b018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b01c:	bf94      	ite	ls
 800b01e:	4690      	movls	r8, r2
 800b020:	4698      	movhi	r8, r3
 800b022:	2303      	movs	r3, #3
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	9b05      	ldr	r3, [sp, #20]
 800b028:	f023 0304 	bic.w	r3, r3, #4
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	9700      	str	r7, [sp, #0]
 800b034:	4633      	mov	r3, r6
 800b036:	aa0b      	add	r2, sp, #44	; 0x2c
 800b038:	4621      	mov	r1, r4
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 f9da 	bl	800b3f4 <_printf_common>
 800b040:	3001      	adds	r0, #1
 800b042:	f040 8090 	bne.w	800b166 <_printf_float+0x1de>
 800b046:	f04f 30ff 	mov.w	r0, #4294967295
 800b04a:	b00d      	add	sp, #52	; 0x34
 800b04c:	ecbd 8b02 	vpop	{d8}
 800b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b054:	4642      	mov	r2, r8
 800b056:	464b      	mov	r3, r9
 800b058:	4640      	mov	r0, r8
 800b05a:	4649      	mov	r1, r9
 800b05c:	f7f5 fd6e 	bl	8000b3c <__aeabi_dcmpun>
 800b060:	b140      	cbz	r0, 800b074 <_printf_float+0xec>
 800b062:	464b      	mov	r3, r9
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfbc      	itt	lt
 800b068:	232d      	movlt	r3, #45	; 0x2d
 800b06a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b06e:	4a7f      	ldr	r2, [pc, #508]	; (800b26c <_printf_float+0x2e4>)
 800b070:	4b7f      	ldr	r3, [pc, #508]	; (800b270 <_printf_float+0x2e8>)
 800b072:	e7d1      	b.n	800b018 <_printf_float+0x90>
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b07a:	9206      	str	r2, [sp, #24]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	d13f      	bne.n	800b100 <_printf_float+0x178>
 800b080:	2306      	movs	r3, #6
 800b082:	6063      	str	r3, [r4, #4]
 800b084:	9b05      	ldr	r3, [sp, #20]
 800b086:	6861      	ldr	r1, [r4, #4]
 800b088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b08c:	2300      	movs	r3, #0
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	ab0a      	add	r3, sp, #40	; 0x28
 800b092:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b096:	ab09      	add	r3, sp, #36	; 0x24
 800b098:	ec49 8b10 	vmov	d0, r8, r9
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	6022      	str	r2, [r4, #0]
 800b0a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f7ff fecf 	bl	800ae48 <__cvt>
 800b0aa:	9b06      	ldr	r3, [sp, #24]
 800b0ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ae:	2b47      	cmp	r3, #71	; 0x47
 800b0b0:	4680      	mov	r8, r0
 800b0b2:	d108      	bne.n	800b0c6 <_printf_float+0x13e>
 800b0b4:	1cc8      	adds	r0, r1, #3
 800b0b6:	db02      	blt.n	800b0be <_printf_float+0x136>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	4299      	cmp	r1, r3
 800b0bc:	dd41      	ble.n	800b142 <_printf_float+0x1ba>
 800b0be:	f1ab 0302 	sub.w	r3, fp, #2
 800b0c2:	fa5f fb83 	uxtb.w	fp, r3
 800b0c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0ca:	d820      	bhi.n	800b10e <_printf_float+0x186>
 800b0cc:	3901      	subs	r1, #1
 800b0ce:	465a      	mov	r2, fp
 800b0d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b0d6:	f7ff ff19 	bl	800af0c <__exponent>
 800b0da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0dc:	1813      	adds	r3, r2, r0
 800b0de:	2a01      	cmp	r2, #1
 800b0e0:	4681      	mov	r9, r0
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	dc02      	bgt.n	800b0ec <_printf_float+0x164>
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	07d2      	lsls	r2, r2, #31
 800b0ea:	d501      	bpl.n	800b0f0 <_printf_float+0x168>
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	6123      	str	r3, [r4, #16]
 800b0f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d09c      	beq.n	800b032 <_printf_float+0xaa>
 800b0f8:	232d      	movs	r3, #45	; 0x2d
 800b0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0fe:	e798      	b.n	800b032 <_printf_float+0xaa>
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	2a47      	cmp	r2, #71	; 0x47
 800b104:	d1be      	bne.n	800b084 <_printf_float+0xfc>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1bc      	bne.n	800b084 <_printf_float+0xfc>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e7b9      	b.n	800b082 <_printf_float+0xfa>
 800b10e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b112:	d118      	bne.n	800b146 <_printf_float+0x1be>
 800b114:	2900      	cmp	r1, #0
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	dd0b      	ble.n	800b132 <_printf_float+0x1aa>
 800b11a:	6121      	str	r1, [r4, #16]
 800b11c:	b913      	cbnz	r3, 800b124 <_printf_float+0x19c>
 800b11e:	6822      	ldr	r2, [r4, #0]
 800b120:	07d0      	lsls	r0, r2, #31
 800b122:	d502      	bpl.n	800b12a <_printf_float+0x1a2>
 800b124:	3301      	adds	r3, #1
 800b126:	440b      	add	r3, r1
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b12c:	f04f 0900 	mov.w	r9, #0
 800b130:	e7de      	b.n	800b0f0 <_printf_float+0x168>
 800b132:	b913      	cbnz	r3, 800b13a <_printf_float+0x1b2>
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	07d2      	lsls	r2, r2, #31
 800b138:	d501      	bpl.n	800b13e <_printf_float+0x1b6>
 800b13a:	3302      	adds	r3, #2
 800b13c:	e7f4      	b.n	800b128 <_printf_float+0x1a0>
 800b13e:	2301      	movs	r3, #1
 800b140:	e7f2      	b.n	800b128 <_printf_float+0x1a0>
 800b142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b148:	4299      	cmp	r1, r3
 800b14a:	db05      	blt.n	800b158 <_printf_float+0x1d0>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	6121      	str	r1, [r4, #16]
 800b150:	07d8      	lsls	r0, r3, #31
 800b152:	d5ea      	bpl.n	800b12a <_printf_float+0x1a2>
 800b154:	1c4b      	adds	r3, r1, #1
 800b156:	e7e7      	b.n	800b128 <_printf_float+0x1a0>
 800b158:	2900      	cmp	r1, #0
 800b15a:	bfd4      	ite	le
 800b15c:	f1c1 0202 	rsble	r2, r1, #2
 800b160:	2201      	movgt	r2, #1
 800b162:	4413      	add	r3, r2
 800b164:	e7e0      	b.n	800b128 <_printf_float+0x1a0>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	055a      	lsls	r2, r3, #21
 800b16a:	d407      	bmi.n	800b17c <_printf_float+0x1f4>
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	4642      	mov	r2, r8
 800b170:	4631      	mov	r1, r6
 800b172:	4628      	mov	r0, r5
 800b174:	47b8      	blx	r7
 800b176:	3001      	adds	r0, #1
 800b178:	d12c      	bne.n	800b1d4 <_printf_float+0x24c>
 800b17a:	e764      	b.n	800b046 <_printf_float+0xbe>
 800b17c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b180:	f240 80e0 	bls.w	800b344 <_printf_float+0x3bc>
 800b184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b188:	2200      	movs	r2, #0
 800b18a:	2300      	movs	r3, #0
 800b18c:	f7f5 fca4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b190:	2800      	cmp	r0, #0
 800b192:	d034      	beq.n	800b1fe <_printf_float+0x276>
 800b194:	4a37      	ldr	r2, [pc, #220]	; (800b274 <_printf_float+0x2ec>)
 800b196:	2301      	movs	r3, #1
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f43f af51 	beq.w	800b046 <_printf_float+0xbe>
 800b1a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	db02      	blt.n	800b1b2 <_printf_float+0x22a>
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	07d8      	lsls	r0, r3, #31
 800b1b0:	d510      	bpl.n	800b1d4 <_printf_float+0x24c>
 800b1b2:	ee18 3a10 	vmov	r3, s16
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	47b8      	blx	r7
 800b1be:	3001      	adds	r0, #1
 800b1c0:	f43f af41 	beq.w	800b046 <_printf_float+0xbe>
 800b1c4:	f04f 0800 	mov.w	r8, #0
 800b1c8:	f104 091a 	add.w	r9, r4, #26
 800b1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	4543      	cmp	r3, r8
 800b1d2:	dc09      	bgt.n	800b1e8 <_printf_float+0x260>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	079b      	lsls	r3, r3, #30
 800b1d8:	f100 8107 	bmi.w	800b3ea <_printf_float+0x462>
 800b1dc:	68e0      	ldr	r0, [r4, #12]
 800b1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e0:	4298      	cmp	r0, r3
 800b1e2:	bfb8      	it	lt
 800b1e4:	4618      	movlt	r0, r3
 800b1e6:	e730      	b.n	800b04a <_printf_float+0xc2>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	464a      	mov	r2, r9
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f af27 	beq.w	800b046 <_printf_float+0xbe>
 800b1f8:	f108 0801 	add.w	r8, r8, #1
 800b1fc:	e7e6      	b.n	800b1cc <_printf_float+0x244>
 800b1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc39      	bgt.n	800b278 <_printf_float+0x2f0>
 800b204:	4a1b      	ldr	r2, [pc, #108]	; (800b274 <_printf_float+0x2ec>)
 800b206:	2301      	movs	r3, #1
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	f43f af19 	beq.w	800b046 <_printf_float+0xbe>
 800b214:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b218:	4313      	orrs	r3, r2
 800b21a:	d102      	bne.n	800b222 <_printf_float+0x29a>
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	07d9      	lsls	r1, r3, #31
 800b220:	d5d8      	bpl.n	800b1d4 <_printf_float+0x24c>
 800b222:	ee18 3a10 	vmov	r3, s16
 800b226:	4652      	mov	r2, sl
 800b228:	4631      	mov	r1, r6
 800b22a:	4628      	mov	r0, r5
 800b22c:	47b8      	blx	r7
 800b22e:	3001      	adds	r0, #1
 800b230:	f43f af09 	beq.w	800b046 <_printf_float+0xbe>
 800b234:	f04f 0900 	mov.w	r9, #0
 800b238:	f104 0a1a 	add.w	sl, r4, #26
 800b23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23e:	425b      	negs	r3, r3
 800b240:	454b      	cmp	r3, r9
 800b242:	dc01      	bgt.n	800b248 <_printf_float+0x2c0>
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	e792      	b.n	800b16e <_printf_float+0x1e6>
 800b248:	2301      	movs	r3, #1
 800b24a:	4652      	mov	r2, sl
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f aef7 	beq.w	800b046 <_printf_float+0xbe>
 800b258:	f109 0901 	add.w	r9, r9, #1
 800b25c:	e7ee      	b.n	800b23c <_printf_float+0x2b4>
 800b25e:	bf00      	nop
 800b260:	7fefffff 	.word	0x7fefffff
 800b264:	08029c78 	.word	0x08029c78
 800b268:	08029c7c 	.word	0x08029c7c
 800b26c:	08029c80 	.word	0x08029c80
 800b270:	08029c84 	.word	0x08029c84
 800b274:	08029c88 	.word	0x08029c88
 800b278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b27a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b27c:	429a      	cmp	r2, r3
 800b27e:	bfa8      	it	ge
 800b280:	461a      	movge	r2, r3
 800b282:	2a00      	cmp	r2, #0
 800b284:	4691      	mov	r9, r2
 800b286:	dc37      	bgt.n	800b2f8 <_printf_float+0x370>
 800b288:	f04f 0b00 	mov.w	fp, #0
 800b28c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b290:	f104 021a 	add.w	r2, r4, #26
 800b294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b296:	9305      	str	r3, [sp, #20]
 800b298:	eba3 0309 	sub.w	r3, r3, r9
 800b29c:	455b      	cmp	r3, fp
 800b29e:	dc33      	bgt.n	800b308 <_printf_float+0x380>
 800b2a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	db3b      	blt.n	800b320 <_printf_float+0x398>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	07da      	lsls	r2, r3, #31
 800b2ac:	d438      	bmi.n	800b320 <_printf_float+0x398>
 800b2ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2b2:	eba2 0903 	sub.w	r9, r2, r3
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	1ad2      	subs	r2, r2, r3
 800b2ba:	4591      	cmp	r9, r2
 800b2bc:	bfa8      	it	ge
 800b2be:	4691      	movge	r9, r2
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	dc35      	bgt.n	800b332 <_printf_float+0x3aa>
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2ce:	f104 0a1a 	add.w	sl, r4, #26
 800b2d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2d6:	1a9b      	subs	r3, r3, r2
 800b2d8:	eba3 0309 	sub.w	r3, r3, r9
 800b2dc:	4543      	cmp	r3, r8
 800b2de:	f77f af79 	ble.w	800b1d4 <_printf_float+0x24c>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b8      	blx	r7
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f43f aeaa 	beq.w	800b046 <_printf_float+0xbe>
 800b2f2:	f108 0801 	add.w	r8, r8, #1
 800b2f6:	e7ec      	b.n	800b2d2 <_printf_float+0x34a>
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	d1c0      	bne.n	800b288 <_printf_float+0x300>
 800b306:	e69e      	b.n	800b046 <_printf_float+0xbe>
 800b308:	2301      	movs	r3, #1
 800b30a:	4631      	mov	r1, r6
 800b30c:	4628      	mov	r0, r5
 800b30e:	9205      	str	r2, [sp, #20]
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f ae97 	beq.w	800b046 <_printf_float+0xbe>
 800b318:	9a05      	ldr	r2, [sp, #20]
 800b31a:	f10b 0b01 	add.w	fp, fp, #1
 800b31e:	e7b9      	b.n	800b294 <_printf_float+0x30c>
 800b320:	ee18 3a10 	vmov	r3, s16
 800b324:	4652      	mov	r2, sl
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	47b8      	blx	r7
 800b32c:	3001      	adds	r0, #1
 800b32e:	d1be      	bne.n	800b2ae <_printf_float+0x326>
 800b330:	e689      	b.n	800b046 <_printf_float+0xbe>
 800b332:	9a05      	ldr	r2, [sp, #20]
 800b334:	464b      	mov	r3, r9
 800b336:	4442      	add	r2, r8
 800b338:	4631      	mov	r1, r6
 800b33a:	4628      	mov	r0, r5
 800b33c:	47b8      	blx	r7
 800b33e:	3001      	adds	r0, #1
 800b340:	d1c1      	bne.n	800b2c6 <_printf_float+0x33e>
 800b342:	e680      	b.n	800b046 <_printf_float+0xbe>
 800b344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b346:	2a01      	cmp	r2, #1
 800b348:	dc01      	bgt.n	800b34e <_printf_float+0x3c6>
 800b34a:	07db      	lsls	r3, r3, #31
 800b34c:	d53a      	bpl.n	800b3c4 <_printf_float+0x43c>
 800b34e:	2301      	movs	r3, #1
 800b350:	4642      	mov	r2, r8
 800b352:	4631      	mov	r1, r6
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	f43f ae74 	beq.w	800b046 <_printf_float+0xbe>
 800b35e:	ee18 3a10 	vmov	r3, s16
 800b362:	4652      	mov	r2, sl
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f ae6b 	beq.w	800b046 <_printf_float+0xbe>
 800b370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b374:	2200      	movs	r2, #0
 800b376:	2300      	movs	r3, #0
 800b378:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b37c:	f7f5 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 800b380:	b9d8      	cbnz	r0, 800b3ba <_printf_float+0x432>
 800b382:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b386:	f108 0201 	add.w	r2, r8, #1
 800b38a:	4631      	mov	r1, r6
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b8      	blx	r7
 800b390:	3001      	adds	r0, #1
 800b392:	d10e      	bne.n	800b3b2 <_printf_float+0x42a>
 800b394:	e657      	b.n	800b046 <_printf_float+0xbe>
 800b396:	2301      	movs	r3, #1
 800b398:	4652      	mov	r2, sl
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f43f ae50 	beq.w	800b046 <_printf_float+0xbe>
 800b3a6:	f108 0801 	add.w	r8, r8, #1
 800b3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4543      	cmp	r3, r8
 800b3b0:	dcf1      	bgt.n	800b396 <_printf_float+0x40e>
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3b8:	e6da      	b.n	800b170 <_printf_float+0x1e8>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	f104 0a1a 	add.w	sl, r4, #26
 800b3c2:	e7f2      	b.n	800b3aa <_printf_float+0x422>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	4642      	mov	r2, r8
 800b3c8:	e7df      	b.n	800b38a <_printf_float+0x402>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f ae36 	beq.w	800b046 <_printf_float+0xbe>
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	68e3      	ldr	r3, [r4, #12]
 800b3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3e2:	1a5b      	subs	r3, r3, r1
 800b3e4:	4543      	cmp	r3, r8
 800b3e6:	dcf0      	bgt.n	800b3ca <_printf_float+0x442>
 800b3e8:	e6f8      	b.n	800b1dc <_printf_float+0x254>
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	f104 0919 	add.w	r9, r4, #25
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x456>

0800b3f4 <_printf_common>:
 800b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	4699      	mov	r9, r3
 800b3fc:	688a      	ldr	r2, [r1, #8]
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b404:	4293      	cmp	r3, r2
 800b406:	bfb8      	it	lt
 800b408:	4613      	movlt	r3, r2
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b410:	4607      	mov	r7, r0
 800b412:	460c      	mov	r4, r1
 800b414:	b10a      	cbz	r2, 800b41a <_printf_common+0x26>
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	0699      	lsls	r1, r3, #26
 800b41e:	bf42      	ittt	mi
 800b420:	6833      	ldrmi	r3, [r6, #0]
 800b422:	3302      	addmi	r3, #2
 800b424:	6033      	strmi	r3, [r6, #0]
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	f015 0506 	ands.w	r5, r5, #6
 800b42c:	d106      	bne.n	800b43c <_printf_common+0x48>
 800b42e:	f104 0a19 	add.w	sl, r4, #25
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc26      	bgt.n	800b48a <_printf_common+0x96>
 800b43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b440:	1e13      	subs	r3, r2, #0
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	bf18      	it	ne
 800b446:	2301      	movne	r3, #1
 800b448:	0692      	lsls	r2, r2, #26
 800b44a:	d42b      	bmi.n	800b4a4 <_printf_common+0xb0>
 800b44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b450:	4649      	mov	r1, r9
 800b452:	4638      	mov	r0, r7
 800b454:	47c0      	blx	r8
 800b456:	3001      	adds	r0, #1
 800b458:	d01e      	beq.n	800b498 <_printf_common+0xa4>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	f003 0306 	and.w	r3, r3, #6
 800b462:	2b04      	cmp	r3, #4
 800b464:	bf02      	ittt	eq
 800b466:	68e5      	ldreq	r5, [r4, #12]
 800b468:	6833      	ldreq	r3, [r6, #0]
 800b46a:	1aed      	subeq	r5, r5, r3
 800b46c:	68a3      	ldr	r3, [r4, #8]
 800b46e:	bf0c      	ite	eq
 800b470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b474:	2500      	movne	r5, #0
 800b476:	4293      	cmp	r3, r2
 800b478:	bfc4      	itt	gt
 800b47a:	1a9b      	subgt	r3, r3, r2
 800b47c:	18ed      	addgt	r5, r5, r3
 800b47e:	2600      	movs	r6, #0
 800b480:	341a      	adds	r4, #26
 800b482:	42b5      	cmp	r5, r6
 800b484:	d11a      	bne.n	800b4bc <_printf_common+0xc8>
 800b486:	2000      	movs	r0, #0
 800b488:	e008      	b.n	800b49c <_printf_common+0xa8>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4652      	mov	r2, sl
 800b48e:	4649      	mov	r1, r9
 800b490:	4638      	mov	r0, r7
 800b492:	47c0      	blx	r8
 800b494:	3001      	adds	r0, #1
 800b496:	d103      	bne.n	800b4a0 <_printf_common+0xac>
 800b498:	f04f 30ff 	mov.w	r0, #4294967295
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	e7c6      	b.n	800b432 <_printf_common+0x3e>
 800b4a4:	18e1      	adds	r1, r4, r3
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	2030      	movs	r0, #48	; 0x30
 800b4aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ae:	4422      	add	r2, r4
 800b4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	e7c7      	b.n	800b44c <_printf_common+0x58>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	47c0      	blx	r8
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d0e6      	beq.n	800b498 <_printf_common+0xa4>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7d9      	b.n	800b482 <_printf_common+0x8e>
	...

0800b4d0 <_printf_i>:
 800b4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	7e0f      	ldrb	r7, [r1, #24]
 800b4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4d8:	2f78      	cmp	r7, #120	; 0x78
 800b4da:	4691      	mov	r9, r2
 800b4dc:	4680      	mov	r8, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4e6:	d807      	bhi.n	800b4f8 <_printf_i+0x28>
 800b4e8:	2f62      	cmp	r7, #98	; 0x62
 800b4ea:	d80a      	bhi.n	800b502 <_printf_i+0x32>
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	f000 80d4 	beq.w	800b69a <_printf_i+0x1ca>
 800b4f2:	2f58      	cmp	r7, #88	; 0x58
 800b4f4:	f000 80c0 	beq.w	800b678 <_printf_i+0x1a8>
 800b4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b500:	e03a      	b.n	800b578 <_printf_i+0xa8>
 800b502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b506:	2b15      	cmp	r3, #21
 800b508:	d8f6      	bhi.n	800b4f8 <_printf_i+0x28>
 800b50a:	a101      	add	r1, pc, #4	; (adr r1, 800b510 <_printf_i+0x40>)
 800b50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b57d 	.word	0x0800b57d
 800b518:	0800b4f9 	.word	0x0800b4f9
 800b51c:	0800b4f9 	.word	0x0800b4f9
 800b520:	0800b4f9 	.word	0x0800b4f9
 800b524:	0800b4f9 	.word	0x0800b4f9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4f9 	.word	0x0800b4f9
 800b530:	0800b4f9 	.word	0x0800b4f9
 800b534:	0800b4f9 	.word	0x0800b4f9
 800b538:	0800b4f9 	.word	0x0800b4f9
 800b53c:	0800b681 	.word	0x0800b681
 800b540:	0800b5a9 	.word	0x0800b5a9
 800b544:	0800b63b 	.word	0x0800b63b
 800b548:	0800b4f9 	.word	0x0800b4f9
 800b54c:	0800b4f9 	.word	0x0800b4f9
 800b550:	0800b6a3 	.word	0x0800b6a3
 800b554:	0800b4f9 	.word	0x0800b4f9
 800b558:	0800b5a9 	.word	0x0800b5a9
 800b55c:	0800b4f9 	.word	0x0800b4f9
 800b560:	0800b4f9 	.word	0x0800b4f9
 800b564:	0800b643 	.word	0x0800b643
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b578:	2301      	movs	r3, #1
 800b57a:	e09f      	b.n	800b6bc <_printf_i+0x1ec>
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	682b      	ldr	r3, [r5, #0]
 800b580:	0607      	lsls	r7, r0, #24
 800b582:	f103 0104 	add.w	r1, r3, #4
 800b586:	6029      	str	r1, [r5, #0]
 800b588:	d501      	bpl.n	800b58e <_printf_i+0xbe>
 800b58a:	681e      	ldr	r6, [r3, #0]
 800b58c:	e003      	b.n	800b596 <_printf_i+0xc6>
 800b58e:	0646      	lsls	r6, r0, #25
 800b590:	d5fb      	bpl.n	800b58a <_printf_i+0xba>
 800b592:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b596:	2e00      	cmp	r6, #0
 800b598:	da03      	bge.n	800b5a2 <_printf_i+0xd2>
 800b59a:	232d      	movs	r3, #45	; 0x2d
 800b59c:	4276      	negs	r6, r6
 800b59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a2:	485a      	ldr	r0, [pc, #360]	; (800b70c <_printf_i+0x23c>)
 800b5a4:	230a      	movs	r3, #10
 800b5a6:	e012      	b.n	800b5ce <_printf_i+0xfe>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	6820      	ldr	r0, [r4, #0]
 800b5ac:	1d19      	adds	r1, r3, #4
 800b5ae:	6029      	str	r1, [r5, #0]
 800b5b0:	0605      	lsls	r5, r0, #24
 800b5b2:	d501      	bpl.n	800b5b8 <_printf_i+0xe8>
 800b5b4:	681e      	ldr	r6, [r3, #0]
 800b5b6:	e002      	b.n	800b5be <_printf_i+0xee>
 800b5b8:	0641      	lsls	r1, r0, #25
 800b5ba:	d5fb      	bpl.n	800b5b4 <_printf_i+0xe4>
 800b5bc:	881e      	ldrh	r6, [r3, #0]
 800b5be:	4853      	ldr	r0, [pc, #332]	; (800b70c <_printf_i+0x23c>)
 800b5c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2308      	moveq	r3, #8
 800b5c6:	230a      	movne	r3, #10
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5ce:	6865      	ldr	r5, [r4, #4]
 800b5d0:	60a5      	str	r5, [r4, #8]
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	bfa2      	ittt	ge
 800b5d6:	6821      	ldrge	r1, [r4, #0]
 800b5d8:	f021 0104 	bicge.w	r1, r1, #4
 800b5dc:	6021      	strge	r1, [r4, #0]
 800b5de:	b90e      	cbnz	r6, 800b5e4 <_printf_i+0x114>
 800b5e0:	2d00      	cmp	r5, #0
 800b5e2:	d04b      	beq.n	800b67c <_printf_i+0x1ac>
 800b5e4:	4615      	mov	r5, r2
 800b5e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b5ee:	5dc7      	ldrb	r7, [r0, r7]
 800b5f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5f4:	4637      	mov	r7, r6
 800b5f6:	42bb      	cmp	r3, r7
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	d9f4      	bls.n	800b5e6 <_printf_i+0x116>
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d10b      	bne.n	800b618 <_printf_i+0x148>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	07de      	lsls	r6, r3, #31
 800b604:	d508      	bpl.n	800b618 <_printf_i+0x148>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	6861      	ldr	r1, [r4, #4]
 800b60a:	4299      	cmp	r1, r3
 800b60c:	bfde      	ittt	le
 800b60e:	2330      	movle	r3, #48	; 0x30
 800b610:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b614:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b618:	1b52      	subs	r2, r2, r5
 800b61a:	6122      	str	r2, [r4, #16]
 800b61c:	f8cd a000 	str.w	sl, [sp]
 800b620:	464b      	mov	r3, r9
 800b622:	aa03      	add	r2, sp, #12
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f7ff fee4 	bl	800b3f4 <_printf_common>
 800b62c:	3001      	adds	r0, #1
 800b62e:	d14a      	bne.n	800b6c6 <_printf_i+0x1f6>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	b004      	add	sp, #16
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f043 0320 	orr.w	r3, r3, #32
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	4833      	ldr	r0, [pc, #204]	; (800b710 <_printf_i+0x240>)
 800b644:	2778      	movs	r7, #120	; 0x78
 800b646:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	6829      	ldr	r1, [r5, #0]
 800b64e:	061f      	lsls	r7, r3, #24
 800b650:	f851 6b04 	ldr.w	r6, [r1], #4
 800b654:	d402      	bmi.n	800b65c <_printf_i+0x18c>
 800b656:	065f      	lsls	r7, r3, #25
 800b658:	bf48      	it	mi
 800b65a:	b2b6      	uxthmi	r6, r6
 800b65c:	07df      	lsls	r7, r3, #31
 800b65e:	bf48      	it	mi
 800b660:	f043 0320 	orrmi.w	r3, r3, #32
 800b664:	6029      	str	r1, [r5, #0]
 800b666:	bf48      	it	mi
 800b668:	6023      	strmi	r3, [r4, #0]
 800b66a:	b91e      	cbnz	r6, 800b674 <_printf_i+0x1a4>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	f023 0320 	bic.w	r3, r3, #32
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	2310      	movs	r3, #16
 800b676:	e7a7      	b.n	800b5c8 <_printf_i+0xf8>
 800b678:	4824      	ldr	r0, [pc, #144]	; (800b70c <_printf_i+0x23c>)
 800b67a:	e7e4      	b.n	800b646 <_printf_i+0x176>
 800b67c:	4615      	mov	r5, r2
 800b67e:	e7bd      	b.n	800b5fc <_printf_i+0x12c>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	6826      	ldr	r6, [r4, #0]
 800b684:	6961      	ldr	r1, [r4, #20]
 800b686:	1d18      	adds	r0, r3, #4
 800b688:	6028      	str	r0, [r5, #0]
 800b68a:	0635      	lsls	r5, r6, #24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0x1c4>
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	e002      	b.n	800b69a <_printf_i+0x1ca>
 800b694:	0670      	lsls	r0, r6, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0x1c0>
 800b698:	8019      	strh	r1, [r3, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	4615      	mov	r5, r2
 800b6a0:	e7bc      	b.n	800b61c <_printf_i+0x14c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	6862      	ldr	r2, [r4, #4]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f4 fd96 	bl	80001e0 <memchr>
 800b6b4:	b108      	cbz	r0, 800b6ba <_printf_i+0x1ea>
 800b6b6:	1b40      	subs	r0, r0, r5
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c4:	e7aa      	b.n	800b61c <_printf_i+0x14c>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d0ad      	beq.n	800b630 <_printf_i+0x160>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	079b      	lsls	r3, r3, #30
 800b6d8:	d413      	bmi.n	800b702 <_printf_i+0x232>
 800b6da:	68e0      	ldr	r0, [r4, #12]
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfb8      	it	lt
 800b6e2:	4618      	movlt	r0, r3
 800b6e4:	e7a6      	b.n	800b634 <_printf_i+0x164>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	47d0      	blx	sl
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d09d      	beq.n	800b630 <_printf_i+0x160>
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	68e3      	ldr	r3, [r4, #12]
 800b6f8:	9903      	ldr	r1, [sp, #12]
 800b6fa:	1a5b      	subs	r3, r3, r1
 800b6fc:	42ab      	cmp	r3, r5
 800b6fe:	dcf2      	bgt.n	800b6e6 <_printf_i+0x216>
 800b700:	e7eb      	b.n	800b6da <_printf_i+0x20a>
 800b702:	2500      	movs	r5, #0
 800b704:	f104 0619 	add.w	r6, r4, #25
 800b708:	e7f5      	b.n	800b6f6 <_printf_i+0x226>
 800b70a:	bf00      	nop
 800b70c:	08029c8a 	.word	0x08029c8a
 800b710:	08029c9b 	.word	0x08029c9b

0800b714 <__sflush_r>:
 800b714:	898a      	ldrh	r2, [r1, #12]
 800b716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b71a:	4605      	mov	r5, r0
 800b71c:	0710      	lsls	r0, r2, #28
 800b71e:	460c      	mov	r4, r1
 800b720:	d458      	bmi.n	800b7d4 <__sflush_r+0xc0>
 800b722:	684b      	ldr	r3, [r1, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dc05      	bgt.n	800b734 <__sflush_r+0x20>
 800b728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc02      	bgt.n	800b734 <__sflush_r+0x20>
 800b72e:	2000      	movs	r0, #0
 800b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b736:	2e00      	cmp	r6, #0
 800b738:	d0f9      	beq.n	800b72e <__sflush_r+0x1a>
 800b73a:	2300      	movs	r3, #0
 800b73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b740:	682f      	ldr	r7, [r5, #0]
 800b742:	6a21      	ldr	r1, [r4, #32]
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	d032      	beq.n	800b7ae <__sflush_r+0x9a>
 800b748:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	075a      	lsls	r2, r3, #29
 800b74e:	d505      	bpl.n	800b75c <__sflush_r+0x48>
 800b750:	6863      	ldr	r3, [r4, #4]
 800b752:	1ac0      	subs	r0, r0, r3
 800b754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b756:	b10b      	cbz	r3, 800b75c <__sflush_r+0x48>
 800b758:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b75a:	1ac0      	subs	r0, r0, r3
 800b75c:	2300      	movs	r3, #0
 800b75e:	4602      	mov	r2, r0
 800b760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b762:	6a21      	ldr	r1, [r4, #32]
 800b764:	4628      	mov	r0, r5
 800b766:	47b0      	blx	r6
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	d106      	bne.n	800b77c <__sflush_r+0x68>
 800b76e:	6829      	ldr	r1, [r5, #0]
 800b770:	291d      	cmp	r1, #29
 800b772:	d82b      	bhi.n	800b7cc <__sflush_r+0xb8>
 800b774:	4a29      	ldr	r2, [pc, #164]	; (800b81c <__sflush_r+0x108>)
 800b776:	410a      	asrs	r2, r1
 800b778:	07d6      	lsls	r6, r2, #31
 800b77a:	d427      	bmi.n	800b7cc <__sflush_r+0xb8>
 800b77c:	2200      	movs	r2, #0
 800b77e:	6062      	str	r2, [r4, #4]
 800b780:	04d9      	lsls	r1, r3, #19
 800b782:	6922      	ldr	r2, [r4, #16]
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	d504      	bpl.n	800b792 <__sflush_r+0x7e>
 800b788:	1c42      	adds	r2, r0, #1
 800b78a:	d101      	bne.n	800b790 <__sflush_r+0x7c>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b903      	cbnz	r3, 800b792 <__sflush_r+0x7e>
 800b790:	6560      	str	r0, [r4, #84]	; 0x54
 800b792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b794:	602f      	str	r7, [r5, #0]
 800b796:	2900      	cmp	r1, #0
 800b798:	d0c9      	beq.n	800b72e <__sflush_r+0x1a>
 800b79a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79e:	4299      	cmp	r1, r3
 800b7a0:	d002      	beq.n	800b7a8 <__sflush_r+0x94>
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f001 f9b2 	bl	800cb0c <_free_r>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ac:	e7c0      	b.n	800b730 <__sflush_r+0x1c>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b0      	blx	r6
 800b7b4:	1c41      	adds	r1, r0, #1
 800b7b6:	d1c8      	bne.n	800b74a <__sflush_r+0x36>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0c5      	beq.n	800b74a <__sflush_r+0x36>
 800b7be:	2b1d      	cmp	r3, #29
 800b7c0:	d001      	beq.n	800b7c6 <__sflush_r+0xb2>
 800b7c2:	2b16      	cmp	r3, #22
 800b7c4:	d101      	bne.n	800b7ca <__sflush_r+0xb6>
 800b7c6:	602f      	str	r7, [r5, #0]
 800b7c8:	e7b1      	b.n	800b72e <__sflush_r+0x1a>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	e7ad      	b.n	800b730 <__sflush_r+0x1c>
 800b7d4:	690f      	ldr	r7, [r1, #16]
 800b7d6:	2f00      	cmp	r7, #0
 800b7d8:	d0a9      	beq.n	800b72e <__sflush_r+0x1a>
 800b7da:	0793      	lsls	r3, r2, #30
 800b7dc:	680e      	ldr	r6, [r1, #0]
 800b7de:	bf08      	it	eq
 800b7e0:	694b      	ldreq	r3, [r1, #20]
 800b7e2:	600f      	str	r7, [r1, #0]
 800b7e4:	bf18      	it	ne
 800b7e6:	2300      	movne	r3, #0
 800b7e8:	eba6 0807 	sub.w	r8, r6, r7
 800b7ec:	608b      	str	r3, [r1, #8]
 800b7ee:	f1b8 0f00 	cmp.w	r8, #0
 800b7f2:	dd9c      	ble.n	800b72e <__sflush_r+0x1a>
 800b7f4:	6a21      	ldr	r1, [r4, #32]
 800b7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7f8:	4643      	mov	r3, r8
 800b7fa:	463a      	mov	r2, r7
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b0      	blx	r6
 800b800:	2800      	cmp	r0, #0
 800b802:	dc06      	bgt.n	800b812 <__sflush_r+0xfe>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e78e      	b.n	800b730 <__sflush_r+0x1c>
 800b812:	4407      	add	r7, r0
 800b814:	eba8 0800 	sub.w	r8, r8, r0
 800b818:	e7e9      	b.n	800b7ee <__sflush_r+0xda>
 800b81a:	bf00      	nop
 800b81c:	dfbffffe 	.word	0xdfbffffe

0800b820 <_fflush_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	b913      	cbnz	r3, 800b830 <_fflush_r+0x10>
 800b82a:	2500      	movs	r5, #0
 800b82c:	4628      	mov	r0, r5
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	b118      	cbz	r0, 800b83a <_fflush_r+0x1a>
 800b832:	6a03      	ldr	r3, [r0, #32]
 800b834:	b90b      	cbnz	r3, 800b83a <_fflush_r+0x1a>
 800b836:	f000 f8bb 	bl	800b9b0 <__sinit>
 800b83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0f3      	beq.n	800b82a <_fflush_r+0xa>
 800b842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b844:	07d0      	lsls	r0, r2, #31
 800b846:	d404      	bmi.n	800b852 <_fflush_r+0x32>
 800b848:	0599      	lsls	r1, r3, #22
 800b84a:	d402      	bmi.n	800b852 <_fflush_r+0x32>
 800b84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b84e:	f000 fad0 	bl	800bdf2 <__retarget_lock_acquire_recursive>
 800b852:	4628      	mov	r0, r5
 800b854:	4621      	mov	r1, r4
 800b856:	f7ff ff5d 	bl	800b714 <__sflush_r>
 800b85a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b85c:	07da      	lsls	r2, r3, #31
 800b85e:	4605      	mov	r5, r0
 800b860:	d4e4      	bmi.n	800b82c <_fflush_r+0xc>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	059b      	lsls	r3, r3, #22
 800b866:	d4e1      	bmi.n	800b82c <_fflush_r+0xc>
 800b868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86a:	f000 fac3 	bl	800bdf4 <__retarget_lock_release_recursive>
 800b86e:	e7dd      	b.n	800b82c <_fflush_r+0xc>

0800b870 <fflush>:
 800b870:	4601      	mov	r1, r0
 800b872:	b920      	cbnz	r0, 800b87e <fflush+0xe>
 800b874:	4a04      	ldr	r2, [pc, #16]	; (800b888 <fflush+0x18>)
 800b876:	4905      	ldr	r1, [pc, #20]	; (800b88c <fflush+0x1c>)
 800b878:	4805      	ldr	r0, [pc, #20]	; (800b890 <fflush+0x20>)
 800b87a:	f000 b8b1 	b.w	800b9e0 <_fwalk_sglue>
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <fflush+0x24>)
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	f7ff bfcd 	b.w	800b820 <_fflush_r>
 800b886:	bf00      	nop
 800b888:	20000170 	.word	0x20000170
 800b88c:	0800b821 	.word	0x0800b821
 800b890:	2000017c 	.word	0x2000017c
 800b894:	200001c8 	.word	0x200001c8

0800b898 <std>:
 800b898:	2300      	movs	r3, #0
 800b89a:	b510      	push	{r4, lr}
 800b89c:	4604      	mov	r4, r0
 800b89e:	e9c0 3300 	strd	r3, r3, [r0]
 800b8a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8a6:	6083      	str	r3, [r0, #8]
 800b8a8:	8181      	strh	r1, [r0, #12]
 800b8aa:	6643      	str	r3, [r0, #100]	; 0x64
 800b8ac:	81c2      	strh	r2, [r0, #14]
 800b8ae:	6183      	str	r3, [r0, #24]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	2208      	movs	r2, #8
 800b8b4:	305c      	adds	r0, #92	; 0x5c
 800b8b6:	f000 fa1f 	bl	800bcf8 <memset>
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <std+0x58>)
 800b8bc:	6263      	str	r3, [r4, #36]	; 0x24
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <std+0x5c>)
 800b8c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <std+0x60>)
 800b8c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8c6:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <std+0x64>)
 800b8c8:	6323      	str	r3, [r4, #48]	; 0x30
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <std+0x68>)
 800b8cc:	6224      	str	r4, [r4, #32]
 800b8ce:	429c      	cmp	r4, r3
 800b8d0:	d006      	beq.n	800b8e0 <std+0x48>
 800b8d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b8d6:	4294      	cmp	r4, r2
 800b8d8:	d002      	beq.n	800b8e0 <std+0x48>
 800b8da:	33d0      	adds	r3, #208	; 0xd0
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	d105      	bne.n	800b8ec <std+0x54>
 800b8e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e8:	f000 ba82 	b.w	800bdf0 <__retarget_lock_init_recursive>
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0800bb49 	.word	0x0800bb49
 800b8f4:	0800bb6b 	.word	0x0800bb6b
 800b8f8:	0800bba3 	.word	0x0800bba3
 800b8fc:	0800bbc7 	.word	0x0800bbc7
 800b900:	2000fb38 	.word	0x2000fb38

0800b904 <stdio_exit_handler>:
 800b904:	4a02      	ldr	r2, [pc, #8]	; (800b910 <stdio_exit_handler+0xc>)
 800b906:	4903      	ldr	r1, [pc, #12]	; (800b914 <stdio_exit_handler+0x10>)
 800b908:	4803      	ldr	r0, [pc, #12]	; (800b918 <stdio_exit_handler+0x14>)
 800b90a:	f000 b869 	b.w	800b9e0 <_fwalk_sglue>
 800b90e:	bf00      	nop
 800b910:	20000170 	.word	0x20000170
 800b914:	0800b821 	.word	0x0800b821
 800b918:	2000017c 	.word	0x2000017c

0800b91c <cleanup_stdio>:
 800b91c:	6841      	ldr	r1, [r0, #4]
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <cleanup_stdio+0x34>)
 800b920:	4299      	cmp	r1, r3
 800b922:	b510      	push	{r4, lr}
 800b924:	4604      	mov	r4, r0
 800b926:	d001      	beq.n	800b92c <cleanup_stdio+0x10>
 800b928:	f7ff ff7a 	bl	800b820 <_fflush_r>
 800b92c:	68a1      	ldr	r1, [r4, #8]
 800b92e:	4b09      	ldr	r3, [pc, #36]	; (800b954 <cleanup_stdio+0x38>)
 800b930:	4299      	cmp	r1, r3
 800b932:	d002      	beq.n	800b93a <cleanup_stdio+0x1e>
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff ff73 	bl	800b820 <_fflush_r>
 800b93a:	68e1      	ldr	r1, [r4, #12]
 800b93c:	4b06      	ldr	r3, [pc, #24]	; (800b958 <cleanup_stdio+0x3c>)
 800b93e:	4299      	cmp	r1, r3
 800b940:	d004      	beq.n	800b94c <cleanup_stdio+0x30>
 800b942:	4620      	mov	r0, r4
 800b944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b948:	f7ff bf6a 	b.w	800b820 <_fflush_r>
 800b94c:	bd10      	pop	{r4, pc}
 800b94e:	bf00      	nop
 800b950:	2000fb38 	.word	0x2000fb38
 800b954:	2000fba0 	.word	0x2000fba0
 800b958:	2000fc08 	.word	0x2000fc08

0800b95c <global_stdio_init.part.0>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	4b0b      	ldr	r3, [pc, #44]	; (800b98c <global_stdio_init.part.0+0x30>)
 800b960:	4c0b      	ldr	r4, [pc, #44]	; (800b990 <global_stdio_init.part.0+0x34>)
 800b962:	4a0c      	ldr	r2, [pc, #48]	; (800b994 <global_stdio_init.part.0+0x38>)
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	4620      	mov	r0, r4
 800b968:	2200      	movs	r2, #0
 800b96a:	2104      	movs	r1, #4
 800b96c:	f7ff ff94 	bl	800b898 <std>
 800b970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b974:	2201      	movs	r2, #1
 800b976:	2109      	movs	r1, #9
 800b978:	f7ff ff8e 	bl	800b898 <std>
 800b97c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b980:	2202      	movs	r2, #2
 800b982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b986:	2112      	movs	r1, #18
 800b988:	f7ff bf86 	b.w	800b898 <std>
 800b98c:	2000fc70 	.word	0x2000fc70
 800b990:	2000fb38 	.word	0x2000fb38
 800b994:	0800b905 	.word	0x0800b905

0800b998 <__sfp_lock_acquire>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__sfp_lock_acquire+0x8>)
 800b99a:	f000 ba2a 	b.w	800bdf2 <__retarget_lock_acquire_recursive>
 800b99e:	bf00      	nop
 800b9a0:	2000fc79 	.word	0x2000fc79

0800b9a4 <__sfp_lock_release>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	; (800b9ac <__sfp_lock_release+0x8>)
 800b9a6:	f000 ba25 	b.w	800bdf4 <__retarget_lock_release_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	2000fc79 	.word	0x2000fc79

0800b9b0 <__sinit>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	f7ff fff0 	bl	800b998 <__sfp_lock_acquire>
 800b9b8:	6a23      	ldr	r3, [r4, #32]
 800b9ba:	b11b      	cbz	r3, 800b9c4 <__sinit+0x14>
 800b9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c0:	f7ff bff0 	b.w	800b9a4 <__sfp_lock_release>
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <__sinit+0x28>)
 800b9c6:	6223      	str	r3, [r4, #32]
 800b9c8:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <__sinit+0x2c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1f5      	bne.n	800b9bc <__sinit+0xc>
 800b9d0:	f7ff ffc4 	bl	800b95c <global_stdio_init.part.0>
 800b9d4:	e7f2      	b.n	800b9bc <__sinit+0xc>
 800b9d6:	bf00      	nop
 800b9d8:	0800b91d 	.word	0x0800b91d
 800b9dc:	2000fc70 	.word	0x2000fc70

0800b9e0 <_fwalk_sglue>:
 800b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	4688      	mov	r8, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b9f4:	d505      	bpl.n	800ba02 <_fwalk_sglue+0x22>
 800b9f6:	6824      	ldr	r4, [r4, #0]
 800b9f8:	2c00      	cmp	r4, #0
 800b9fa:	d1f7      	bne.n	800b9ec <_fwalk_sglue+0xc>
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	89ab      	ldrh	r3, [r5, #12]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d907      	bls.n	800ba18 <_fwalk_sglue+0x38>
 800ba08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	d003      	beq.n	800ba18 <_fwalk_sglue+0x38>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4638      	mov	r0, r7
 800ba14:	47c0      	blx	r8
 800ba16:	4306      	orrs	r6, r0
 800ba18:	3568      	adds	r5, #104	; 0x68
 800ba1a:	e7e9      	b.n	800b9f0 <_fwalk_sglue+0x10>

0800ba1c <iprintf>:
 800ba1c:	b40f      	push	{r0, r1, r2, r3}
 800ba1e:	b507      	push	{r0, r1, r2, lr}
 800ba20:	4906      	ldr	r1, [pc, #24]	; (800ba3c <iprintf+0x20>)
 800ba22:	ab04      	add	r3, sp, #16
 800ba24:	6808      	ldr	r0, [r1, #0]
 800ba26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2a:	6881      	ldr	r1, [r0, #8]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	f001 fe6b 	bl	800d708 <_vfiprintf_r>
 800ba32:	b003      	add	sp, #12
 800ba34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba38:	b004      	add	sp, #16
 800ba3a:	4770      	bx	lr
 800ba3c:	200001c8 	.word	0x200001c8

0800ba40 <putchar>:
 800ba40:	4b02      	ldr	r3, [pc, #8]	; (800ba4c <putchar+0xc>)
 800ba42:	4601      	mov	r1, r0
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	6882      	ldr	r2, [r0, #8]
 800ba48:	f001 bfda 	b.w	800da00 <_putc_r>
 800ba4c:	200001c8 	.word	0x200001c8

0800ba50 <_puts_r>:
 800ba50:	6a03      	ldr	r3, [r0, #32]
 800ba52:	b570      	push	{r4, r5, r6, lr}
 800ba54:	6884      	ldr	r4, [r0, #8]
 800ba56:	4605      	mov	r5, r0
 800ba58:	460e      	mov	r6, r1
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_puts_r+0x10>
 800ba5c:	f7ff ffa8 	bl	800b9b0 <__sinit>
 800ba60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba62:	07db      	lsls	r3, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_puts_r+0x22>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	0598      	lsls	r0, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_puts_r+0x22>
 800ba6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6e:	f000 f9c0 	bl	800bdf2 <__retarget_lock_acquire_recursive>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	0719      	lsls	r1, r3, #28
 800ba76:	d513      	bpl.n	800baa0 <_puts_r+0x50>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	b18b      	cbz	r3, 800baa0 <_puts_r+0x50>
 800ba7c:	3e01      	subs	r6, #1
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba84:	3b01      	subs	r3, #1
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	b9e9      	cbnz	r1, 800bac6 <_puts_r+0x76>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da2e      	bge.n	800baec <_puts_r+0x9c>
 800ba8e:	4622      	mov	r2, r4
 800ba90:	210a      	movs	r1, #10
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f89b 	bl	800bbce <__swbuf_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d007      	beq.n	800baac <_puts_r+0x5c>
 800ba9c:	250a      	movs	r5, #10
 800ba9e:	e007      	b.n	800bab0 <_puts_r+0x60>
 800baa0:	4621      	mov	r1, r4
 800baa2:	4628      	mov	r0, r5
 800baa4:	f000 f8d0 	bl	800bc48 <__swsetup_r>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d0e7      	beq.n	800ba7c <_puts_r+0x2c>
 800baac:	f04f 35ff 	mov.w	r5, #4294967295
 800bab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bab2:	07da      	lsls	r2, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_puts_r+0x72>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	059b      	lsls	r3, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_puts_r+0x72>
 800babc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800babe:	f000 f999 	bl	800bdf4 <__retarget_lock_release_recursive>
 800bac2:	4628      	mov	r0, r5
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da04      	bge.n	800bad4 <_puts_r+0x84>
 800baca:	69a2      	ldr	r2, [r4, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	dc06      	bgt.n	800bade <_puts_r+0x8e>
 800bad0:	290a      	cmp	r1, #10
 800bad2:	d004      	beq.n	800bade <_puts_r+0x8e>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	6022      	str	r2, [r4, #0]
 800bada:	7019      	strb	r1, [r3, #0]
 800badc:	e7cf      	b.n	800ba7e <_puts_r+0x2e>
 800bade:	4622      	mov	r2, r4
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 f874 	bl	800bbce <__swbuf_r>
 800bae6:	3001      	adds	r0, #1
 800bae8:	d1c9      	bne.n	800ba7e <_puts_r+0x2e>
 800baea:	e7df      	b.n	800baac <_puts_r+0x5c>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	250a      	movs	r5, #10
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	6022      	str	r2, [r4, #0]
 800baf4:	701d      	strb	r5, [r3, #0]
 800baf6:	e7db      	b.n	800bab0 <_puts_r+0x60>

0800baf8 <puts>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <puts+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f7ff bfa7 	b.w	800ba50 <_puts_r>
 800bb02:	bf00      	nop
 800bb04:	200001c8 	.word	0x200001c8

0800bb08 <siprintf>:
 800bb08:	b40e      	push	{r1, r2, r3}
 800bb0a:	b500      	push	{lr}
 800bb0c:	b09c      	sub	sp, #112	; 0x70
 800bb0e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb10:	9002      	str	r0, [sp, #8]
 800bb12:	9006      	str	r0, [sp, #24]
 800bb14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb18:	4809      	ldr	r0, [pc, #36]	; (800bb40 <siprintf+0x38>)
 800bb1a:	9107      	str	r1, [sp, #28]
 800bb1c:	9104      	str	r1, [sp, #16]
 800bb1e:	4909      	ldr	r1, [pc, #36]	; (800bb44 <siprintf+0x3c>)
 800bb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb24:	9105      	str	r1, [sp, #20]
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	a902      	add	r1, sp, #8
 800bb2c:	f001 fcc4 	bl	800d4b8 <_svfiprintf_r>
 800bb30:	9b02      	ldr	r3, [sp, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	b01c      	add	sp, #112	; 0x70
 800bb38:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb3c:	b003      	add	sp, #12
 800bb3e:	4770      	bx	lr
 800bb40:	200001c8 	.word	0x200001c8
 800bb44:	ffff0208 	.word	0xffff0208

0800bb48 <__sread>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb50:	f000 f900 	bl	800bd54 <_read_r>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	bfab      	itete	ge
 800bb58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb5c:	181b      	addge	r3, r3, r0
 800bb5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb62:	bfac      	ite	ge
 800bb64:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb66:	81a3      	strhlt	r3, [r4, #12]
 800bb68:	bd10      	pop	{r4, pc}

0800bb6a <__swrite>:
 800bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6e:	461f      	mov	r7, r3
 800bb70:	898b      	ldrh	r3, [r1, #12]
 800bb72:	05db      	lsls	r3, r3, #23
 800bb74:	4605      	mov	r5, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	4616      	mov	r6, r2
 800bb7a:	d505      	bpl.n	800bb88 <__swrite+0x1e>
 800bb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb80:	2302      	movs	r3, #2
 800bb82:	2200      	movs	r2, #0
 800bb84:	f000 f8d4 	bl	800bd30 <_lseek_r>
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb92:	81a3      	strh	r3, [r4, #12]
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	4628      	mov	r0, r5
 800bb9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9e:	f000 b8eb 	b.w	800bd78 <_write_r>

0800bba2 <__sseek>:
 800bba2:	b510      	push	{r4, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbaa:	f000 f8c1 	bl	800bd30 <_lseek_r>
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	bf15      	itete	ne
 800bbb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbbe:	81a3      	strheq	r3, [r4, #12]
 800bbc0:	bf18      	it	ne
 800bbc2:	81a3      	strhne	r3, [r4, #12]
 800bbc4:	bd10      	pop	{r4, pc}

0800bbc6 <__sclose>:
 800bbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbca:	f000 b8a1 	b.w	800bd10 <_close_r>

0800bbce <__swbuf_r>:
 800bbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	b118      	cbz	r0, 800bbe0 <__swbuf_r+0x12>
 800bbd8:	6a03      	ldr	r3, [r0, #32]
 800bbda:	b90b      	cbnz	r3, 800bbe0 <__swbuf_r+0x12>
 800bbdc:	f7ff fee8 	bl	800b9b0 <__sinit>
 800bbe0:	69a3      	ldr	r3, [r4, #24]
 800bbe2:	60a3      	str	r3, [r4, #8]
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	071a      	lsls	r2, r3, #28
 800bbe8:	d525      	bpl.n	800bc36 <__swbuf_r+0x68>
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	b31b      	cbz	r3, 800bc36 <__swbuf_r+0x68>
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	6922      	ldr	r2, [r4, #16]
 800bbf2:	1a98      	subs	r0, r3, r2
 800bbf4:	6963      	ldr	r3, [r4, #20]
 800bbf6:	b2f6      	uxtb	r6, r6
 800bbf8:	4283      	cmp	r3, r0
 800bbfa:	4637      	mov	r7, r6
 800bbfc:	dc04      	bgt.n	800bc08 <__swbuf_r+0x3a>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f7ff fe0d 	bl	800b820 <_fflush_r>
 800bc06:	b9e0      	cbnz	r0, 800bc42 <__swbuf_r+0x74>
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	60a3      	str	r3, [r4, #8]
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	1c5a      	adds	r2, r3, #1
 800bc12:	6022      	str	r2, [r4, #0]
 800bc14:	701e      	strb	r6, [r3, #0]
 800bc16:	6962      	ldr	r2, [r4, #20]
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d004      	beq.n	800bc28 <__swbuf_r+0x5a>
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	07db      	lsls	r3, r3, #31
 800bc22:	d506      	bpl.n	800bc32 <__swbuf_r+0x64>
 800bc24:	2e0a      	cmp	r6, #10
 800bc26:	d104      	bne.n	800bc32 <__swbuf_r+0x64>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f7ff fdf8 	bl	800b820 <_fflush_r>
 800bc30:	b938      	cbnz	r0, 800bc42 <__swbuf_r+0x74>
 800bc32:	4638      	mov	r0, r7
 800bc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc36:	4621      	mov	r1, r4
 800bc38:	4628      	mov	r0, r5
 800bc3a:	f000 f805 	bl	800bc48 <__swsetup_r>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d0d5      	beq.n	800bbee <__swbuf_r+0x20>
 800bc42:	f04f 37ff 	mov.w	r7, #4294967295
 800bc46:	e7f4      	b.n	800bc32 <__swbuf_r+0x64>

0800bc48 <__swsetup_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	; (800bcf4 <__swsetup_r+0xac>)
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	6818      	ldr	r0, [r3, #0]
 800bc50:	460c      	mov	r4, r1
 800bc52:	b118      	cbz	r0, 800bc5c <__swsetup_r+0x14>
 800bc54:	6a03      	ldr	r3, [r0, #32]
 800bc56:	b90b      	cbnz	r3, 800bc5c <__swsetup_r+0x14>
 800bc58:	f7ff feaa 	bl	800b9b0 <__sinit>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc62:	0718      	lsls	r0, r3, #28
 800bc64:	d422      	bmi.n	800bcac <__swsetup_r+0x64>
 800bc66:	06d9      	lsls	r1, r3, #27
 800bc68:	d407      	bmi.n	800bc7a <__swsetup_r+0x32>
 800bc6a:	2309      	movs	r3, #9
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	e034      	b.n	800bce4 <__swsetup_r+0x9c>
 800bc7a:	0758      	lsls	r0, r3, #29
 800bc7c:	d512      	bpl.n	800bca4 <__swsetup_r+0x5c>
 800bc7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc80:	b141      	cbz	r1, 800bc94 <__swsetup_r+0x4c>
 800bc82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc86:	4299      	cmp	r1, r3
 800bc88:	d002      	beq.n	800bc90 <__swsetup_r+0x48>
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 ff3e 	bl	800cb0c <_free_r>
 800bc90:	2300      	movs	r3, #0
 800bc92:	6363      	str	r3, [r4, #52]	; 0x34
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	6063      	str	r3, [r4, #4]
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	f043 0308 	orr.w	r3, r3, #8
 800bcaa:	81a3      	strh	r3, [r4, #12]
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	b94b      	cbnz	r3, 800bcc4 <__swsetup_r+0x7c>
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcba:	d003      	beq.n	800bcc4 <__swsetup_r+0x7c>
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f001 fe62 	bl	800d988 <__smakebuf_r>
 800bcc4:	89a0      	ldrh	r0, [r4, #12]
 800bcc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcca:	f010 0301 	ands.w	r3, r0, #1
 800bcce:	d00a      	beq.n	800bce6 <__swsetup_r+0x9e>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60a3      	str	r3, [r4, #8]
 800bcd4:	6963      	ldr	r3, [r4, #20]
 800bcd6:	425b      	negs	r3, r3
 800bcd8:	61a3      	str	r3, [r4, #24]
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	b943      	cbnz	r3, 800bcf0 <__swsetup_r+0xa8>
 800bcde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bce2:	d1c4      	bne.n	800bc6e <__swsetup_r+0x26>
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	0781      	lsls	r1, r0, #30
 800bce8:	bf58      	it	pl
 800bcea:	6963      	ldrpl	r3, [r4, #20]
 800bcec:	60a3      	str	r3, [r4, #8]
 800bcee:	e7f4      	b.n	800bcda <__swsetup_r+0x92>
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e7f7      	b.n	800bce4 <__swsetup_r+0x9c>
 800bcf4:	200001c8 	.word	0x200001c8

0800bcf8 <memset>:
 800bcf8:	4402      	add	r2, r0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d100      	bne.n	800bd02 <memset+0xa>
 800bd00:	4770      	bx	lr
 800bd02:	f803 1b01 	strb.w	r1, [r3], #1
 800bd06:	e7f9      	b.n	800bcfc <memset+0x4>

0800bd08 <_localeconv_r>:
 800bd08:	4800      	ldr	r0, [pc, #0]	; (800bd0c <_localeconv_r+0x4>)
 800bd0a:	4770      	bx	lr
 800bd0c:	200002bc 	.word	0x200002bc

0800bd10 <_close_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	; (800bd2c <_close_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f6 fbc8 	bl	80024b0 <_close>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_close_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_close_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	2000fc74 	.word	0x2000fc74

0800bd30 <_lseek_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	; (800bd50 <_lseek_r+0x20>)
 800bd34:	4604      	mov	r4, r0
 800bd36:	4608      	mov	r0, r1
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	602a      	str	r2, [r5, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f7f6 fbc0 	bl	80024c4 <_lseek>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_lseek_r+0x1e>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_lseek_r+0x1e>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	2000fc74 	.word	0x2000fc74

0800bd54 <_read_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	; (800bd74 <_read_r+0x20>)
 800bd58:	4604      	mov	r4, r0
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	2200      	movs	r2, #0
 800bd60:	602a      	str	r2, [r5, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7f6 fb8a 	bl	800247c <_read>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_read_r+0x1e>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_read_r+0x1e>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	2000fc74 	.word	0x2000fc74

0800bd78 <_write_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	; (800bd98 <_write_r+0x20>)
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4608      	mov	r0, r1
 800bd80:	4611      	mov	r1, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	602a      	str	r2, [r5, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	f7f6 fb85 	bl	8002496 <_write>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d102      	bne.n	800bd96 <_write_r+0x1e>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	b103      	cbz	r3, 800bd96 <_write_r+0x1e>
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	2000fc74 	.word	0x2000fc74

0800bd9c <__errno>:
 800bd9c:	4b01      	ldr	r3, [pc, #4]	; (800bda4 <__errno+0x8>)
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200001c8 	.word	0x200001c8

0800bda8 <__libc_init_array>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	4d0d      	ldr	r5, [pc, #52]	; (800bde0 <__libc_init_array+0x38>)
 800bdac:	4c0d      	ldr	r4, [pc, #52]	; (800bde4 <__libc_init_array+0x3c>)
 800bdae:	1b64      	subs	r4, r4, r5
 800bdb0:	10a4      	asrs	r4, r4, #2
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	42a6      	cmp	r6, r4
 800bdb6:	d109      	bne.n	800bdcc <__libc_init_array+0x24>
 800bdb8:	4d0b      	ldr	r5, [pc, #44]	; (800bde8 <__libc_init_array+0x40>)
 800bdba:	4c0c      	ldr	r4, [pc, #48]	; (800bdec <__libc_init_array+0x44>)
 800bdbc:	f002 fa1e 	bl	800e1fc <_init>
 800bdc0:	1b64      	subs	r4, r4, r5
 800bdc2:	10a4      	asrs	r4, r4, #2
 800bdc4:	2600      	movs	r6, #0
 800bdc6:	42a6      	cmp	r6, r4
 800bdc8:	d105      	bne.n	800bdd6 <__libc_init_array+0x2e>
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd0:	4798      	blx	r3
 800bdd2:	3601      	adds	r6, #1
 800bdd4:	e7ee      	b.n	800bdb4 <__libc_init_array+0xc>
 800bdd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdda:	4798      	blx	r3
 800bddc:	3601      	adds	r6, #1
 800bdde:	e7f2      	b.n	800bdc6 <__libc_init_array+0x1e>
 800bde0:	0802a068 	.word	0x0802a068
 800bde4:	0802a068 	.word	0x0802a068
 800bde8:	0802a068 	.word	0x0802a068
 800bdec:	0802a06c 	.word	0x0802a06c

0800bdf0 <__retarget_lock_init_recursive>:
 800bdf0:	4770      	bx	lr

0800bdf2 <__retarget_lock_acquire_recursive>:
 800bdf2:	4770      	bx	lr

0800bdf4 <__retarget_lock_release_recursive>:
 800bdf4:	4770      	bx	lr

0800bdf6 <memcpy>:
 800bdf6:	440a      	add	r2, r1
 800bdf8:	4291      	cmp	r1, r2
 800bdfa:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdfe:	d100      	bne.n	800be02 <memcpy+0xc>
 800be00:	4770      	bx	lr
 800be02:	b510      	push	{r4, lr}
 800be04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be0c:	4291      	cmp	r1, r2
 800be0e:	d1f9      	bne.n	800be04 <memcpy+0xe>
 800be10:	bd10      	pop	{r4, pc}

0800be12 <quorem>:
 800be12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be16:	6903      	ldr	r3, [r0, #16]
 800be18:	690c      	ldr	r4, [r1, #16]
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	4607      	mov	r7, r0
 800be1e:	db7e      	blt.n	800bf1e <quorem+0x10c>
 800be20:	3c01      	subs	r4, #1
 800be22:	f101 0814 	add.w	r8, r1, #20
 800be26:	f100 0514 	add.w	r5, r0, #20
 800be2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be38:	3301      	adds	r3, #1
 800be3a:	429a      	cmp	r2, r3
 800be3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be44:	fbb2 f6f3 	udiv	r6, r2, r3
 800be48:	d331      	bcc.n	800beae <quorem+0x9c>
 800be4a:	f04f 0e00 	mov.w	lr, #0
 800be4e:	4640      	mov	r0, r8
 800be50:	46ac      	mov	ip, r5
 800be52:	46f2      	mov	sl, lr
 800be54:	f850 2b04 	ldr.w	r2, [r0], #4
 800be58:	b293      	uxth	r3, r2
 800be5a:	fb06 e303 	mla	r3, r6, r3, lr
 800be5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be62:	0c1a      	lsrs	r2, r3, #16
 800be64:	b29b      	uxth	r3, r3
 800be66:	ebaa 0303 	sub.w	r3, sl, r3
 800be6a:	f8dc a000 	ldr.w	sl, [ip]
 800be6e:	fa13 f38a 	uxtah	r3, r3, sl
 800be72:	fb06 220e 	mla	r2, r6, lr, r2
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	9b00      	ldr	r3, [sp, #0]
 800be7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be7e:	b292      	uxth	r2, r2
 800be80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be88:	f8bd 3000 	ldrh.w	r3, [sp]
 800be8c:	4581      	cmp	r9, r0
 800be8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be92:	f84c 3b04 	str.w	r3, [ip], #4
 800be96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be9a:	d2db      	bcs.n	800be54 <quorem+0x42>
 800be9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bea0:	b92b      	cbnz	r3, 800beae <quorem+0x9c>
 800bea2:	9b01      	ldr	r3, [sp, #4]
 800bea4:	3b04      	subs	r3, #4
 800bea6:	429d      	cmp	r5, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	d32c      	bcc.n	800bf06 <quorem+0xf4>
 800beac:	613c      	str	r4, [r7, #16]
 800beae:	4638      	mov	r0, r7
 800beb0:	f001 f9a8 	bl	800d204 <__mcmp>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	db22      	blt.n	800befe <quorem+0xec>
 800beb8:	3601      	adds	r6, #1
 800beba:	4629      	mov	r1, r5
 800bebc:	2000      	movs	r0, #0
 800bebe:	f858 2b04 	ldr.w	r2, [r8], #4
 800bec2:	f8d1 c000 	ldr.w	ip, [r1]
 800bec6:	b293      	uxth	r3, r2
 800bec8:	1ac3      	subs	r3, r0, r3
 800beca:	0c12      	lsrs	r2, r2, #16
 800becc:	fa13 f38c 	uxtah	r3, r3, ip
 800bed0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bed8:	b29b      	uxth	r3, r3
 800beda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bede:	45c1      	cmp	r9, r8
 800bee0:	f841 3b04 	str.w	r3, [r1], #4
 800bee4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bee8:	d2e9      	bcs.n	800bebe <quorem+0xac>
 800beea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bef2:	b922      	cbnz	r2, 800befe <quorem+0xec>
 800bef4:	3b04      	subs	r3, #4
 800bef6:	429d      	cmp	r5, r3
 800bef8:	461a      	mov	r2, r3
 800befa:	d30a      	bcc.n	800bf12 <quorem+0x100>
 800befc:	613c      	str	r4, [r7, #16]
 800befe:	4630      	mov	r0, r6
 800bf00:	b003      	add	sp, #12
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	6812      	ldr	r2, [r2, #0]
 800bf08:	3b04      	subs	r3, #4
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	d1ce      	bne.n	800beac <quorem+0x9a>
 800bf0e:	3c01      	subs	r4, #1
 800bf10:	e7c9      	b.n	800bea6 <quorem+0x94>
 800bf12:	6812      	ldr	r2, [r2, #0]
 800bf14:	3b04      	subs	r3, #4
 800bf16:	2a00      	cmp	r2, #0
 800bf18:	d1f0      	bne.n	800befc <quorem+0xea>
 800bf1a:	3c01      	subs	r4, #1
 800bf1c:	e7eb      	b.n	800bef6 <quorem+0xe4>
 800bf1e:	2000      	movs	r0, #0
 800bf20:	e7ee      	b.n	800bf00 <quorem+0xee>
 800bf22:	0000      	movs	r0, r0
 800bf24:	0000      	movs	r0, r0
	...

0800bf28 <_dtoa_r>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	ed2d 8b04 	vpush	{d8-d9}
 800bf30:	69c5      	ldr	r5, [r0, #28]
 800bf32:	b093      	sub	sp, #76	; 0x4c
 800bf34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf38:	ec57 6b10 	vmov	r6, r7, d0
 800bf3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf40:	9107      	str	r1, [sp, #28]
 800bf42:	4604      	mov	r4, r0
 800bf44:	920a      	str	r2, [sp, #40]	; 0x28
 800bf46:	930d      	str	r3, [sp, #52]	; 0x34
 800bf48:	b975      	cbnz	r5, 800bf68 <_dtoa_r+0x40>
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f000 fe2a 	bl	800cba4 <malloc>
 800bf50:	4602      	mov	r2, r0
 800bf52:	61e0      	str	r0, [r4, #28]
 800bf54:	b920      	cbnz	r0, 800bf60 <_dtoa_r+0x38>
 800bf56:	4bae      	ldr	r3, [pc, #696]	; (800c210 <_dtoa_r+0x2e8>)
 800bf58:	21ef      	movs	r1, #239	; 0xef
 800bf5a:	48ae      	ldr	r0, [pc, #696]	; (800c214 <_dtoa_r+0x2ec>)
 800bf5c:	f001 fdd0 	bl	800db00 <__assert_func>
 800bf60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf64:	6005      	str	r5, [r0, #0]
 800bf66:	60c5      	str	r5, [r0, #12]
 800bf68:	69e3      	ldr	r3, [r4, #28]
 800bf6a:	6819      	ldr	r1, [r3, #0]
 800bf6c:	b151      	cbz	r1, 800bf84 <_dtoa_r+0x5c>
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	604a      	str	r2, [r1, #4]
 800bf72:	2301      	movs	r3, #1
 800bf74:	4093      	lsls	r3, r2
 800bf76:	608b      	str	r3, [r1, #8]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 ff07 	bl	800cd8c <_Bfree>
 800bf7e:	69e3      	ldr	r3, [r4, #28]
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	1e3b      	subs	r3, r7, #0
 800bf86:	bfbb      	ittet	lt
 800bf88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf8c:	9303      	strlt	r3, [sp, #12]
 800bf8e:	2300      	movge	r3, #0
 800bf90:	2201      	movlt	r2, #1
 800bf92:	bfac      	ite	ge
 800bf94:	f8c8 3000 	strge.w	r3, [r8]
 800bf98:	f8c8 2000 	strlt.w	r2, [r8]
 800bf9c:	4b9e      	ldr	r3, [pc, #632]	; (800c218 <_dtoa_r+0x2f0>)
 800bf9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bfa2:	ea33 0308 	bics.w	r3, r3, r8
 800bfa6:	d11b      	bne.n	800bfe0 <_dtoa_r+0xb8>
 800bfa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bfb4:	4333      	orrs	r3, r6
 800bfb6:	f000 8593 	beq.w	800cae0 <_dtoa_r+0xbb8>
 800bfba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfbc:	b963      	cbnz	r3, 800bfd8 <_dtoa_r+0xb0>
 800bfbe:	4b97      	ldr	r3, [pc, #604]	; (800c21c <_dtoa_r+0x2f4>)
 800bfc0:	e027      	b.n	800c012 <_dtoa_r+0xea>
 800bfc2:	4b97      	ldr	r3, [pc, #604]	; (800c220 <_dtoa_r+0x2f8>)
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	9800      	ldr	r0, [sp, #0]
 800bfce:	b013      	add	sp, #76	; 0x4c
 800bfd0:	ecbd 8b04 	vpop	{d8-d9}
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	4b90      	ldr	r3, [pc, #576]	; (800c21c <_dtoa_r+0x2f4>)
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	3303      	adds	r3, #3
 800bfde:	e7f3      	b.n	800bfc8 <_dtoa_r+0xa0>
 800bfe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	ec51 0b17 	vmov	r0, r1, d7
 800bfea:	eeb0 8a47 	vmov.f32	s16, s14
 800bfee:	eef0 8a67 	vmov.f32	s17, s15
 800bff2:	2300      	movs	r3, #0
 800bff4:	f7f4 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 800bff8:	4681      	mov	r9, r0
 800bffa:	b160      	cbz	r0, 800c016 <_dtoa_r+0xee>
 800bffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bffe:	2301      	movs	r3, #1
 800c000:	6013      	str	r3, [r2, #0]
 800c002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c004:	2b00      	cmp	r3, #0
 800c006:	f000 8568 	beq.w	800cada <_dtoa_r+0xbb2>
 800c00a:	4b86      	ldr	r3, [pc, #536]	; (800c224 <_dtoa_r+0x2fc>)
 800c00c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c00e:	6013      	str	r3, [r2, #0]
 800c010:	3b01      	subs	r3, #1
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	e7da      	b.n	800bfcc <_dtoa_r+0xa4>
 800c016:	aa10      	add	r2, sp, #64	; 0x40
 800c018:	a911      	add	r1, sp, #68	; 0x44
 800c01a:	4620      	mov	r0, r4
 800c01c:	eeb0 0a48 	vmov.f32	s0, s16
 800c020:	eef0 0a68 	vmov.f32	s1, s17
 800c024:	f001 f994 	bl	800d350 <__d2b>
 800c028:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c02c:	4682      	mov	sl, r0
 800c02e:	2d00      	cmp	r5, #0
 800c030:	d07f      	beq.n	800c132 <_dtoa_r+0x20a>
 800c032:	ee18 3a90 	vmov	r3, s17
 800c036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c03a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c03e:	ec51 0b18 	vmov	r0, r1, d8
 800c042:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c04a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c04e:	4619      	mov	r1, r3
 800c050:	2200      	movs	r2, #0
 800c052:	4b75      	ldr	r3, [pc, #468]	; (800c228 <_dtoa_r+0x300>)
 800c054:	f7f4 f920 	bl	8000298 <__aeabi_dsub>
 800c058:	a367      	add	r3, pc, #412	; (adr r3, 800c1f8 <_dtoa_r+0x2d0>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f7f4 fad3 	bl	8000608 <__aeabi_dmul>
 800c062:	a367      	add	r3, pc, #412	; (adr r3, 800c200 <_dtoa_r+0x2d8>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 f918 	bl	800029c <__adddf3>
 800c06c:	4606      	mov	r6, r0
 800c06e:	4628      	mov	r0, r5
 800c070:	460f      	mov	r7, r1
 800c072:	f7f4 fa5f 	bl	8000534 <__aeabi_i2d>
 800c076:	a364      	add	r3, pc, #400	; (adr r3, 800c208 <_dtoa_r+0x2e0>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 fac4 	bl	8000608 <__aeabi_dmul>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 f908 	bl	800029c <__adddf3>
 800c08c:	4606      	mov	r6, r0
 800c08e:	460f      	mov	r7, r1
 800c090:	f7f4 fd6a 	bl	8000b68 <__aeabi_d2iz>
 800c094:	2200      	movs	r2, #0
 800c096:	4683      	mov	fp, r0
 800c098:	2300      	movs	r3, #0
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 fd25 	bl	8000aec <__aeabi_dcmplt>
 800c0a2:	b148      	cbz	r0, 800c0b8 <_dtoa_r+0x190>
 800c0a4:	4658      	mov	r0, fp
 800c0a6:	f7f4 fa45 	bl	8000534 <__aeabi_i2d>
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	f7f4 fd13 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0b2:	b908      	cbnz	r0, 800c0b8 <_dtoa_r+0x190>
 800c0b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0b8:	f1bb 0f16 	cmp.w	fp, #22
 800c0bc:	d857      	bhi.n	800c16e <_dtoa_r+0x246>
 800c0be:	4b5b      	ldr	r3, [pc, #364]	; (800c22c <_dtoa_r+0x304>)
 800c0c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	ec51 0b18 	vmov	r0, r1, d8
 800c0cc:	f7f4 fd0e 	bl	8000aec <__aeabi_dcmplt>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d04e      	beq.n	800c172 <_dtoa_r+0x24a>
 800c0d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0d8:	2300      	movs	r3, #0
 800c0da:	930c      	str	r3, [sp, #48]	; 0x30
 800c0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0de:	1b5b      	subs	r3, r3, r5
 800c0e0:	1e5a      	subs	r2, r3, #1
 800c0e2:	bf45      	ittet	mi
 800c0e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c0e8:	9305      	strmi	r3, [sp, #20]
 800c0ea:	2300      	movpl	r3, #0
 800c0ec:	2300      	movmi	r3, #0
 800c0ee:	9206      	str	r2, [sp, #24]
 800c0f0:	bf54      	ite	pl
 800c0f2:	9305      	strpl	r3, [sp, #20]
 800c0f4:	9306      	strmi	r3, [sp, #24]
 800c0f6:	f1bb 0f00 	cmp.w	fp, #0
 800c0fa:	db3c      	blt.n	800c176 <_dtoa_r+0x24e>
 800c0fc:	9b06      	ldr	r3, [sp, #24]
 800c0fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c102:	445b      	add	r3, fp
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	2300      	movs	r3, #0
 800c108:	9308      	str	r3, [sp, #32]
 800c10a:	9b07      	ldr	r3, [sp, #28]
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	d868      	bhi.n	800c1e2 <_dtoa_r+0x2ba>
 800c110:	2b05      	cmp	r3, #5
 800c112:	bfc4      	itt	gt
 800c114:	3b04      	subgt	r3, #4
 800c116:	9307      	strgt	r3, [sp, #28]
 800c118:	9b07      	ldr	r3, [sp, #28]
 800c11a:	f1a3 0302 	sub.w	r3, r3, #2
 800c11e:	bfcc      	ite	gt
 800c120:	2500      	movgt	r5, #0
 800c122:	2501      	movle	r5, #1
 800c124:	2b03      	cmp	r3, #3
 800c126:	f200 8085 	bhi.w	800c234 <_dtoa_r+0x30c>
 800c12a:	e8df f003 	tbb	[pc, r3]
 800c12e:	3b2e      	.short	0x3b2e
 800c130:	5839      	.short	0x5839
 800c132:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c136:	441d      	add	r5, r3
 800c138:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	bfc1      	itttt	gt
 800c140:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c144:	fa08 f803 	lslgt.w	r8, r8, r3
 800c148:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c14c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c150:	bfd6      	itet	le
 800c152:	f1c3 0320 	rsble	r3, r3, #32
 800c156:	ea48 0003 	orrgt.w	r0, r8, r3
 800c15a:	fa06 f003 	lslle.w	r0, r6, r3
 800c15e:	f7f4 f9d9 	bl	8000514 <__aeabi_ui2d>
 800c162:	2201      	movs	r2, #1
 800c164:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c168:	3d01      	subs	r5, #1
 800c16a:	920e      	str	r2, [sp, #56]	; 0x38
 800c16c:	e76f      	b.n	800c04e <_dtoa_r+0x126>
 800c16e:	2301      	movs	r3, #1
 800c170:	e7b3      	b.n	800c0da <_dtoa_r+0x1b2>
 800c172:	900c      	str	r0, [sp, #48]	; 0x30
 800c174:	e7b2      	b.n	800c0dc <_dtoa_r+0x1b4>
 800c176:	9b05      	ldr	r3, [sp, #20]
 800c178:	eba3 030b 	sub.w	r3, r3, fp
 800c17c:	9305      	str	r3, [sp, #20]
 800c17e:	f1cb 0300 	rsb	r3, fp, #0
 800c182:	9308      	str	r3, [sp, #32]
 800c184:	2300      	movs	r3, #0
 800c186:	930b      	str	r3, [sp, #44]	; 0x2c
 800c188:	e7bf      	b.n	800c10a <_dtoa_r+0x1e2>
 800c18a:	2300      	movs	r3, #0
 800c18c:	9309      	str	r3, [sp, #36]	; 0x24
 800c18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c190:	2b00      	cmp	r3, #0
 800c192:	dc52      	bgt.n	800c23a <_dtoa_r+0x312>
 800c194:	2301      	movs	r3, #1
 800c196:	9301      	str	r3, [sp, #4]
 800c198:	9304      	str	r3, [sp, #16]
 800c19a:	461a      	mov	r2, r3
 800c19c:	920a      	str	r2, [sp, #40]	; 0x28
 800c19e:	e00b      	b.n	800c1b8 <_dtoa_r+0x290>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e7f3      	b.n	800c18c <_dtoa_r+0x264>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1aa:	445b      	add	r3, fp
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	bfb8      	it	lt
 800c1b6:	2301      	movlt	r3, #1
 800c1b8:	69e0      	ldr	r0, [r4, #28]
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	2204      	movs	r2, #4
 800c1be:	f102 0614 	add.w	r6, r2, #20
 800c1c2:	429e      	cmp	r6, r3
 800c1c4:	d93d      	bls.n	800c242 <_dtoa_r+0x31a>
 800c1c6:	6041      	str	r1, [r0, #4]
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f000 fd9f 	bl	800cd0c <_Balloc>
 800c1ce:	9000      	str	r0, [sp, #0]
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d139      	bne.n	800c248 <_dtoa_r+0x320>
 800c1d4:	4b16      	ldr	r3, [pc, #88]	; (800c230 <_dtoa_r+0x308>)
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	f240 11af 	movw	r1, #431	; 0x1af
 800c1dc:	e6bd      	b.n	800bf5a <_dtoa_r+0x32>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e7e1      	b.n	800c1a6 <_dtoa_r+0x27e>
 800c1e2:	2501      	movs	r5, #1
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9307      	str	r3, [sp, #28]
 800c1e8:	9509      	str	r5, [sp, #36]	; 0x24
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2312      	movs	r3, #18
 800c1f6:	e7d1      	b.n	800c19c <_dtoa_r+0x274>
 800c1f8:	636f4361 	.word	0x636f4361
 800c1fc:	3fd287a7 	.word	0x3fd287a7
 800c200:	8b60c8b3 	.word	0x8b60c8b3
 800c204:	3fc68a28 	.word	0x3fc68a28
 800c208:	509f79fb 	.word	0x509f79fb
 800c20c:	3fd34413 	.word	0x3fd34413
 800c210:	08029cb9 	.word	0x08029cb9
 800c214:	08029cd0 	.word	0x08029cd0
 800c218:	7ff00000 	.word	0x7ff00000
 800c21c:	08029cb5 	.word	0x08029cb5
 800c220:	08029cac 	.word	0x08029cac
 800c224:	08029c89 	.word	0x08029c89
 800c228:	3ff80000 	.word	0x3ff80000
 800c22c:	08029dc0 	.word	0x08029dc0
 800c230:	08029d28 	.word	0x08029d28
 800c234:	2301      	movs	r3, #1
 800c236:	9309      	str	r3, [sp, #36]	; 0x24
 800c238:	e7d7      	b.n	800c1ea <_dtoa_r+0x2c2>
 800c23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	e7ba      	b.n	800c1b8 <_dtoa_r+0x290>
 800c242:	3101      	adds	r1, #1
 800c244:	0052      	lsls	r2, r2, #1
 800c246:	e7ba      	b.n	800c1be <_dtoa_r+0x296>
 800c248:	69e3      	ldr	r3, [r4, #28]
 800c24a:	9a00      	ldr	r2, [sp, #0]
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	9b04      	ldr	r3, [sp, #16]
 800c250:	2b0e      	cmp	r3, #14
 800c252:	f200 80a8 	bhi.w	800c3a6 <_dtoa_r+0x47e>
 800c256:	2d00      	cmp	r5, #0
 800c258:	f000 80a5 	beq.w	800c3a6 <_dtoa_r+0x47e>
 800c25c:	f1bb 0f00 	cmp.w	fp, #0
 800c260:	dd38      	ble.n	800c2d4 <_dtoa_r+0x3ac>
 800c262:	4bc0      	ldr	r3, [pc, #768]	; (800c564 <_dtoa_r+0x63c>)
 800c264:	f00b 020f 	and.w	r2, fp, #15
 800c268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c26c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c270:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c274:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c278:	d019      	beq.n	800c2ae <_dtoa_r+0x386>
 800c27a:	4bbb      	ldr	r3, [pc, #748]	; (800c568 <_dtoa_r+0x640>)
 800c27c:	ec51 0b18 	vmov	r0, r1, d8
 800c280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c284:	f7f4 faea 	bl	800085c <__aeabi_ddiv>
 800c288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c28c:	f008 080f 	and.w	r8, r8, #15
 800c290:	2503      	movs	r5, #3
 800c292:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c568 <_dtoa_r+0x640>
 800c296:	f1b8 0f00 	cmp.w	r8, #0
 800c29a:	d10a      	bne.n	800c2b2 <_dtoa_r+0x38a>
 800c29c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	463b      	mov	r3, r7
 800c2a4:	f7f4 fada 	bl	800085c <__aeabi_ddiv>
 800c2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ac:	e02b      	b.n	800c306 <_dtoa_r+0x3de>
 800c2ae:	2502      	movs	r5, #2
 800c2b0:	e7ef      	b.n	800c292 <_dtoa_r+0x36a>
 800c2b2:	f018 0f01 	tst.w	r8, #1
 800c2b6:	d008      	beq.n	800c2ca <_dtoa_r+0x3a2>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c2c0:	f7f4 f9a2 	bl	8000608 <__aeabi_dmul>
 800c2c4:	3501      	adds	r5, #1
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2ce:	f109 0908 	add.w	r9, r9, #8
 800c2d2:	e7e0      	b.n	800c296 <_dtoa_r+0x36e>
 800c2d4:	f000 809f 	beq.w	800c416 <_dtoa_r+0x4ee>
 800c2d8:	f1cb 0600 	rsb	r6, fp, #0
 800c2dc:	4ba1      	ldr	r3, [pc, #644]	; (800c564 <_dtoa_r+0x63c>)
 800c2de:	4fa2      	ldr	r7, [pc, #648]	; (800c568 <_dtoa_r+0x640>)
 800c2e0:	f006 020f 	and.w	r2, r6, #15
 800c2e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	ec51 0b18 	vmov	r0, r1, d8
 800c2f0:	f7f4 f98a 	bl	8000608 <__aeabi_dmul>
 800c2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f8:	1136      	asrs	r6, r6, #4
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2502      	movs	r5, #2
 800c2fe:	2e00      	cmp	r6, #0
 800c300:	d17e      	bne.n	800c400 <_dtoa_r+0x4d8>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1d0      	bne.n	800c2a8 <_dtoa_r+0x380>
 800c306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c308:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 8084 	beq.w	800c41a <_dtoa_r+0x4f2>
 800c312:	4b96      	ldr	r3, [pc, #600]	; (800c56c <_dtoa_r+0x644>)
 800c314:	2200      	movs	r2, #0
 800c316:	4640      	mov	r0, r8
 800c318:	4649      	mov	r1, r9
 800c31a:	f7f4 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d07b      	beq.n	800c41a <_dtoa_r+0x4f2>
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d078      	beq.n	800c41a <_dtoa_r+0x4f2>
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dd39      	ble.n	800c3a2 <_dtoa_r+0x47a>
 800c32e:	4b90      	ldr	r3, [pc, #576]	; (800c570 <_dtoa_r+0x648>)
 800c330:	2200      	movs	r2, #0
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f4 f967 	bl	8000608 <__aeabi_dmul>
 800c33a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c33e:	9e01      	ldr	r6, [sp, #4]
 800c340:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c344:	3501      	adds	r5, #1
 800c346:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c34a:	4628      	mov	r0, r5
 800c34c:	f7f4 f8f2 	bl	8000534 <__aeabi_i2d>
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	f7f4 f958 	bl	8000608 <__aeabi_dmul>
 800c358:	4b86      	ldr	r3, [pc, #536]	; (800c574 <_dtoa_r+0x64c>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	f7f3 ff9e 	bl	800029c <__adddf3>
 800c360:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c368:	9303      	str	r3, [sp, #12]
 800c36a:	2e00      	cmp	r6, #0
 800c36c:	d158      	bne.n	800c420 <_dtoa_r+0x4f8>
 800c36e:	4b82      	ldr	r3, [pc, #520]	; (800c578 <_dtoa_r+0x650>)
 800c370:	2200      	movs	r2, #0
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f3 ff8f 	bl	8000298 <__aeabi_dsub>
 800c37a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c37e:	4680      	mov	r8, r0
 800c380:	4689      	mov	r9, r1
 800c382:	f7f4 fbd1 	bl	8000b28 <__aeabi_dcmpgt>
 800c386:	2800      	cmp	r0, #0
 800c388:	f040 8296 	bne.w	800c8b8 <_dtoa_r+0x990>
 800c38c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c390:	4640      	mov	r0, r8
 800c392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 fba8 	bl	8000aec <__aeabi_dcmplt>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f040 8289 	bne.w	800c8b4 <_dtoa_r+0x98c>
 800c3a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f2c0 814e 	blt.w	800c64a <_dtoa_r+0x722>
 800c3ae:	f1bb 0f0e 	cmp.w	fp, #14
 800c3b2:	f300 814a 	bgt.w	800c64a <_dtoa_r+0x722>
 800c3b6:	4b6b      	ldr	r3, [pc, #428]	; (800c564 <_dtoa_r+0x63c>)
 800c3b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f280 80dc 	bge.w	800c580 <_dtoa_r+0x658>
 800c3c8:	9b04      	ldr	r3, [sp, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f300 80d8 	bgt.w	800c580 <_dtoa_r+0x658>
 800c3d0:	f040 826f 	bne.w	800c8b2 <_dtoa_r+0x98a>
 800c3d4:	4b68      	ldr	r3, [pc, #416]	; (800c578 <_dtoa_r+0x650>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4640      	mov	r0, r8
 800c3da:	4649      	mov	r1, r9
 800c3dc:	f7f4 f914 	bl	8000608 <__aeabi_dmul>
 800c3e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3e4:	f7f4 fb96 	bl	8000b14 <__aeabi_dcmpge>
 800c3e8:	9e04      	ldr	r6, [sp, #16]
 800c3ea:	4637      	mov	r7, r6
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f040 8245 	bne.w	800c87c <_dtoa_r+0x954>
 800c3f2:	9d00      	ldr	r5, [sp, #0]
 800c3f4:	2331      	movs	r3, #49	; 0x31
 800c3f6:	f805 3b01 	strb.w	r3, [r5], #1
 800c3fa:	f10b 0b01 	add.w	fp, fp, #1
 800c3fe:	e241      	b.n	800c884 <_dtoa_r+0x95c>
 800c400:	07f2      	lsls	r2, r6, #31
 800c402:	d505      	bpl.n	800c410 <_dtoa_r+0x4e8>
 800c404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c408:	f7f4 f8fe 	bl	8000608 <__aeabi_dmul>
 800c40c:	3501      	adds	r5, #1
 800c40e:	2301      	movs	r3, #1
 800c410:	1076      	asrs	r6, r6, #1
 800c412:	3708      	adds	r7, #8
 800c414:	e773      	b.n	800c2fe <_dtoa_r+0x3d6>
 800c416:	2502      	movs	r5, #2
 800c418:	e775      	b.n	800c306 <_dtoa_r+0x3de>
 800c41a:	9e04      	ldr	r6, [sp, #16]
 800c41c:	465f      	mov	r7, fp
 800c41e:	e792      	b.n	800c346 <_dtoa_r+0x41e>
 800c420:	9900      	ldr	r1, [sp, #0]
 800c422:	4b50      	ldr	r3, [pc, #320]	; (800c564 <_dtoa_r+0x63c>)
 800c424:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c428:	4431      	add	r1, r6
 800c42a:	9102      	str	r1, [sp, #8]
 800c42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c42e:	eeb0 9a47 	vmov.f32	s18, s14
 800c432:	eef0 9a67 	vmov.f32	s19, s15
 800c436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c43a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c43e:	2900      	cmp	r1, #0
 800c440:	d044      	beq.n	800c4cc <_dtoa_r+0x5a4>
 800c442:	494e      	ldr	r1, [pc, #312]	; (800c57c <_dtoa_r+0x654>)
 800c444:	2000      	movs	r0, #0
 800c446:	f7f4 fa09 	bl	800085c <__aeabi_ddiv>
 800c44a:	ec53 2b19 	vmov	r2, r3, d9
 800c44e:	f7f3 ff23 	bl	8000298 <__aeabi_dsub>
 800c452:	9d00      	ldr	r5, [sp, #0]
 800c454:	ec41 0b19 	vmov	d9, r0, r1
 800c458:	4649      	mov	r1, r9
 800c45a:	4640      	mov	r0, r8
 800c45c:	f7f4 fb84 	bl	8000b68 <__aeabi_d2iz>
 800c460:	4606      	mov	r6, r0
 800c462:	f7f4 f867 	bl	8000534 <__aeabi_i2d>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	4640      	mov	r0, r8
 800c46c:	4649      	mov	r1, r9
 800c46e:	f7f3 ff13 	bl	8000298 <__aeabi_dsub>
 800c472:	3630      	adds	r6, #48	; 0x30
 800c474:	f805 6b01 	strb.w	r6, [r5], #1
 800c478:	ec53 2b19 	vmov	r2, r3, d9
 800c47c:	4680      	mov	r8, r0
 800c47e:	4689      	mov	r9, r1
 800c480:	f7f4 fb34 	bl	8000aec <__aeabi_dcmplt>
 800c484:	2800      	cmp	r0, #0
 800c486:	d164      	bne.n	800c552 <_dtoa_r+0x62a>
 800c488:	4642      	mov	r2, r8
 800c48a:	464b      	mov	r3, r9
 800c48c:	4937      	ldr	r1, [pc, #220]	; (800c56c <_dtoa_r+0x644>)
 800c48e:	2000      	movs	r0, #0
 800c490:	f7f3 ff02 	bl	8000298 <__aeabi_dsub>
 800c494:	ec53 2b19 	vmov	r2, r3, d9
 800c498:	f7f4 fb28 	bl	8000aec <__aeabi_dcmplt>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	f040 80b6 	bne.w	800c60e <_dtoa_r+0x6e6>
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	429d      	cmp	r5, r3
 800c4a6:	f43f af7c 	beq.w	800c3a2 <_dtoa_r+0x47a>
 800c4aa:	4b31      	ldr	r3, [pc, #196]	; (800c570 <_dtoa_r+0x648>)
 800c4ac:	ec51 0b19 	vmov	r0, r1, d9
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f7f4 f8a9 	bl	8000608 <__aeabi_dmul>
 800c4b6:	4b2e      	ldr	r3, [pc, #184]	; (800c570 <_dtoa_r+0x648>)
 800c4b8:	ec41 0b19 	vmov	d9, r0, r1
 800c4bc:	2200      	movs	r2, #0
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 f8a1 	bl	8000608 <__aeabi_dmul>
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	4689      	mov	r9, r1
 800c4ca:	e7c5      	b.n	800c458 <_dtoa_r+0x530>
 800c4cc:	ec51 0b17 	vmov	r0, r1, d7
 800c4d0:	f7f4 f89a 	bl	8000608 <__aeabi_dmul>
 800c4d4:	9b02      	ldr	r3, [sp, #8]
 800c4d6:	9d00      	ldr	r5, [sp, #0]
 800c4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4da:	ec41 0b19 	vmov	d9, r0, r1
 800c4de:	4649      	mov	r1, r9
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	f7f4 fb41 	bl	8000b68 <__aeabi_d2iz>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	f7f4 f824 	bl	8000534 <__aeabi_i2d>
 800c4ec:	3630      	adds	r6, #48	; 0x30
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f3 fecf 	bl	8000298 <__aeabi_dsub>
 800c4fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	429d      	cmp	r5, r3
 800c502:	4680      	mov	r8, r0
 800c504:	4689      	mov	r9, r1
 800c506:	f04f 0200 	mov.w	r2, #0
 800c50a:	d124      	bne.n	800c556 <_dtoa_r+0x62e>
 800c50c:	4b1b      	ldr	r3, [pc, #108]	; (800c57c <_dtoa_r+0x654>)
 800c50e:	ec51 0b19 	vmov	r0, r1, d9
 800c512:	f7f3 fec3 	bl	800029c <__adddf3>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f4 fb03 	bl	8000b28 <__aeabi_dcmpgt>
 800c522:	2800      	cmp	r0, #0
 800c524:	d173      	bne.n	800c60e <_dtoa_r+0x6e6>
 800c526:	ec53 2b19 	vmov	r2, r3, d9
 800c52a:	4914      	ldr	r1, [pc, #80]	; (800c57c <_dtoa_r+0x654>)
 800c52c:	2000      	movs	r0, #0
 800c52e:	f7f3 feb3 	bl	8000298 <__aeabi_dsub>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4640      	mov	r0, r8
 800c538:	4649      	mov	r1, r9
 800c53a:	f7f4 fad7 	bl	8000aec <__aeabi_dcmplt>
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f af2f 	beq.w	800c3a2 <_dtoa_r+0x47a>
 800c544:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c546:	1e6b      	subs	r3, r5, #1
 800c548:	930f      	str	r3, [sp, #60]	; 0x3c
 800c54a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c54e:	2b30      	cmp	r3, #48	; 0x30
 800c550:	d0f8      	beq.n	800c544 <_dtoa_r+0x61c>
 800c552:	46bb      	mov	fp, r7
 800c554:	e04a      	b.n	800c5ec <_dtoa_r+0x6c4>
 800c556:	4b06      	ldr	r3, [pc, #24]	; (800c570 <_dtoa_r+0x648>)
 800c558:	f7f4 f856 	bl	8000608 <__aeabi_dmul>
 800c55c:	4680      	mov	r8, r0
 800c55e:	4689      	mov	r9, r1
 800c560:	e7bd      	b.n	800c4de <_dtoa_r+0x5b6>
 800c562:	bf00      	nop
 800c564:	08029dc0 	.word	0x08029dc0
 800c568:	08029d98 	.word	0x08029d98
 800c56c:	3ff00000 	.word	0x3ff00000
 800c570:	40240000 	.word	0x40240000
 800c574:	401c0000 	.word	0x401c0000
 800c578:	40140000 	.word	0x40140000
 800c57c:	3fe00000 	.word	0x3fe00000
 800c580:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c584:	9d00      	ldr	r5, [sp, #0]
 800c586:	4642      	mov	r2, r8
 800c588:	464b      	mov	r3, r9
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f4 f965 	bl	800085c <__aeabi_ddiv>
 800c592:	f7f4 fae9 	bl	8000b68 <__aeabi_d2iz>
 800c596:	9001      	str	r0, [sp, #4]
 800c598:	f7f3 ffcc 	bl	8000534 <__aeabi_i2d>
 800c59c:	4642      	mov	r2, r8
 800c59e:	464b      	mov	r3, r9
 800c5a0:	f7f4 f832 	bl	8000608 <__aeabi_dmul>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	f7f3 fe74 	bl	8000298 <__aeabi_dsub>
 800c5b0:	9e01      	ldr	r6, [sp, #4]
 800c5b2:	9f04      	ldr	r7, [sp, #16]
 800c5b4:	3630      	adds	r6, #48	; 0x30
 800c5b6:	f805 6b01 	strb.w	r6, [r5], #1
 800c5ba:	9e00      	ldr	r6, [sp, #0]
 800c5bc:	1bae      	subs	r6, r5, r6
 800c5be:	42b7      	cmp	r7, r6
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	d134      	bne.n	800c630 <_dtoa_r+0x708>
 800c5c6:	f7f3 fe69 	bl	800029c <__adddf3>
 800c5ca:	4642      	mov	r2, r8
 800c5cc:	464b      	mov	r3, r9
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	f7f4 faa9 	bl	8000b28 <__aeabi_dcmpgt>
 800c5d6:	b9c8      	cbnz	r0, 800c60c <_dtoa_r+0x6e4>
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	4630      	mov	r0, r6
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f4 fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5e4:	b110      	cbz	r0, 800c5ec <_dtoa_r+0x6c4>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	07db      	lsls	r3, r3, #31
 800c5ea:	d40f      	bmi.n	800c60c <_dtoa_r+0x6e4>
 800c5ec:	4651      	mov	r1, sl
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 fbcc 	bl	800cd8c <_Bfree>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5f8:	702b      	strb	r3, [r5, #0]
 800c5fa:	f10b 0301 	add.w	r3, fp, #1
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c602:	2b00      	cmp	r3, #0
 800c604:	f43f ace2 	beq.w	800bfcc <_dtoa_r+0xa4>
 800c608:	601d      	str	r5, [r3, #0]
 800c60a:	e4df      	b.n	800bfcc <_dtoa_r+0xa4>
 800c60c:	465f      	mov	r7, fp
 800c60e:	462b      	mov	r3, r5
 800c610:	461d      	mov	r5, r3
 800c612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c616:	2a39      	cmp	r2, #57	; 0x39
 800c618:	d106      	bne.n	800c628 <_dtoa_r+0x700>
 800c61a:	9a00      	ldr	r2, [sp, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d1f7      	bne.n	800c610 <_dtoa_r+0x6e8>
 800c620:	9900      	ldr	r1, [sp, #0]
 800c622:	2230      	movs	r2, #48	; 0x30
 800c624:	3701      	adds	r7, #1
 800c626:	700a      	strb	r2, [r1, #0]
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	3201      	adds	r2, #1
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	e790      	b.n	800c552 <_dtoa_r+0x62a>
 800c630:	4ba3      	ldr	r3, [pc, #652]	; (800c8c0 <_dtoa_r+0x998>)
 800c632:	2200      	movs	r2, #0
 800c634:	f7f3 ffe8 	bl	8000608 <__aeabi_dmul>
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	4606      	mov	r6, r0
 800c63e:	460f      	mov	r7, r1
 800c640:	f7f4 fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c644:	2800      	cmp	r0, #0
 800c646:	d09e      	beq.n	800c586 <_dtoa_r+0x65e>
 800c648:	e7d0      	b.n	800c5ec <_dtoa_r+0x6c4>
 800c64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	f000 80ca 	beq.w	800c7e6 <_dtoa_r+0x8be>
 800c652:	9a07      	ldr	r2, [sp, #28]
 800c654:	2a01      	cmp	r2, #1
 800c656:	f300 80ad 	bgt.w	800c7b4 <_dtoa_r+0x88c>
 800c65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c65c:	2a00      	cmp	r2, #0
 800c65e:	f000 80a5 	beq.w	800c7ac <_dtoa_r+0x884>
 800c662:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c666:	9e08      	ldr	r6, [sp, #32]
 800c668:	9d05      	ldr	r5, [sp, #20]
 800c66a:	9a05      	ldr	r2, [sp, #20]
 800c66c:	441a      	add	r2, r3
 800c66e:	9205      	str	r2, [sp, #20]
 800c670:	9a06      	ldr	r2, [sp, #24]
 800c672:	2101      	movs	r1, #1
 800c674:	441a      	add	r2, r3
 800c676:	4620      	mov	r0, r4
 800c678:	9206      	str	r2, [sp, #24]
 800c67a:	f000 fc3d 	bl	800cef8 <__i2b>
 800c67e:	4607      	mov	r7, r0
 800c680:	b165      	cbz	r5, 800c69c <_dtoa_r+0x774>
 800c682:	9b06      	ldr	r3, [sp, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	dd09      	ble.n	800c69c <_dtoa_r+0x774>
 800c688:	42ab      	cmp	r3, r5
 800c68a:	9a05      	ldr	r2, [sp, #20]
 800c68c:	bfa8      	it	ge
 800c68e:	462b      	movge	r3, r5
 800c690:	1ad2      	subs	r2, r2, r3
 800c692:	9205      	str	r2, [sp, #20]
 800c694:	9a06      	ldr	r2, [sp, #24]
 800c696:	1aed      	subs	r5, r5, r3
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	9306      	str	r3, [sp, #24]
 800c69c:	9b08      	ldr	r3, [sp, #32]
 800c69e:	b1f3      	cbz	r3, 800c6de <_dtoa_r+0x7b6>
 800c6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 80a3 	beq.w	800c7ee <_dtoa_r+0x8c6>
 800c6a8:	2e00      	cmp	r6, #0
 800c6aa:	dd10      	ble.n	800c6ce <_dtoa_r+0x7a6>
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 fce1 	bl	800d078 <__pow5mult>
 800c6b6:	4652      	mov	r2, sl
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fc31 	bl	800cf24 <__multiply>
 800c6c2:	4651      	mov	r1, sl
 800c6c4:	4680      	mov	r8, r0
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 fb60 	bl	800cd8c <_Bfree>
 800c6cc:	46c2      	mov	sl, r8
 800c6ce:	9b08      	ldr	r3, [sp, #32]
 800c6d0:	1b9a      	subs	r2, r3, r6
 800c6d2:	d004      	beq.n	800c6de <_dtoa_r+0x7b6>
 800c6d4:	4651      	mov	r1, sl
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 fcce 	bl	800d078 <__pow5mult>
 800c6dc:	4682      	mov	sl, r0
 800c6de:	2101      	movs	r1, #1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fc09 	bl	800cef8 <__i2b>
 800c6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	f340 8081 	ble.w	800c7f2 <_dtoa_r+0x8ca>
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fcbf 	bl	800d078 <__pow5mult>
 800c6fa:	9b07      	ldr	r3, [sp, #28]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	4606      	mov	r6, r0
 800c700:	dd7a      	ble.n	800c7f8 <_dtoa_r+0x8d0>
 800c702:	f04f 0800 	mov.w	r8, #0
 800c706:	6933      	ldr	r3, [r6, #16]
 800c708:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c70c:	6918      	ldr	r0, [r3, #16]
 800c70e:	f000 fba5 	bl	800ce5c <__hi0bits>
 800c712:	f1c0 0020 	rsb	r0, r0, #32
 800c716:	9b06      	ldr	r3, [sp, #24]
 800c718:	4418      	add	r0, r3
 800c71a:	f010 001f 	ands.w	r0, r0, #31
 800c71e:	f000 8094 	beq.w	800c84a <_dtoa_r+0x922>
 800c722:	f1c0 0320 	rsb	r3, r0, #32
 800c726:	2b04      	cmp	r3, #4
 800c728:	f340 8085 	ble.w	800c836 <_dtoa_r+0x90e>
 800c72c:	9b05      	ldr	r3, [sp, #20]
 800c72e:	f1c0 001c 	rsb	r0, r0, #28
 800c732:	4403      	add	r3, r0
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	9b06      	ldr	r3, [sp, #24]
 800c738:	4403      	add	r3, r0
 800c73a:	4405      	add	r5, r0
 800c73c:	9306      	str	r3, [sp, #24]
 800c73e:	9b05      	ldr	r3, [sp, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	dd05      	ble.n	800c750 <_dtoa_r+0x828>
 800c744:	4651      	mov	r1, sl
 800c746:	461a      	mov	r2, r3
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fcef 	bl	800d12c <__lshift>
 800c74e:	4682      	mov	sl, r0
 800c750:	9b06      	ldr	r3, [sp, #24]
 800c752:	2b00      	cmp	r3, #0
 800c754:	dd05      	ble.n	800c762 <_dtoa_r+0x83a>
 800c756:	4631      	mov	r1, r6
 800c758:	461a      	mov	r2, r3
 800c75a:	4620      	mov	r0, r4
 800c75c:	f000 fce6 	bl	800d12c <__lshift>
 800c760:	4606      	mov	r6, r0
 800c762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c764:	2b00      	cmp	r3, #0
 800c766:	d072      	beq.n	800c84e <_dtoa_r+0x926>
 800c768:	4631      	mov	r1, r6
 800c76a:	4650      	mov	r0, sl
 800c76c:	f000 fd4a 	bl	800d204 <__mcmp>
 800c770:	2800      	cmp	r0, #0
 800c772:	da6c      	bge.n	800c84e <_dtoa_r+0x926>
 800c774:	2300      	movs	r3, #0
 800c776:	4651      	mov	r1, sl
 800c778:	220a      	movs	r2, #10
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 fb28 	bl	800cdd0 <__multadd>
 800c780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c782:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c786:	4682      	mov	sl, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 81b0 	beq.w	800caee <_dtoa_r+0xbc6>
 800c78e:	2300      	movs	r3, #0
 800c790:	4639      	mov	r1, r7
 800c792:	220a      	movs	r2, #10
 800c794:	4620      	mov	r0, r4
 800c796:	f000 fb1b 	bl	800cdd0 <__multadd>
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	4607      	mov	r7, r0
 800c7a0:	f300 8096 	bgt.w	800c8d0 <_dtoa_r+0x9a8>
 800c7a4:	9b07      	ldr	r3, [sp, #28]
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	dc59      	bgt.n	800c85e <_dtoa_r+0x936>
 800c7aa:	e091      	b.n	800c8d0 <_dtoa_r+0x9a8>
 800c7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c7b2:	e758      	b.n	800c666 <_dtoa_r+0x73e>
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	1e5e      	subs	r6, r3, #1
 800c7b8:	9b08      	ldr	r3, [sp, #32]
 800c7ba:	42b3      	cmp	r3, r6
 800c7bc:	bfbf      	itttt	lt
 800c7be:	9b08      	ldrlt	r3, [sp, #32]
 800c7c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c7c2:	9608      	strlt	r6, [sp, #32]
 800c7c4:	1af3      	sublt	r3, r6, r3
 800c7c6:	bfb4      	ite	lt
 800c7c8:	18d2      	addlt	r2, r2, r3
 800c7ca:	1b9e      	subge	r6, r3, r6
 800c7cc:	9b04      	ldr	r3, [sp, #16]
 800c7ce:	bfbc      	itt	lt
 800c7d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c7d2:	2600      	movlt	r6, #0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bfb7      	itett	lt
 800c7d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c7dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c7e0:	1a9d      	sublt	r5, r3, r2
 800c7e2:	2300      	movlt	r3, #0
 800c7e4:	e741      	b.n	800c66a <_dtoa_r+0x742>
 800c7e6:	9e08      	ldr	r6, [sp, #32]
 800c7e8:	9d05      	ldr	r5, [sp, #20]
 800c7ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c7ec:	e748      	b.n	800c680 <_dtoa_r+0x758>
 800c7ee:	9a08      	ldr	r2, [sp, #32]
 800c7f0:	e770      	b.n	800c6d4 <_dtoa_r+0x7ac>
 800c7f2:	9b07      	ldr	r3, [sp, #28]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	dc19      	bgt.n	800c82c <_dtoa_r+0x904>
 800c7f8:	9b02      	ldr	r3, [sp, #8]
 800c7fa:	b9bb      	cbnz	r3, 800c82c <_dtoa_r+0x904>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c802:	b99b      	cbnz	r3, 800c82c <_dtoa_r+0x904>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c80a:	0d1b      	lsrs	r3, r3, #20
 800c80c:	051b      	lsls	r3, r3, #20
 800c80e:	b183      	cbz	r3, 800c832 <_dtoa_r+0x90a>
 800c810:	9b05      	ldr	r3, [sp, #20]
 800c812:	3301      	adds	r3, #1
 800c814:	9305      	str	r3, [sp, #20]
 800c816:	9b06      	ldr	r3, [sp, #24]
 800c818:	3301      	adds	r3, #1
 800c81a:	9306      	str	r3, [sp, #24]
 800c81c:	f04f 0801 	mov.w	r8, #1
 800c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c822:	2b00      	cmp	r3, #0
 800c824:	f47f af6f 	bne.w	800c706 <_dtoa_r+0x7de>
 800c828:	2001      	movs	r0, #1
 800c82a:	e774      	b.n	800c716 <_dtoa_r+0x7ee>
 800c82c:	f04f 0800 	mov.w	r8, #0
 800c830:	e7f6      	b.n	800c820 <_dtoa_r+0x8f8>
 800c832:	4698      	mov	r8, r3
 800c834:	e7f4      	b.n	800c820 <_dtoa_r+0x8f8>
 800c836:	d082      	beq.n	800c73e <_dtoa_r+0x816>
 800c838:	9a05      	ldr	r2, [sp, #20]
 800c83a:	331c      	adds	r3, #28
 800c83c:	441a      	add	r2, r3
 800c83e:	9205      	str	r2, [sp, #20]
 800c840:	9a06      	ldr	r2, [sp, #24]
 800c842:	441a      	add	r2, r3
 800c844:	441d      	add	r5, r3
 800c846:	9206      	str	r2, [sp, #24]
 800c848:	e779      	b.n	800c73e <_dtoa_r+0x816>
 800c84a:	4603      	mov	r3, r0
 800c84c:	e7f4      	b.n	800c838 <_dtoa_r+0x910>
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc37      	bgt.n	800c8c4 <_dtoa_r+0x99c>
 800c854:	9b07      	ldr	r3, [sp, #28]
 800c856:	2b02      	cmp	r3, #2
 800c858:	dd34      	ble.n	800c8c4 <_dtoa_r+0x99c>
 800c85a:	9b04      	ldr	r3, [sp, #16]
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	b963      	cbnz	r3, 800c87c <_dtoa_r+0x954>
 800c862:	4631      	mov	r1, r6
 800c864:	2205      	movs	r2, #5
 800c866:	4620      	mov	r0, r4
 800c868:	f000 fab2 	bl	800cdd0 <__multadd>
 800c86c:	4601      	mov	r1, r0
 800c86e:	4606      	mov	r6, r0
 800c870:	4650      	mov	r0, sl
 800c872:	f000 fcc7 	bl	800d204 <__mcmp>
 800c876:	2800      	cmp	r0, #0
 800c878:	f73f adbb 	bgt.w	800c3f2 <_dtoa_r+0x4ca>
 800c87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87e:	9d00      	ldr	r5, [sp, #0]
 800c880:	ea6f 0b03 	mvn.w	fp, r3
 800c884:	f04f 0800 	mov.w	r8, #0
 800c888:	4631      	mov	r1, r6
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fa7e 	bl	800cd8c <_Bfree>
 800c890:	2f00      	cmp	r7, #0
 800c892:	f43f aeab 	beq.w	800c5ec <_dtoa_r+0x6c4>
 800c896:	f1b8 0f00 	cmp.w	r8, #0
 800c89a:	d005      	beq.n	800c8a8 <_dtoa_r+0x980>
 800c89c:	45b8      	cmp	r8, r7
 800c89e:	d003      	beq.n	800c8a8 <_dtoa_r+0x980>
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 fa72 	bl	800cd8c <_Bfree>
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fa6e 	bl	800cd8c <_Bfree>
 800c8b0:	e69c      	b.n	800c5ec <_dtoa_r+0x6c4>
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	4637      	mov	r7, r6
 800c8b6:	e7e1      	b.n	800c87c <_dtoa_r+0x954>
 800c8b8:	46bb      	mov	fp, r7
 800c8ba:	4637      	mov	r7, r6
 800c8bc:	e599      	b.n	800c3f2 <_dtoa_r+0x4ca>
 800c8be:	bf00      	nop
 800c8c0:	40240000 	.word	0x40240000
 800c8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80c8 	beq.w	800ca5c <_dtoa_r+0xb34>
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	9301      	str	r3, [sp, #4]
 800c8d0:	2d00      	cmp	r5, #0
 800c8d2:	dd05      	ble.n	800c8e0 <_dtoa_r+0x9b8>
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	462a      	mov	r2, r5
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fc27 	bl	800d12c <__lshift>
 800c8de:	4607      	mov	r7, r0
 800c8e0:	f1b8 0f00 	cmp.w	r8, #0
 800c8e4:	d05b      	beq.n	800c99e <_dtoa_r+0xa76>
 800c8e6:	6879      	ldr	r1, [r7, #4]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f000 fa0f 	bl	800cd0c <_Balloc>
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	b928      	cbnz	r0, 800c8fe <_dtoa_r+0x9d6>
 800c8f2:	4b83      	ldr	r3, [pc, #524]	; (800cb00 <_dtoa_r+0xbd8>)
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c8fa:	f7ff bb2e 	b.w	800bf5a <_dtoa_r+0x32>
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	3202      	adds	r2, #2
 800c902:	0092      	lsls	r2, r2, #2
 800c904:	f107 010c 	add.w	r1, r7, #12
 800c908:	300c      	adds	r0, #12
 800c90a:	f7ff fa74 	bl	800bdf6 <memcpy>
 800c90e:	2201      	movs	r2, #1
 800c910:	4629      	mov	r1, r5
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fc0a 	bl	800d12c <__lshift>
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	3301      	adds	r3, #1
 800c91c:	9304      	str	r3, [sp, #16]
 800c91e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c922:	4413      	add	r3, r2
 800c924:	9308      	str	r3, [sp, #32]
 800c926:	9b02      	ldr	r3, [sp, #8]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	46b8      	mov	r8, r7
 800c92e:	9306      	str	r3, [sp, #24]
 800c930:	4607      	mov	r7, r0
 800c932:	9b04      	ldr	r3, [sp, #16]
 800c934:	4631      	mov	r1, r6
 800c936:	3b01      	subs	r3, #1
 800c938:	4650      	mov	r0, sl
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	f7ff fa69 	bl	800be12 <quorem>
 800c940:	4641      	mov	r1, r8
 800c942:	9002      	str	r0, [sp, #8]
 800c944:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c948:	4650      	mov	r0, sl
 800c94a:	f000 fc5b 	bl	800d204 <__mcmp>
 800c94e:	463a      	mov	r2, r7
 800c950:	9005      	str	r0, [sp, #20]
 800c952:	4631      	mov	r1, r6
 800c954:	4620      	mov	r0, r4
 800c956:	f000 fc71 	bl	800d23c <__mdiff>
 800c95a:	68c2      	ldr	r2, [r0, #12]
 800c95c:	4605      	mov	r5, r0
 800c95e:	bb02      	cbnz	r2, 800c9a2 <_dtoa_r+0xa7a>
 800c960:	4601      	mov	r1, r0
 800c962:	4650      	mov	r0, sl
 800c964:	f000 fc4e 	bl	800d204 <__mcmp>
 800c968:	4602      	mov	r2, r0
 800c96a:	4629      	mov	r1, r5
 800c96c:	4620      	mov	r0, r4
 800c96e:	9209      	str	r2, [sp, #36]	; 0x24
 800c970:	f000 fa0c 	bl	800cd8c <_Bfree>
 800c974:	9b07      	ldr	r3, [sp, #28]
 800c976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c978:	9d04      	ldr	r5, [sp, #16]
 800c97a:	ea43 0102 	orr.w	r1, r3, r2
 800c97e:	9b06      	ldr	r3, [sp, #24]
 800c980:	4319      	orrs	r1, r3
 800c982:	d110      	bne.n	800c9a6 <_dtoa_r+0xa7e>
 800c984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c988:	d029      	beq.n	800c9de <_dtoa_r+0xab6>
 800c98a:	9b05      	ldr	r3, [sp, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dd02      	ble.n	800c996 <_dtoa_r+0xa6e>
 800c990:	9b02      	ldr	r3, [sp, #8]
 800c992:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	f883 9000 	strb.w	r9, [r3]
 800c99c:	e774      	b.n	800c888 <_dtoa_r+0x960>
 800c99e:	4638      	mov	r0, r7
 800c9a0:	e7ba      	b.n	800c918 <_dtoa_r+0x9f0>
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	e7e1      	b.n	800c96a <_dtoa_r+0xa42>
 800c9a6:	9b05      	ldr	r3, [sp, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	db04      	blt.n	800c9b6 <_dtoa_r+0xa8e>
 800c9ac:	9907      	ldr	r1, [sp, #28]
 800c9ae:	430b      	orrs	r3, r1
 800c9b0:	9906      	ldr	r1, [sp, #24]
 800c9b2:	430b      	orrs	r3, r1
 800c9b4:	d120      	bne.n	800c9f8 <_dtoa_r+0xad0>
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	dded      	ble.n	800c996 <_dtoa_r+0xa6e>
 800c9ba:	4651      	mov	r1, sl
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f000 fbb4 	bl	800d12c <__lshift>
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4682      	mov	sl, r0
 800c9c8:	f000 fc1c 	bl	800d204 <__mcmp>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	dc03      	bgt.n	800c9d8 <_dtoa_r+0xab0>
 800c9d0:	d1e1      	bne.n	800c996 <_dtoa_r+0xa6e>
 800c9d2:	f019 0f01 	tst.w	r9, #1
 800c9d6:	d0de      	beq.n	800c996 <_dtoa_r+0xa6e>
 800c9d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c9dc:	d1d8      	bne.n	800c990 <_dtoa_r+0xa68>
 800c9de:	9a01      	ldr	r2, [sp, #4]
 800c9e0:	2339      	movs	r3, #57	; 0x39
 800c9e2:	7013      	strb	r3, [r2, #0]
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	461d      	mov	r5, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9ee:	2a39      	cmp	r2, #57	; 0x39
 800c9f0:	d06c      	beq.n	800cacc <_dtoa_r+0xba4>
 800c9f2:	3201      	adds	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]
 800c9f6:	e747      	b.n	800c888 <_dtoa_r+0x960>
 800c9f8:	2a00      	cmp	r2, #0
 800c9fa:	dd07      	ble.n	800ca0c <_dtoa_r+0xae4>
 800c9fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca00:	d0ed      	beq.n	800c9de <_dtoa_r+0xab6>
 800ca02:	9a01      	ldr	r2, [sp, #4]
 800ca04:	f109 0301 	add.w	r3, r9, #1
 800ca08:	7013      	strb	r3, [r2, #0]
 800ca0a:	e73d      	b.n	800c888 <_dtoa_r+0x960>
 800ca0c:	9b04      	ldr	r3, [sp, #16]
 800ca0e:	9a08      	ldr	r2, [sp, #32]
 800ca10:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d043      	beq.n	800caa0 <_dtoa_r+0xb78>
 800ca18:	4651      	mov	r1, sl
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 f9d6 	bl	800cdd0 <__multadd>
 800ca24:	45b8      	cmp	r8, r7
 800ca26:	4682      	mov	sl, r0
 800ca28:	f04f 0300 	mov.w	r3, #0
 800ca2c:	f04f 020a 	mov.w	r2, #10
 800ca30:	4641      	mov	r1, r8
 800ca32:	4620      	mov	r0, r4
 800ca34:	d107      	bne.n	800ca46 <_dtoa_r+0xb1e>
 800ca36:	f000 f9cb 	bl	800cdd0 <__multadd>
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4607      	mov	r7, r0
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	e775      	b.n	800c932 <_dtoa_r+0xa0a>
 800ca46:	f000 f9c3 	bl	800cdd0 <__multadd>
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	220a      	movs	r2, #10
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 f9bc 	bl	800cdd0 <__multadd>
 800ca58:	4607      	mov	r7, r0
 800ca5a:	e7f0      	b.n	800ca3e <_dtoa_r+0xb16>
 800ca5c:	9b04      	ldr	r3, [sp, #16]
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	9d00      	ldr	r5, [sp, #0]
 800ca62:	4631      	mov	r1, r6
 800ca64:	4650      	mov	r0, sl
 800ca66:	f7ff f9d4 	bl	800be12 <quorem>
 800ca6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ca6e:	9b00      	ldr	r3, [sp, #0]
 800ca70:	f805 9b01 	strb.w	r9, [r5], #1
 800ca74:	1aea      	subs	r2, r5, r3
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	dd07      	ble.n	800ca8c <_dtoa_r+0xb64>
 800ca7c:	4651      	mov	r1, sl
 800ca7e:	2300      	movs	r3, #0
 800ca80:	220a      	movs	r2, #10
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 f9a4 	bl	800cdd0 <__multadd>
 800ca88:	4682      	mov	sl, r0
 800ca8a:	e7ea      	b.n	800ca62 <_dtoa_r+0xb3a>
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	bfc8      	it	gt
 800ca92:	461d      	movgt	r5, r3
 800ca94:	9b00      	ldr	r3, [sp, #0]
 800ca96:	bfd8      	it	le
 800ca98:	2501      	movle	r5, #1
 800ca9a:	441d      	add	r5, r3
 800ca9c:	f04f 0800 	mov.w	r8, #0
 800caa0:	4651      	mov	r1, sl
 800caa2:	2201      	movs	r2, #1
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 fb41 	bl	800d12c <__lshift>
 800caaa:	4631      	mov	r1, r6
 800caac:	4682      	mov	sl, r0
 800caae:	f000 fba9 	bl	800d204 <__mcmp>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	dc96      	bgt.n	800c9e4 <_dtoa_r+0xabc>
 800cab6:	d102      	bne.n	800cabe <_dtoa_r+0xb96>
 800cab8:	f019 0f01 	tst.w	r9, #1
 800cabc:	d192      	bne.n	800c9e4 <_dtoa_r+0xabc>
 800cabe:	462b      	mov	r3, r5
 800cac0:	461d      	mov	r5, r3
 800cac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cac6:	2a30      	cmp	r2, #48	; 0x30
 800cac8:	d0fa      	beq.n	800cac0 <_dtoa_r+0xb98>
 800caca:	e6dd      	b.n	800c888 <_dtoa_r+0x960>
 800cacc:	9a00      	ldr	r2, [sp, #0]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d189      	bne.n	800c9e6 <_dtoa_r+0xabe>
 800cad2:	f10b 0b01 	add.w	fp, fp, #1
 800cad6:	2331      	movs	r3, #49	; 0x31
 800cad8:	e796      	b.n	800ca08 <_dtoa_r+0xae0>
 800cada:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <_dtoa_r+0xbdc>)
 800cadc:	f7ff ba99 	b.w	800c012 <_dtoa_r+0xea>
 800cae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f47f aa6d 	bne.w	800bfc2 <_dtoa_r+0x9a>
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <_dtoa_r+0xbe0>)
 800caea:	f7ff ba92 	b.w	800c012 <_dtoa_r+0xea>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dcb5      	bgt.n	800ca60 <_dtoa_r+0xb38>
 800caf4:	9b07      	ldr	r3, [sp, #28]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	f73f aeb1 	bgt.w	800c85e <_dtoa_r+0x936>
 800cafc:	e7b0      	b.n	800ca60 <_dtoa_r+0xb38>
 800cafe:	bf00      	nop
 800cb00:	08029d28 	.word	0x08029d28
 800cb04:	08029c88 	.word	0x08029c88
 800cb08:	08029cac 	.word	0x08029cac

0800cb0c <_free_r>:
 800cb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	d044      	beq.n	800cb9c <_free_r+0x90>
 800cb12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb16:	9001      	str	r0, [sp, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb1e:	bfb8      	it	lt
 800cb20:	18e4      	addlt	r4, r4, r3
 800cb22:	f000 f8e7 	bl	800ccf4 <__malloc_lock>
 800cb26:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <_free_r+0x94>)
 800cb28:	9801      	ldr	r0, [sp, #4]
 800cb2a:	6813      	ldr	r3, [r2, #0]
 800cb2c:	b933      	cbnz	r3, 800cb3c <_free_r+0x30>
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	6014      	str	r4, [r2, #0]
 800cb32:	b003      	add	sp, #12
 800cb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb38:	f000 b8e2 	b.w	800cd00 <__malloc_unlock>
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	d908      	bls.n	800cb52 <_free_r+0x46>
 800cb40:	6825      	ldr	r5, [r4, #0]
 800cb42:	1961      	adds	r1, r4, r5
 800cb44:	428b      	cmp	r3, r1
 800cb46:	bf01      	itttt	eq
 800cb48:	6819      	ldreq	r1, [r3, #0]
 800cb4a:	685b      	ldreq	r3, [r3, #4]
 800cb4c:	1949      	addeq	r1, r1, r5
 800cb4e:	6021      	streq	r1, [r4, #0]
 800cb50:	e7ed      	b.n	800cb2e <_free_r+0x22>
 800cb52:	461a      	mov	r2, r3
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	b10b      	cbz	r3, 800cb5c <_free_r+0x50>
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	d9fa      	bls.n	800cb52 <_free_r+0x46>
 800cb5c:	6811      	ldr	r1, [r2, #0]
 800cb5e:	1855      	adds	r5, r2, r1
 800cb60:	42a5      	cmp	r5, r4
 800cb62:	d10b      	bne.n	800cb7c <_free_r+0x70>
 800cb64:	6824      	ldr	r4, [r4, #0]
 800cb66:	4421      	add	r1, r4
 800cb68:	1854      	adds	r4, r2, r1
 800cb6a:	42a3      	cmp	r3, r4
 800cb6c:	6011      	str	r1, [r2, #0]
 800cb6e:	d1e0      	bne.n	800cb32 <_free_r+0x26>
 800cb70:	681c      	ldr	r4, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	6053      	str	r3, [r2, #4]
 800cb76:	440c      	add	r4, r1
 800cb78:	6014      	str	r4, [r2, #0]
 800cb7a:	e7da      	b.n	800cb32 <_free_r+0x26>
 800cb7c:	d902      	bls.n	800cb84 <_free_r+0x78>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	e7d6      	b.n	800cb32 <_free_r+0x26>
 800cb84:	6825      	ldr	r5, [r4, #0]
 800cb86:	1961      	adds	r1, r4, r5
 800cb88:	428b      	cmp	r3, r1
 800cb8a:	bf04      	itt	eq
 800cb8c:	6819      	ldreq	r1, [r3, #0]
 800cb8e:	685b      	ldreq	r3, [r3, #4]
 800cb90:	6063      	str	r3, [r4, #4]
 800cb92:	bf04      	itt	eq
 800cb94:	1949      	addeq	r1, r1, r5
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	6054      	str	r4, [r2, #4]
 800cb9a:	e7ca      	b.n	800cb32 <_free_r+0x26>
 800cb9c:	b003      	add	sp, #12
 800cb9e:	bd30      	pop	{r4, r5, pc}
 800cba0:	2000fc7c 	.word	0x2000fc7c

0800cba4 <malloc>:
 800cba4:	4b02      	ldr	r3, [pc, #8]	; (800cbb0 <malloc+0xc>)
 800cba6:	4601      	mov	r1, r0
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	f000 b823 	b.w	800cbf4 <_malloc_r>
 800cbae:	bf00      	nop
 800cbb0:	200001c8 	.word	0x200001c8

0800cbb4 <sbrk_aligned>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	4e0e      	ldr	r6, [pc, #56]	; (800cbf0 <sbrk_aligned+0x3c>)
 800cbb8:	460c      	mov	r4, r1
 800cbba:	6831      	ldr	r1, [r6, #0]
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	b911      	cbnz	r1, 800cbc6 <sbrk_aligned+0x12>
 800cbc0:	f000 ff8e 	bl	800dae0 <_sbrk_r>
 800cbc4:	6030      	str	r0, [r6, #0]
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f000 ff89 	bl	800dae0 <_sbrk_r>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d00a      	beq.n	800cbe8 <sbrk_aligned+0x34>
 800cbd2:	1cc4      	adds	r4, r0, #3
 800cbd4:	f024 0403 	bic.w	r4, r4, #3
 800cbd8:	42a0      	cmp	r0, r4
 800cbda:	d007      	beq.n	800cbec <sbrk_aligned+0x38>
 800cbdc:	1a21      	subs	r1, r4, r0
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f000 ff7e 	bl	800dae0 <_sbrk_r>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d101      	bne.n	800cbec <sbrk_aligned+0x38>
 800cbe8:	f04f 34ff 	mov.w	r4, #4294967295
 800cbec:	4620      	mov	r0, r4
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	2000fc80 	.word	0x2000fc80

0800cbf4 <_malloc_r>:
 800cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	1ccd      	adds	r5, r1, #3
 800cbfa:	f025 0503 	bic.w	r5, r5, #3
 800cbfe:	3508      	adds	r5, #8
 800cc00:	2d0c      	cmp	r5, #12
 800cc02:	bf38      	it	cc
 800cc04:	250c      	movcc	r5, #12
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	4607      	mov	r7, r0
 800cc0a:	db01      	blt.n	800cc10 <_malloc_r+0x1c>
 800cc0c:	42a9      	cmp	r1, r5
 800cc0e:	d905      	bls.n	800cc1c <_malloc_r+0x28>
 800cc10:	230c      	movs	r3, #12
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	2600      	movs	r6, #0
 800cc16:	4630      	mov	r0, r6
 800cc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccf0 <_malloc_r+0xfc>
 800cc20:	f000 f868 	bl	800ccf4 <__malloc_lock>
 800cc24:	f8d8 3000 	ldr.w	r3, [r8]
 800cc28:	461c      	mov	r4, r3
 800cc2a:	bb5c      	cbnz	r4, 800cc84 <_malloc_r+0x90>
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4638      	mov	r0, r7
 800cc30:	f7ff ffc0 	bl	800cbb4 <sbrk_aligned>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	4604      	mov	r4, r0
 800cc38:	d155      	bne.n	800cce6 <_malloc_r+0xf2>
 800cc3a:	f8d8 4000 	ldr.w	r4, [r8]
 800cc3e:	4626      	mov	r6, r4
 800cc40:	2e00      	cmp	r6, #0
 800cc42:	d145      	bne.n	800ccd0 <_malloc_r+0xdc>
 800cc44:	2c00      	cmp	r4, #0
 800cc46:	d048      	beq.n	800ccda <_malloc_r+0xe6>
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	eb04 0903 	add.w	r9, r4, r3
 800cc52:	f000 ff45 	bl	800dae0 <_sbrk_r>
 800cc56:	4581      	cmp	r9, r0
 800cc58:	d13f      	bne.n	800ccda <_malloc_r+0xe6>
 800cc5a:	6821      	ldr	r1, [r4, #0]
 800cc5c:	1a6d      	subs	r5, r5, r1
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff ffa7 	bl	800cbb4 <sbrk_aligned>
 800cc66:	3001      	adds	r0, #1
 800cc68:	d037      	beq.n	800ccda <_malloc_r+0xe6>
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	442b      	add	r3, r5
 800cc6e:	6023      	str	r3, [r4, #0]
 800cc70:	f8d8 3000 	ldr.w	r3, [r8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d038      	beq.n	800ccea <_malloc_r+0xf6>
 800cc78:	685a      	ldr	r2, [r3, #4]
 800cc7a:	42a2      	cmp	r2, r4
 800cc7c:	d12b      	bne.n	800ccd6 <_malloc_r+0xe2>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	605a      	str	r2, [r3, #4]
 800cc82:	e00f      	b.n	800cca4 <_malloc_r+0xb0>
 800cc84:	6822      	ldr	r2, [r4, #0]
 800cc86:	1b52      	subs	r2, r2, r5
 800cc88:	d41f      	bmi.n	800ccca <_malloc_r+0xd6>
 800cc8a:	2a0b      	cmp	r2, #11
 800cc8c:	d917      	bls.n	800ccbe <_malloc_r+0xca>
 800cc8e:	1961      	adds	r1, r4, r5
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	6025      	str	r5, [r4, #0]
 800cc94:	bf18      	it	ne
 800cc96:	6059      	strne	r1, [r3, #4]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	bf08      	it	eq
 800cc9c:	f8c8 1000 	streq.w	r1, [r8]
 800cca0:	5162      	str	r2, [r4, r5]
 800cca2:	604b      	str	r3, [r1, #4]
 800cca4:	4638      	mov	r0, r7
 800cca6:	f104 060b 	add.w	r6, r4, #11
 800ccaa:	f000 f829 	bl	800cd00 <__malloc_unlock>
 800ccae:	f026 0607 	bic.w	r6, r6, #7
 800ccb2:	1d23      	adds	r3, r4, #4
 800ccb4:	1af2      	subs	r2, r6, r3
 800ccb6:	d0ae      	beq.n	800cc16 <_malloc_r+0x22>
 800ccb8:	1b9b      	subs	r3, r3, r6
 800ccba:	50a3      	str	r3, [r4, r2]
 800ccbc:	e7ab      	b.n	800cc16 <_malloc_r+0x22>
 800ccbe:	42a3      	cmp	r3, r4
 800ccc0:	6862      	ldr	r2, [r4, #4]
 800ccc2:	d1dd      	bne.n	800cc80 <_malloc_r+0x8c>
 800ccc4:	f8c8 2000 	str.w	r2, [r8]
 800ccc8:	e7ec      	b.n	800cca4 <_malloc_r+0xb0>
 800ccca:	4623      	mov	r3, r4
 800cccc:	6864      	ldr	r4, [r4, #4]
 800ccce:	e7ac      	b.n	800cc2a <_malloc_r+0x36>
 800ccd0:	4634      	mov	r4, r6
 800ccd2:	6876      	ldr	r6, [r6, #4]
 800ccd4:	e7b4      	b.n	800cc40 <_malloc_r+0x4c>
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	e7cc      	b.n	800cc74 <_malloc_r+0x80>
 800ccda:	230c      	movs	r3, #12
 800ccdc:	603b      	str	r3, [r7, #0]
 800ccde:	4638      	mov	r0, r7
 800cce0:	f000 f80e 	bl	800cd00 <__malloc_unlock>
 800cce4:	e797      	b.n	800cc16 <_malloc_r+0x22>
 800cce6:	6025      	str	r5, [r4, #0]
 800cce8:	e7dc      	b.n	800cca4 <_malloc_r+0xb0>
 800ccea:	605b      	str	r3, [r3, #4]
 800ccec:	deff      	udf	#255	; 0xff
 800ccee:	bf00      	nop
 800ccf0:	2000fc7c 	.word	0x2000fc7c

0800ccf4 <__malloc_lock>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__malloc_lock+0x8>)
 800ccf6:	f7ff b87c 	b.w	800bdf2 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	2000fc78 	.word	0x2000fc78

0800cd00 <__malloc_unlock>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__malloc_unlock+0x8>)
 800cd02:	f7ff b877 	b.w	800bdf4 <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	2000fc78 	.word	0x2000fc78

0800cd0c <_Balloc>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	69c6      	ldr	r6, [r0, #28]
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	b976      	cbnz	r6, 800cd34 <_Balloc+0x28>
 800cd16:	2010      	movs	r0, #16
 800cd18:	f7ff ff44 	bl	800cba4 <malloc>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	61e0      	str	r0, [r4, #28]
 800cd20:	b920      	cbnz	r0, 800cd2c <_Balloc+0x20>
 800cd22:	4b18      	ldr	r3, [pc, #96]	; (800cd84 <_Balloc+0x78>)
 800cd24:	4818      	ldr	r0, [pc, #96]	; (800cd88 <_Balloc+0x7c>)
 800cd26:	216b      	movs	r1, #107	; 0x6b
 800cd28:	f000 feea 	bl	800db00 <__assert_func>
 800cd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd30:	6006      	str	r6, [r0, #0]
 800cd32:	60c6      	str	r6, [r0, #12]
 800cd34:	69e6      	ldr	r6, [r4, #28]
 800cd36:	68f3      	ldr	r3, [r6, #12]
 800cd38:	b183      	cbz	r3, 800cd5c <_Balloc+0x50>
 800cd3a:	69e3      	ldr	r3, [r4, #28]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd42:	b9b8      	cbnz	r0, 800cd74 <_Balloc+0x68>
 800cd44:	2101      	movs	r1, #1
 800cd46:	fa01 f605 	lsl.w	r6, r1, r5
 800cd4a:	1d72      	adds	r2, r6, #5
 800cd4c:	0092      	lsls	r2, r2, #2
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 fef4 	bl	800db3c <_calloc_r>
 800cd54:	b160      	cbz	r0, 800cd70 <_Balloc+0x64>
 800cd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd5a:	e00e      	b.n	800cd7a <_Balloc+0x6e>
 800cd5c:	2221      	movs	r2, #33	; 0x21
 800cd5e:	2104      	movs	r1, #4
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 feeb 	bl	800db3c <_calloc_r>
 800cd66:	69e3      	ldr	r3, [r4, #28]
 800cd68:	60f0      	str	r0, [r6, #12]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e4      	bne.n	800cd3a <_Balloc+0x2e>
 800cd70:	2000      	movs	r0, #0
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	6802      	ldr	r2, [r0, #0]
 800cd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd80:	e7f7      	b.n	800cd72 <_Balloc+0x66>
 800cd82:	bf00      	nop
 800cd84:	08029cb9 	.word	0x08029cb9
 800cd88:	08029d39 	.word	0x08029d39

0800cd8c <_Bfree>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	69c6      	ldr	r6, [r0, #28]
 800cd90:	4605      	mov	r5, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	b976      	cbnz	r6, 800cdb4 <_Bfree+0x28>
 800cd96:	2010      	movs	r0, #16
 800cd98:	f7ff ff04 	bl	800cba4 <malloc>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	61e8      	str	r0, [r5, #28]
 800cda0:	b920      	cbnz	r0, 800cdac <_Bfree+0x20>
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <_Bfree+0x3c>)
 800cda4:	4809      	ldr	r0, [pc, #36]	; (800cdcc <_Bfree+0x40>)
 800cda6:	218f      	movs	r1, #143	; 0x8f
 800cda8:	f000 feaa 	bl	800db00 <__assert_func>
 800cdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdb0:	6006      	str	r6, [r0, #0]
 800cdb2:	60c6      	str	r6, [r0, #12]
 800cdb4:	b13c      	cbz	r4, 800cdc6 <_Bfree+0x3a>
 800cdb6:	69eb      	ldr	r3, [r5, #28]
 800cdb8:	6862      	ldr	r2, [r4, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdc0:	6021      	str	r1, [r4, #0]
 800cdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	08029cb9 	.word	0x08029cb9
 800cdcc:	08029d39 	.word	0x08029d39

0800cdd0 <__multadd>:
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	690d      	ldr	r5, [r1, #16]
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	460c      	mov	r4, r1
 800cdda:	461e      	mov	r6, r3
 800cddc:	f101 0c14 	add.w	ip, r1, #20
 800cde0:	2000      	movs	r0, #0
 800cde2:	f8dc 3000 	ldr.w	r3, [ip]
 800cde6:	b299      	uxth	r1, r3
 800cde8:	fb02 6101 	mla	r1, r2, r1, r6
 800cdec:	0c1e      	lsrs	r6, r3, #16
 800cdee:	0c0b      	lsrs	r3, r1, #16
 800cdf0:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf4:	b289      	uxth	r1, r1
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdfc:	4285      	cmp	r5, r0
 800cdfe:	f84c 1b04 	str.w	r1, [ip], #4
 800ce02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce06:	dcec      	bgt.n	800cde2 <__multadd+0x12>
 800ce08:	b30e      	cbz	r6, 800ce4e <__multadd+0x7e>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc19      	bgt.n	800ce44 <__multadd+0x74>
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	4638      	mov	r0, r7
 800ce14:	3101      	adds	r1, #1
 800ce16:	f7ff ff79 	bl	800cd0c <_Balloc>
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	b928      	cbnz	r0, 800ce2a <__multadd+0x5a>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <__multadd+0x84>)
 800ce22:	480d      	ldr	r0, [pc, #52]	; (800ce58 <__multadd+0x88>)
 800ce24:	21ba      	movs	r1, #186	; 0xba
 800ce26:	f000 fe6b 	bl	800db00 <__assert_func>
 800ce2a:	6922      	ldr	r2, [r4, #16]
 800ce2c:	3202      	adds	r2, #2
 800ce2e:	f104 010c 	add.w	r1, r4, #12
 800ce32:	0092      	lsls	r2, r2, #2
 800ce34:	300c      	adds	r0, #12
 800ce36:	f7fe ffde 	bl	800bdf6 <memcpy>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff ffa5 	bl	800cd8c <_Bfree>
 800ce42:	4644      	mov	r4, r8
 800ce44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce48:	3501      	adds	r5, #1
 800ce4a:	615e      	str	r6, [r3, #20]
 800ce4c:	6125      	str	r5, [r4, #16]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	08029d28 	.word	0x08029d28
 800ce58:	08029d39 	.word	0x08029d39

0800ce5c <__hi0bits>:
 800ce5c:	0c03      	lsrs	r3, r0, #16
 800ce5e:	041b      	lsls	r3, r3, #16
 800ce60:	b9d3      	cbnz	r3, 800ce98 <__hi0bits+0x3c>
 800ce62:	0400      	lsls	r0, r0, #16
 800ce64:	2310      	movs	r3, #16
 800ce66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce6a:	bf04      	itt	eq
 800ce6c:	0200      	lsleq	r0, r0, #8
 800ce6e:	3308      	addeq	r3, #8
 800ce70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce74:	bf04      	itt	eq
 800ce76:	0100      	lsleq	r0, r0, #4
 800ce78:	3304      	addeq	r3, #4
 800ce7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce7e:	bf04      	itt	eq
 800ce80:	0080      	lsleq	r0, r0, #2
 800ce82:	3302      	addeq	r3, #2
 800ce84:	2800      	cmp	r0, #0
 800ce86:	db05      	blt.n	800ce94 <__hi0bits+0x38>
 800ce88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce8c:	f103 0301 	add.w	r3, r3, #1
 800ce90:	bf08      	it	eq
 800ce92:	2320      	moveq	r3, #32
 800ce94:	4618      	mov	r0, r3
 800ce96:	4770      	bx	lr
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e7e4      	b.n	800ce66 <__hi0bits+0xa>

0800ce9c <__lo0bits>:
 800ce9c:	6803      	ldr	r3, [r0, #0]
 800ce9e:	f013 0207 	ands.w	r2, r3, #7
 800cea2:	d00c      	beq.n	800cebe <__lo0bits+0x22>
 800cea4:	07d9      	lsls	r1, r3, #31
 800cea6:	d422      	bmi.n	800ceee <__lo0bits+0x52>
 800cea8:	079a      	lsls	r2, r3, #30
 800ceaa:	bf49      	itett	mi
 800ceac:	085b      	lsrmi	r3, r3, #1
 800ceae:	089b      	lsrpl	r3, r3, #2
 800ceb0:	6003      	strmi	r3, [r0, #0]
 800ceb2:	2201      	movmi	r2, #1
 800ceb4:	bf5c      	itt	pl
 800ceb6:	6003      	strpl	r3, [r0, #0]
 800ceb8:	2202      	movpl	r2, #2
 800ceba:	4610      	mov	r0, r2
 800cebc:	4770      	bx	lr
 800cebe:	b299      	uxth	r1, r3
 800cec0:	b909      	cbnz	r1, 800cec6 <__lo0bits+0x2a>
 800cec2:	0c1b      	lsrs	r3, r3, #16
 800cec4:	2210      	movs	r2, #16
 800cec6:	b2d9      	uxtb	r1, r3
 800cec8:	b909      	cbnz	r1, 800cece <__lo0bits+0x32>
 800ceca:	3208      	adds	r2, #8
 800cecc:	0a1b      	lsrs	r3, r3, #8
 800cece:	0719      	lsls	r1, r3, #28
 800ced0:	bf04      	itt	eq
 800ced2:	091b      	lsreq	r3, r3, #4
 800ced4:	3204      	addeq	r2, #4
 800ced6:	0799      	lsls	r1, r3, #30
 800ced8:	bf04      	itt	eq
 800ceda:	089b      	lsreq	r3, r3, #2
 800cedc:	3202      	addeq	r2, #2
 800cede:	07d9      	lsls	r1, r3, #31
 800cee0:	d403      	bmi.n	800ceea <__lo0bits+0x4e>
 800cee2:	085b      	lsrs	r3, r3, #1
 800cee4:	f102 0201 	add.w	r2, r2, #1
 800cee8:	d003      	beq.n	800cef2 <__lo0bits+0x56>
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	e7e5      	b.n	800ceba <__lo0bits+0x1e>
 800ceee:	2200      	movs	r2, #0
 800cef0:	e7e3      	b.n	800ceba <__lo0bits+0x1e>
 800cef2:	2220      	movs	r2, #32
 800cef4:	e7e1      	b.n	800ceba <__lo0bits+0x1e>
	...

0800cef8 <__i2b>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	460c      	mov	r4, r1
 800cefc:	2101      	movs	r1, #1
 800cefe:	f7ff ff05 	bl	800cd0c <_Balloc>
 800cf02:	4602      	mov	r2, r0
 800cf04:	b928      	cbnz	r0, 800cf12 <__i2b+0x1a>
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <__i2b+0x24>)
 800cf08:	4805      	ldr	r0, [pc, #20]	; (800cf20 <__i2b+0x28>)
 800cf0a:	f240 1145 	movw	r1, #325	; 0x145
 800cf0e:	f000 fdf7 	bl	800db00 <__assert_func>
 800cf12:	2301      	movs	r3, #1
 800cf14:	6144      	str	r4, [r0, #20]
 800cf16:	6103      	str	r3, [r0, #16]
 800cf18:	bd10      	pop	{r4, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08029d28 	.word	0x08029d28
 800cf20:	08029d39 	.word	0x08029d39

0800cf24 <__multiply>:
 800cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf28:	4691      	mov	r9, r2
 800cf2a:	690a      	ldr	r2, [r1, #16]
 800cf2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	bfb8      	it	lt
 800cf34:	460b      	movlt	r3, r1
 800cf36:	460c      	mov	r4, r1
 800cf38:	bfbc      	itt	lt
 800cf3a:	464c      	movlt	r4, r9
 800cf3c:	4699      	movlt	r9, r3
 800cf3e:	6927      	ldr	r7, [r4, #16]
 800cf40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	6861      	ldr	r1, [r4, #4]
 800cf48:	eb07 060a 	add.w	r6, r7, sl
 800cf4c:	42b3      	cmp	r3, r6
 800cf4e:	b085      	sub	sp, #20
 800cf50:	bfb8      	it	lt
 800cf52:	3101      	addlt	r1, #1
 800cf54:	f7ff feda 	bl	800cd0c <_Balloc>
 800cf58:	b930      	cbnz	r0, 800cf68 <__multiply+0x44>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	4b44      	ldr	r3, [pc, #272]	; (800d070 <__multiply+0x14c>)
 800cf5e:	4845      	ldr	r0, [pc, #276]	; (800d074 <__multiply+0x150>)
 800cf60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cf64:	f000 fdcc 	bl	800db00 <__assert_func>
 800cf68:	f100 0514 	add.w	r5, r0, #20
 800cf6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf70:	462b      	mov	r3, r5
 800cf72:	2200      	movs	r2, #0
 800cf74:	4543      	cmp	r3, r8
 800cf76:	d321      	bcc.n	800cfbc <__multiply+0x98>
 800cf78:	f104 0314 	add.w	r3, r4, #20
 800cf7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf80:	f109 0314 	add.w	r3, r9, #20
 800cf84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf88:	9202      	str	r2, [sp, #8]
 800cf8a:	1b3a      	subs	r2, r7, r4
 800cf8c:	3a15      	subs	r2, #21
 800cf8e:	f022 0203 	bic.w	r2, r2, #3
 800cf92:	3204      	adds	r2, #4
 800cf94:	f104 0115 	add.w	r1, r4, #21
 800cf98:	428f      	cmp	r7, r1
 800cf9a:	bf38      	it	cc
 800cf9c:	2204      	movcc	r2, #4
 800cf9e:	9201      	str	r2, [sp, #4]
 800cfa0:	9a02      	ldr	r2, [sp, #8]
 800cfa2:	9303      	str	r3, [sp, #12]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d80c      	bhi.n	800cfc2 <__multiply+0x9e>
 800cfa8:	2e00      	cmp	r6, #0
 800cfaa:	dd03      	ble.n	800cfb4 <__multiply+0x90>
 800cfac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d05b      	beq.n	800d06c <__multiply+0x148>
 800cfb4:	6106      	str	r6, [r0, #16]
 800cfb6:	b005      	add	sp, #20
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	f843 2b04 	str.w	r2, [r3], #4
 800cfc0:	e7d8      	b.n	800cf74 <__multiply+0x50>
 800cfc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfc6:	f1ba 0f00 	cmp.w	sl, #0
 800cfca:	d024      	beq.n	800d016 <__multiply+0xf2>
 800cfcc:	f104 0e14 	add.w	lr, r4, #20
 800cfd0:	46a9      	mov	r9, r5
 800cfd2:	f04f 0c00 	mov.w	ip, #0
 800cfd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfda:	f8d9 1000 	ldr.w	r1, [r9]
 800cfde:	fa1f fb82 	uxth.w	fp, r2
 800cfe2:	b289      	uxth	r1, r1
 800cfe4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfec:	f8d9 2000 	ldr.w	r2, [r9]
 800cff0:	4461      	add	r1, ip
 800cff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cff6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cffa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cffe:	b289      	uxth	r1, r1
 800d000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d004:	4577      	cmp	r7, lr
 800d006:	f849 1b04 	str.w	r1, [r9], #4
 800d00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d00e:	d8e2      	bhi.n	800cfd6 <__multiply+0xb2>
 800d010:	9a01      	ldr	r2, [sp, #4]
 800d012:	f845 c002 	str.w	ip, [r5, r2]
 800d016:	9a03      	ldr	r2, [sp, #12]
 800d018:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d01c:	3304      	adds	r3, #4
 800d01e:	f1b9 0f00 	cmp.w	r9, #0
 800d022:	d021      	beq.n	800d068 <__multiply+0x144>
 800d024:	6829      	ldr	r1, [r5, #0]
 800d026:	f104 0c14 	add.w	ip, r4, #20
 800d02a:	46ae      	mov	lr, r5
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	f8bc b000 	ldrh.w	fp, [ip]
 800d034:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d038:	fb09 220b 	mla	r2, r9, fp, r2
 800d03c:	4452      	add	r2, sl
 800d03e:	b289      	uxth	r1, r1
 800d040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d044:	f84e 1b04 	str.w	r1, [lr], #4
 800d048:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d04c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d050:	f8be 1000 	ldrh.w	r1, [lr]
 800d054:	fb09 110a 	mla	r1, r9, sl, r1
 800d058:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d05c:	4567      	cmp	r7, ip
 800d05e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d062:	d8e5      	bhi.n	800d030 <__multiply+0x10c>
 800d064:	9a01      	ldr	r2, [sp, #4]
 800d066:	50a9      	str	r1, [r5, r2]
 800d068:	3504      	adds	r5, #4
 800d06a:	e799      	b.n	800cfa0 <__multiply+0x7c>
 800d06c:	3e01      	subs	r6, #1
 800d06e:	e79b      	b.n	800cfa8 <__multiply+0x84>
 800d070:	08029d28 	.word	0x08029d28
 800d074:	08029d39 	.word	0x08029d39

0800d078 <__pow5mult>:
 800d078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d07c:	4615      	mov	r5, r2
 800d07e:	f012 0203 	ands.w	r2, r2, #3
 800d082:	4606      	mov	r6, r0
 800d084:	460f      	mov	r7, r1
 800d086:	d007      	beq.n	800d098 <__pow5mult+0x20>
 800d088:	4c25      	ldr	r4, [pc, #148]	; (800d120 <__pow5mult+0xa8>)
 800d08a:	3a01      	subs	r2, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d092:	f7ff fe9d 	bl	800cdd0 <__multadd>
 800d096:	4607      	mov	r7, r0
 800d098:	10ad      	asrs	r5, r5, #2
 800d09a:	d03d      	beq.n	800d118 <__pow5mult+0xa0>
 800d09c:	69f4      	ldr	r4, [r6, #28]
 800d09e:	b97c      	cbnz	r4, 800d0c0 <__pow5mult+0x48>
 800d0a0:	2010      	movs	r0, #16
 800d0a2:	f7ff fd7f 	bl	800cba4 <malloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	61f0      	str	r0, [r6, #28]
 800d0aa:	b928      	cbnz	r0, 800d0b8 <__pow5mult+0x40>
 800d0ac:	4b1d      	ldr	r3, [pc, #116]	; (800d124 <__pow5mult+0xac>)
 800d0ae:	481e      	ldr	r0, [pc, #120]	; (800d128 <__pow5mult+0xb0>)
 800d0b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d0b4:	f000 fd24 	bl	800db00 <__assert_func>
 800d0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0bc:	6004      	str	r4, [r0, #0]
 800d0be:	60c4      	str	r4, [r0, #12]
 800d0c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0c8:	b94c      	cbnz	r4, 800d0de <__pow5mult+0x66>
 800d0ca:	f240 2171 	movw	r1, #625	; 0x271
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f7ff ff12 	bl	800cef8 <__i2b>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6003      	str	r3, [r0, #0]
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	07eb      	lsls	r3, r5, #31
 800d0e4:	d50a      	bpl.n	800d0fc <__pow5mult+0x84>
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7ff ff1a 	bl	800cf24 <__multiply>
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff fe49 	bl	800cd8c <_Bfree>
 800d0fa:	4647      	mov	r7, r8
 800d0fc:	106d      	asrs	r5, r5, #1
 800d0fe:	d00b      	beq.n	800d118 <__pow5mult+0xa0>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	b938      	cbnz	r0, 800d114 <__pow5mult+0x9c>
 800d104:	4622      	mov	r2, r4
 800d106:	4621      	mov	r1, r4
 800d108:	4630      	mov	r0, r6
 800d10a:	f7ff ff0b 	bl	800cf24 <__multiply>
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	f8c0 9000 	str.w	r9, [r0]
 800d114:	4604      	mov	r4, r0
 800d116:	e7e4      	b.n	800d0e2 <__pow5mult+0x6a>
 800d118:	4638      	mov	r0, r7
 800d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d11e:	bf00      	nop
 800d120:	08029e88 	.word	0x08029e88
 800d124:	08029cb9 	.word	0x08029cb9
 800d128:	08029d39 	.word	0x08029d39

0800d12c <__lshift>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	6849      	ldr	r1, [r1, #4]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	4607      	mov	r7, r0
 800d13e:	4691      	mov	r9, r2
 800d140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d144:	f108 0601 	add.w	r6, r8, #1
 800d148:	42b3      	cmp	r3, r6
 800d14a:	db0b      	blt.n	800d164 <__lshift+0x38>
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff fddd 	bl	800cd0c <_Balloc>
 800d152:	4605      	mov	r5, r0
 800d154:	b948      	cbnz	r0, 800d16a <__lshift+0x3e>
 800d156:	4602      	mov	r2, r0
 800d158:	4b28      	ldr	r3, [pc, #160]	; (800d1fc <__lshift+0xd0>)
 800d15a:	4829      	ldr	r0, [pc, #164]	; (800d200 <__lshift+0xd4>)
 800d15c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d160:	f000 fcce 	bl	800db00 <__assert_func>
 800d164:	3101      	adds	r1, #1
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	e7ee      	b.n	800d148 <__lshift+0x1c>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f100 0114 	add.w	r1, r0, #20
 800d170:	f100 0210 	add.w	r2, r0, #16
 800d174:	4618      	mov	r0, r3
 800d176:	4553      	cmp	r3, sl
 800d178:	db33      	blt.n	800d1e2 <__lshift+0xb6>
 800d17a:	6920      	ldr	r0, [r4, #16]
 800d17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d180:	f104 0314 	add.w	r3, r4, #20
 800d184:	f019 091f 	ands.w	r9, r9, #31
 800d188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d18c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d190:	d02b      	beq.n	800d1ea <__lshift+0xbe>
 800d192:	f1c9 0e20 	rsb	lr, r9, #32
 800d196:	468a      	mov	sl, r1
 800d198:	2200      	movs	r2, #0
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	fa00 f009 	lsl.w	r0, r0, r9
 800d1a0:	4310      	orrs	r0, r2
 800d1a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1aa:	459c      	cmp	ip, r3
 800d1ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1b0:	d8f3      	bhi.n	800d19a <__lshift+0x6e>
 800d1b2:	ebac 0304 	sub.w	r3, ip, r4
 800d1b6:	3b15      	subs	r3, #21
 800d1b8:	f023 0303 	bic.w	r3, r3, #3
 800d1bc:	3304      	adds	r3, #4
 800d1be:	f104 0015 	add.w	r0, r4, #21
 800d1c2:	4584      	cmp	ip, r0
 800d1c4:	bf38      	it	cc
 800d1c6:	2304      	movcc	r3, #4
 800d1c8:	50ca      	str	r2, [r1, r3]
 800d1ca:	b10a      	cbz	r2, 800d1d0 <__lshift+0xa4>
 800d1cc:	f108 0602 	add.w	r6, r8, #2
 800d1d0:	3e01      	subs	r6, #1
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	612e      	str	r6, [r5, #16]
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f7ff fdd8 	bl	800cd8c <_Bfree>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	e7c5      	b.n	800d176 <__lshift+0x4a>
 800d1ea:	3904      	subs	r1, #4
 800d1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1f4:	459c      	cmp	ip, r3
 800d1f6:	d8f9      	bhi.n	800d1ec <__lshift+0xc0>
 800d1f8:	e7ea      	b.n	800d1d0 <__lshift+0xa4>
 800d1fa:	bf00      	nop
 800d1fc:	08029d28 	.word	0x08029d28
 800d200:	08029d39 	.word	0x08029d39

0800d204 <__mcmp>:
 800d204:	b530      	push	{r4, r5, lr}
 800d206:	6902      	ldr	r2, [r0, #16]
 800d208:	690c      	ldr	r4, [r1, #16]
 800d20a:	1b12      	subs	r2, r2, r4
 800d20c:	d10e      	bne.n	800d22c <__mcmp+0x28>
 800d20e:	f100 0314 	add.w	r3, r0, #20
 800d212:	3114      	adds	r1, #20
 800d214:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d218:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d21c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d220:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d224:	42a5      	cmp	r5, r4
 800d226:	d003      	beq.n	800d230 <__mcmp+0x2c>
 800d228:	d305      	bcc.n	800d236 <__mcmp+0x32>
 800d22a:	2201      	movs	r2, #1
 800d22c:	4610      	mov	r0, r2
 800d22e:	bd30      	pop	{r4, r5, pc}
 800d230:	4283      	cmp	r3, r0
 800d232:	d3f3      	bcc.n	800d21c <__mcmp+0x18>
 800d234:	e7fa      	b.n	800d22c <__mcmp+0x28>
 800d236:	f04f 32ff 	mov.w	r2, #4294967295
 800d23a:	e7f7      	b.n	800d22c <__mcmp+0x28>

0800d23c <__mdiff>:
 800d23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	460c      	mov	r4, r1
 800d242:	4606      	mov	r6, r0
 800d244:	4611      	mov	r1, r2
 800d246:	4620      	mov	r0, r4
 800d248:	4690      	mov	r8, r2
 800d24a:	f7ff ffdb 	bl	800d204 <__mcmp>
 800d24e:	1e05      	subs	r5, r0, #0
 800d250:	d110      	bne.n	800d274 <__mdiff+0x38>
 800d252:	4629      	mov	r1, r5
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff fd59 	bl	800cd0c <_Balloc>
 800d25a:	b930      	cbnz	r0, 800d26a <__mdiff+0x2e>
 800d25c:	4b3a      	ldr	r3, [pc, #232]	; (800d348 <__mdiff+0x10c>)
 800d25e:	4602      	mov	r2, r0
 800d260:	f240 2137 	movw	r1, #567	; 0x237
 800d264:	4839      	ldr	r0, [pc, #228]	; (800d34c <__mdiff+0x110>)
 800d266:	f000 fc4b 	bl	800db00 <__assert_func>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d274:	bfa4      	itt	ge
 800d276:	4643      	movge	r3, r8
 800d278:	46a0      	movge	r8, r4
 800d27a:	4630      	mov	r0, r6
 800d27c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d280:	bfa6      	itte	ge
 800d282:	461c      	movge	r4, r3
 800d284:	2500      	movge	r5, #0
 800d286:	2501      	movlt	r5, #1
 800d288:	f7ff fd40 	bl	800cd0c <_Balloc>
 800d28c:	b920      	cbnz	r0, 800d298 <__mdiff+0x5c>
 800d28e:	4b2e      	ldr	r3, [pc, #184]	; (800d348 <__mdiff+0x10c>)
 800d290:	4602      	mov	r2, r0
 800d292:	f240 2145 	movw	r1, #581	; 0x245
 800d296:	e7e5      	b.n	800d264 <__mdiff+0x28>
 800d298:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d29c:	6926      	ldr	r6, [r4, #16]
 800d29e:	60c5      	str	r5, [r0, #12]
 800d2a0:	f104 0914 	add.w	r9, r4, #20
 800d2a4:	f108 0514 	add.w	r5, r8, #20
 800d2a8:	f100 0e14 	add.w	lr, r0, #20
 800d2ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2b4:	f108 0210 	add.w	r2, r8, #16
 800d2b8:	46f2      	mov	sl, lr
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2c4:	fa11 f88b 	uxtah	r8, r1, fp
 800d2c8:	b299      	uxth	r1, r3
 800d2ca:	0c1b      	lsrs	r3, r3, #16
 800d2cc:	eba8 0801 	sub.w	r8, r8, r1
 800d2d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2d8:	fa1f f888 	uxth.w	r8, r8
 800d2dc:	1419      	asrs	r1, r3, #16
 800d2de:	454e      	cmp	r6, r9
 800d2e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2e4:	f84a 3b04 	str.w	r3, [sl], #4
 800d2e8:	d8e8      	bhi.n	800d2bc <__mdiff+0x80>
 800d2ea:	1b33      	subs	r3, r6, r4
 800d2ec:	3b15      	subs	r3, #21
 800d2ee:	f023 0303 	bic.w	r3, r3, #3
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	3415      	adds	r4, #21
 800d2f6:	42a6      	cmp	r6, r4
 800d2f8:	bf38      	it	cc
 800d2fa:	2304      	movcc	r3, #4
 800d2fc:	441d      	add	r5, r3
 800d2fe:	4473      	add	r3, lr
 800d300:	469e      	mov	lr, r3
 800d302:	462e      	mov	r6, r5
 800d304:	4566      	cmp	r6, ip
 800d306:	d30e      	bcc.n	800d326 <__mdiff+0xea>
 800d308:	f10c 0203 	add.w	r2, ip, #3
 800d30c:	1b52      	subs	r2, r2, r5
 800d30e:	f022 0203 	bic.w	r2, r2, #3
 800d312:	3d03      	subs	r5, #3
 800d314:	45ac      	cmp	ip, r5
 800d316:	bf38      	it	cc
 800d318:	2200      	movcc	r2, #0
 800d31a:	4413      	add	r3, r2
 800d31c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d320:	b17a      	cbz	r2, 800d342 <__mdiff+0x106>
 800d322:	6107      	str	r7, [r0, #16]
 800d324:	e7a4      	b.n	800d270 <__mdiff+0x34>
 800d326:	f856 8b04 	ldr.w	r8, [r6], #4
 800d32a:	fa11 f288 	uxtah	r2, r1, r8
 800d32e:	1414      	asrs	r4, r2, #16
 800d330:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d334:	b292      	uxth	r2, r2
 800d336:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d33a:	f84e 2b04 	str.w	r2, [lr], #4
 800d33e:	1421      	asrs	r1, r4, #16
 800d340:	e7e0      	b.n	800d304 <__mdiff+0xc8>
 800d342:	3f01      	subs	r7, #1
 800d344:	e7ea      	b.n	800d31c <__mdiff+0xe0>
 800d346:	bf00      	nop
 800d348:	08029d28 	.word	0x08029d28
 800d34c:	08029d39 	.word	0x08029d39

0800d350 <__d2b>:
 800d350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d354:	460f      	mov	r7, r1
 800d356:	2101      	movs	r1, #1
 800d358:	ec59 8b10 	vmov	r8, r9, d0
 800d35c:	4616      	mov	r6, r2
 800d35e:	f7ff fcd5 	bl	800cd0c <_Balloc>
 800d362:	4604      	mov	r4, r0
 800d364:	b930      	cbnz	r0, 800d374 <__d2b+0x24>
 800d366:	4602      	mov	r2, r0
 800d368:	4b24      	ldr	r3, [pc, #144]	; (800d3fc <__d2b+0xac>)
 800d36a:	4825      	ldr	r0, [pc, #148]	; (800d400 <__d2b+0xb0>)
 800d36c:	f240 310f 	movw	r1, #783	; 0x30f
 800d370:	f000 fbc6 	bl	800db00 <__assert_func>
 800d374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d37c:	bb2d      	cbnz	r5, 800d3ca <__d2b+0x7a>
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	f1b8 0300 	subs.w	r3, r8, #0
 800d384:	d026      	beq.n	800d3d4 <__d2b+0x84>
 800d386:	4668      	mov	r0, sp
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	f7ff fd87 	bl	800ce9c <__lo0bits>
 800d38e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d392:	b1e8      	cbz	r0, 800d3d0 <__d2b+0x80>
 800d394:	f1c0 0320 	rsb	r3, r0, #32
 800d398:	fa02 f303 	lsl.w	r3, r2, r3
 800d39c:	430b      	orrs	r3, r1
 800d39e:	40c2      	lsrs	r2, r0
 800d3a0:	6163      	str	r3, [r4, #20]
 800d3a2:	9201      	str	r2, [sp, #4]
 800d3a4:	9b01      	ldr	r3, [sp, #4]
 800d3a6:	61a3      	str	r3, [r4, #24]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	bf14      	ite	ne
 800d3ac:	2202      	movne	r2, #2
 800d3ae:	2201      	moveq	r2, #1
 800d3b0:	6122      	str	r2, [r4, #16]
 800d3b2:	b1bd      	cbz	r5, 800d3e4 <__d2b+0x94>
 800d3b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3b8:	4405      	add	r5, r0
 800d3ba:	603d      	str	r5, [r7, #0]
 800d3bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3c0:	6030      	str	r0, [r6, #0]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	b003      	add	sp, #12
 800d3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3ce:	e7d6      	b.n	800d37e <__d2b+0x2e>
 800d3d0:	6161      	str	r1, [r4, #20]
 800d3d2:	e7e7      	b.n	800d3a4 <__d2b+0x54>
 800d3d4:	a801      	add	r0, sp, #4
 800d3d6:	f7ff fd61 	bl	800ce9c <__lo0bits>
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	6163      	str	r3, [r4, #20]
 800d3de:	3020      	adds	r0, #32
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	e7e5      	b.n	800d3b0 <__d2b+0x60>
 800d3e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3ec:	6038      	str	r0, [r7, #0]
 800d3ee:	6918      	ldr	r0, [r3, #16]
 800d3f0:	f7ff fd34 	bl	800ce5c <__hi0bits>
 800d3f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3f8:	e7e2      	b.n	800d3c0 <__d2b+0x70>
 800d3fa:	bf00      	nop
 800d3fc:	08029d28 	.word	0x08029d28
 800d400:	08029d39 	.word	0x08029d39

0800d404 <__ssputs_r>:
 800d404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	688e      	ldr	r6, [r1, #8]
 800d40a:	461f      	mov	r7, r3
 800d40c:	42be      	cmp	r6, r7
 800d40e:	680b      	ldr	r3, [r1, #0]
 800d410:	4682      	mov	sl, r0
 800d412:	460c      	mov	r4, r1
 800d414:	4690      	mov	r8, r2
 800d416:	d82c      	bhi.n	800d472 <__ssputs_r+0x6e>
 800d418:	898a      	ldrh	r2, [r1, #12]
 800d41a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d41e:	d026      	beq.n	800d46e <__ssputs_r+0x6a>
 800d420:	6965      	ldr	r5, [r4, #20]
 800d422:	6909      	ldr	r1, [r1, #16]
 800d424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d428:	eba3 0901 	sub.w	r9, r3, r1
 800d42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d430:	1c7b      	adds	r3, r7, #1
 800d432:	444b      	add	r3, r9
 800d434:	106d      	asrs	r5, r5, #1
 800d436:	429d      	cmp	r5, r3
 800d438:	bf38      	it	cc
 800d43a:	461d      	movcc	r5, r3
 800d43c:	0553      	lsls	r3, r2, #21
 800d43e:	d527      	bpl.n	800d490 <__ssputs_r+0x8c>
 800d440:	4629      	mov	r1, r5
 800d442:	f7ff fbd7 	bl	800cbf4 <_malloc_r>
 800d446:	4606      	mov	r6, r0
 800d448:	b360      	cbz	r0, 800d4a4 <__ssputs_r+0xa0>
 800d44a:	6921      	ldr	r1, [r4, #16]
 800d44c:	464a      	mov	r2, r9
 800d44e:	f7fe fcd2 	bl	800bdf6 <memcpy>
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	6126      	str	r6, [r4, #16]
 800d460:	6165      	str	r5, [r4, #20]
 800d462:	444e      	add	r6, r9
 800d464:	eba5 0509 	sub.w	r5, r5, r9
 800d468:	6026      	str	r6, [r4, #0]
 800d46a:	60a5      	str	r5, [r4, #8]
 800d46c:	463e      	mov	r6, r7
 800d46e:	42be      	cmp	r6, r7
 800d470:	d900      	bls.n	800d474 <__ssputs_r+0x70>
 800d472:	463e      	mov	r6, r7
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	4632      	mov	r2, r6
 800d478:	4641      	mov	r1, r8
 800d47a:	f000 faf5 	bl	800da68 <memmove>
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	1b9b      	subs	r3, r3, r6
 800d482:	60a3      	str	r3, [r4, #8]
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	4433      	add	r3, r6
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	2000      	movs	r0, #0
 800d48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d490:	462a      	mov	r2, r5
 800d492:	f000 fb7b 	bl	800db8c <_realloc_r>
 800d496:	4606      	mov	r6, r0
 800d498:	2800      	cmp	r0, #0
 800d49a:	d1e0      	bne.n	800d45e <__ssputs_r+0x5a>
 800d49c:	6921      	ldr	r1, [r4, #16]
 800d49e:	4650      	mov	r0, sl
 800d4a0:	f7ff fb34 	bl	800cb0c <_free_r>
 800d4a4:	230c      	movs	r3, #12
 800d4a6:	f8ca 3000 	str.w	r3, [sl]
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4b0:	81a3      	strh	r3, [r4, #12]
 800d4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b6:	e7e9      	b.n	800d48c <__ssputs_r+0x88>

0800d4b8 <_svfiprintf_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	4698      	mov	r8, r3
 800d4be:	898b      	ldrh	r3, [r1, #12]
 800d4c0:	061b      	lsls	r3, r3, #24
 800d4c2:	b09d      	sub	sp, #116	; 0x74
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	d50e      	bpl.n	800d4ea <_svfiprintf_r+0x32>
 800d4cc:	690b      	ldr	r3, [r1, #16]
 800d4ce:	b963      	cbnz	r3, 800d4ea <_svfiprintf_r+0x32>
 800d4d0:	2140      	movs	r1, #64	; 0x40
 800d4d2:	f7ff fb8f 	bl	800cbf4 <_malloc_r>
 800d4d6:	6028      	str	r0, [r5, #0]
 800d4d8:	6128      	str	r0, [r5, #16]
 800d4da:	b920      	cbnz	r0, 800d4e6 <_svfiprintf_r+0x2e>
 800d4dc:	230c      	movs	r3, #12
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e4:	e0d0      	b.n	800d688 <_svfiprintf_r+0x1d0>
 800d4e6:	2340      	movs	r3, #64	; 0x40
 800d4e8:	616b      	str	r3, [r5, #20]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ee:	2320      	movs	r3, #32
 800d4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f8:	2330      	movs	r3, #48	; 0x30
 800d4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6a0 <_svfiprintf_r+0x1e8>
 800d4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d502:	f04f 0901 	mov.w	r9, #1
 800d506:	4623      	mov	r3, r4
 800d508:	469a      	mov	sl, r3
 800d50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50e:	b10a      	cbz	r2, 800d514 <_svfiprintf_r+0x5c>
 800d510:	2a25      	cmp	r2, #37	; 0x25
 800d512:	d1f9      	bne.n	800d508 <_svfiprintf_r+0x50>
 800d514:	ebba 0b04 	subs.w	fp, sl, r4
 800d518:	d00b      	beq.n	800d532 <_svfiprintf_r+0x7a>
 800d51a:	465b      	mov	r3, fp
 800d51c:	4622      	mov	r2, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ff6f 	bl	800d404 <__ssputs_r>
 800d526:	3001      	adds	r0, #1
 800d528:	f000 80a9 	beq.w	800d67e <_svfiprintf_r+0x1c6>
 800d52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d52e:	445a      	add	r2, fp
 800d530:	9209      	str	r2, [sp, #36]	; 0x24
 800d532:	f89a 3000 	ldrb.w	r3, [sl]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80a1 	beq.w	800d67e <_svfiprintf_r+0x1c6>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295
 800d542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d546:	f10a 0a01 	add.w	sl, sl, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	9307      	str	r3, [sp, #28]
 800d54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d552:	931a      	str	r3, [sp, #104]	; 0x68
 800d554:	4654      	mov	r4, sl
 800d556:	2205      	movs	r2, #5
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	4850      	ldr	r0, [pc, #320]	; (800d6a0 <_svfiprintf_r+0x1e8>)
 800d55e:	f7f2 fe3f 	bl	80001e0 <memchr>
 800d562:	9a04      	ldr	r2, [sp, #16]
 800d564:	b9d8      	cbnz	r0, 800d59e <_svfiprintf_r+0xe6>
 800d566:	06d0      	lsls	r0, r2, #27
 800d568:	bf44      	itt	mi
 800d56a:	2320      	movmi	r3, #32
 800d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d570:	0711      	lsls	r1, r2, #28
 800d572:	bf44      	itt	mi
 800d574:	232b      	movmi	r3, #43	; 0x2b
 800d576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d57a:	f89a 3000 	ldrb.w	r3, [sl]
 800d57e:	2b2a      	cmp	r3, #42	; 0x2a
 800d580:	d015      	beq.n	800d5ae <_svfiprintf_r+0xf6>
 800d582:	9a07      	ldr	r2, [sp, #28]
 800d584:	4654      	mov	r4, sl
 800d586:	2000      	movs	r0, #0
 800d588:	f04f 0c0a 	mov.w	ip, #10
 800d58c:	4621      	mov	r1, r4
 800d58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d592:	3b30      	subs	r3, #48	; 0x30
 800d594:	2b09      	cmp	r3, #9
 800d596:	d94d      	bls.n	800d634 <_svfiprintf_r+0x17c>
 800d598:	b1b0      	cbz	r0, 800d5c8 <_svfiprintf_r+0x110>
 800d59a:	9207      	str	r2, [sp, #28]
 800d59c:	e014      	b.n	800d5c8 <_svfiprintf_r+0x110>
 800d59e:	eba0 0308 	sub.w	r3, r0, r8
 800d5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	46a2      	mov	sl, r4
 800d5ac:	e7d2      	b.n	800d554 <_svfiprintf_r+0x9c>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d19      	adds	r1, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9103      	str	r1, [sp, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfbb      	ittet	lt
 800d5ba:	425b      	neglt	r3, r3
 800d5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c0:	9307      	strge	r3, [sp, #28]
 800d5c2:	9307      	strlt	r3, [sp, #28]
 800d5c4:	bfb8      	it	lt
 800d5c6:	9204      	strlt	r2, [sp, #16]
 800d5c8:	7823      	ldrb	r3, [r4, #0]
 800d5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d5cc:	d10c      	bne.n	800d5e8 <_svfiprintf_r+0x130>
 800d5ce:	7863      	ldrb	r3, [r4, #1]
 800d5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d2:	d134      	bne.n	800d63e <_svfiprintf_r+0x186>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	1d1a      	adds	r2, r3, #4
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	9203      	str	r2, [sp, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	bfb8      	it	lt
 800d5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5e4:	3402      	adds	r4, #2
 800d5e6:	9305      	str	r3, [sp, #20]
 800d5e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d6b0 <_svfiprintf_r+0x1f8>
 800d5ec:	7821      	ldrb	r1, [r4, #0]
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	f7f2 fdf5 	bl	80001e0 <memchr>
 800d5f6:	b138      	cbz	r0, 800d608 <_svfiprintf_r+0x150>
 800d5f8:	9b04      	ldr	r3, [sp, #16]
 800d5fa:	eba0 000a 	sub.w	r0, r0, sl
 800d5fe:	2240      	movs	r2, #64	; 0x40
 800d600:	4082      	lsls	r2, r0
 800d602:	4313      	orrs	r3, r2
 800d604:	3401      	adds	r4, #1
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60c:	4825      	ldr	r0, [pc, #148]	; (800d6a4 <_svfiprintf_r+0x1ec>)
 800d60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d612:	2206      	movs	r2, #6
 800d614:	f7f2 fde4 	bl	80001e0 <memchr>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d038      	beq.n	800d68e <_svfiprintf_r+0x1d6>
 800d61c:	4b22      	ldr	r3, [pc, #136]	; (800d6a8 <_svfiprintf_r+0x1f0>)
 800d61e:	bb1b      	cbnz	r3, 800d668 <_svfiprintf_r+0x1b0>
 800d620:	9b03      	ldr	r3, [sp, #12]
 800d622:	3307      	adds	r3, #7
 800d624:	f023 0307 	bic.w	r3, r3, #7
 800d628:	3308      	adds	r3, #8
 800d62a:	9303      	str	r3, [sp, #12]
 800d62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62e:	4433      	add	r3, r6
 800d630:	9309      	str	r3, [sp, #36]	; 0x24
 800d632:	e768      	b.n	800d506 <_svfiprintf_r+0x4e>
 800d634:	fb0c 3202 	mla	r2, ip, r2, r3
 800d638:	460c      	mov	r4, r1
 800d63a:	2001      	movs	r0, #1
 800d63c:	e7a6      	b.n	800d58c <_svfiprintf_r+0xd4>
 800d63e:	2300      	movs	r3, #0
 800d640:	3401      	adds	r4, #1
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	4619      	mov	r1, r3
 800d646:	f04f 0c0a 	mov.w	ip, #10
 800d64a:	4620      	mov	r0, r4
 800d64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d650:	3a30      	subs	r2, #48	; 0x30
 800d652:	2a09      	cmp	r2, #9
 800d654:	d903      	bls.n	800d65e <_svfiprintf_r+0x1a6>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0c6      	beq.n	800d5e8 <_svfiprintf_r+0x130>
 800d65a:	9105      	str	r1, [sp, #20]
 800d65c:	e7c4      	b.n	800d5e8 <_svfiprintf_r+0x130>
 800d65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d662:	4604      	mov	r4, r0
 800d664:	2301      	movs	r3, #1
 800d666:	e7f0      	b.n	800d64a <_svfiprintf_r+0x192>
 800d668:	ab03      	add	r3, sp, #12
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	462a      	mov	r2, r5
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <_svfiprintf_r+0x1f4>)
 800d670:	a904      	add	r1, sp, #16
 800d672:	4638      	mov	r0, r7
 800d674:	f7fd fc88 	bl	800af88 <_printf_float>
 800d678:	1c42      	adds	r2, r0, #1
 800d67a:	4606      	mov	r6, r0
 800d67c:	d1d6      	bne.n	800d62c <_svfiprintf_r+0x174>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	065b      	lsls	r3, r3, #25
 800d682:	f53f af2d 	bmi.w	800d4e0 <_svfiprintf_r+0x28>
 800d686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d688:	b01d      	add	sp, #116	; 0x74
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	ab03      	add	r3, sp, #12
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	462a      	mov	r2, r5
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <_svfiprintf_r+0x1f4>)
 800d696:	a904      	add	r1, sp, #16
 800d698:	4638      	mov	r0, r7
 800d69a:	f7fd ff19 	bl	800b4d0 <_printf_i>
 800d69e:	e7eb      	b.n	800d678 <_svfiprintf_r+0x1c0>
 800d6a0:	08029e94 	.word	0x08029e94
 800d6a4:	08029e9e 	.word	0x08029e9e
 800d6a8:	0800af89 	.word	0x0800af89
 800d6ac:	0800d405 	.word	0x0800d405
 800d6b0:	08029e9a 	.word	0x08029e9a

0800d6b4 <__sfputc_r>:
 800d6b4:	6893      	ldr	r3, [r2, #8]
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	b410      	push	{r4}
 800d6bc:	6093      	str	r3, [r2, #8]
 800d6be:	da08      	bge.n	800d6d2 <__sfputc_r+0x1e>
 800d6c0:	6994      	ldr	r4, [r2, #24]
 800d6c2:	42a3      	cmp	r3, r4
 800d6c4:	db01      	blt.n	800d6ca <__sfputc_r+0x16>
 800d6c6:	290a      	cmp	r1, #10
 800d6c8:	d103      	bne.n	800d6d2 <__sfputc_r+0x1e>
 800d6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ce:	f7fe ba7e 	b.w	800bbce <__swbuf_r>
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	1c58      	adds	r0, r3, #1
 800d6d6:	6010      	str	r0, [r2, #0]
 800d6d8:	7019      	strb	r1, [r3, #0]
 800d6da:	4608      	mov	r0, r1
 800d6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <__sfputs_r>:
 800d6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	460f      	mov	r7, r1
 800d6e8:	4614      	mov	r4, r2
 800d6ea:	18d5      	adds	r5, r2, r3
 800d6ec:	42ac      	cmp	r4, r5
 800d6ee:	d101      	bne.n	800d6f4 <__sfputs_r+0x12>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e007      	b.n	800d704 <__sfputs_r+0x22>
 800d6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f8:	463a      	mov	r2, r7
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff ffda 	bl	800d6b4 <__sfputc_r>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	d1f3      	bne.n	800d6ec <__sfputs_r+0xa>
 800d704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d708 <_vfiprintf_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	460d      	mov	r5, r1
 800d70e:	b09d      	sub	sp, #116	; 0x74
 800d710:	4614      	mov	r4, r2
 800d712:	4698      	mov	r8, r3
 800d714:	4606      	mov	r6, r0
 800d716:	b118      	cbz	r0, 800d720 <_vfiprintf_r+0x18>
 800d718:	6a03      	ldr	r3, [r0, #32]
 800d71a:	b90b      	cbnz	r3, 800d720 <_vfiprintf_r+0x18>
 800d71c:	f7fe f948 	bl	800b9b0 <__sinit>
 800d720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d722:	07d9      	lsls	r1, r3, #31
 800d724:	d405      	bmi.n	800d732 <_vfiprintf_r+0x2a>
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	059a      	lsls	r2, r3, #22
 800d72a:	d402      	bmi.n	800d732 <_vfiprintf_r+0x2a>
 800d72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d72e:	f7fe fb60 	bl	800bdf2 <__retarget_lock_acquire_recursive>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	071b      	lsls	r3, r3, #28
 800d736:	d501      	bpl.n	800d73c <_vfiprintf_r+0x34>
 800d738:	692b      	ldr	r3, [r5, #16]
 800d73a:	b99b      	cbnz	r3, 800d764 <_vfiprintf_r+0x5c>
 800d73c:	4629      	mov	r1, r5
 800d73e:	4630      	mov	r0, r6
 800d740:	f7fe fa82 	bl	800bc48 <__swsetup_r>
 800d744:	b170      	cbz	r0, 800d764 <_vfiprintf_r+0x5c>
 800d746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d748:	07dc      	lsls	r4, r3, #31
 800d74a:	d504      	bpl.n	800d756 <_vfiprintf_r+0x4e>
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	b01d      	add	sp, #116	; 0x74
 800d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	0598      	lsls	r0, r3, #22
 800d75a:	d4f7      	bmi.n	800d74c <_vfiprintf_r+0x44>
 800d75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d75e:	f7fe fb49 	bl	800bdf4 <__retarget_lock_release_recursive>
 800d762:	e7f3      	b.n	800d74c <_vfiprintf_r+0x44>
 800d764:	2300      	movs	r3, #0
 800d766:	9309      	str	r3, [sp, #36]	; 0x24
 800d768:	2320      	movs	r3, #32
 800d76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d772:	2330      	movs	r3, #48	; 0x30
 800d774:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d928 <_vfiprintf_r+0x220>
 800d778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d77c:	f04f 0901 	mov.w	r9, #1
 800d780:	4623      	mov	r3, r4
 800d782:	469a      	mov	sl, r3
 800d784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d788:	b10a      	cbz	r2, 800d78e <_vfiprintf_r+0x86>
 800d78a:	2a25      	cmp	r2, #37	; 0x25
 800d78c:	d1f9      	bne.n	800d782 <_vfiprintf_r+0x7a>
 800d78e:	ebba 0b04 	subs.w	fp, sl, r4
 800d792:	d00b      	beq.n	800d7ac <_vfiprintf_r+0xa4>
 800d794:	465b      	mov	r3, fp
 800d796:	4622      	mov	r2, r4
 800d798:	4629      	mov	r1, r5
 800d79a:	4630      	mov	r0, r6
 800d79c:	f7ff ffa1 	bl	800d6e2 <__sfputs_r>
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	f000 80a9 	beq.w	800d8f8 <_vfiprintf_r+0x1f0>
 800d7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7a8:	445a      	add	r2, fp
 800d7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 80a1 	beq.w	800d8f8 <_vfiprintf_r+0x1f0>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7c0:	f10a 0a01 	add.w	sl, sl, #1
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	9307      	str	r3, [sp, #28]
 800d7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ce:	4654      	mov	r4, sl
 800d7d0:	2205      	movs	r2, #5
 800d7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d6:	4854      	ldr	r0, [pc, #336]	; (800d928 <_vfiprintf_r+0x220>)
 800d7d8:	f7f2 fd02 	bl	80001e0 <memchr>
 800d7dc:	9a04      	ldr	r2, [sp, #16]
 800d7de:	b9d8      	cbnz	r0, 800d818 <_vfiprintf_r+0x110>
 800d7e0:	06d1      	lsls	r1, r2, #27
 800d7e2:	bf44      	itt	mi
 800d7e4:	2320      	movmi	r3, #32
 800d7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7ea:	0713      	lsls	r3, r2, #28
 800d7ec:	bf44      	itt	mi
 800d7ee:	232b      	movmi	r3, #43	; 0x2b
 800d7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d7fa:	d015      	beq.n	800d828 <_vfiprintf_r+0x120>
 800d7fc:	9a07      	ldr	r2, [sp, #28]
 800d7fe:	4654      	mov	r4, sl
 800d800:	2000      	movs	r0, #0
 800d802:	f04f 0c0a 	mov.w	ip, #10
 800d806:	4621      	mov	r1, r4
 800d808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d80c:	3b30      	subs	r3, #48	; 0x30
 800d80e:	2b09      	cmp	r3, #9
 800d810:	d94d      	bls.n	800d8ae <_vfiprintf_r+0x1a6>
 800d812:	b1b0      	cbz	r0, 800d842 <_vfiprintf_r+0x13a>
 800d814:	9207      	str	r2, [sp, #28]
 800d816:	e014      	b.n	800d842 <_vfiprintf_r+0x13a>
 800d818:	eba0 0308 	sub.w	r3, r0, r8
 800d81c:	fa09 f303 	lsl.w	r3, r9, r3
 800d820:	4313      	orrs	r3, r2
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	46a2      	mov	sl, r4
 800d826:	e7d2      	b.n	800d7ce <_vfiprintf_r+0xc6>
 800d828:	9b03      	ldr	r3, [sp, #12]
 800d82a:	1d19      	adds	r1, r3, #4
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	9103      	str	r1, [sp, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	bfbb      	ittet	lt
 800d834:	425b      	neglt	r3, r3
 800d836:	f042 0202 	orrlt.w	r2, r2, #2
 800d83a:	9307      	strge	r3, [sp, #28]
 800d83c:	9307      	strlt	r3, [sp, #28]
 800d83e:	bfb8      	it	lt
 800d840:	9204      	strlt	r2, [sp, #16]
 800d842:	7823      	ldrb	r3, [r4, #0]
 800d844:	2b2e      	cmp	r3, #46	; 0x2e
 800d846:	d10c      	bne.n	800d862 <_vfiprintf_r+0x15a>
 800d848:	7863      	ldrb	r3, [r4, #1]
 800d84a:	2b2a      	cmp	r3, #42	; 0x2a
 800d84c:	d134      	bne.n	800d8b8 <_vfiprintf_r+0x1b0>
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	1d1a      	adds	r2, r3, #4
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	9203      	str	r2, [sp, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	bfb8      	it	lt
 800d85a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d85e:	3402      	adds	r4, #2
 800d860:	9305      	str	r3, [sp, #20]
 800d862:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d938 <_vfiprintf_r+0x230>
 800d866:	7821      	ldrb	r1, [r4, #0]
 800d868:	2203      	movs	r2, #3
 800d86a:	4650      	mov	r0, sl
 800d86c:	f7f2 fcb8 	bl	80001e0 <memchr>
 800d870:	b138      	cbz	r0, 800d882 <_vfiprintf_r+0x17a>
 800d872:	9b04      	ldr	r3, [sp, #16]
 800d874:	eba0 000a 	sub.w	r0, r0, sl
 800d878:	2240      	movs	r2, #64	; 0x40
 800d87a:	4082      	lsls	r2, r0
 800d87c:	4313      	orrs	r3, r2
 800d87e:	3401      	adds	r4, #1
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d886:	4829      	ldr	r0, [pc, #164]	; (800d92c <_vfiprintf_r+0x224>)
 800d888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d88c:	2206      	movs	r2, #6
 800d88e:	f7f2 fca7 	bl	80001e0 <memchr>
 800d892:	2800      	cmp	r0, #0
 800d894:	d03f      	beq.n	800d916 <_vfiprintf_r+0x20e>
 800d896:	4b26      	ldr	r3, [pc, #152]	; (800d930 <_vfiprintf_r+0x228>)
 800d898:	bb1b      	cbnz	r3, 800d8e2 <_vfiprintf_r+0x1da>
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	3307      	adds	r3, #7
 800d89e:	f023 0307 	bic.w	r3, r3, #7
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	9303      	str	r3, [sp, #12]
 800d8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8a8:	443b      	add	r3, r7
 800d8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ac:	e768      	b.n	800d780 <_vfiprintf_r+0x78>
 800d8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	e7a6      	b.n	800d806 <_vfiprintf_r+0xfe>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	3401      	adds	r4, #1
 800d8bc:	9305      	str	r3, [sp, #20]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	f04f 0c0a 	mov.w	ip, #10
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ca:	3a30      	subs	r2, #48	; 0x30
 800d8cc:	2a09      	cmp	r2, #9
 800d8ce:	d903      	bls.n	800d8d8 <_vfiprintf_r+0x1d0>
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0c6      	beq.n	800d862 <_vfiprintf_r+0x15a>
 800d8d4:	9105      	str	r1, [sp, #20]
 800d8d6:	e7c4      	b.n	800d862 <_vfiprintf_r+0x15a>
 800d8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8dc:	4604      	mov	r4, r0
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e7f0      	b.n	800d8c4 <_vfiprintf_r+0x1bc>
 800d8e2:	ab03      	add	r3, sp, #12
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	462a      	mov	r2, r5
 800d8e8:	4b12      	ldr	r3, [pc, #72]	; (800d934 <_vfiprintf_r+0x22c>)
 800d8ea:	a904      	add	r1, sp, #16
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7fd fb4b 	bl	800af88 <_printf_float>
 800d8f2:	4607      	mov	r7, r0
 800d8f4:	1c78      	adds	r0, r7, #1
 800d8f6:	d1d6      	bne.n	800d8a6 <_vfiprintf_r+0x19e>
 800d8f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8fa:	07d9      	lsls	r1, r3, #31
 800d8fc:	d405      	bmi.n	800d90a <_vfiprintf_r+0x202>
 800d8fe:	89ab      	ldrh	r3, [r5, #12]
 800d900:	059a      	lsls	r2, r3, #22
 800d902:	d402      	bmi.n	800d90a <_vfiprintf_r+0x202>
 800d904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d906:	f7fe fa75 	bl	800bdf4 <__retarget_lock_release_recursive>
 800d90a:	89ab      	ldrh	r3, [r5, #12]
 800d90c:	065b      	lsls	r3, r3, #25
 800d90e:	f53f af1d 	bmi.w	800d74c <_vfiprintf_r+0x44>
 800d912:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d914:	e71c      	b.n	800d750 <_vfiprintf_r+0x48>
 800d916:	ab03      	add	r3, sp, #12
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	462a      	mov	r2, r5
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <_vfiprintf_r+0x22c>)
 800d91e:	a904      	add	r1, sp, #16
 800d920:	4630      	mov	r0, r6
 800d922:	f7fd fdd5 	bl	800b4d0 <_printf_i>
 800d926:	e7e4      	b.n	800d8f2 <_vfiprintf_r+0x1ea>
 800d928:	08029e94 	.word	0x08029e94
 800d92c:	08029e9e 	.word	0x08029e9e
 800d930:	0800af89 	.word	0x0800af89
 800d934:	0800d6e3 	.word	0x0800d6e3
 800d938:	08029e9a 	.word	0x08029e9a

0800d93c <__swhatbuf_r>:
 800d93c:	b570      	push	{r4, r5, r6, lr}
 800d93e:	460c      	mov	r4, r1
 800d940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d944:	2900      	cmp	r1, #0
 800d946:	b096      	sub	sp, #88	; 0x58
 800d948:	4615      	mov	r5, r2
 800d94a:	461e      	mov	r6, r3
 800d94c:	da0d      	bge.n	800d96a <__swhatbuf_r+0x2e>
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d954:	f04f 0100 	mov.w	r1, #0
 800d958:	bf0c      	ite	eq
 800d95a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d95e:	2340      	movne	r3, #64	; 0x40
 800d960:	2000      	movs	r0, #0
 800d962:	6031      	str	r1, [r6, #0]
 800d964:	602b      	str	r3, [r5, #0]
 800d966:	b016      	add	sp, #88	; 0x58
 800d968:	bd70      	pop	{r4, r5, r6, pc}
 800d96a:	466a      	mov	r2, sp
 800d96c:	f000 f896 	bl	800da9c <_fstat_r>
 800d970:	2800      	cmp	r0, #0
 800d972:	dbec      	blt.n	800d94e <__swhatbuf_r+0x12>
 800d974:	9901      	ldr	r1, [sp, #4]
 800d976:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d97a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d97e:	4259      	negs	r1, r3
 800d980:	4159      	adcs	r1, r3
 800d982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d986:	e7eb      	b.n	800d960 <__swhatbuf_r+0x24>

0800d988 <__smakebuf_r>:
 800d988:	898b      	ldrh	r3, [r1, #12]
 800d98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d98c:	079d      	lsls	r5, r3, #30
 800d98e:	4606      	mov	r6, r0
 800d990:	460c      	mov	r4, r1
 800d992:	d507      	bpl.n	800d9a4 <__smakebuf_r+0x1c>
 800d994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	2301      	movs	r3, #1
 800d99e:	6163      	str	r3, [r4, #20]
 800d9a0:	b002      	add	sp, #8
 800d9a2:	bd70      	pop	{r4, r5, r6, pc}
 800d9a4:	ab01      	add	r3, sp, #4
 800d9a6:	466a      	mov	r2, sp
 800d9a8:	f7ff ffc8 	bl	800d93c <__swhatbuf_r>
 800d9ac:	9900      	ldr	r1, [sp, #0]
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f7ff f91f 	bl	800cbf4 <_malloc_r>
 800d9b6:	b948      	cbnz	r0, 800d9cc <__smakebuf_r+0x44>
 800d9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9bc:	059a      	lsls	r2, r3, #22
 800d9be:	d4ef      	bmi.n	800d9a0 <__smakebuf_r+0x18>
 800d9c0:	f023 0303 	bic.w	r3, r3, #3
 800d9c4:	f043 0302 	orr.w	r3, r3, #2
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	e7e3      	b.n	800d994 <__smakebuf_r+0xc>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	6020      	str	r0, [r4, #0]
 800d9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d4:	81a3      	strh	r3, [r4, #12]
 800d9d6:	9b00      	ldr	r3, [sp, #0]
 800d9d8:	6163      	str	r3, [r4, #20]
 800d9da:	9b01      	ldr	r3, [sp, #4]
 800d9dc:	6120      	str	r0, [r4, #16]
 800d9de:	b15b      	cbz	r3, 800d9f8 <__smakebuf_r+0x70>
 800d9e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f000 f86b 	bl	800dac0 <_isatty_r>
 800d9ea:	b128      	cbz	r0, 800d9f8 <__smakebuf_r+0x70>
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	f023 0303 	bic.w	r3, r3, #3
 800d9f2:	f043 0301 	orr.w	r3, r3, #1
 800d9f6:	81a3      	strh	r3, [r4, #12]
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	431d      	orrs	r5, r3
 800d9fc:	81a5      	strh	r5, [r4, #12]
 800d9fe:	e7cf      	b.n	800d9a0 <__smakebuf_r+0x18>

0800da00 <_putc_r>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	460d      	mov	r5, r1
 800da04:	4614      	mov	r4, r2
 800da06:	4606      	mov	r6, r0
 800da08:	b118      	cbz	r0, 800da12 <_putc_r+0x12>
 800da0a:	6a03      	ldr	r3, [r0, #32]
 800da0c:	b90b      	cbnz	r3, 800da12 <_putc_r+0x12>
 800da0e:	f7fd ffcf 	bl	800b9b0 <__sinit>
 800da12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da14:	07d8      	lsls	r0, r3, #31
 800da16:	d405      	bmi.n	800da24 <_putc_r+0x24>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	0599      	lsls	r1, r3, #22
 800da1c:	d402      	bmi.n	800da24 <_putc_r+0x24>
 800da1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da20:	f7fe f9e7 	bl	800bdf2 <__retarget_lock_acquire_recursive>
 800da24:	68a3      	ldr	r3, [r4, #8]
 800da26:	3b01      	subs	r3, #1
 800da28:	2b00      	cmp	r3, #0
 800da2a:	60a3      	str	r3, [r4, #8]
 800da2c:	da05      	bge.n	800da3a <_putc_r+0x3a>
 800da2e:	69a2      	ldr	r2, [r4, #24]
 800da30:	4293      	cmp	r3, r2
 800da32:	db12      	blt.n	800da5a <_putc_r+0x5a>
 800da34:	b2eb      	uxtb	r3, r5
 800da36:	2b0a      	cmp	r3, #10
 800da38:	d00f      	beq.n	800da5a <_putc_r+0x5a>
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	6022      	str	r2, [r4, #0]
 800da40:	701d      	strb	r5, [r3, #0]
 800da42:	b2ed      	uxtb	r5, r5
 800da44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da46:	07da      	lsls	r2, r3, #31
 800da48:	d405      	bmi.n	800da56 <_putc_r+0x56>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	059b      	lsls	r3, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_putc_r+0x56>
 800da50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da52:	f7fe f9cf 	bl	800bdf4 <__retarget_lock_release_recursive>
 800da56:	4628      	mov	r0, r5
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	4629      	mov	r1, r5
 800da5c:	4622      	mov	r2, r4
 800da5e:	4630      	mov	r0, r6
 800da60:	f7fe f8b5 	bl	800bbce <__swbuf_r>
 800da64:	4605      	mov	r5, r0
 800da66:	e7ed      	b.n	800da44 <_putc_r+0x44>

0800da68 <memmove>:
 800da68:	4288      	cmp	r0, r1
 800da6a:	b510      	push	{r4, lr}
 800da6c:	eb01 0402 	add.w	r4, r1, r2
 800da70:	d902      	bls.n	800da78 <memmove+0x10>
 800da72:	4284      	cmp	r4, r0
 800da74:	4623      	mov	r3, r4
 800da76:	d807      	bhi.n	800da88 <memmove+0x20>
 800da78:	1e43      	subs	r3, r0, #1
 800da7a:	42a1      	cmp	r1, r4
 800da7c:	d008      	beq.n	800da90 <memmove+0x28>
 800da7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da86:	e7f8      	b.n	800da7a <memmove+0x12>
 800da88:	4402      	add	r2, r0
 800da8a:	4601      	mov	r1, r0
 800da8c:	428a      	cmp	r2, r1
 800da8e:	d100      	bne.n	800da92 <memmove+0x2a>
 800da90:	bd10      	pop	{r4, pc}
 800da92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da9a:	e7f7      	b.n	800da8c <memmove+0x24>

0800da9c <_fstat_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4d07      	ldr	r5, [pc, #28]	; (800dabc <_fstat_r+0x20>)
 800daa0:	2300      	movs	r3, #0
 800daa2:	4604      	mov	r4, r0
 800daa4:	4608      	mov	r0, r1
 800daa6:	4611      	mov	r1, r2
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	f7f4 fd04 	bl	80024b6 <_fstat>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	d102      	bne.n	800dab8 <_fstat_r+0x1c>
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	b103      	cbz	r3, 800dab8 <_fstat_r+0x1c>
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	bd38      	pop	{r3, r4, r5, pc}
 800daba:	bf00      	nop
 800dabc:	2000fc74 	.word	0x2000fc74

0800dac0 <_isatty_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d06      	ldr	r5, [pc, #24]	; (800dadc <_isatty_r+0x1c>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f4 fcf8 	bl	80024c0 <_isatty>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_isatty_r+0x1a>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_isatty_r+0x1a>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	2000fc74 	.word	0x2000fc74

0800dae0 <_sbrk_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d06      	ldr	r5, [pc, #24]	; (800dafc <_sbrk_r+0x1c>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	602b      	str	r3, [r5, #0]
 800daec:	f7f4 fcec 	bl	80024c8 <_sbrk>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_sbrk_r+0x1a>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_sbrk_r+0x1a>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	2000fc74 	.word	0x2000fc74

0800db00 <__assert_func>:
 800db00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db02:	4614      	mov	r4, r2
 800db04:	461a      	mov	r2, r3
 800db06:	4b09      	ldr	r3, [pc, #36]	; (800db2c <__assert_func+0x2c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4605      	mov	r5, r0
 800db0c:	68d8      	ldr	r0, [r3, #12]
 800db0e:	b14c      	cbz	r4, 800db24 <__assert_func+0x24>
 800db10:	4b07      	ldr	r3, [pc, #28]	; (800db30 <__assert_func+0x30>)
 800db12:	9100      	str	r1, [sp, #0]
 800db14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db18:	4906      	ldr	r1, [pc, #24]	; (800db34 <__assert_func+0x34>)
 800db1a:	462b      	mov	r3, r5
 800db1c:	f000 f872 	bl	800dc04 <fiprintf>
 800db20:	f000 f882 	bl	800dc28 <abort>
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <__assert_func+0x38>)
 800db26:	461c      	mov	r4, r3
 800db28:	e7f3      	b.n	800db12 <__assert_func+0x12>
 800db2a:	bf00      	nop
 800db2c:	200001c8 	.word	0x200001c8
 800db30:	08029eaf 	.word	0x08029eaf
 800db34:	08029ebc 	.word	0x08029ebc
 800db38:	08029eea 	.word	0x08029eea

0800db3c <_calloc_r>:
 800db3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db3e:	fba1 2402 	umull	r2, r4, r1, r2
 800db42:	b94c      	cbnz	r4, 800db58 <_calloc_r+0x1c>
 800db44:	4611      	mov	r1, r2
 800db46:	9201      	str	r2, [sp, #4]
 800db48:	f7ff f854 	bl	800cbf4 <_malloc_r>
 800db4c:	9a01      	ldr	r2, [sp, #4]
 800db4e:	4605      	mov	r5, r0
 800db50:	b930      	cbnz	r0, 800db60 <_calloc_r+0x24>
 800db52:	4628      	mov	r0, r5
 800db54:	b003      	add	sp, #12
 800db56:	bd30      	pop	{r4, r5, pc}
 800db58:	220c      	movs	r2, #12
 800db5a:	6002      	str	r2, [r0, #0]
 800db5c:	2500      	movs	r5, #0
 800db5e:	e7f8      	b.n	800db52 <_calloc_r+0x16>
 800db60:	4621      	mov	r1, r4
 800db62:	f7fe f8c9 	bl	800bcf8 <memset>
 800db66:	e7f4      	b.n	800db52 <_calloc_r+0x16>

0800db68 <__ascii_mbtowc>:
 800db68:	b082      	sub	sp, #8
 800db6a:	b901      	cbnz	r1, 800db6e <__ascii_mbtowc+0x6>
 800db6c:	a901      	add	r1, sp, #4
 800db6e:	b142      	cbz	r2, 800db82 <__ascii_mbtowc+0x1a>
 800db70:	b14b      	cbz	r3, 800db86 <__ascii_mbtowc+0x1e>
 800db72:	7813      	ldrb	r3, [r2, #0]
 800db74:	600b      	str	r3, [r1, #0]
 800db76:	7812      	ldrb	r2, [r2, #0]
 800db78:	1e10      	subs	r0, r2, #0
 800db7a:	bf18      	it	ne
 800db7c:	2001      	movne	r0, #1
 800db7e:	b002      	add	sp, #8
 800db80:	4770      	bx	lr
 800db82:	4610      	mov	r0, r2
 800db84:	e7fb      	b.n	800db7e <__ascii_mbtowc+0x16>
 800db86:	f06f 0001 	mvn.w	r0, #1
 800db8a:	e7f8      	b.n	800db7e <__ascii_mbtowc+0x16>

0800db8c <_realloc_r>:
 800db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db90:	4680      	mov	r8, r0
 800db92:	4614      	mov	r4, r2
 800db94:	460e      	mov	r6, r1
 800db96:	b921      	cbnz	r1, 800dba2 <_realloc_r+0x16>
 800db98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db9c:	4611      	mov	r1, r2
 800db9e:	f7ff b829 	b.w	800cbf4 <_malloc_r>
 800dba2:	b92a      	cbnz	r2, 800dbb0 <_realloc_r+0x24>
 800dba4:	f7fe ffb2 	bl	800cb0c <_free_r>
 800dba8:	4625      	mov	r5, r4
 800dbaa:	4628      	mov	r0, r5
 800dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb0:	f000 f841 	bl	800dc36 <_malloc_usable_size_r>
 800dbb4:	4284      	cmp	r4, r0
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	d802      	bhi.n	800dbc0 <_realloc_r+0x34>
 800dbba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbbe:	d812      	bhi.n	800dbe6 <_realloc_r+0x5a>
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	f7ff f816 	bl	800cbf4 <_malloc_r>
 800dbc8:	4605      	mov	r5, r0
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0ed      	beq.n	800dbaa <_realloc_r+0x1e>
 800dbce:	42bc      	cmp	r4, r7
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	bf28      	it	cs
 800dbd6:	463a      	movcs	r2, r7
 800dbd8:	f7fe f90d 	bl	800bdf6 <memcpy>
 800dbdc:	4631      	mov	r1, r6
 800dbde:	4640      	mov	r0, r8
 800dbe0:	f7fe ff94 	bl	800cb0c <_free_r>
 800dbe4:	e7e1      	b.n	800dbaa <_realloc_r+0x1e>
 800dbe6:	4635      	mov	r5, r6
 800dbe8:	e7df      	b.n	800dbaa <_realloc_r+0x1e>

0800dbea <__ascii_wctomb>:
 800dbea:	b149      	cbz	r1, 800dc00 <__ascii_wctomb+0x16>
 800dbec:	2aff      	cmp	r2, #255	; 0xff
 800dbee:	bf85      	ittet	hi
 800dbf0:	238a      	movhi	r3, #138	; 0x8a
 800dbf2:	6003      	strhi	r3, [r0, #0]
 800dbf4:	700a      	strbls	r2, [r1, #0]
 800dbf6:	f04f 30ff 	movhi.w	r0, #4294967295
 800dbfa:	bf98      	it	ls
 800dbfc:	2001      	movls	r0, #1
 800dbfe:	4770      	bx	lr
 800dc00:	4608      	mov	r0, r1
 800dc02:	4770      	bx	lr

0800dc04 <fiprintf>:
 800dc04:	b40e      	push	{r1, r2, r3}
 800dc06:	b503      	push	{r0, r1, lr}
 800dc08:	4601      	mov	r1, r0
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	4805      	ldr	r0, [pc, #20]	; (800dc24 <fiprintf+0x20>)
 800dc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc12:	6800      	ldr	r0, [r0, #0]
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	f7ff fd77 	bl	800d708 <_vfiprintf_r>
 800dc1a:	b002      	add	sp, #8
 800dc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc20:	b003      	add	sp, #12
 800dc22:	4770      	bx	lr
 800dc24:	200001c8 	.word	0x200001c8

0800dc28 <abort>:
 800dc28:	b508      	push	{r3, lr}
 800dc2a:	2006      	movs	r0, #6
 800dc2c:	f000 f834 	bl	800dc98 <raise>
 800dc30:	2001      	movs	r0, #1
 800dc32:	f7f4 fc1d 	bl	8002470 <_exit>

0800dc36 <_malloc_usable_size_r>:
 800dc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3a:	1f18      	subs	r0, r3, #4
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfbc      	itt	lt
 800dc40:	580b      	ldrlt	r3, [r1, r0]
 800dc42:	18c0      	addlt	r0, r0, r3
 800dc44:	4770      	bx	lr

0800dc46 <_raise_r>:
 800dc46:	291f      	cmp	r1, #31
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	460d      	mov	r5, r1
 800dc4e:	d904      	bls.n	800dc5a <_raise_r+0x14>
 800dc50:	2316      	movs	r3, #22
 800dc52:	6003      	str	r3, [r0, #0]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	bd38      	pop	{r3, r4, r5, pc}
 800dc5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc5c:	b112      	cbz	r2, 800dc64 <_raise_r+0x1e>
 800dc5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc62:	b94b      	cbnz	r3, 800dc78 <_raise_r+0x32>
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 f831 	bl	800dccc <_getpid_r>
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	4601      	mov	r1, r0
 800dc6e:	4620      	mov	r0, r4
 800dc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc74:	f000 b818 	b.w	800dca8 <_kill_r>
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d00a      	beq.n	800dc92 <_raise_r+0x4c>
 800dc7c:	1c59      	adds	r1, r3, #1
 800dc7e:	d103      	bne.n	800dc88 <_raise_r+0x42>
 800dc80:	2316      	movs	r3, #22
 800dc82:	6003      	str	r3, [r0, #0]
 800dc84:	2001      	movs	r0, #1
 800dc86:	e7e7      	b.n	800dc58 <_raise_r+0x12>
 800dc88:	2400      	movs	r4, #0
 800dc8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc8e:	4628      	mov	r0, r5
 800dc90:	4798      	blx	r3
 800dc92:	2000      	movs	r0, #0
 800dc94:	e7e0      	b.n	800dc58 <_raise_r+0x12>
	...

0800dc98 <raise>:
 800dc98:	4b02      	ldr	r3, [pc, #8]	; (800dca4 <raise+0xc>)
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	f7ff bfd2 	b.w	800dc46 <_raise_r>
 800dca2:	bf00      	nop
 800dca4:	200001c8 	.word	0x200001c8

0800dca8 <_kill_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d07      	ldr	r5, [pc, #28]	; (800dcc8 <_kill_r+0x20>)
 800dcac:	2300      	movs	r3, #0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	602b      	str	r3, [r5, #0]
 800dcb6:	f7f4 fbd3 	bl	8002460 <_kill>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	d102      	bne.n	800dcc4 <_kill_r+0x1c>
 800dcbe:	682b      	ldr	r3, [r5, #0]
 800dcc0:	b103      	cbz	r3, 800dcc4 <_kill_r+0x1c>
 800dcc2:	6023      	str	r3, [r4, #0]
 800dcc4:	bd38      	pop	{r3, r4, r5, pc}
 800dcc6:	bf00      	nop
 800dcc8:	2000fc74 	.word	0x2000fc74

0800dccc <_getpid_r>:
 800dccc:	f7f4 bbc6 	b.w	800245c <_getpid>

0800dcd0 <atan2>:
 800dcd0:	f000 b822 	b.w	800dd18 <__ieee754_atan2>

0800dcd4 <sqrtf>:
 800dcd4:	b508      	push	{r3, lr}
 800dcd6:	ed2d 8b02 	vpush	{d8}
 800dcda:	eeb0 8a40 	vmov.f32	s16, s0
 800dcde:	f000 f817 	bl	800dd10 <__ieee754_sqrtf>
 800dce2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcea:	d60c      	bvs.n	800dd06 <sqrtf+0x32>
 800dcec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dd0c <sqrtf+0x38>
 800dcf0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf8:	d505      	bpl.n	800dd06 <sqrtf+0x32>
 800dcfa:	f7fe f84f 	bl	800bd9c <__errno>
 800dcfe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dd02:	2321      	movs	r3, #33	; 0x21
 800dd04:	6003      	str	r3, [r0, #0]
 800dd06:	ecbd 8b02 	vpop	{d8}
 800dd0a:	bd08      	pop	{r3, pc}
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <__ieee754_sqrtf>:
 800dd10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dd14:	4770      	bx	lr
	...

0800dd18 <__ieee754_atan2>:
 800dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd1c:	ec57 6b11 	vmov	r6, r7, d1
 800dd20:	4273      	negs	r3, r6
 800dd22:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800dea0 <__ieee754_atan2+0x188>
 800dd26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800dd2a:	4333      	orrs	r3, r6
 800dd2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dd30:	4543      	cmp	r3, r8
 800dd32:	ec51 0b10 	vmov	r0, r1, d0
 800dd36:	ee11 5a10 	vmov	r5, s2
 800dd3a:	d80a      	bhi.n	800dd52 <__ieee754_atan2+0x3a>
 800dd3c:	4244      	negs	r4, r0
 800dd3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd42:	4304      	orrs	r4, r0
 800dd44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dd48:	4544      	cmp	r4, r8
 800dd4a:	ee10 9a10 	vmov	r9, s0
 800dd4e:	468e      	mov	lr, r1
 800dd50:	d907      	bls.n	800dd62 <__ieee754_atan2+0x4a>
 800dd52:	4632      	mov	r2, r6
 800dd54:	463b      	mov	r3, r7
 800dd56:	f7f2 faa1 	bl	800029c <__adddf3>
 800dd5a:	ec41 0b10 	vmov	d0, r0, r1
 800dd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800dd66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd6a:	4334      	orrs	r4, r6
 800dd6c:	d103      	bne.n	800dd76 <__ieee754_atan2+0x5e>
 800dd6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd72:	f000 b899 	b.w	800dea8 <atan>
 800dd76:	17bc      	asrs	r4, r7, #30
 800dd78:	f004 0402 	and.w	r4, r4, #2
 800dd7c:	ea53 0909 	orrs.w	r9, r3, r9
 800dd80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dd84:	d107      	bne.n	800dd96 <__ieee754_atan2+0x7e>
 800dd86:	2c02      	cmp	r4, #2
 800dd88:	d05f      	beq.n	800de4a <__ieee754_atan2+0x132>
 800dd8a:	2c03      	cmp	r4, #3
 800dd8c:	d1e5      	bne.n	800dd5a <__ieee754_atan2+0x42>
 800dd8e:	a140      	add	r1, pc, #256	; (adr r1, 800de90 <__ieee754_atan2+0x178>)
 800dd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd94:	e7e1      	b.n	800dd5a <__ieee754_atan2+0x42>
 800dd96:	4315      	orrs	r5, r2
 800dd98:	d106      	bne.n	800dda8 <__ieee754_atan2+0x90>
 800dd9a:	f1be 0f00 	cmp.w	lr, #0
 800dd9e:	da5f      	bge.n	800de60 <__ieee754_atan2+0x148>
 800dda0:	a13d      	add	r1, pc, #244	; (adr r1, 800de98 <__ieee754_atan2+0x180>)
 800dda2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dda6:	e7d8      	b.n	800dd5a <__ieee754_atan2+0x42>
 800dda8:	4542      	cmp	r2, r8
 800ddaa:	d10f      	bne.n	800ddcc <__ieee754_atan2+0xb4>
 800ddac:	4293      	cmp	r3, r2
 800ddae:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddb2:	d107      	bne.n	800ddc4 <__ieee754_atan2+0xac>
 800ddb4:	2c02      	cmp	r4, #2
 800ddb6:	d84c      	bhi.n	800de52 <__ieee754_atan2+0x13a>
 800ddb8:	4b33      	ldr	r3, [pc, #204]	; (800de88 <__ieee754_atan2+0x170>)
 800ddba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddc2:	e7ca      	b.n	800dd5a <__ieee754_atan2+0x42>
 800ddc4:	2c02      	cmp	r4, #2
 800ddc6:	d848      	bhi.n	800de5a <__ieee754_atan2+0x142>
 800ddc8:	4b30      	ldr	r3, [pc, #192]	; (800de8c <__ieee754_atan2+0x174>)
 800ddca:	e7f6      	b.n	800ddba <__ieee754_atan2+0xa2>
 800ddcc:	4543      	cmp	r3, r8
 800ddce:	d0e4      	beq.n	800dd9a <__ieee754_atan2+0x82>
 800ddd0:	1a9b      	subs	r3, r3, r2
 800ddd2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ddd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddda:	da1e      	bge.n	800de1a <__ieee754_atan2+0x102>
 800dddc:	2f00      	cmp	r7, #0
 800ddde:	da01      	bge.n	800dde4 <__ieee754_atan2+0xcc>
 800dde0:	323c      	adds	r2, #60	; 0x3c
 800dde2:	db1e      	blt.n	800de22 <__ieee754_atan2+0x10a>
 800dde4:	4632      	mov	r2, r6
 800dde6:	463b      	mov	r3, r7
 800dde8:	f7f2 fd38 	bl	800085c <__aeabi_ddiv>
 800ddec:	ec41 0b10 	vmov	d0, r0, r1
 800ddf0:	f000 f9fa 	bl	800e1e8 <fabs>
 800ddf4:	f000 f858 	bl	800dea8 <atan>
 800ddf8:	ec51 0b10 	vmov	r0, r1, d0
 800ddfc:	2c01      	cmp	r4, #1
 800ddfe:	d013      	beq.n	800de28 <__ieee754_atan2+0x110>
 800de00:	2c02      	cmp	r4, #2
 800de02:	d015      	beq.n	800de30 <__ieee754_atan2+0x118>
 800de04:	2c00      	cmp	r4, #0
 800de06:	d0a8      	beq.n	800dd5a <__ieee754_atan2+0x42>
 800de08:	a317      	add	r3, pc, #92	; (adr r3, 800de68 <__ieee754_atan2+0x150>)
 800de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0e:	f7f2 fa43 	bl	8000298 <__aeabi_dsub>
 800de12:	a317      	add	r3, pc, #92	; (adr r3, 800de70 <__ieee754_atan2+0x158>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	e014      	b.n	800de44 <__ieee754_atan2+0x12c>
 800de1a:	a117      	add	r1, pc, #92	; (adr r1, 800de78 <__ieee754_atan2+0x160>)
 800de1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de20:	e7ec      	b.n	800ddfc <__ieee754_atan2+0xe4>
 800de22:	2000      	movs	r0, #0
 800de24:	2100      	movs	r1, #0
 800de26:	e7e9      	b.n	800ddfc <__ieee754_atan2+0xe4>
 800de28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de2c:	4619      	mov	r1, r3
 800de2e:	e794      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de30:	a30d      	add	r3, pc, #52	; (adr r3, 800de68 <__ieee754_atan2+0x150>)
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	f7f2 fa2f 	bl	8000298 <__aeabi_dsub>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	a10c      	add	r1, pc, #48	; (adr r1, 800de70 <__ieee754_atan2+0x158>)
 800de40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de44:	f7f2 fa28 	bl	8000298 <__aeabi_dsub>
 800de48:	e787      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de4a:	a109      	add	r1, pc, #36	; (adr r1, 800de70 <__ieee754_atan2+0x158>)
 800de4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de50:	e783      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de52:	a10b      	add	r1, pc, #44	; (adr r1, 800de80 <__ieee754_atan2+0x168>)
 800de54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de58:	e77f      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de5a:	2000      	movs	r0, #0
 800de5c:	2100      	movs	r1, #0
 800de5e:	e77c      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de60:	a105      	add	r1, pc, #20	; (adr r1, 800de78 <__ieee754_atan2+0x160>)
 800de62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de66:	e778      	b.n	800dd5a <__ieee754_atan2+0x42>
 800de68:	33145c07 	.word	0x33145c07
 800de6c:	3ca1a626 	.word	0x3ca1a626
 800de70:	54442d18 	.word	0x54442d18
 800de74:	400921fb 	.word	0x400921fb
 800de78:	54442d18 	.word	0x54442d18
 800de7c:	3ff921fb 	.word	0x3ff921fb
 800de80:	54442d18 	.word	0x54442d18
 800de84:	3fe921fb 	.word	0x3fe921fb
 800de88:	08029ff0 	.word	0x08029ff0
 800de8c:	0802a008 	.word	0x0802a008
 800de90:	54442d18 	.word	0x54442d18
 800de94:	c00921fb 	.word	0xc00921fb
 800de98:	54442d18 	.word	0x54442d18
 800de9c:	bff921fb 	.word	0xbff921fb
 800dea0:	7ff00000 	.word	0x7ff00000
 800dea4:	00000000 	.word	0x00000000

0800dea8 <atan>:
 800dea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	ec55 4b10 	vmov	r4, r5, d0
 800deb0:	4bc3      	ldr	r3, [pc, #780]	; (800e1c0 <atan+0x318>)
 800deb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800deb6:	429e      	cmp	r6, r3
 800deb8:	46ab      	mov	fp, r5
 800deba:	dd18      	ble.n	800deee <atan+0x46>
 800debc:	4bc1      	ldr	r3, [pc, #772]	; (800e1c4 <atan+0x31c>)
 800debe:	429e      	cmp	r6, r3
 800dec0:	dc01      	bgt.n	800dec6 <atan+0x1e>
 800dec2:	d109      	bne.n	800ded8 <atan+0x30>
 800dec4:	b144      	cbz	r4, 800ded8 <atan+0x30>
 800dec6:	4622      	mov	r2, r4
 800dec8:	462b      	mov	r3, r5
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	f7f2 f9e5 	bl	800029c <__adddf3>
 800ded2:	4604      	mov	r4, r0
 800ded4:	460d      	mov	r5, r1
 800ded6:	e006      	b.n	800dee6 <atan+0x3e>
 800ded8:	f1bb 0f00 	cmp.w	fp, #0
 800dedc:	f300 8131 	bgt.w	800e142 <atan+0x29a>
 800dee0:	a59b      	add	r5, pc, #620	; (adr r5, 800e150 <atan+0x2a8>)
 800dee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dee6:	ec45 4b10 	vmov	d0, r4, r5
 800deea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	4bb6      	ldr	r3, [pc, #728]	; (800e1c8 <atan+0x320>)
 800def0:	429e      	cmp	r6, r3
 800def2:	dc14      	bgt.n	800df1e <atan+0x76>
 800def4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800def8:	429e      	cmp	r6, r3
 800defa:	dc0d      	bgt.n	800df18 <atan+0x70>
 800defc:	a396      	add	r3, pc, #600	; (adr r3, 800e158 <atan+0x2b0>)
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	ee10 0a10 	vmov	r0, s0
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 f9c8 	bl	800029c <__adddf3>
 800df0c:	4baf      	ldr	r3, [pc, #700]	; (800e1cc <atan+0x324>)
 800df0e:	2200      	movs	r2, #0
 800df10:	f7f2 fe0a 	bl	8000b28 <__aeabi_dcmpgt>
 800df14:	2800      	cmp	r0, #0
 800df16:	d1e6      	bne.n	800dee6 <atan+0x3e>
 800df18:	f04f 3aff 	mov.w	sl, #4294967295
 800df1c:	e02b      	b.n	800df76 <atan+0xce>
 800df1e:	f000 f963 	bl	800e1e8 <fabs>
 800df22:	4bab      	ldr	r3, [pc, #684]	; (800e1d0 <atan+0x328>)
 800df24:	429e      	cmp	r6, r3
 800df26:	ec55 4b10 	vmov	r4, r5, d0
 800df2a:	f300 80bf 	bgt.w	800e0ac <atan+0x204>
 800df2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800df32:	429e      	cmp	r6, r3
 800df34:	f300 80a0 	bgt.w	800e078 <atan+0x1d0>
 800df38:	ee10 2a10 	vmov	r2, s0
 800df3c:	ee10 0a10 	vmov	r0, s0
 800df40:	462b      	mov	r3, r5
 800df42:	4629      	mov	r1, r5
 800df44:	f7f2 f9aa 	bl	800029c <__adddf3>
 800df48:	4ba0      	ldr	r3, [pc, #640]	; (800e1cc <atan+0x324>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	f7f2 f9a4 	bl	8000298 <__aeabi_dsub>
 800df50:	2200      	movs	r2, #0
 800df52:	4606      	mov	r6, r0
 800df54:	460f      	mov	r7, r1
 800df56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df5a:	4620      	mov	r0, r4
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7f2 f99d 	bl	800029c <__adddf3>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fc77 	bl	800085c <__aeabi_ddiv>
 800df6e:	f04f 0a00 	mov.w	sl, #0
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	4622      	mov	r2, r4
 800df78:	462b      	mov	r3, r5
 800df7a:	4620      	mov	r0, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	f7f2 fb43 	bl	8000608 <__aeabi_dmul>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4680      	mov	r8, r0
 800df88:	4689      	mov	r9, r1
 800df8a:	f7f2 fb3d 	bl	8000608 <__aeabi_dmul>
 800df8e:	a374      	add	r3, pc, #464	; (adr r3, 800e160 <atan+0x2b8>)
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	4606      	mov	r6, r0
 800df96:	460f      	mov	r7, r1
 800df98:	f7f2 fb36 	bl	8000608 <__aeabi_dmul>
 800df9c:	a372      	add	r3, pc, #456	; (adr r3, 800e168 <atan+0x2c0>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 f97b 	bl	800029c <__adddf3>
 800dfa6:	4632      	mov	r2, r6
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	f7f2 fb2d 	bl	8000608 <__aeabi_dmul>
 800dfae:	a370      	add	r3, pc, #448	; (adr r3, 800e170 <atan+0x2c8>)
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 f972 	bl	800029c <__adddf3>
 800dfb8:	4632      	mov	r2, r6
 800dfba:	463b      	mov	r3, r7
 800dfbc:	f7f2 fb24 	bl	8000608 <__aeabi_dmul>
 800dfc0:	a36d      	add	r3, pc, #436	; (adr r3, 800e178 <atan+0x2d0>)
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	f7f2 f969 	bl	800029c <__adddf3>
 800dfca:	4632      	mov	r2, r6
 800dfcc:	463b      	mov	r3, r7
 800dfce:	f7f2 fb1b 	bl	8000608 <__aeabi_dmul>
 800dfd2:	a36b      	add	r3, pc, #428	; (adr r3, 800e180 <atan+0x2d8>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 f960 	bl	800029c <__adddf3>
 800dfdc:	4632      	mov	r2, r6
 800dfde:	463b      	mov	r3, r7
 800dfe0:	f7f2 fb12 	bl	8000608 <__aeabi_dmul>
 800dfe4:	a368      	add	r3, pc, #416	; (adr r3, 800e188 <atan+0x2e0>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 f957 	bl	800029c <__adddf3>
 800dfee:	4642      	mov	r2, r8
 800dff0:	464b      	mov	r3, r9
 800dff2:	f7f2 fb09 	bl	8000608 <__aeabi_dmul>
 800dff6:	a366      	add	r3, pc, #408	; (adr r3, 800e190 <atan+0x2e8>)
 800dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	4630      	mov	r0, r6
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 fb00 	bl	8000608 <__aeabi_dmul>
 800e008:	a363      	add	r3, pc, #396	; (adr r3, 800e198 <atan+0x2f0>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	f7f2 f943 	bl	8000298 <__aeabi_dsub>
 800e012:	4632      	mov	r2, r6
 800e014:	463b      	mov	r3, r7
 800e016:	f7f2 faf7 	bl	8000608 <__aeabi_dmul>
 800e01a:	a361      	add	r3, pc, #388	; (adr r3, 800e1a0 <atan+0x2f8>)
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	f7f2 f93a 	bl	8000298 <__aeabi_dsub>
 800e024:	4632      	mov	r2, r6
 800e026:	463b      	mov	r3, r7
 800e028:	f7f2 faee 	bl	8000608 <__aeabi_dmul>
 800e02c:	a35e      	add	r3, pc, #376	; (adr r3, 800e1a8 <atan+0x300>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 f931 	bl	8000298 <__aeabi_dsub>
 800e036:	4632      	mov	r2, r6
 800e038:	463b      	mov	r3, r7
 800e03a:	f7f2 fae5 	bl	8000608 <__aeabi_dmul>
 800e03e:	a35c      	add	r3, pc, #368	; (adr r3, 800e1b0 <atan+0x308>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 f928 	bl	8000298 <__aeabi_dsub>
 800e048:	4632      	mov	r2, r6
 800e04a:	463b      	mov	r3, r7
 800e04c:	f7f2 fadc 	bl	8000608 <__aeabi_dmul>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4640      	mov	r0, r8
 800e056:	4649      	mov	r1, r9
 800e058:	f7f2 f920 	bl	800029c <__adddf3>
 800e05c:	4622      	mov	r2, r4
 800e05e:	462b      	mov	r3, r5
 800e060:	f7f2 fad2 	bl	8000608 <__aeabi_dmul>
 800e064:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	d14b      	bne.n	800e106 <atan+0x25e>
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	f7f2 f911 	bl	8000298 <__aeabi_dsub>
 800e076:	e72c      	b.n	800ded2 <atan+0x2a>
 800e078:	ee10 0a10 	vmov	r0, s0
 800e07c:	4b53      	ldr	r3, [pc, #332]	; (800e1cc <atan+0x324>)
 800e07e:	2200      	movs	r2, #0
 800e080:	4629      	mov	r1, r5
 800e082:	f7f2 f909 	bl	8000298 <__aeabi_dsub>
 800e086:	4b51      	ldr	r3, [pc, #324]	; (800e1cc <atan+0x324>)
 800e088:	4606      	mov	r6, r0
 800e08a:	460f      	mov	r7, r1
 800e08c:	2200      	movs	r2, #0
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 f903 	bl	800029c <__adddf3>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 fbdd 	bl	800085c <__aeabi_ddiv>
 800e0a2:	f04f 0a01 	mov.w	sl, #1
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	e764      	b.n	800df76 <atan+0xce>
 800e0ac:	4b49      	ldr	r3, [pc, #292]	; (800e1d4 <atan+0x32c>)
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	da1d      	bge.n	800e0ee <atan+0x246>
 800e0b2:	ee10 0a10 	vmov	r0, s0
 800e0b6:	4b48      	ldr	r3, [pc, #288]	; (800e1d8 <atan+0x330>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	f7f2 f8ec 	bl	8000298 <__aeabi_dsub>
 800e0c0:	4b45      	ldr	r3, [pc, #276]	; (800e1d8 <atan+0x330>)
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460f      	mov	r7, r1
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	f7f2 fa9c 	bl	8000608 <__aeabi_dmul>
 800e0d0:	4b3e      	ldr	r3, [pc, #248]	; (800e1cc <atan+0x324>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f7f2 f8e2 	bl	800029c <__adddf3>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	4630      	mov	r0, r6
 800e0de:	4639      	mov	r1, r7
 800e0e0:	f7f2 fbbc 	bl	800085c <__aeabi_ddiv>
 800e0e4:	f04f 0a02 	mov.w	sl, #2
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	e743      	b.n	800df76 <atan+0xce>
 800e0ee:	462b      	mov	r3, r5
 800e0f0:	ee10 2a10 	vmov	r2, s0
 800e0f4:	4939      	ldr	r1, [pc, #228]	; (800e1dc <atan+0x334>)
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	f7f2 fbb0 	bl	800085c <__aeabi_ddiv>
 800e0fc:	f04f 0a03 	mov.w	sl, #3
 800e100:	4604      	mov	r4, r0
 800e102:	460d      	mov	r5, r1
 800e104:	e737      	b.n	800df76 <atan+0xce>
 800e106:	4b36      	ldr	r3, [pc, #216]	; (800e1e0 <atan+0x338>)
 800e108:	4e36      	ldr	r6, [pc, #216]	; (800e1e4 <atan+0x33c>)
 800e10a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	f7f2 f8c1 	bl	8000298 <__aeabi_dsub>
 800e116:	4622      	mov	r2, r4
 800e118:	462b      	mov	r3, r5
 800e11a:	f7f2 f8bd 	bl	8000298 <__aeabi_dsub>
 800e11e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e12a:	f7f2 f8b5 	bl	8000298 <__aeabi_dsub>
 800e12e:	f1bb 0f00 	cmp.w	fp, #0
 800e132:	4604      	mov	r4, r0
 800e134:	460d      	mov	r5, r1
 800e136:	f6bf aed6 	bge.w	800dee6 <atan+0x3e>
 800e13a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e13e:	461d      	mov	r5, r3
 800e140:	e6d1      	b.n	800dee6 <atan+0x3e>
 800e142:	a51d      	add	r5, pc, #116	; (adr r5, 800e1b8 <atan+0x310>)
 800e144:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e148:	e6cd      	b.n	800dee6 <atan+0x3e>
 800e14a:	bf00      	nop
 800e14c:	f3af 8000 	nop.w
 800e150:	54442d18 	.word	0x54442d18
 800e154:	bff921fb 	.word	0xbff921fb
 800e158:	8800759c 	.word	0x8800759c
 800e15c:	7e37e43c 	.word	0x7e37e43c
 800e160:	e322da11 	.word	0xe322da11
 800e164:	3f90ad3a 	.word	0x3f90ad3a
 800e168:	24760deb 	.word	0x24760deb
 800e16c:	3fa97b4b 	.word	0x3fa97b4b
 800e170:	a0d03d51 	.word	0xa0d03d51
 800e174:	3fb10d66 	.word	0x3fb10d66
 800e178:	c54c206e 	.word	0xc54c206e
 800e17c:	3fb745cd 	.word	0x3fb745cd
 800e180:	920083ff 	.word	0x920083ff
 800e184:	3fc24924 	.word	0x3fc24924
 800e188:	5555550d 	.word	0x5555550d
 800e18c:	3fd55555 	.word	0x3fd55555
 800e190:	2c6a6c2f 	.word	0x2c6a6c2f
 800e194:	bfa2b444 	.word	0xbfa2b444
 800e198:	52defd9a 	.word	0x52defd9a
 800e19c:	3fadde2d 	.word	0x3fadde2d
 800e1a0:	af749a6d 	.word	0xaf749a6d
 800e1a4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e1a8:	fe231671 	.word	0xfe231671
 800e1ac:	3fbc71c6 	.word	0x3fbc71c6
 800e1b0:	9998ebc4 	.word	0x9998ebc4
 800e1b4:	3fc99999 	.word	0x3fc99999
 800e1b8:	54442d18 	.word	0x54442d18
 800e1bc:	3ff921fb 	.word	0x3ff921fb
 800e1c0:	440fffff 	.word	0x440fffff
 800e1c4:	7ff00000 	.word	0x7ff00000
 800e1c8:	3fdbffff 	.word	0x3fdbffff
 800e1cc:	3ff00000 	.word	0x3ff00000
 800e1d0:	3ff2ffff 	.word	0x3ff2ffff
 800e1d4:	40038000 	.word	0x40038000
 800e1d8:	3ff80000 	.word	0x3ff80000
 800e1dc:	bff00000 	.word	0xbff00000
 800e1e0:	0802a040 	.word	0x0802a040
 800e1e4:	0802a020 	.word	0x0802a020

0800e1e8 <fabs>:
 800e1e8:	ec51 0b10 	vmov	r0, r1, d0
 800e1ec:	ee10 2a10 	vmov	r2, s0
 800e1f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1f4:	ec43 2b10 	vmov	d0, r2, r3
 800e1f8:	4770      	bx	lr
	...

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
