
Digimat_accentratore_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c18  08006c18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000090  08006cb0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08006cb0  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001697f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  00036a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00039dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0c2  00000000  00000000  0003be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015935  00000000  00000000  00056ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927b0  00000000  00000000  0006c827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fefd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  000ff028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006770 	.word	0x08006770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006770 	.word	0x08006770

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	; 0x38
 8000598:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059a:	4a73      	ldr	r2, [pc, #460]	; (8000768 <MX_BlueNRG_MS_Init+0x1d4>)
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005aa:	4a70      	ldr	r2, [pc, #448]	; (800076c <MX_BlueNRG_MS_Init+0x1d8>)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	6018      	str	r0, [r3, #0]
 80005b6:	3304      	adds	r3, #4
 80005b8:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 80005ba:	f000 f8fd 	bl	80007b8 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 fc5a 	bl	8001e78 <BSP_PB_GetState>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b69      	ldr	r3, [pc, #420]	; (8000770 <MX_BlueNRG_MS_Init+0x1dc>)
 80005ca:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	4869      	ldr	r0, [pc, #420]	; (8000774 <MX_BlueNRG_MS_Init+0x1e0>)
 80005d0:	f004 fd0c 	bl	8004fec <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80005d4:	1cba      	adds	r2, r7, #2
 80005d6:	1d7b      	adds	r3, r7, #5
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fb7b 	bl	8004cd6 <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 80005e0:	f004 fbbd 	bl	8004d5e <hci_reset>

	HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f001 fdeb 	bl	80021c0 <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	4619      	mov	r1, r3
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4861      	ldr	r0, [pc, #388]	; (8000778 <MX_BlueNRG_MS_Init+0x1e4>)
 80005f4:	f005 faf4 	bl	8005be0 <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	2b30      	cmp	r3, #48	; 0x30
 80005fc:	d902      	bls.n	8000604 <MX_BlueNRG_MS_Init+0x70>
		bnrg_expansion_board = IDB05A1;
 80005fe:	4b5f      	ldr	r3, [pc, #380]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT) {
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <MX_BlueNRG_MS_Init+0x8c>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	f107 021c 	add.w	r2, r7, #28
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	e008      	b.n	8000632 <MX_BlueNRG_MS_Init+0x9e>
	} else {
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	f107 0214 	add.w	r2, r7, #20
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	6018      	str	r0, [r3, #0]
 800062e:	3304      	adds	r3, #4
 8000630:	8019      	strh	r1, [r3, #0]
	}

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	461a      	mov	r2, r3
 8000638:	2106      	movs	r1, #6
 800063a:	2000      	movs	r0, #0
 800063c:	f004 fab5 	bl	8004baa <aci_hal_write_config_data>
 8000640:	4603      	mov	r3, r0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
			CONFIG_DATA_PUBADDR_LEN,
			bdaddr);
	if (ret) {
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <MX_BlueNRG_MS_Init+0xbe>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800064a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800064c:	484d      	ldr	r0, [pc, #308]	; (8000784 <MX_BlueNRG_MS_Init+0x1f0>)
 800064e:	f005 fac7 	bl	8005be0 <iprintf>
	}

	ret = aci_gatt_init();
 8000652:	f004 f82a 	bl	80046aa <aci_gatt_init>
 8000656:	4603      	mov	r3, r0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
	if (ret) {
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <MX_BlueNRG_MS_Init+0xd2>
		printf("GATT_Init failed.\n");
 8000660:	4849      	ldr	r0, [pc, #292]	; (8000788 <MX_BlueNRG_MS_Init+0x1f4>)
 8000662:	f005 fb59 	bl	8005d18 <puts>
	}

	if (BLE_Role == SERVER) {
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d11e      	bne.n	80006ac <MX_BlueNRG_MS_Init+0x118>
		if (bnrg_expansion_board == IDB05A1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d10f      	bne.n	8000696 <MX_BlueNRG_MS_Init+0x102>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000676:	f107 020a 	add.w	r2, r7, #10
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4613      	mov	r3, r2
 8000686:	2207      	movs	r2, #7
 8000688:	2100      	movs	r1, #0
 800068a:	2001      	movs	r0, #1
 800068c:	f003 fdde 	bl	800424c <aci_gap_init_IDB05A1>
 8000690:	4603      	mov	r3, r0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
 8000694:	e028      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	f107 010a 	add.w	r1, r7, #10
 80006a0:	2001      	movs	r0, #1
 80006a2:	f003 fe23 	bl	80042ec <aci_gap_init_IDB04A1>
 80006a6:	4603      	mov	r3, r0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
 80006aa:	e01d      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
	}
	else {
		if (bnrg_expansion_board == IDB05A1) {
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10f      	bne.n	80006d4 <MX_BlueNRG_MS_Init+0x140>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4613      	mov	r3, r2
 80006c4:	2207      	movs	r2, #7
 80006c6:	2100      	movs	r1, #0
 80006c8:	2004      	movs	r0, #4
 80006ca:	f003 fdbf 	bl	800424c <aci_gap_init_IDB05A1>
 80006ce:	4603      	mov	r3, r0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	e009      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 010a 	add.w	r1, r7, #10
 80006de:	2003      	movs	r0, #3
 80006e0:	f003 fe04 	bl	80042ec <aci_gap_init_IDB04A1>
 80006e4:	4603      	mov	r3, r0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (ret != BLE_STATUS_SUCCESS) {
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <MX_BlueNRG_MS_Init+0x160>
		printf("GAP_Init failed.\n");
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <MX_BlueNRG_MS_Init+0x1f8>)
 80006f0:	f005 fb12 	bl	8005d18 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006f4:	2301      	movs	r3, #1
 80006f6:	9303      	str	r3, [sp, #12]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_BlueNRG_MS_Init+0x1fc>)
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2310      	movs	r3, #16
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2307      	movs	r3, #7
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f003 ff22 	bl	8004554 <aci_gap_set_auth_requirement>
 8000710:	4603      	mov	r3, r0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <MX_BlueNRG_MS_Init+0x18c>
		printf("BLE Stack Initialized.\n");
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <MX_BlueNRG_MS_Init+0x200>)
 800071c:	f005 fafc 	bl	8005d18 <puts>
	}

	if (BLE_Role == SERVER) {
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d111      	bne.n	800074c <MX_BlueNRG_MS_Init+0x1b8>
		printf("SERVER: BLE Stack Initialized\n");
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_BlueNRG_MS_Init+0x204>)
 800072a:	f005 faf5 	bl	8005d18 <puts>
		ret = Add_Sample_Service();
 800072e:	f000 f8dd 	bl	80008ec <Add_Sample_Service>
 8000732:	4603      	mov	r3, r0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24

		if (ret == BLE_STATUS_SUCCESS)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <MX_BlueNRG_MS_Init+0x1b0>
			printf("Service added successfully.\n");
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <MX_BlueNRG_MS_Init+0x208>)
 800073e:	f005 faeb 	bl	8005d18 <puts>
 8000742:	e006      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>
		else
			printf("Error while adding service.\n");
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_BlueNRG_MS_Init+0x20c>)
 8000746:	f005 fae7 	bl	8005d18 <puts>
 800074a:	e002      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>

	} else {
		printf("CLIENT: BLE Stack Initialized\n");
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_BlueNRG_MS_Init+0x210>)
 800074e:	f005 fae3 	bl	8005d18 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 8000752:	2104      	movs	r1, #4
 8000754:	2001      	movs	r0, #1
 8000756:	f004 fa8d 	bl	8004c74 <aci_hal_set_tx_power_level>
 800075a:	4603      	mov	r3, r0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	0800692c 	.word	0x0800692c
 800076c:	08006934 	.word	0x08006934
 8000770:	20000000 	.word	0x20000000
 8000774:	08000ecd 	.word	0x08000ecd
 8000778:	08006840 	.word	0x08006840
 800077c:	200000ac 	.word	0x200000ac
 8000780:	20000001 	.word	0x20000001
 8000784:	08006854 	.word	0x08006854
 8000788:	08006874 	.word	0x08006874
 800078c:	08006888 	.word	0x08006888
 8000790:	0001e240 	.word	0x0001e240
 8000794:	0800689c 	.word	0x0800689c
 8000798:	080068b4 	.word	0x080068b4
 800079c:	080068d4 	.word	0x080068d4
 80007a0:	080068f0 	.word	0x080068f0
 80007a4:	0800690c 	.word	0x0800690c

080007a8 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	/* USER CODE END BlueNRG_MS_Process_PreTreatment */

	User_Process();
 80007ac:	f000 f812 	bl	80007d4 <User_Process>
	hci_user_evt_proc();
 80007b0:	f004 fd98 	bl	80052e4 <hci_user_evt_proc>


	/* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

	/* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 fb06 	bl	8001dd0 <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fa6d 	bl	8001ca4 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fbb6 	bl	8001f3c <BSP_COM_Init>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <User_Process>:
void lora_send(char * msg_ascii){
	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
	printf("Inviato send msg_not_ascii\r\n");
}
static void User_Process(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	if (set_connectable)
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <User_Process+0xd8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <User_Process+0x26>
	{
		/* Establish connection with remote device */
		Make_Connection();
 80007e2:	f000 f8f5 	bl	80009d0 <Make_Connection>
//		lora_join();
		set_connectable = FALSE;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <User_Process+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 fb43 	bl	8001e78 <BSP_PB_GetState>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <User_Process+0xdc>)
 80007f8:	701a      	strb	r2, [r3, #0]

	}

	if (BLE_Role == CLIENT)
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <User_Process+0xe0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d12e      	bne.n	8000860 <User_Process+0x8c>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <User_Process+0xe4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <User_Process+0x46>
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <User_Process+0xe8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <User_Process+0x46>
			startReadTXCharHandle();
 8000814:	f000 f946 	bl	8000aa4 <startReadTXCharHandle>
 8000818:	e00a      	b.n	8000830 <User_Process+0x5c>
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <User_Process+0xe4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <User_Process+0x5c>
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <User_Process+0xec>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <User_Process+0x5c>
			startReadRXCharHandle();
 800082c:	f000 f960 	bl	8000af0 <startReadRXCharHandle>
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <User_Process+0xe4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d013      	beq.n	8000860 <User_Process+0x8c>
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <User_Process+0xe8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00e      	beq.n	8000860 <User_Process+0x8c>
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <User_Process+0xec>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <User_Process+0x8c>
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <User_Process+0xf0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d104      	bne.n	8000860 <User_Process+0x8c>
		{
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000856:	2000      	movs	r0, #0
 8000858:	f001 fa4c 	bl	8001cf4 <BSP_LED_Off>
			enableNotification();
 800085c:	f000 fa60 	bl	8000d20 <enableNotification>
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed)
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <User_Process+0xf4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d01d      	beq.n	80008a6 <User_Process+0xd2>
	{
		/* Debouncing */
		HAL_Delay(50);
 800086a:	2032      	movs	r0, #50	; 0x32
 800086c:	f001 fca8 	bl	80021c0 <HAL_Delay>

		/* Wait until the User Button is released */
		while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000870:	bf00      	nop
 8000872:	2000      	movs	r0, #0
 8000874:	f001 fb00 	bl	8001e78 <BSP_PB_GetState>
 8000878:	4602      	mov	r2, r0
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <User_Process+0xdc>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	429a      	cmp	r2, r3
 800088c:	d0f1      	beq.n	8000872 <User_Process+0x9e>

		/* Debouncing */
		HAL_Delay(50);
 800088e:	2032      	movs	r0, #50	; 0x32
 8000890:	f001 fc96 	bl	80021c0 <HAL_Delay>

		if (connected && notification_enabled)
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <User_Process+0xe4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <User_Process+0xcc>
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <User_Process+0xf0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
			 * is called in main().
			 * E.g. it can be enabled for debugging. */
		}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <User_Process+0xf4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000001 	.word	0x20000001
 80008b8:	20000198 	.word	0x20000198
 80008bc:	200001a1 	.word	0x200001a1
 80008c0:	200001a2 	.word	0x200001a2
 80008c4:	2000019e 	.word	0x2000019e
 80008c8:	200000ad 	.word	0x200000ad

080008cc <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	/* Set the User Button flag */
	user_button_pressed = 1;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <BSP_PB_Callback+0x1c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	200000ad 	.word	0x200000ad

080008ec <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b095      	sub	sp, #84	; 0x54
 80008f0:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <Add_Sample_Service+0xcc>)
 80008f4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <Add_Sample_Service+0xd0>)
 8000900:	f107 0414 	add.w	r4, r7, #20
 8000904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <Add_Sample_Service+0xd4>)
 800090c:	1d3c      	adds	r4, r7, #4
 800090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000914:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <Add_Sample_Service+0xd8>)
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2307      	movs	r3, #7
 800091e:	2201      	movs	r2, #1
 8000920:	2002      	movs	r0, #2
 8000922:	f003 fee5 	bl	80046f0 <aci_gatt_add_serv>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800092c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000930:	2b00      	cmp	r3, #0
 8000932:	d136      	bne.n	80009a2 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <Add_Sample_Service+0xd8>)
 8000936:	8818      	ldrh	r0, [r3, #0]
 8000938:	f107 0214 	add.w	r2, r7, #20
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <Add_Sample_Service+0xdc>)
 800093e:	9305      	str	r3, [sp, #20]
 8000940:	2301      	movs	r3, #1
 8000942:	9304      	str	r3, [sp, #16]
 8000944:	2310      	movs	r3, #16
 8000946:	9303      	str	r3, [sp, #12]
 8000948:	2300      	movs	r3, #0
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2300      	movs	r3, #0
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	2310      	movs	r3, #16
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2314      	movs	r3, #20
 8000956:	2102      	movs	r1, #2
 8000958:	f003 ff53 	bl	8004802 <aci_gatt_add_char>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000966:	2b00      	cmp	r3, #0
 8000968:	d11d      	bne.n	80009a6 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <Add_Sample_Service+0xd8>)
 800096c:	8818      	ldrh	r0, [r3, #0]
 800096e:	1d3a      	adds	r2, r7, #4
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <Add_Sample_Service+0xe0>)
 8000972:	9305      	str	r3, [sp, #20]
 8000974:	2301      	movs	r3, #1
 8000976:	9304      	str	r3, [sp, #16]
 8000978:	2310      	movs	r3, #16
 800097a:	9303      	str	r3, [sp, #12]
 800097c:	2301      	movs	r3, #1
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	230c      	movs	r3, #12
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2314      	movs	r3, #20
 800098a:	2102      	movs	r1, #2
 800098c:	f003 ff39 	bl	8004802 <aci_gatt_add_char>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000996:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 800099e:	2300      	movs	r3, #0
 80009a0:	e005      	b.n	80009ae <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009a2:	bf00      	nop
 80009a4:	e002      	b.n	80009ac <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009aa:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80009ac:	2347      	movs	r3, #71	; 0x47
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	373c      	adds	r7, #60	; 0x3c
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08006a0c 	.word	0x08006a0c
 80009bc:	08006a1c 	.word	0x08006a1c
 80009c0:	08006a2c 	.word	0x08006a2c
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	200001aa 	.word	0x200001aa
 80009cc:	200001ac 	.word	0x200001ac

080009d0 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08f      	sub	sp, #60	; 0x3c
 80009d4:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <Make_Connection+0xc0>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d132      	bne.n	8000a44 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 80009de:	482d      	ldr	r0, [pc, #180]	; (8000a94 <Make_Connection+0xc4>)
 80009e0:	f005 f99a 	bl	8005d18 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80009e4:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <Make_Connection+0xc8>)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ee:	6018      	str	r0, [r3, #0]
 80009f0:	3304      	adds	r3, #4
 80009f2:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 80009f4:	2000      	movs	r0, #0
 80009f6:	f001 f967 	bl	8001cc8 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a02:	9206      	str	r2, [sp, #24]
 8000a04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a08:	9205      	str	r2, [sp, #20]
 8000a0a:	223c      	movs	r2, #60	; 0x3c
 8000a0c:	9204      	str	r2, [sp, #16]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	9203      	str	r2, [sp, #12]
 8000a12:	2228      	movs	r2, #40	; 0x28
 8000a14:	9202      	str	r2, [sp, #8]
 8000a16:	2228      	movs	r2, #40	; 0x28
 8000a18:	9201      	str	r2, [sp, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a28:	f003 fdeb 	bl	8004602 <aci_gap_create_connection>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d027      	beq.n	8000a86 <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <Make_Connection+0xcc>)
 8000a38:	f005 f96e 	bl	8005d18 <puts>
      HAL_Delay(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f001 fbbf 	bl	80021c0 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000a42:	e020      	b.n	8000a86 <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <Make_Connection+0xd0>)
 8000a46:	463c      	mov	r4, r7
 8000a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a4a:	c407      	stmia	r4!, {r0, r1, r2}
 8000a4c:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f004 f9f0 	bl	8004e36 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000a56:	2300      	movs	r3, #0
 8000a58:	9306      	str	r3, [sp, #24]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9305      	str	r3, [sp, #20]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9304      	str	r3, [sp, #16]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9303      	str	r3, [sp, #12]
 8000a66:	463b      	mov	r3, r7
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	230d      	movs	r3, #13
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f003 fc7f 	bl	8004380 <aci_gap_set_discoverable>
 8000a82:	4603      	mov	r3, r0
 8000a84:	75fb      	strb	r3, [r7, #23]
}
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000001 	.word	0x20000001
 8000a94:	08006a3c 	.word	0x08006a3c
 8000a98:	08006a7c 	.word	0x08006a7c
 8000a9c:	08006a58 	.word	0x08006a58
 8000aa0:	08006a84 	.word	0x08006a84

08000aa4 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <startReadTXCharHandle+0x40>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d112      	bne.n	8000ada <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <startReadTXCharHandle+0x44>)
 8000ab6:	463c      	mov	r4, r7
 8000ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <startReadTXCharHandle+0x48>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b298      	uxth	r0, r3
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ace:	2101      	movs	r1, #1
 8000ad0:	f003 ff62 	bl	8004998 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <startReadTXCharHandle+0x40>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000019f 	.word	0x2000019f
 8000ae8:	08006a1c 	.word	0x08006a1c
 8000aec:	2000019c 	.word	0x2000019c

08000af0 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <startReadRXCharHandle+0x40>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d112      	bne.n	8000b26 <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <startReadRXCharHandle+0x44>)
 8000b02:	463c      	mov	r4, r7
 8000b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <startReadRXCharHandle+0x48>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b298      	uxth	r0, r3
 8000b10:	463b      	mov	r3, r7
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2302      	movs	r3, #2
 8000b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	f003 ff3c 	bl	8004998 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <startReadRXCharHandle+0x40>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
  }
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001a0 	.word	0x200001a0
 8000b34:	08006a2c 	.word	0x08006a2c
 8000b38:	2000019c 	.word	0x2000019c

08000b3c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 f8e9 	bl	8001d20 <BSP_LED_Toggle>
  printf("Messaggio ricevuto\n\r");
 8000b4e:	4837      	ldr	r0, [pc, #220]	; (8000c2c <receiveData+0xf0>)
 8000b50:	f005 f846 	bl	8005be0 <iprintf>
  for(int i = 0; i < Nb_bytes; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e009      	b.n	8000b6e <receiveData+0x32>
    printf("%c", data_buffer[i]);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f005 f854 	bl	8005c10 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf1      	blt.n	8000b5a <receiveData+0x1e>
//
//  	printf("Inviato JOIN\r\n");
//  	HAL_Delay(1000);
//  	wait4join();
//  	HAL_Delay(1000);
  modem_at_cmd2(msg_ascii_2,(int)strlen(msg_ascii_2));
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <receiveData+0xf4>)
 8000b78:	681c      	ldr	r4, [r3, #0]
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <receiveData+0xf4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb2e 	bl	80001e0 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f000 f861 	bl	8000c50 <modem_at_cmd2>
  printf("Inviato send msg_not_ascii\r\n");
 8000b8e:	4829      	ldr	r0, [pc, #164]	; (8000c34 <receiveData+0xf8>)
 8000b90:	f005 f8c2 	bl	8005d18 <puts>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4827      	ldr	r0, [pc, #156]	; (8000c38 <receiveData+0xfc>)
 8000b9c:	f001 ff18 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fb0d 	bl	80021c0 <HAL_Delay>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <receiveData+0xfc>)
 8000bae:	f001 ff0f 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f001 fb04 	bl	80021c0 <HAL_Delay>
  HAL_UART_Receive (&huart6, read_buf, 180, 1000);
 8000bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbc:	22b4      	movs	r2, #180	; 0xb4
 8000bbe:	491f      	ldr	r1, [pc, #124]	; (8000c3c <receiveData+0x100>)
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <receiveData+0x104>)
 8000bc2:	f002 ffbe 	bl	8003b42 <HAL_UART_Receive>
  		//HAL_Delay(1);

  		for (int i = 0; i < 180; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e021      	b.n	8000c10 <receiveData+0xd4>
  			if (read_buf[i] == 'N') {
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <receiveData+0x100>)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b4e      	cmp	r3, #78	; 0x4e
 8000bd6:	d107      	bne.n	8000be8 <receiveData+0xac>
  				// Trovato il carattere 'N'
  				//found = 1;

  				//HAL_UART_Transmit(&huart2, read_buf + i - 11, 12, 1000);
  				printf("%s \n\r",read_buf + i - 11);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3b0b      	subs	r3, #11
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <receiveData+0x100>)
 8000bde:	4413      	add	r3, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <receiveData+0x108>)
 8000be4:	f004 fffc 	bl	8005be0 <iprintf>
  				//Console_Write("\r\n");
  				// break;
  			}
  			if (read_buf[i] == 'E') {
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <receiveData+0x100>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b45      	cmp	r3, #69	; 0x45
 8000bf2:	d10a      	bne.n	8000c0a <receiveData+0xce>
  				// Trovato il carattere 'N'
  				//found = 1;

  				HAL_UART_Transmit(&huart2, read_buf + i - 11, 12, 1000);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	3b0b      	subs	r3, #11
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <receiveData+0x100>)
 8000bfa:	1899      	adds	r1, r3, r2
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	220c      	movs	r2, #12
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <receiveData+0x10c>)
 8000c04:	f002 ff0b 	bl	8003a1e <HAL_UART_Transmit>
  				//Console_Write("\r\n");
  				break;
 8000c08:	e005      	b.n	8000c16 <receiveData+0xda>
  		for (int i = 0; i < 180; i++) {
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2bb3      	cmp	r3, #179	; 0xb3
 8000c14:	ddda      	ble.n	8000bcc <receiveData+0x90>
  			}
  		}


  fflush(stdout);
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <receiveData+0x110>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fdb9 	bl	8005794 <fflush>
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08006a94 	.word	0x08006a94
 8000c30:	20000004 	.word	0x20000004
 8000c34:	08006aac 	.word	0x08006aac
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	200000e4 	.word	0x200000e4
 8000c40:	200002fc 	.word	0x200002fc
 8000c44:	08006ac8 	.word	0x08006ac8
 8000c48:	200003a0 	.word	0x200003a0
 8000c4c:	2000002c 	.word	0x2000002c

08000c50 <modem_at_cmd2>:

void modem_at_cmd2(char* buffer, int n){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0; i<n; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]
 8000c5e:	e010      	b.n	8000c82 <modem_at_cmd2+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer+i, 1, 100);
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	18d1      	adds	r1, r2, r3
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4828      	ldr	r0, [pc, #160]	; (8000d0c <modem_at_cmd2+0xbc>)
 8000c6c:	f002 fed7 	bl	8003a1e <HAL_UART_Transmit>
		//printf("tx: %c\n",buffer[i]);
		HAL_UART_Receive(&huart1, &c2, 1, 100);
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	2201      	movs	r2, #1
 8000c74:	4926      	ldr	r1, [pc, #152]	; (8000d10 <modem_at_cmd2+0xc0>)
 8000c76:	4825      	ldr	r0, [pc, #148]	; (8000d0c <modem_at_cmd2+0xbc>)
 8000c78:	f002 ff63 	bl	8003b42 <HAL_UART_Receive>
	for(uint8_t i=0; i<n; i++) {
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	75fb      	strb	r3, [r7, #23]
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dcea      	bgt.n	8000c60 <modem_at_cmd2+0x10>
		//printf("rx: %c\n",c);
	}

	//	memset(response,0,sizeof(response));
	char tredici='\r';
 8000c8a:	230d      	movs	r3, #13
 8000c8c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tredici, 1, 100);
 8000c8e:	f107 010f 	add.w	r1, r7, #15
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	2201      	movs	r2, #1
 8000c96:	481d      	ldr	r0, [pc, #116]	; (8000d0c <modem_at_cmd2+0xbc>)
 8000c98:	f002 fec1 	bl	8003a1e <HAL_UART_Transmit>
	//	printf("tx: %c\n",tredici);
	HAL_UART_Receive(&huart1, &c2, 1, 100);
 8000c9c:	2364      	movs	r3, #100	; 0x64
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	491b      	ldr	r1, [pc, #108]	; (8000d10 <modem_at_cmd2+0xc0>)
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <modem_at_cmd2+0xbc>)
 8000ca4:	f002 ff4d 	bl	8003b42 <HAL_UART_Receive>
	//	printf("rx: %c\n",c);
	int i=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
	memset(risposta_uart2,0,sizeof(risposta_uart2));
 8000cac:	2232      	movs	r2, #50	; 0x32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4818      	ldr	r0, [pc, #96]	; (8000d14 <modem_at_cmd2+0xc4>)
 8000cb2:	f004 feac 	bl	8005a0e <memset>
	do {
		//		if (lora.readable()) {
		HAL_UART_Receive(&huart1,(uint8_t *) &c2, 1, 100);
 8000cb6:	2364      	movs	r3, #100	; 0x64
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4915      	ldr	r1, [pc, #84]	; (8000d10 <modem_at_cmd2+0xc0>)
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <modem_at_cmd2+0xbc>)
 8000cbe:	f002 ff40 	bl	8003b42 <HAL_UART_Receive>
		//printf("rx: %c",c);
		risposta_uart2[i]=c2;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <modem_at_cmd2+0xc0>)
 8000cc4:	7819      	ldrb	r1, [r3, #0]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <modem_at_cmd2+0xc4>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4413      	add	r3, r2
 8000ccc:	460a      	mov	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
		i++;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
		i=i%49;
 8000cd6:	6939      	ldr	r1, [r7, #16]
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <modem_at_cmd2+0xc8>)
 8000cda:	fb83 2301 	smull	r2, r3, r3, r1
 8000cde:	111a      	asrs	r2, r3, #4
 8000ce0:	17cb      	asrs	r3, r1, #31
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	1a8b      	subs	r3, r1, r2
 8000cf0:	613b      	str	r3, [r7, #16]

		//	} while(c!='#' && c!='\r'&& c!=' ' && c!='\n');
	} while(c2!=' ');
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <modem_at_cmd2+0xc0>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b20      	cmp	r3, #32
 8000cf8:	d1dd      	bne.n	8000cb6 <modem_at_cmd2+0x66>
	printf("%s",risposta_uart2);
 8000cfa:	4906      	ldr	r1, [pc, #24]	; (8000d14 <modem_at_cmd2+0xc4>)
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <modem_at_cmd2+0xcc>)
 8000cfe:	f004 ff6f 	bl	8005be0 <iprintf>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200002b8 	.word	0x200002b8
 8000d10:	200000ae 	.word	0x200000ae
 8000d14:	200000b0 	.word	0x200000b0
 8000d18:	5397829d 	.word	0x5397829d
 8000d1c:	08006ad0 	.word	0x08006ad0

08000d20 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000d26:	2301      	movs	r3, #1
 8000d28:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000d2a:	f001 fa3d 	bl	80021a8 <HAL_GetTick>
 8000d2e:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000d30:	e008      	b.n	8000d44 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d32:	f001 fa39 	bl	80021a8 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d80e      	bhi.n	8000d62 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <enableNotification+0x54>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b298      	uxth	r0, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <enableNotification+0x58>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	b299      	uxth	r1, r3
 8000d52:	463b      	mov	r3, r7
 8000d54:	2202      	movs	r2, #2
 8000d56:	f003 fead 	bl	8004ab4 <aci_gatt_write_charac_descriptor>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b46      	cmp	r3, #70	; 0x46
 8000d5e:	d0e8      	beq.n	8000d32 <enableNotification+0x12>
 8000d60:	e000      	b.n	8000d64 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d62:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <enableNotification+0x5c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000019c 	.word	0x2000019c
 8000d78:	200001a4 	.word	0x200001a4
 8000d7c:	2000019e 	.word	0x2000019e

08000d80 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	603a      	str	r2, [r7, #0]
 8000d8a:	80fb      	strh	r3, [r7, #6]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <Attribute_Modified_CB+0x4c>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d105      	bne.n	8000da8 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6838      	ldr	r0, [r7, #0]
 8000da2:	f7ff fecb 	bl	8000b3c <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000da6:	e00c      	b.n	8000dc2 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Attribute_Modified_CB+0x50>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d106      	bne.n	8000dc2 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d102      	bne.n	8000dc2 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <Attribute_Modified_CB+0x54>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200001ac 	.word	0x200001ac
 8000dd0:	200001aa 	.word	0x200001aa
 8000dd4:	2000019e 	.word	0x2000019e

08000dd8 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <GAP_ConnectionComplete_CB+0x54>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <GAP_ConnectionComplete_CB+0x58>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <GAP_ConnectionComplete_CB+0x5c>)
 8000df2:	f004 fef5 	bl	8005be0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000df6:	2305      	movs	r3, #5
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e00a      	b.n	8000e12 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480c      	ldr	r0, [pc, #48]	; (8000e38 <GAP_ConnectionComplete_CB+0x60>)
 8000e08:	f004 feea 	bl	8005be0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	dcf1      	bgt.n	8000dfc <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <GAP_ConnectionComplete_CB+0x64>)
 8000e20:	f004 fede 	bl	8005be0 <iprintf>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000198 	.word	0x20000198
 8000e30:	2000019c 	.word	0x2000019c
 8000e34:	08006ad4 	.word	0x08006ad4
 8000e38:	08006aec 	.word	0x08006aec
 8000e3c:	08006af4 	.word	0x08006af4

08000e40 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <GAP_DisconnectionComplete_CB+0x38>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <GAP_DisconnectionComplete_CB+0x3c>)
 8000e4c:	f004 ff64 	bl	8005d18 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <GAP_DisconnectionComplete_CB+0x40>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <GAP_DisconnectionComplete_CB+0x44>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <GAP_DisconnectionComplete_CB+0x48>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <GAP_DisconnectionComplete_CB+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <GAP_DisconnectionComplete_CB+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <GAP_DisconnectionComplete_CB+0x54>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000198 	.word	0x20000198
 8000e7c:	08006afc 	.word	0x08006afc
 8000e80:	20000008 	.word	0x20000008
 8000e84:	2000019e 	.word	0x2000019e
 8000e88:	2000019f 	.word	0x2000019f
 8000e8c:	200001a0 	.word	0x200001a0
 8000e90:	200001a1 	.word	0x200001a1
 8000e94:	200001a2 	.word	0x200001a2

08000e98 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	603a      	str	r2, [r7, #0]
 8000ea2:	80fb      	strh	r3, [r7, #6]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <GATT_Notification_CB+0x30>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d104      	bne.n	8000ebe <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff fe3f 	bl	8000b3c <receiveData>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001a4 	.word	0x200001a4

08000ecc <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eda:	3301      	adds	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	f040 80e2 	bne.w	80010ac <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2bff      	cmp	r3, #255	; 0xff
 8000eee:	d021      	beq.n	8000f34 <user_notify+0x68>
 8000ef0:	2bff      	cmp	r3, #255	; 0xff
 8000ef2:	f300 80e0 	bgt.w	80010b6 <user_notify+0x1ea>
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	d002      	beq.n	8000f00 <user_notify+0x34>
 8000efa:	2b3e      	cmp	r3, #62	; 0x3e
 8000efc:	d003      	beq.n	8000f06 <user_notify+0x3a>
 8000efe:	e0da      	b.n	80010b6 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000f00:	f7ff ff9e 	bl	8000e40 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000f04:	e0d7      	b.n	80010b6 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f08:	3302      	adds	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	f040 80cd 	bne.w	80010b0 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1d5a      	adds	r2, r3, #5
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	f7ff ff54 	bl	8000dd8 <GAP_ConnectionComplete_CB>
        }
        break;
 8000f30:	bf00      	nop
      }
    }
    break;
 8000f32:	e0bd      	b.n	80010b0 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	3302      	adds	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000f44:	2b11      	cmp	r3, #17
 8000f46:	f200 80b5 	bhi.w	80010b4 <user_notify+0x1e8>
 8000f4a:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <user_notify+0x84>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000f99 	.word	0x08000f99
 8000f54:	080010b5 	.word	0x080010b5
 8000f58:	080010b5 	.word	0x080010b5
 8000f5c:	080010b5 	.word	0x080010b5
 8000f60:	080010b5 	.word	0x080010b5
 8000f64:	080010b5 	.word	0x080010b5
 8000f68:	080010b5 	.word	0x080010b5
 8000f6c:	080010b5 	.word	0x080010b5
 8000f70:	080010b5 	.word	0x080010b5
 8000f74:	080010b5 	.word	0x080010b5
 8000f78:	080010b5 	.word	0x080010b5
 8000f7c:	080010b5 	.word	0x080010b5
 8000f80:	080010b5 	.word	0x080010b5
 8000f84:	080010b5 	.word	0x080010b5
 8000f88:	08000fd9 	.word	0x08000fd9
 8000f8c:	08001065 	.word	0x08001065
 8000f90:	080010b5 	.word	0x080010b5
 8000f94:	08000ffb 	.word	0x08000ffb

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000f98:	4b48      	ldr	r3, [pc, #288]	; (80010bc <user_notify+0x1f0>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10d      	bne.n	8000fbc <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	b298      	uxth	r0, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	7919      	ldrb	r1, [r3, #4]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f7ff fee3 	bl	8000d80 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000fba:	e076      	b.n	80010aa <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	b298      	uxth	r0, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	7919      	ldrb	r1, [r3, #4]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	3305      	adds	r3, #5
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f7ff fed5 	bl	8000d80 <Attribute_Modified_CB>
        break;
 8000fd6:	e068      	b.n	80010aa <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	3302      	adds	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000fe4:	b298      	uxth	r0, r3
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	3b02      	subs	r3, #2
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3305      	adds	r3, #5
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f7ff ff50 	bl	8000e98 <GATT_Notification_CB>
        }
        break;
 8000ff8:	e057      	b.n	80010aa <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <user_notify+0x1f4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d150      	bne.n	80010a4 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	3302      	adds	r3, #2
 8001006:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <user_notify+0x1f8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d011      	beq.n	8001036 <user_notify+0x16a>
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <user_notify+0x1fc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <user_notify+0x200>)
 8001026:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <user_notify+0x200>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <user_notify+0x204>)
 8001030:	f004 fdd6 	bl	8005be0 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001034:	e036      	b.n	80010a4 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <user_notify+0x208>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d031      	beq.n	80010a4 <user_notify+0x1d8>
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <user_notify+0x20c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12c      	bne.n	80010a4 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <user_notify+0x210>)
 8001054:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <user_notify+0x210>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <user_notify+0x214>)
 800105e:	f004 fdbf 	bl	8005be0 <iprintf>
        break;
 8001062:	e01f      	b.n	80010a4 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <user_notify+0x1f4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11d      	bne.n	80010a8 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <user_notify+0x1f8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <user_notify+0x1bc>
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <user_notify+0x1fc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d103      	bne.n	8001088 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <user_notify+0x1fc>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8001086:	e00f      	b.n	80010a8 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <user_notify+0x208>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <user_notify+0x1dc>
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <user_notify+0x20c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <user_notify+0x20c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
        break;
 80010a2:	e001      	b.n	80010a8 <user_notify+0x1dc>
        break;
 80010a4:	bf00      	nop
 80010a6:	e005      	b.n	80010b4 <user_notify+0x1e8>
        break;
 80010a8:	bf00      	nop
      }
    }
    break;
 80010aa:	e003      	b.n	80010b4 <user_notify+0x1e8>
    return;
 80010ac:	bf00      	nop
 80010ae:	e002      	b.n	80010b6 <user_notify+0x1ea>
    break;
 80010b0:	bf00      	nop
 80010b2:	e000      	b.n	80010b6 <user_notify+0x1ea>
    break;
 80010b4:	bf00      	nop
  }
}
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000ac 	.word	0x200000ac
 80010c0:	20000001 	.word	0x20000001
 80010c4:	2000019f 	.word	0x2000019f
 80010c8:	200001a1 	.word	0x200001a1
 80010cc:	200001a4 	.word	0x200001a4
 80010d0:	08006b0c 	.word	0x08006b0c
 80010d4:	200001a0 	.word	0x200001a0
 80010d8:	200001a2 	.word	0x200001a2
 80010dc:	200001a6 	.word	0x200001a6
 80010e0:	08006b24 	.word	0x08006b24

080010e4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HCI_TL_SPI_Init+0x88>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HCI_TL_SPI_Init+0x88>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HCI_TL_SPI_Init+0x88>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <HCI_TL_SPI_Init+0x8c>)
 800111e:	f001 f9d7 	bl	80024d0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HCI_TL_SPI_Init+0x8c>)
 800113c:	f001 f9c8 	bl	80024d0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001140:	2302      	movs	r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <HCI_TL_SPI_Init+0x8c>)
 8001158:	f001 f9ba 	bl	80024d0 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 800115c:	f000 fbc6 	bl	80018ec <BSP_SPI1_Init>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001178:	2101      	movs	r1, #1
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <HCI_TL_SPI_DeInit+0x24>)
 800117c:	f001 fb2c 	bl	80027d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001180:	2102      	movs	r1, #2
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HCI_TL_SPI_DeInit+0x24>)
 8001184:	f001 fb28 	bl	80027d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <HCI_TL_SPI_DeInit+0x24>)
 800118e:	f001 fb23 	bl	80027d8 <HAL_GPIO_DeInit>
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000

0800119c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2102      	movs	r1, #2
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HCI_TL_SPI_Reset+0x38>)
 80011a6:	f001 fc13 	bl	80029d0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <HCI_TL_SPI_Reset+0x38>)
 80011b2:	f001 fc0d 	bl	80029d0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80011b6:	2005      	movs	r0, #5
 80011b8:	f001 f802 	bl	80021c0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <HCI_TL_SPI_Reset+0x38>)
 80011c4:	f001 fc04 	bl	80029d0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80011c8:	2005      	movs	r0, #5
 80011ca:	f000 fff9 	bl	80021c0 <HAL_Delay>
  return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020000 	.word	0x40020000

080011d8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HCI_TL_SPI_Receive+0xac>)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f6:	6018      	str	r0, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2102      	movs	r1, #2
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <HCI_TL_SPI_Receive+0xb0>)
 8001202:	f001 fbe5 	bl	80029d0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001206:	f107 010c 	add.w	r1, r7, #12
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2205      	movs	r2, #5
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fb9b 	bl	800194c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001216:	7b3b      	ldrb	r3, [r7, #12]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d129      	bne.n	8001270 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800121c:	7c3b      	ldrb	r3, [r7, #16]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800122c:	8bfb      	ldrh	r3, [r7, #30]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01e      	beq.n	8001270 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001232:	8bfa      	ldrh	r2, [r7, #30]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	429a      	cmp	r2, r3
 8001238:	d901      	bls.n	800123e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800123e:	2300      	movs	r3, #0
 8001240:	777b      	strb	r3, [r7, #29]
 8001242:	e010      	b.n	8001266 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001244:	f107 011b 	add.w	r1, r7, #27
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2201      	movs	r2, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fb7c 	bl	800194c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001254:	7f7b      	ldrb	r3, [r7, #29]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	7efa      	ldrb	r2, [r7, #27]
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001260:	7f7b      	ldrb	r3, [r7, #29]
 8001262:	3301      	adds	r3, #1
 8001264:	777b      	strb	r3, [r7, #29]
 8001266:	7f7b      	ldrb	r3, [r7, #29]
 8001268:	b29b      	uxth	r3, r3
 800126a:	8bfa      	ldrh	r2, [r7, #30]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8e9      	bhi.n	8001244 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <HCI_TL_SPI_Receive+0xb0>)
 8001276:	f001 fbab 	bl	80029d0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800127a:	7f7b      	ldrb	r3, [r7, #29]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08006b3c 	.word	0x08006b3c
 8001288:	40020000 	.word	0x40020000

0800128c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001298:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HCI_TL_SPI_Send+0x9c>)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f000 ff7e 	bl	80021a8 <HAL_GetTick>
 80012ac:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	481d      	ldr	r0, [pc, #116]	; (800132c <HCI_TL_SPI_Send+0xa0>)
 80012b8:	f001 fb8a 	bl	80029d0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2205      	movs	r2, #5
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fb40 	bl	800194c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80012cc:	7a3b      	ldrb	r3, [r7, #8]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d10f      	bne.n	80012f2 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d806      	bhi.n	80012ea <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	461a      	mov	r2, r3
 80012e0:	4913      	ldr	r1, [pc, #76]	; (8001330 <HCI_TL_SPI_Send+0xa4>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fb32 	bl	800194c <BSP_SPI1_SendRecv>
 80012e8:	e006      	b.n	80012f8 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80012ea:	f06f 0301 	mvn.w	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	e002      	b.n	80012f8 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2102      	movs	r1, #2
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <HCI_TL_SPI_Send+0xa0>)
 80012fe:	f001 fb67 	bl	80029d0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001302:	f000 ff51 	bl	80021a8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d903      	bls.n	8001318 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8001310:	f06f 0302 	mvn.w	r3, #2
 8001314:	61fb      	str	r3, [r7, #28]
      break;
 8001316:	e002      	b.n	800131e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dbc7      	blt.n	80012ae <HCI_TL_SPI_Send+0x22>

  return result;
 800131e:	69fb      	ldr	r3, [r7, #28]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08006b44 	.word	0x08006b44
 800132c:	40020000 	.word	0x40020000
 8001330:	200001b8 	.word	0x200001b8

08001334 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001338:	2101      	movs	r1, #1
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <IsDataAvailable+0x1c>)
 800133c:	f001 fb30 	bl	80029a0 <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b01      	cmp	r3, #1
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020000 	.word	0x40020000

08001354 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <hci_tl_lowlevel_init+0x54>)
 800135c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <hci_tl_lowlevel_init+0x58>)
 8001360:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <hci_tl_lowlevel_init+0x5c>)
 8001364:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <hci_tl_lowlevel_init+0x60>)
 8001368:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <hci_tl_lowlevel_init+0x64>)
 800136c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <hci_tl_lowlevel_init+0x68>)
 8001370:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fe7b 	bl	8005070 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800137a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <hci_tl_lowlevel_init+0x6c>)
 8001380:	f001 f86d 	bl	800245e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <hci_tl_lowlevel_init+0x70>)
 8001386:	2100      	movs	r1, #0
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <hci_tl_lowlevel_init+0x6c>)
 800138a:	f001 f84e 	bl	800242a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2006      	movs	r0, #6
 8001394:	f001 f813 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001398:	2006      	movs	r0, #6
 800139a:	f001 f82c 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	080010e5 	.word	0x080010e5
 80013ac:	08001175 	.word	0x08001175
 80013b0:	0800128d 	.word	0x0800128d
 80013b4:	080011d9 	.word	0x080011d9
 80013b8:	0800119d 	.word	0x0800119d
 80013bc:	0800198d 	.word	0x0800198d
 80013c0:	200001b0 	.word	0x200001b0
 80013c4:	080013c9 	.word	0x080013c9

080013c8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80013cc:	e005      	b.n	80013da <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80013ce:	2000      	movs	r0, #0
 80013d0:	f003 ffb4 	bl	800533c <hci_notify_asynch_evt>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80013da:	f7ff ffab 	bl	8001334 <IsDataAvailable>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f4      	bne.n	80013ce <hci_tl_lowlevel_isr+0x6>
 80013e4:	e000      	b.n	80013e8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80013e6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f000 fe74 	bl	80020dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f4:	f000 f81c 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f000 f8da 	bl	80015b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013fc:	f000 f884 	bl	8001508 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001400:	f000 f8ac 	bl	800155c <MX_USART6_UART_Init>
  MX_BlueNRG_MS_Init();
 8001404:	f7ff f8c6 	bl	8000594 <MX_BlueNRG_MS_Init>
//	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
//	printf("Inviato send msg_not_ascii\r\n");
//
//	printf("Initialization..\r\n");

	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <main+0x40>)
 8001410:	f001 fade 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f000 fed3 	bl	80021c0 <HAL_Delay>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <main+0x40>)
 8001422:	f001 fad5 	bl	80029d0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001426:	f7ff f9bf 	bl	80007a8 <MX_BlueNRG_MS_Process>
 800142a:	e7fc      	b.n	8001426 <main+0x3a>
 800142c:	40020400 	.word	0x40020400

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fae5 	bl	8005a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <SystemClock_Config+0xd0>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <SystemClock_Config+0xd0>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <SystemClock_Config+0xd0>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <SystemClock_Config+0xd4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <SystemClock_Config+0xd4>)
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SystemClock_Config+0xd4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149c:	2302      	movs	r3, #2
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014a4:	2310      	movs	r3, #16
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b2:	2307      	movs	r3, #7
 80014b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fabc 	bl	8002a38 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014c6:	f000 f907 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2302      	movs	r3, #2
 80014d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2102      	movs	r1, #2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fd1e 	bl	8002f28 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014f2:	f000 f8f1 	bl	80016d8 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART1_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001540:	f002 fa20 	bl	8003984 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f8c5 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002b8 	.word	0x200002b8
 8001558:	40011000 	.word	0x40011000

0800155c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_USART6_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800156c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART6_UART_Init+0x4c>)
 8001594:	f002 f9f6 	bl	8003984 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f89b 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002fc 	.word	0x200002fc
 80015ac:	40011400 	.word	0x40011400

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a3f      	ldr	r2, [pc, #252]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a38      	ldr	r2, [pc, #224]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_GPIO_Init+0x11c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f240 3102 	movw	r1, #770	; 0x302
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <MX_GPIO_Init+0x120>)
 800163e:	f001 f9c7 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001648:	4822      	ldr	r0, [pc, #136]	; (80016d4 <MX_GPIO_Init+0x124>)
 800164a:	f001 f9c1 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800164e:	2301      	movs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	481b      	ldr	r0, [pc, #108]	; (80016d0 <MX_GPIO_Init+0x120>)
 8001664:	f000 ff34 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001668:	f240 3302 	movw	r3, #770	; 0x302
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4813      	ldr	r0, [pc, #76]	; (80016d0 <MX_GPIO_Init+0x120>)
 8001682:	f000 ff25 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_GPIO_Init+0x124>)
 80016a0:	f000 ff16 	bl	80024d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2006      	movs	r0, #6
 80016aa:	f000 fe88 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ae:	2006      	movs	r0, #6
 80016b0:	f000 fea1 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2028      	movs	r0, #40	; 0x28
 80016ba:	f000 fe80 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016be:	2028      	movs	r0, #40	; 0x28
 80016c0:	f000 fe99 	bl	80023f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001722:	2007      	movs	r0, #7
 8001724:	f000 fe40 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a41      	ldr	r2, [pc, #260]	; (8001858 <HAL_UART_MspInit+0x124>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d14b      	bne.n	80017ee <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_UART_MspInit+0x128>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a3f      	ldr	r2, [pc, #252]	; (800185c <HAL_UART_MspInit+0x128>)
 8001760:	f043 0310 	orr.w	r3, r3, #16
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_UART_MspInit+0x128>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_UART_MspInit+0x128>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_UART_MspInit+0x128>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_UART_MspInit+0x128>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_UART_MspInit+0x128>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_UART_MspInit+0x128>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_UART_MspInit+0x128>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017bc:	2307      	movs	r3, #7
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4826      	ldr	r0, [pc, #152]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017c8:	f000 fe82 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017dc:	2307      	movs	r3, #7
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <HAL_UART_MspInit+0x130>)
 80017e8:	f000 fe72 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017ec:	e030      	b.n	8001850 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_UART_MspInit+0x134>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d12b      	bne.n	8001850 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_UART_MspInit+0x128>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_UART_MspInit+0x128>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	6453      	str	r3, [r2, #68]	; 0x44
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_UART_MspInit+0x128>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_MspInit+0x128>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_UART_MspInit+0x128>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_UART_MspInit+0x128>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001830:	23c0      	movs	r3, #192	; 0xc0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001840:	2308      	movs	r3, #8
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4808      	ldr	r0, [pc, #32]	; (800186c <HAL_UART_MspInit+0x138>)
 800184c:	f000 fe40 	bl	80024d0 <HAL_GPIO_Init>
}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40011000 	.word	0x40011000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40011400 	.word	0x40011400
 800186c:	40020800 	.word	0x40020800

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 fc60 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <EXTI0_IRQHandler+0x10>)
 80018ca:	f000 fddd 	bl	8002488 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001b0 	.word	0x200001b0

080018d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <EXTI15_10_IRQHandler+0x10>)
 80018de:	f000 fdd3 	bl	8002488 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000018 	.word	0x20000018

080018ec <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <BSP_SPI1_Init+0x54>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <BSP_SPI1_Init+0x58>)
 80018fa:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <BSP_SPI1_Init+0x5c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4911      	ldr	r1, [pc, #68]	; (8001948 <BSP_SPI1_Init+0x5c>)
 8001904:	600a      	str	r2, [r1, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d114      	bne.n	8001934 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <BSP_SPI1_Init+0x54>)
 800190c:	f001 ff61 	bl	80037d2 <HAL_SPI_GetState>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10e      	bne.n	8001934 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001916:	480a      	ldr	r0, [pc, #40]	; (8001940 <BSP_SPI1_Init+0x54>)
 8001918:	f000 f87c 	bl	8001a14 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <BSP_SPI1_Init+0x54>)
 8001924:	f000 f83a 	bl	800199c <MX_SPI1_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800192e:	f06f 0307 	mvn.w	r3, #7
 8001932:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000340 	.word	0x20000340
 8001944:	40013000 	.word	0x40013000
 8001948:	20000398 	.word	0x20000398

0800194c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <BSP_SPI1_SendRecv+0x3c>)
 800196c:	f001 fd8f 	bl	800348e <HAL_SPI_TransmitReceive>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001976:	f06f 0305 	mvn.w	r3, #5
 800197a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800197c:	697b      	ldr	r3, [r7, #20]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000340 	.word	0x20000340

0800198c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001990:	f000 fc0a 	bl	80021a8 <HAL_GetTick>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <MX_SPI1_Init+0x74>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2218      	movs	r2, #24
 80019da:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f001 fcb7 	bl	8003368 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40013000 	.word	0x40013000

08001a14 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <SPI1_MspInit+0xc4>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001a80:	2305      	movs	r3, #5
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <SPI1_MspInit+0xc8>)
 8001a8c:	f000 fd20 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <SPI1_MspInit+0xc8>)
 8001aac:	f000 fd10 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <SPI1_MspInit+0xcc>)
 8001acc:	f000 fd00 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e00a      	b.n	8001b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	4601      	mov	r1, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf0      	blt.n	8001af6 <_read+0x12>
  }

  return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fa6b 	bl	8002014 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf1      	blt.n	8001b30 <_write+0x12>
  }
  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_close>:

int _close(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_isatty>:

int _isatty(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f003 fd08 	bl	8005604 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20018000 	.word	0x20018000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	2000039c 	.word	0x2000039c
 8001c28:	200006e8 	.word	0x200006e8

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	; (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f003 fe91 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff fbb3 	bl	80013ec <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c94:	08006c20 	.word	0x08006c20
  ldr r2, =_sbss
 8001c98:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c9c:	200006e8 	.word	0x200006e8

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <BSP_LED_Init+0x20>)
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08006b64 	.word	0x08006b64

08001cc8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <BSP_LED_On+0x28>)
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	2120      	movs	r1, #32
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fe76 	bl	80029d0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000010 	.word	0x20000010

08001cf4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <BSP_LED_Off+0x28>)
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	2120      	movs	r1, #32
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fe60 	bl	80029d0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000010 	.word	0x20000010

08001d20 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <BSP_LED_Toggle+0x28>)
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	2220      	movs	r2, #32
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fe63 	bl	8002a02 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000010 	.word	0x20000010

08001d4c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <LED_USER_GPIO_Init+0x7c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	480b      	ldr	r0, [pc, #44]	; (8001dcc <LED_USER_GPIO_Init+0x80>)
 8001da0:	f000 fe16 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001da4:	2320      	movs	r3, #32
 8001da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4619      	mov	r1, r3
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <LED_USER_GPIO_Init+0x80>)
 8001dbc:	f000 fb88 	bl	80024d0 <HAL_GPIO_Init>

}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <BSP_PB_Init+0x94>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d132      	bne.n	8001e5a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <BSP_PB_Init+0x98>)
 8001dfa:	441a      	add	r2, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <BSP_PB_Init+0x9c>)
 8001e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 fb29 	bl	800245e <HAL_EXTI_GetHandle>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e12:	f06f 0303 	mvn.w	r3, #3
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e01f      	b.n	8001e5a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <BSP_PB_Init+0x98>)
 8001e20:	1898      	adds	r0, r3, r2
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <BSP_PB_Init+0xa0>)
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f000 fafc 	bl	800242a <HAL_EXTI_RegisterCallback>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e38:	f06f 0303 	mvn.w	r3, #3
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e00c      	b.n	8001e5a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e40:	2028      	movs	r0, #40	; 0x28
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <BSP_PB_Init+0xa4>)
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f000 fab6 	bl	80023be <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e52:	2328      	movs	r3, #40	; 0x28
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 face 	bl	80023f6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	08006b68 	.word	0x08006b68
 8001e68:	20000018 	.word	0x20000018
 8001e6c:	08006b6c 	.word	0x08006b6c
 8001e70:	08006b70 	.word	0x08006b70
 8001e74:	08006b74 	.word	0x08006b74

08001e78 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <BSP_PB_GetState+0x34>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fd85 	bl	80029a0 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000014 	.word	0x20000014

08001eb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7fe fd09 	bl	80008cc <BSP_PB_Callback>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <BUTTON_USER_GPIO_Init+0x74>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	4619      	mov	r1, r3
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <BUTTON_USER_GPIO_Init+0x78>)
 8001f26:	f000 fad3 	bl	80024d0 <HAL_GPIO_Init>

}
 8001f2a:	bf00      	nop
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020800 	.word	0x40020800

08001f3c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d903      	bls.n	8001f58 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f50:	f06f 0301 	mvn.w	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e025      	b.n	8001fa4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	79fa      	ldrb	r2, [r7, #7]
 8001f5c:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <BSP_COM_Init+0x74>)
 8001f5e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <BSP_COM_Init+0x78>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <BSP_COM_Init+0x78>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f864 	bl	800204c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001f84:	79fa      	ldrb	r2, [r7, #7]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <BSP_COM_Init+0x78>)
 8001f90:	4413      	add	r3, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f810 	bl	8001fb8 <MX_USART2_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f9e:	f06f 0303 	mvn.w	r3, #3
 8001fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000020 	.word	0x20000020
 8001fb4:	200003a0 	.word	0x200003a0

08001fb8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART2_UART_Init+0x58>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f001 fcc4 	bl	8003984 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40004400 	.word	0x40004400

08002014 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <__io_putchar+0x30>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <__io_putchar+0x34>)
 800202c:	1898      	adds	r0, r3, r2
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002034:	2201      	movs	r2, #1
 8002036:	f001 fcf2 	bl	8003a1e <HAL_UART_Transmit>
  return ch;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200003e4 	.word	0x200003e4
 8002048:	200003a0 	.word	0x200003a0

0800204c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <USART2_MspInit+0x88>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <USART2_MspInit+0x88>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <USART2_MspInit+0x88>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <USART2_MspInit+0x88>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <USART2_MspInit+0x88>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <USART2_MspInit+0x88>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800208c:	2304      	movs	r3, #4
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800209c:	2307      	movs	r3, #7
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	480c      	ldr	r0, [pc, #48]	; (80020d8 <USART2_MspInit+0x8c>)
 80020a8:	f000 fa12 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80020ac:	2308      	movs	r3, #8
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80020bc:	2307      	movs	r3, #7
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4804      	ldr	r0, [pc, #16]	; (80020d8 <USART2_MspInit+0x8c>)
 80020c8:	f000 fa02 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000

080020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <HAL_Init+0x40>)
 80020e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_Init+0x40>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_Init+0x40>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f94f 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210a:	2000      	movs	r0, #0
 800210c:	f000 f808 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002110:	f7ff fae8 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f967 	bl	8002412 <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f92f 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000000c 	.word	0x2000000c
 8002178:	20000028 	.word	0x20000028
 800217c:	20000024 	.word	0x20000024

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000028 	.word	0x20000028
 80021a4:	200003e8 	.word	0x200003e8

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200003e8 	.word	0x200003e8

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000028 	.word	0x20000028

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800242a:	b480      	push	{r7}
 800242c:	b087      	sub	sp, #28
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	460b      	mov	r3, r1
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]
      break;
 8002448:	e002      	b.n	8002450 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
      break;
 800244e:	bf00      	nop
  }

  return status;
 8002450:	7dfb      	ldrb	r3, [r7, #23]
}
 8002452:	4618      	mov	r0, r3
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e003      	b.n	800247a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2201      	movs	r2, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_EXTI_IRQHandler+0x44>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <HAL_EXTI_IRQHandler+0x44>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4798      	blx	r3
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e159      	b.n	80027a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8148 	bne.w	800279a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	2b02      	cmp	r3, #2
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a2 	beq.w	800279a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b57      	ldr	r3, [pc, #348]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a56      	ldr	r2, [pc, #344]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_GPIO_Init+0x2ec>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a49      	ldr	r2, [pc, #292]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x202>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_GPIO_Init+0x2f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x1fe>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_GPIO_Init+0x2f8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x1fa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a46      	ldr	r2, [pc, #280]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x1f6>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <HAL_GPIO_Init+0x300>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x1f2>
 80026be:	2304      	movs	r3, #4
 80026c0:	e008      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e004      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026d2:	2300      	movs	r3, #0
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f002 0203 	and.w	r2, r2, #3
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4093      	lsls	r3, r2
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e4:	4935      	ldr	r1, [pc, #212]	; (80027bc <HAL_GPIO_Init+0x2ec>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_GPIO_Init+0x304>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	f67f aea2 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e0bb      	b.n	800296c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	f040 80ab 	bne.w	8002966 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002810:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_GPIO_DeInit+0x1ac>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a54      	ldr	r2, [pc, #336]	; (8002988 <HAL_GPIO_DeInit+0x1b0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_DeInit+0x96>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a53      	ldr	r2, [pc, #332]	; (800298c <HAL_GPIO_DeInit+0x1b4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_DeInit+0x92>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_DeInit+0x8e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a51      	ldr	r2, [pc, #324]	; (8002994 <HAL_GPIO_DeInit+0x1bc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_DeInit+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a50      	ldr	r2, [pc, #320]	; (8002998 <HAL_GPIO_DeInit+0x1c0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_DeInit+0x86>
 800285a:	2304      	movs	r3, #4
 800285c:	e008      	b.n	8002870 <HAL_GPIO_DeInit+0x98>
 800285e:	2307      	movs	r3, #7
 8002860:	e006      	b.n	8002870 <HAL_GPIO_DeInit+0x98>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_DeInit+0x98>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_DeInit+0x98>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_DeInit+0x98>
 800286e:	2300      	movs	r3, #0
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d132      	bne.n	80028e6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	4944      	ldr	r1, [pc, #272]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 800288a:	4013      	ands	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	4941      	ldr	r1, [pc, #260]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 8002898:	4013      	ands	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800289c:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	493d      	ldr	r1, [pc, #244]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028aa:	4b3c      	ldr	r3, [pc, #240]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	493a      	ldr	r1, [pc, #232]	; (800299c <HAL_GPIO_DeInit+0x1c4>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <HAL_GPIO_DeInit+0x1ac>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	482a      	ldr	r0, [pc, #168]	; (8002984 <HAL_GPIO_DeInit+0x1ac>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	400a      	ands	r2, r1
 80028e0:	3302      	adds	r3, #2
 80028e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2103      	movs	r1, #3
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	08d2      	lsrs	r2, r2, #3
 800291c:	4019      	ands	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2103      	movs	r1, #3
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	2101      	movs	r1, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2103      	movs	r1, #3
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	f67f af40 	bls.w	80027f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	041a      	lsls	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e267      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a56:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b85      	ldr	r3, [pc, #532]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e242      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6f      	ldr	r2, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a68      	ldr	r2, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a65      	ldr	r2, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7ff fb5a 	bl	80021a8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff fb56 	bl	80021a8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e207      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7ff fb46 	bl	80021a8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff fb42 	bl	80021a8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f3      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b51      	ldr	r3, [pc, #324]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c7      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4937      	ldr	r1, [pc, #220]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7ff fafb 	bl	80021a8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7ff faf7 	bl	80021a8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a8      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4925      	ldr	r1, [pc, #148]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fada 	bl	80021a8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fad6 	bl	80021a8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e187      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7ff faba 	bl	80021a8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7ff fab6 	bl	80021a8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e167      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7ff faa3 	bl	80021a8 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7ff fa9f 	bl	80021a8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d907      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e150      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8097 	beq.w	8002dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b77      	ldr	r3, [pc, #476]	; (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b74      	ldr	r3, [pc, #464]	; (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	; (8002eac <HAL_RCC_OscConfig+0x474>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff fa5f 	bl	80021a8 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7ff fa5b 	bl	80021a8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e10c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <HAL_RCC_OscConfig+0x474>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ea>
 8002d14:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a63      	ldr	r2, [pc, #396]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e01c      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x30c>
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d44:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7ff fa20 	bl	80021a8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7ff fa1c 	bl	80021a8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0cb      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b49      	ldr	r3, [pc, #292]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff fa0a 	bl	80021a8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7ff fa06 	bl	80021a8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0b5      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a1 	beq.w	8002f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d05c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d141      	bne.n	8002e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f9da 	bl	80021a8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff f9d6 	bl	80021a8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e087      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7ff f9af 	bl	80021a8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7ff f9ab 	bl	80021a8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e05c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x416>
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff f998 	bl	80021a8 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7ff f994 	bl	80021a8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e045      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e038      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff f8c6 	bl	80021a8 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7ff f8c2 	bl	80021a8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f826 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08006b4c 	.word	0x08006b4c
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	20000024 	.word	0x20000024

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b094      	sub	sp, #80	; 0x50
 80030fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003100:	2300      	movs	r3, #0
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003104:	2300      	movs	r3, #0
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310c:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d00d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x40>
 8003118:	2b08      	cmp	r3, #8
 800311a:	f200 80e1 	bhi.w	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3a>
 8003126:	e0db      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800312c:	e0db      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b73      	ldr	r3, [pc, #460]	; (80032fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003132:	e0d8      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	2200      	movs	r2, #0
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
 8003154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	633b      	str	r3, [r7, #48]	; 0x30
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	0159      	lsls	r1, r3, #5
 8003174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003178:	0150      	lsls	r0, r2, #5
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4621      	mov	r1, r4
 8003180:	1a51      	subs	r1, r2, r1
 8003182:	6139      	str	r1, [r7, #16]
 8003184:	4629      	mov	r1, r5
 8003186:	eb63 0301 	sbc.w	r3, r3, r1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003198:	4659      	mov	r1, fp
 800319a:	018b      	lsls	r3, r1, #6
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a2:	4651      	mov	r1, sl
 80031a4:	018a      	lsls	r2, r1, #6
 80031a6:	4651      	mov	r1, sl
 80031a8:	ebb2 0801 	subs.w	r8, r2, r1
 80031ac:	4659      	mov	r1, fp
 80031ae:	eb63 0901 	sbc.w	r9, r3, r1
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c6:	4690      	mov	r8, r2
 80031c8:	4699      	mov	r9, r3
 80031ca:	4623      	mov	r3, r4
 80031cc:	eb18 0303 	adds.w	r3, r8, r3
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	462b      	mov	r3, r5
 80031d4:	eb49 0303 	adc.w	r3, r9, r3
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e6:	4629      	mov	r1, r5
 80031e8:	024b      	lsls	r3, r1, #9
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f0:	4621      	mov	r1, r4
 80031f2:	024a      	lsls	r2, r1, #9
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fa:	2200      	movs	r2, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003204:	f7fd f844 	bl	8000290 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003210:	e058      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003212:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2200      	movs	r2, #0
 800321a:	4618      	mov	r0, r3
 800321c:	4611      	mov	r1, r2
 800321e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0159      	lsls	r1, r3, #5
 800323a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323e:	0150      	lsls	r0, r2, #5
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4641      	mov	r1, r8
 8003246:	ebb2 0a01 	subs.w	sl, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800325c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003264:	ebb2 040a 	subs.w	r4, r2, sl
 8003268:	eb63 050b 	sbc.w	r5, r3, fp
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	00eb      	lsls	r3, r5, #3
 8003276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	4643      	mov	r3, r8
 8003282:	18e3      	adds	r3, r4, r3
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	464b      	mov	r3, r9
 8003288:	eb45 0303 	adc.w	r3, r5, r3
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329a:	4629      	mov	r1, r5
 800329c:	028b      	lsls	r3, r1, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a4:	4621      	mov	r1, r4
 80032a6:	028a      	lsls	r2, r1, #10
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ae:	2200      	movs	r2, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	61fa      	str	r2, [r7, #28]
 80032b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b8:	f7fc ffea 	bl	8000290 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3750      	adds	r7, #80	; 0x50
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000000c 	.word	0x2000000c

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08006b5c 	.word	0x08006b5c

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08006b5c 	.word	0x08006b5c

08003368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07b      	b.n	8003472 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338a:	d009      	beq.n	80033a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
 8003392:	e005      	b.n	80033a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f85d 	bl	800347a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	ea42 0103 	orr.w	r1, r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0104 	and.w	r1, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0210 	and.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08c      	sub	sp, #48	; 0x30
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800349c:	2301      	movs	r3, #1
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x26>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e18a      	b.n	80037ca <HAL_SPI_TransmitReceive+0x33c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034bc:	f7fe fe74 	bl	80021a8 <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034d2:	887b      	ldrh	r3, [r7, #2]
 80034d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d00f      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x70>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e4:	d107      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x68>
 80034ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d003      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034fc:	e15b      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x82>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x82>
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003516:	e14e      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b04      	cmp	r3, #4
 8003522:	d003      	beq.n	800352c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	887a      	ldrh	r2, [r7, #2]
 800354e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d007      	beq.n	8003580 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	d178      	bne.n	800367c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x10a>
 8003592:	8b7b      	ldrh	r3, [r7, #26]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d166      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035bc:	e053      	b.n	8003666 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11b      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x176>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x176>
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d113      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d119      	bne.n	8003646 <HAL_SPI_TransmitReceive+0x1b8>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d014      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	b292      	uxth	r2, r2
 8003628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	1c9a      	adds	r2, r3, #2
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003642:	2301      	movs	r3, #1
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003646:	f7fe fdaf 	bl	80021a8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003652:	429a      	cmp	r2, r3
 8003654:	d807      	bhi.n	8003666 <HAL_SPI_TransmitReceive+0x1d8>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d003      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003664:	e0a7      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1a6      	bne.n	80035be <HAL_SPI_TransmitReceive+0x130>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1a1      	bne.n	80035be <HAL_SPI_TransmitReceive+0x130>
 800367a:	e07c      	b.n	8003776 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1fc>
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d16b      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b0:	e057      	b.n	8003762 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11c      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x26c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x26c>
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d114      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d119      	bne.n	800373c <HAL_SPI_TransmitReceive+0x2ae>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800373c:	f7fe fd34 	bl	80021a8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003748:	429a      	cmp	r2, r3
 800374a:	d803      	bhi.n	8003754 <HAL_SPI_TransmitReceive+0x2c6>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d102      	bne.n	800375a <HAL_SPI_TransmitReceive+0x2cc>
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003760:	e029      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1a2      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x224>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d19d      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f8c0 	bl	8003900 <SPI_EndRxTxTransaction>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003792:	e010      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	e000      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3730      	adds	r7, #48	; 0x30
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e0:	b2db      	uxtb	r3, r3
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003800:	f7fe fcd2 	bl	80021a8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003810:	f7fe fcca 	bl	80021a8 <HAL_GetTick>
 8003814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	015b      	lsls	r3, r3, #5
 800381c:	0d1b      	lsrs	r3, r3, #20
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003826:	e054      	b.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d050      	beq.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003830:	f7fe fcba 	bl	80021a8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	429a      	cmp	r2, r3
 800383e:	d902      	bls.n	8003846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13d      	bne.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d111      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	d004      	beq.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d107      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d10f      	bne.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e017      	b.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d19b      	bne.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <SPI_EndRxTxTransaction+0x7c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <SPI_EndRxTxTransaction+0x80>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0d5b      	lsrs	r3, r3, #21
 8003918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d112      	bne.n	8003952 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff5a 	bl	80037f0 <SPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	3b01      	subs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d0f2      	beq.n	8003952 <SPI_EndRxTxTransaction+0x52>
 800396c:	e000      	b.n	8003970 <SPI_EndRxTxTransaction+0x70>
        break;
 800396e:	bf00      	nop
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000000c 	.word	0x2000000c
 8003980:	165e9f81 	.word	0x165e9f81

08003984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e03f      	b.n	8003a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fec2 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f9cb 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	; 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d17c      	bne.n	8003b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_Transmit+0x2c>
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e075      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_Transmit+0x3e>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e06e      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fe fb99 	bl	80021a8 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ab0:	e02a      	b.n	8003b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f8e2 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e036      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e007      	b.n	8003afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1cf      	bne.n	8003ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f8b2 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e006      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b08a      	sub	sp, #40	; 0x28
 8003b46:	af02      	add	r7, sp, #8
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	f040 808c 	bne.w	8003c7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Receive+0x2e>
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e084      	b.n	8003c7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Receive+0x40>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e07d      	b.n	8003c7e <HAL_UART_Receive+0x13c>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2222      	movs	r2, #34	; 0x22
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b9e:	f7fe fb03 	bl	80021a8 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	d108      	bne.n	8003bcc <HAL_UART_Receive+0x8a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e003      	b.n	8003bd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bdc:	e043      	b.n	8003c66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2120      	movs	r1, #32
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f84c 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e042      	b.n	8003c7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3302      	adds	r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e01f      	b.n	8003c58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d007      	beq.n	8003c32 <HAL_UART_Receive+0xf0>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_UART_Receive+0xfe>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e008      	b.n	8003c52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3301      	adds	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1b6      	bne.n	8003bde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b090      	sub	sp, #64	; 0x40
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	e050      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d04c      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	f7fe fa7f 	bl	80021a8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d241      	bcs.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0a:	623a      	str	r2, [r7, #32]
 8003d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00f      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d09f      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3740      	adds	r7, #64	; 0x40
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b0c0      	sub	sp, #256	; 0x100
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	ea40 0301 	orr.w	r3, r0, r1
 8003d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dbc:	f021 010c 	bic.w	r1, r1, #12
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	6999      	ldr	r1, [r3, #24]
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	ea40 0301 	orr.w	r3, r0, r1
 8003dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b8f      	ldr	r3, [pc, #572]	; (8004030 <UART_SetConfig+0x2cc>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d005      	beq.n	8003e04 <UART_SetConfig+0xa0>
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <UART_SetConfig+0x2d0>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d104      	bne.n	8003e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7ff fa9c 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8003e08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e0c:	e003      	b.n	8003e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0e:	f7ff fa83 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003e12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e20:	f040 810c 	bne.w	800403c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e46:	4621      	mov	r1, r4
 8003e48:	eb12 0801 	adds.w	r8, r2, r1
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	eb43 0901 	adc.w	r9, r3, r1
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e66:	4690      	mov	r8, r2
 8003e68:	4699      	mov	r9, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	eb18 0303 	adds.w	r3, r8, r3
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e74:	462b      	mov	r3, r5
 8003e76:	eb49 0303 	adc.w	r3, r9, r3
 8003e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e92:	460b      	mov	r3, r1
 8003e94:	18db      	adds	r3, r3, r3
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
 8003e98:	4613      	mov	r3, r2
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea8:	f7fc f9f2 	bl	8000290 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4b61      	ldr	r3, [pc, #388]	; (8004038 <UART_SetConfig+0x2d4>)
 8003eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	011c      	lsls	r4, r3, #4
 8003eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	464b      	mov	r3, r9
 8003ed0:	1891      	adds	r1, r2, r2
 8003ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ed4:	415b      	adcs	r3, r3
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003edc:	4641      	mov	r1, r8
 8003ede:	eb12 0a01 	adds.w	sl, r2, r1
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efc:	4692      	mov	sl, r2
 8003efe:	469b      	mov	fp, r3
 8003f00:	4643      	mov	r3, r8
 8003f02:	eb1a 0303 	adds.w	r3, sl, r3
 8003f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	18db      	adds	r3, r3, r3
 8003f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2e:	4613      	mov	r3, r2
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
 8003f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f3e:	f7fc f9a7 	bl	8000290 <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <UART_SetConfig+0x2d4>)
 8003f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2264      	movs	r2, #100	; 0x64
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	1acb      	subs	r3, r1, r3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f5e:	4b36      	ldr	r3, [pc, #216]	; (8004038 <UART_SetConfig+0x2d4>)
 8003f60:	fba3 2302 	umull	r2, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f6c:	441c      	add	r4, r3
 8003f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f90:	4641      	mov	r1, r8
 8003f92:	1851      	adds	r1, r2, r1
 8003f94:	6339      	str	r1, [r7, #48]	; 0x30
 8003f96:	4649      	mov	r1, r9
 8003f98:	414b      	adcs	r3, r1
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fa8:	4659      	mov	r1, fp
 8003faa:	00cb      	lsls	r3, r1, #3
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	00ca      	lsls	r2, r1, #3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	4613      	mov	r3, r2
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ffa:	f7fc f949 	bl	8000290 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <UART_SetConfig+0x2d4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <UART_SetConfig+0x2d4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 0207 	and.w	r2, r3, #7
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4422      	add	r2, r4
 800402a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800402c:	e105      	b.n	800423a <UART_SetConfig+0x4d6>
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800403c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004046:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800404a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	1891      	adds	r1, r2, r2
 8004054:	6239      	str	r1, [r7, #32]
 8004056:	415b      	adcs	r3, r3
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800405e:	4641      	mov	r1, r8
 8004060:	1854      	adds	r4, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb43 0501 	adc.w	r5, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	00eb      	lsls	r3, r5, #3
 8004072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004076:	00e2      	lsls	r2, r4, #3
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	4643      	mov	r3, r8
 800407e:	18e3      	adds	r3, r4, r3
 8004080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004084:	464b      	mov	r3, r9
 8004086:	eb45 0303 	adc.w	r3, r5, r3
 800408a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800409a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040aa:	4629      	mov	r1, r5
 80040ac:	008b      	lsls	r3, r1, #2
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b4:	4621      	mov	r1, r4
 80040b6:	008a      	lsls	r2, r1, #2
 80040b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040bc:	f7fc f8e8 	bl	8000290 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4b60      	ldr	r3, [pc, #384]	; (8004248 <UART_SetConfig+0x4e4>)
 80040c6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	011c      	lsls	r4, r3, #4
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	61b9      	str	r1, [r7, #24]
 80040e8:	415b      	adcs	r3, r3
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6139      	str	r1, [r7, #16]
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004124:	464b      	mov	r3, r9
 8004126:	460a      	mov	r2, r1
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	67bb      	str	r3, [r7, #120]	; 0x78
 800413a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004148:	4649      	mov	r1, r9
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	4641      	mov	r1, r8
 800414e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004152:	4641      	mov	r1, r8
 8004154:	008a      	lsls	r2, r1, #2
 8004156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800415a:	f7fc f899 	bl	8000290 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <UART_SetConfig+0x4e4>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <UART_SetConfig+0x4e4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004182:	441c      	add	r4, r3
 8004184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004188:	2200      	movs	r2, #0
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
 800418c:	677a      	str	r2, [r7, #116]	; 0x74
 800418e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004192:	4642      	mov	r2, r8
 8004194:	464b      	mov	r3, r9
 8004196:	1891      	adds	r1, r2, r2
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	415b      	adcs	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a2:	4641      	mov	r1, r8
 80041a4:	1851      	adds	r1, r2, r1
 80041a6:	6039      	str	r1, [r7, #0]
 80041a8:	4649      	mov	r1, r9
 80041aa:	414b      	adcs	r3, r1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ba:	4659      	mov	r1, fp
 80041bc:	00cb      	lsls	r3, r1, #3
 80041be:	4651      	mov	r1, sl
 80041c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c4:	4651      	mov	r1, sl
 80041c6:	00ca      	lsls	r2, r1, #3
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	4642      	mov	r2, r8
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	663b      	str	r3, [r7, #96]	; 0x60
 80041e8:	667a      	str	r2, [r7, #100]	; 0x64
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041f6:	4649      	mov	r1, r9
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	4641      	mov	r1, r8
 80041fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004200:	4641      	mov	r1, r8
 8004202:	008a      	lsls	r2, r1, #2
 8004204:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004208:	f7fc f842 	bl	8000290 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <UART_SetConfig+0x4e4>)
 8004212:	fba3 1302 	umull	r1, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2164      	movs	r1, #100	; 0x64
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	3332      	adds	r3, #50	; 0x32
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <UART_SetConfig+0x4e4>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4422      	add	r2, r4
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004240:	46bd      	mov	sp, r7
 8004242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004246:	bf00      	nop
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4603      	mov	r3, r0
 8004256:	71fb      	strb	r3, [r7, #7]
 8004258:	460b      	mov	r3, r1
 800425a:	71bb      	strb	r3, [r7, #6]
 800425c:	4613      	mov	r3, r2
 800425e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004264:	79bb      	ldrb	r3, [r7, #6]
 8004266:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004268:	797b      	ldrb	r3, [r7, #5]
 800426a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	2207      	movs	r2, #7
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fbca 	bl	8005a0e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800427a:	f107 0318 	add.w	r3, r7, #24
 800427e:	2218      	movs	r2, #24
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fbc3 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004288:	233f      	movs	r3, #63	; 0x3f
 800428a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800428c:	238a      	movs	r3, #138	; 0x8a
 800428e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004296:	2303      	movs	r3, #3
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800429a:	f107 030c 	add.w	r3, r7, #12
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80042a0:	2307      	movs	r3, #7
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80042a4:	f107 0318 	add.w	r3, r7, #24
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ff00 	bl	80050b0 <hci_send_req>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da01      	bge.n	80042ba <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80042b6:	23ff      	movs	r3, #255	; 0xff
 80042b8:	e014      	b.n	80042e4 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80042ba:	7b3b      	ldrb	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80042c0:	7b3b      	ldrb	r3, [r7, #12]
 80042c2:	e00f      	b.n	80042e4 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80042c4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80042ce:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80042d8:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	; 0x38
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	2207      	movs	r2, #7
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f001 fb80 	bl	8005a0e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800430e:	f107 0320 	add.w	r3, r7, #32
 8004312:	2218      	movs	r2, #24
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fb79 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800431c:	233f      	movs	r3, #63	; 0x3f
 800431e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8004320:	238a      	movs	r3, #138	; 0x8a
 8004322:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800432a:	2301      	movs	r3, #1
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8004334:	2307      	movs	r3, #7
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004338:	f107 0320 	add.w	r3, r7, #32
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 feb6 	bl	80050b0 <hci_send_req>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	da01      	bge.n	800434e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800434a:	23ff      	movs	r3, #255	; 0xff
 800434c:	e014      	b.n	8004378 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800434e:	7d3b      	ldrb	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8004354:	7d3b      	ldrb	r3, [r7, #20]
 8004356:	e00f      	b.n	8004378 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004358:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800435c:	b29a      	uxth	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004362:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800436c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004370:	b29a      	uxth	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3738      	adds	r7, #56	; 0x38
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b095      	sub	sp, #84	; 0x54
 8004384:	af00      	add	r7, sp, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	4603      	mov	r3, r0
 8004394:	80bb      	strh	r3, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	807b      	strh	r3, [r7, #2]
 800439a:	4613      	mov	r3, r2
 800439c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80043a4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80043a8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80043ac:	4413      	add	r3, r2
 80043ae:	330e      	adds	r3, #14
 80043b0:	2b28      	cmp	r3, #40	; 0x28
 80043b2:	d901      	bls.n	80043b8 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80043b4:	2342      	movs	r3, #66	; 0x42
 80043b6:	e0c9      	b.n	800454c <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80043b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043bc:	3350      	adds	r3, #80	; 0x50
 80043be:	443b      	add	r3, r7
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80043c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043ca:	3301      	adds	r3, #1
 80043cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80043d0:	88bb      	ldrh	r3, [r7, #4]
 80043d2:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80043d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043d8:	f107 0208 	add.w	r2, r7, #8
 80043dc:	4413      	add	r3, r2
 80043de:	88ba      	ldrh	r2, [r7, #4]
 80043e0:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80043e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043e6:	3302      	adds	r3, #2
 80043e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80043f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043f4:	f107 0208 	add.w	r2, r7, #8
 80043f8:	4413      	add	r3, r2
 80043fa:	887a      	ldrh	r2, [r7, #2]
 80043fc:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80043fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004402:	3302      	adds	r3, #2
 8004404:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8004408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800440c:	3350      	adds	r3, #80	; 0x50
 800440e:	443b      	add	r3, r7
 8004410:	79ba      	ldrb	r2, [r7, #6]
 8004412:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004416:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800441a:	3301      	adds	r3, #1
 800441c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8004420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004424:	3350      	adds	r3, #80	; 0x50
 8004426:	443b      	add	r3, r7
 8004428:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800442c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004434:	3301      	adds	r3, #1
 8004436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800443a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800443e:	3350      	adds	r3, #80	; 0x50
 8004440:	443b      	add	r3, r7
 8004442:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004446:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800444a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800444e:	3301      	adds	r3, #1
 8004450:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004454:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004458:	f107 0208 	add.w	r2, r7, #8
 800445c:	4413      	add	r3, r2
 800445e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004462:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004464:	4618      	mov	r0, r3
 8004466:	f001 fac4 	bl	80059f2 <memcpy>
  indx +=  LocalNameLen;
 800446a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800446e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004472:	4413      	add	r3, r2
 8004474:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8004478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800447c:	3350      	adds	r3, #80	; 0x50
 800447e:	443b      	add	r3, r7
 8004480:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004484:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004488:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800448c:	3301      	adds	r3, #1
 800448e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8004492:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004496:	f107 0208 	add.w	r2, r7, #8
 800449a:	4413      	add	r3, r2
 800449c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80044a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 faa5 	bl	80059f2 <memcpy>
  indx +=  ServiceUUIDLen;  
 80044a8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80044ac:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80044b0:	4413      	add	r3, r2
 80044b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80044b6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80044ba:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80044be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044c2:	f107 0208 	add.w	r2, r7, #8
 80044c6:	4413      	add	r3, r2
 80044c8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80044cc:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80044ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044d2:	3302      	adds	r3, #2
 80044d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80044d8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80044dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80044e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044e4:	f107 0208 	add.w	r2, r7, #8
 80044e8:	4413      	add	r3, r2
 80044ea:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80044ee:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80044f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044f4:	3302      	adds	r3, #2
 80044f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80044fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044fe:	2218      	movs	r2, #24
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fa83 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004508:	233f      	movs	r3, #63	; 0x3f
 800450a:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800450c:	2383      	movs	r3, #131	; 0x83
 800450e:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8004516:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800451a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800451c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004520:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8004526:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fdbf 	bl	80050b0 <hci_send_req>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	da01      	bge.n	800453c <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8004538:	23ff      	movs	r3, #255	; 0xff
 800453a:	e007      	b.n	800454c <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800453c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <aci_gap_set_discoverable+0x1ca>
    return status;
 8004544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004548:	e000      	b.n	800454c <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3754      	adds	r7, #84	; 0x54
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}

08004554 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b091      	sub	sp, #68	; 0x44
 8004558:	af00      	add	r7, sp, #0
 800455a:	603a      	str	r2, [r7, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	460b      	mov	r3, r1
 8004564:	71bb      	strb	r3, [r7, #6]
 8004566:	4613      	mov	r3, r2
 8004568:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800456e:	79bb      	ldrb	r3, [r7, #6]
 8004570:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8004572:	79bb      	ldrb	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	f107 030e 	add.w	r3, r7, #14
 800457e:	6814      	ldr	r4, [r2, #0]
 8004580:	6850      	ldr	r0, [r2, #4]
 8004582:	6891      	ldr	r1, [r2, #8]
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	601c      	str	r4, [r3, #0]
 8004588:	6058      	str	r0, [r3, #4]
 800458a:	6099      	str	r1, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800458e:	797b      	ldrb	r3, [r7, #5]
 8004590:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8004592:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004596:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8004598:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800459c:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80045a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a2:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80045a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80045aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80045ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045b2:	2218      	movs	r2, #24
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fa29 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80045bc:	233f      	movs	r3, #63	; 0x3f
 80045be:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80045c0:	2386      	movs	r3, #134	; 0x86
 80045c2:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80045ca:	231a      	movs	r3, #26
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80045ce:	f107 030b 	add.w	r3, r7, #11
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80045d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fd66 	bl	80050b0 <hci_send_req>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da01      	bge.n	80045ee <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80045ea:	23ff      	movs	r3, #255	; 0xff
 80045ec:	e005      	b.n	80045fa <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80045ee:	7afb      	ldrb	r3, [r7, #11]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	e000      	b.n	80045fa <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3744      	adds	r7, #68	; 0x44
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}

08004602 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b092      	sub	sp, #72	; 0x48
 8004606:	af00      	add	r7, sp, #0
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	4603      	mov	r3, r0
 800460c:	81fb      	strh	r3, [r7, #14]
 800460e:	460b      	mov	r3, r1
 8004610:	81bb      	strh	r3, [r7, #12]
 8004612:	4613      	mov	r3, r2
 8004614:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 800461a:	89bb      	ldrh	r3, [r7, #12]
 800461c:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	f107 031d 	add.w	r3, r7, #29
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	6019      	str	r1, [r3, #0]
 800462c:	8892      	ldrh	r2, [r2, #4]
 800462e:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8004630:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8004638:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800463c:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 800463e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004642:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8004644:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004648:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 800464a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800464e:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8004650:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004654:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8004656:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800465a:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800465c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004660:	2218      	movs	r2, #24
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f9d2 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800466a:	233f      	movs	r3, #63	; 0x3f
 800466c:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800466e:	239c      	movs	r3, #156	; 0x9c
 8004670:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8004672:	f107 0318 	add.w	r3, r7, #24
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 8004678:	2318      	movs	r3, #24
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 800467c:	230f      	movs	r3, #15
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8004680:	f107 0317 	add.w	r3, r7, #23
 8004684:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800468a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fd0d 	bl	80050b0 <hci_send_req>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	da01      	bge.n	80046a0 <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 800469c:	23ff      	movs	r3, #255	; 0xff
 800469e:	e000      	b.n	80046a2 <aci_gap_create_connection+0xa0>

  return status;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3748      	adds	r7, #72	; 0x48
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b088      	sub	sp, #32
 80046ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	2218      	movs	r2, #24
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f9a8 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80046be:	233f      	movs	r3, #63	; 0x3f
 80046c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80046c2:	f240 1301 	movw	r3, #257	; 0x101
 80046c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80046c8:	1dfb      	adds	r3, r7, #7
 80046ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fcea 	bl	80050b0 <hci_send_req>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da01      	bge.n	80046e6 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80046e2:	23ff      	movs	r3, #255	; 0xff
 80046e4:	e000      	b.n	80046e8 <aci_gatt_init+0x3e>

  return status;
 80046e6:	79fb      	ldrb	r3, [r7, #7]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b090      	sub	sp, #64	; 0x40
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	71fb      	strb	r3, [r7, #7]
 8004700:	460b      	mov	r3, r1
 8004702:	71bb      	strb	r3, [r7, #6]
 8004704:	4613      	mov	r3, r2
 8004706:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800470e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004712:	3340      	adds	r3, #64	; 0x40
 8004714:	443b      	add	r3, r7
 8004716:	79fa      	ldrb	r2, [r7, #7]
 8004718:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800471c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004720:	3301      	adds	r3, #1
 8004722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d103      	bne.n	8004734 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800472c:	2302      	movs	r3, #2
 800472e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004732:	e002      	b.n	800473a <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8004734:	2310      	movs	r3, #16
 8004736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800473a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800473e:	f107 020c 	add.w	r2, r7, #12
 8004742:	4413      	add	r3, r2
 8004744:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f951 	bl	80059f2 <memcpy>
  indx +=  uuid_len;
 8004750:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004758:	4413      	add	r3, r2
 800475a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800475e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004762:	3340      	adds	r3, #64	; 0x40
 8004764:	443b      	add	r3, r7
 8004766:	79ba      	ldrb	r2, [r7, #6]
 8004768:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800476c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004770:	3301      	adds	r3, #1
 8004772:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8004776:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800477a:	3340      	adds	r3, #64	; 0x40
 800477c:	443b      	add	r3, r7
 800477e:	797a      	ldrb	r2, [r7, #5]
 8004780:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004784:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004788:	3301      	adds	r3, #1
 800478a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800478e:	f107 0320 	add.w	r3, r7, #32
 8004792:	2203      	movs	r2, #3
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f939 	bl	8005a0e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800479c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a0:	2218      	movs	r2, #24
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f932 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80047aa:	233f      	movs	r3, #63	; 0x3f
 80047ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80047ae:	f44f 7381 	mov.w	r3, #258	; 0x102
 80047b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80047ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80047c0:	f107 0320 	add.w	r3, r7, #32
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80047c6:	2303      	movs	r3, #3
 80047c8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80047ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fc6d 	bl	80050b0 <hci_send_req>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da01      	bge.n	80047e0 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80047dc:	23ff      	movs	r3, #255	; 0xff
 80047de:	e00c      	b.n	80047fa <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80047e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <aci_gatt_add_serv+0xfe>
    return resp.status;
 80047e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047ec:	e005      	b.n	80047fa <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80047ee:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	801a      	strh	r2, [r3, #0]

  return 0;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3740      	adds	r7, #64	; 0x40
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b092      	sub	sp, #72	; 0x48
 8004806:	af00      	add	r7, sp, #0
 8004808:	603a      	str	r2, [r7, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	4603      	mov	r3, r0
 800480e:	80fb      	strh	r3, [r7, #6]
 8004810:	460b      	mov	r3, r1
 8004812:	717b      	strb	r3, [r7, #5]
 8004814:	4613      	mov	r3, r2
 8004816:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8004822:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004826:	f107 020c 	add.w	r2, r7, #12
 800482a:	4413      	add	r3, r2
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004830:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004834:	3302      	adds	r3, #2
 8004836:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800483a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800483e:	3348      	adds	r3, #72	; 0x48
 8004840:	443b      	add	r3, r7
 8004842:	797a      	ldrb	r2, [r7, #5]
 8004844:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004848:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800484c:	3301      	adds	r3, #1
 800484e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8004852:	797b      	ldrb	r3, [r7, #5]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d103      	bne.n	8004860 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8004858:	2302      	movs	r3, #2
 800485a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800485e:	e002      	b.n	8004866 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004866:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800486a:	f107 020c 	add.w	r2, r7, #12
 800486e:	4413      	add	r3, r2
 8004870:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f001 f8bb 	bl	80059f2 <memcpy>
  indx +=  uuid_len;
 800487c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004884:	4413      	add	r3, r2
 8004886:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800488a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800488e:	3348      	adds	r3, #72	; 0x48
 8004890:	443b      	add	r3, r7
 8004892:	793a      	ldrb	r2, [r7, #4]
 8004894:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004898:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800489c:	3301      	adds	r3, #1
 800489e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80048a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048a6:	3348      	adds	r3, #72	; 0x48
 80048a8:	443b      	add	r3, r7
 80048aa:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80048ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048b6:	3301      	adds	r3, #1
 80048b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80048bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048c0:	3348      	adds	r3, #72	; 0x48
 80048c2:	443b      	add	r3, r7
 80048c4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80048c8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048d0:	3301      	adds	r3, #1
 80048d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80048d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048da:	3348      	adds	r3, #72	; 0x48
 80048dc:	443b      	add	r3, r7
 80048de:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80048e2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048ea:	3301      	adds	r3, #1
 80048ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80048f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048f4:	3348      	adds	r3, #72	; 0x48
 80048f6:	443b      	add	r3, r7
 80048f8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80048fc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004900:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004904:	3301      	adds	r3, #1
 8004906:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800490a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004916:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800491a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800491e:	3301      	adds	r3, #1
 8004920:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004928:	2203      	movs	r2, #3
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f001 f86e 	bl	8005a0e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004936:	2218      	movs	r2, #24
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f867 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004940:	233f      	movs	r3, #63	; 0x3f
 8004942:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8004944:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004948:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8004950:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004954:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8004956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800495a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800495c:	2303      	movs	r3, #3
 800495e:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8004960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fba2 	bl	80050b0 <hci_send_req>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	da01      	bge.n	8004976 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8004972:	23ff      	movs	r3, #255	; 0xff
 8004974:	e00c      	b.n	8004990 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8004976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <aci_gatt_add_char+0x182>
    return resp.status;
 800497e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004982:	e005      	b.n	8004990 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8004984:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8004988:	b29a      	uxth	r2, r3
 800498a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498c:	801a      	strh	r2, [r3, #0]

  return 0;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3748      	adds	r7, #72	; 0x48
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b091      	sub	sp, #68	; 0x44
 800499c:	af00      	add	r7, sp, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	80fb      	strh	r3, [r7, #6]
 80049aa:	4603      	mov	r3, r0
 80049ac:	80bb      	strh	r3, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	807b      	strh	r3, [r7, #2]
 80049b2:	4613      	mov	r3, r2
 80049b4:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80049c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049c4:	f107 020c 	add.w	r2, r7, #12
 80049c8:	4413      	add	r3, r2
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80049ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049d2:	3302      	adds	r3, #2
 80049d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80049dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049e0:	f107 020c 	add.w	r2, r7, #12
 80049e4:	4413      	add	r3, r2
 80049e6:	88ba      	ldrh	r2, [r7, #4]
 80049e8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80049ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049ee:	3302      	adds	r3, #2
 80049f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80049f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049fc:	f107 020c 	add.w	r2, r7, #12
 8004a00:	4413      	add	r3, r2
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004a06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8004a10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a14:	3340      	adds	r3, #64	; 0x40
 8004a16:	443b      	add	r3, r7
 8004a18:	787a      	ldrb	r2, [r7, #1]
 8004a1a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004a1e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a22:	3301      	adds	r3, #1
 8004a24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d103      	bne.n	8004a36 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a34:	e002      	b.n	8004a3c <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 8004a36:	2310      	movs	r3, #16
 8004a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004a3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a40:	f107 020c 	add.w	r2, r7, #12
 8004a44:	4413      	add	r3, r2
 8004a46:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004a4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 ffd0 	bl	80059f2 <memcpy>
  indx +=  uuid_len;
 8004a52:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004a56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a64:	2218      	movs	r2, #24
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 ffd0 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004a6e:	233f      	movs	r3, #63	; 0x3f
 8004a70:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8004a72:	f44f 738b 	mov.w	r3, #278	; 0x116
 8004a76:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8004a7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8004a84:	230f      	movs	r3, #15
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8004a88:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fb09 	bl	80050b0 <hci_send_req>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da01      	bge.n	8004aa8 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 8004aa4:	23ff      	movs	r3, #255	; 0xff
 8004aa6:	e001      	b.n	8004aac <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3744      	adds	r7, #68	; 0x44
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}

08004ab4 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b0ac      	sub	sp, #176	; 0xb0
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	4603      	mov	r3, r0
 8004abe:	81fb      	strh	r3, [r7, #14]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	81bb      	strh	r3, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	2b7b      	cmp	r3, #123	; 0x7b
 8004ad2:	d901      	bls.n	8004ad8 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 8004ad4:	2342      	movs	r3, #66	; 0x42
 8004ad6:	e064      	b.n	8004ba2 <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8004adc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ae0:	f107 0210 	add.w	r2, r7, #16
 8004ae4:	4413      	add	r3, r2
 8004ae6:	89fa      	ldrh	r2, [r7, #14]
 8004ae8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004aea:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004aee:	3302      	adds	r3, #2
 8004af0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8004af4:	89bb      	ldrh	r3, [r7, #12]
 8004af6:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8004af8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004afc:	f107 0210 	add.w	r2, r7, #16
 8004b00:	4413      	add	r3, r2
 8004b02:	89ba      	ldrh	r2, [r7, #12]
 8004b04:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004b06:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8004b10:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b14:	33b0      	adds	r3, #176	; 0xb0
 8004b16:	443b      	add	r3, r7
 8004b18:	7afa      	ldrb	r2, [r7, #11]
 8004b1a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004b1e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b22:	3301      	adds	r3, #1
 8004b24:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8004b28:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b2c:	f107 0210 	add.w	r2, r7, #16
 8004b30:	4413      	add	r3, r2
 8004b32:	7afa      	ldrb	r2, [r7, #11]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 ff5b 	bl	80059f2 <memcpy>
  indx +=  value_len;
 8004b3c:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	4413      	add	r3, r2
 8004b44:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b4c:	2218      	movs	r2, #24
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 ff5c 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004b56:	233f      	movs	r3, #63	; 0x3f
 8004b58:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8004b5c:	f240 1321 	movw	r3, #289	; 0x121
 8004b60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8004b64:	f107 0310 	add.w	r3, r7, #16
 8004b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8004b6c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8004b74:	230f      	movs	r3, #15
 8004b76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004b7a:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8004b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8004b88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa8e 	bl	80050b0 <hci_send_req>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da01      	bge.n	8004b9e <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 8004b9a:	23ff      	movs	r3, #255	; 0xff
 8004b9c:	e001      	b.n	8004ba2 <aci_gatt_write_charac_descriptor+0xee>

  return status;
 8004b9e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	37b0      	adds	r7, #176	; 0xb0
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b0aa      	sub	sp, #168	; 0xa8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	603a      	str	r2, [r7, #0]
 8004bb4:	71fb      	strb	r3, [r7, #7]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8004bc0:	79bb      	ldrb	r3, [r7, #6]
 8004bc2:	2b7e      	cmp	r3, #126	; 0x7e
 8004bc4:	d901      	bls.n	8004bca <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8004bc6:	2342      	movs	r3, #66	; 0x42
 8004bc8:	e050      	b.n	8004c6c <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 8004bca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bce:	33a8      	adds	r3, #168	; 0xa8
 8004bd0:	443b      	add	r3, r7
 8004bd2:	79fa      	ldrb	r2, [r7, #7]
 8004bd4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004bd8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8004be2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004be6:	33a8      	adds	r3, #168	; 0xa8
 8004be8:	443b      	add	r3, r7
 8004bea:	79ba      	ldrb	r2, [r7, #6]
 8004bec:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004bf0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004bfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bfe:	f107 0208 	add.w	r2, r7, #8
 8004c02:	4413      	add	r3, r2
 8004c04:	79ba      	ldrb	r2, [r7, #6]
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fef2 	bl	80059f2 <memcpy>
  indx +=  len;
 8004c0e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	4413      	add	r3, r2
 8004c16:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c1e:	2218      	movs	r2, #24
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fef3 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004c28:	233f      	movs	r3, #63	; 0x3f
 8004c2a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8004c2e:	230c      	movs	r3, #12
 8004c30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8004c3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004c44:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8004c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8004c52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fa29 	bl	80050b0 <hci_send_req>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da01      	bge.n	8004c68 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004c64:	23ff      	movs	r3, #255	; 0xff
 8004c66:	e001      	b.n	8004c6c <aci_hal_write_config_data+0xc2>

  return status;
 8004c68:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	37a8      	adds	r7, #168	; 0xa8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	71fb      	strb	r3, [r7, #7]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8004c88:	79bb      	ldrb	r3, [r7, #6]
 8004c8a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	2218      	movs	r2, #24
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 feba 	bl	8005a0e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004c9a:	233f      	movs	r3, #63	; 0x3f
 8004c9c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8004c9e:	230f      	movs	r3, #15
 8004ca0:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8004cac:	f107 030b 	add.w	r3, r7, #11
 8004cb0:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8004cb6:	f107 0310 	add.w	r3, r7, #16
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f9f7 	bl	80050b0 <hci_send_req>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da01      	bge.n	8004ccc <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8004cc8:	23ff      	movs	r3, #255	; 0xff
 8004cca:	e000      	b.n	8004cce <aci_hal_set_tx_power_level+0x5a>

  return status;
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8004cd6:	b590      	push	{r4, r7, lr}
 8004cd8:	b089      	sub	sp, #36	; 0x24
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8004ce0:	f107 0410 	add.w	r4, r7, #16
 8004ce4:	f107 0215 	add.w	r2, r7, #21
 8004ce8:	f107 0112 	add.w	r1, r7, #18
 8004cec:	f107 0016 	add.w	r0, r7, #22
 8004cf0:	f107 030e 	add.w	r3, r7, #14
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	f000 f853 	bl	8004da2 <hci_le_read_local_version>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d126      	bne.n	8004d54 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8004d06:	8a7b      	ldrh	r3, [r7, #18]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b21a      	sxth	r2, r3
 8004d22:	89fb      	ldrh	r3, [r7, #14]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	b21b      	sxth	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b21a      	sxth	r2, r3
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	b21b      	sxth	r3, r3
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}

08004d5e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	2218      	movs	r2, #24
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fe4e 	bl	8005a0e <memset>
  rq.ogf = OGF_HOST_CTL;
 8004d72:	2303      	movs	r3, #3
 8004d74:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8004d76:	2303      	movs	r3, #3
 8004d78:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d7a:	1dfb      	adds	r3, r7, #7
 8004d7c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f991 	bl	80050b0 <hci_send_req>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da01      	bge.n	8004d98 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8004d94:	23ff      	movs	r3, #255	; 0xff
 8004d96:	e000      	b.n	8004d9a <hci_reset+0x3c>
  
  return status;  
 8004d98:	79fb      	ldrb	r3, [r7, #7]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08e      	sub	sp, #56	; 0x38
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	2209      	movs	r2, #9
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fe28 	bl	8005a0e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004dbe:	f107 0320 	add.w	r3, r7, #32
 8004dc2:	2218      	movs	r2, #24
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fe21 	bl	8005a0e <memset>
  rq.ogf = OGF_INFO_PARAM;
 8004dcc:	2304      	movs	r3, #4
 8004dce:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004de2:	2309      	movs	r3, #9
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004de6:	f107 0320 	add.w	r3, r7, #32
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f95f 	bl	80050b0 <hci_send_req>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da01      	bge.n	8004dfc <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8004df8:	23ff      	movs	r3, #255	; 0xff
 8004dfa:	e018      	b.n	8004e2e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8004dfc:	7d3b      	ldrb	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <hci_le_read_local_version+0x64>
    return resp.status;
 8004e02:	7d3b      	ldrb	r3, [r7, #20]
 8004e04:	e013      	b.n	8004e2e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8004e06:	7d7a      	ldrb	r2, [r7, #21]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8004e0c:	8afa      	ldrh	r2, [r7, #22]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8004e12:	7e3a      	ldrb	r2, [r7, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8004e18:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8004e22:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3738      	adds	r7, #56	; 0x38
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b092      	sub	sp, #72	; 0x48
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	6039      	str	r1, [r7, #0]
 8004e40:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8004e42:	f107 0310 	add.w	r3, r7, #16
 8004e46:	2220      	movs	r2, #32
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fddf 	bl	8005a0e <memset>
  scan_resp_cp.length = length;
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	2b1f      	cmp	r3, #31
 8004e58:	bf28      	it	cs
 8004e5a:	231f      	movcs	r3, #31
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f107 0310 	add.w	r3, r7, #16
 8004e64:	3301      	adds	r3, #1
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fdc2 	bl	80059f2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e72:	2218      	movs	r2, #24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fdc9 	bl	8005a0e <memset>
  rq.ogf = OGF_LE_CTL;
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8004e80:	2309      	movs	r3, #9
 8004e82:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8004e8e:	f107 030f 	add.w	r3, r7, #15
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f906 	bl	80050b0 <hci_send_req>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da01      	bge.n	8004eae <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8004eaa:	23ff      	movs	r3, #255	; 0xff
 8004eac:	e000      	b.n	8004eb0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3748      	adds	r7, #72	; 0x48
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d001      	beq.n	8004ed2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e00c      	b.n	8004eec <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004ee0:	3b03      	subs	r3, #3
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e000      	b.n	8004eec <verify_packet+0x34>
  
  return 0;      
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b0a6      	sub	sp, #152	; 0x98
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	4603      	mov	r3, r0
 8004f02:	81fb      	strh	r3, [r7, #14]
 8004f04:	460b      	mov	r3, r1
 8004f06:	81bb      	strh	r3, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8004f0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f14:	b21a      	sxth	r2, r3
 8004f16:	89fb      	ldrh	r3, [r7, #14]
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b21b      	sxth	r3, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8004f2c:	f107 0318 	add.w	r3, r7, #24
 8004f30:	3301      	adds	r3, #1
 8004f32:	461a      	mov	r2, r3
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	8819      	ldrh	r1, [r3, #0]
 8004f3a:	789b      	ldrb	r3, [r3, #2]
 8004f3c:	8011      	strh	r1, [r2, #0]
 8004f3e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004f40:	f107 0318 	add.w	r3, r7, #24
 8004f44:	3304      	adds	r3, #4
 8004f46:	7afa      	ldrb	r2, [r7, #11]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fd51 	bl	80059f2 <memcpy>
  
  if (hciContext.io.Send)
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <send_cmd+0x7c>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <send_cmd+0x7c>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	7afa      	ldrb	r2, [r7, #11]
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	3204      	adds	r2, #4
 8004f62:	b291      	uxth	r1, r2
 8004f64:	f107 0218 	add.w	r2, r7, #24
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4798      	blx	r3
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3798      	adds	r7, #152	; 0x98
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	200006b8 	.word	0x200006b8

08004f78 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8004f82:	e00a      	b.n	8004f9a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8004f84:	f107 030c 	add.w	r3, r7, #12
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6838      	ldr	r0, [r7, #0]
 8004f8c:	f000 faea 	bl	8005564 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fa51 	bl	800543c <list_insert_head>
  while (!list_is_empty(src_list))
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f000 fa2c 	bl	80053f8 <list_is_empty>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ee      	beq.n	8004f84 <move_list+0xc>
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004fb6:	e009      	b.n	8004fcc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4809      	ldr	r0, [pc, #36]	; (8004fe4 <free_event_list+0x34>)
 8004fbe:	f000 faaa 	bl	8005516 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <free_event_list+0x38>)
 8004fc8:	f000 fa5e 	bl	8005488 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004fcc:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <free_event_list+0x38>)
 8004fce:	f000 faf0 	bl	80055b2 <list_get_size>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	ddef      	ble.n	8004fb8 <free_event_list+0x8>
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200003f4 	.word	0x200003f4
 8004fe8:	200003ec 	.word	0x200003ec

08004fec <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <hci_init+0x74>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005002:	4818      	ldr	r0, [pc, #96]	; (8005064 <hci_init+0x78>)
 8005004:	f000 f9e8 	bl	80053d8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005008:	4817      	ldr	r0, [pc, #92]	; (8005068 <hci_init+0x7c>)
 800500a:	f000 f9e5 	bl	80053d8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800500e:	f7fc f9a1 	bl	8001354 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e00c      	b.n	8005032 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	228c      	movs	r2, #140	; 0x8c
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <hci_init+0x80>)
 8005022:	4413      	add	r3, r2
 8005024:	4619      	mov	r1, r3
 8005026:	480f      	ldr	r0, [pc, #60]	; (8005064 <hci_init+0x78>)
 8005028:	f000 fa2e 	bl	8005488 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	3301      	adds	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d9ef      	bls.n	8005018 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <hci_init+0x74>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <hci_init+0x5c>
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <hci_init+0x74>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2000      	movs	r0, #0
 8005046:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <hci_init+0x74>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <hci_init+0x6a>
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <hci_init+0x74>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4798      	blx	r3
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200006b8 	.word	0x200006b8
 8005064:	200003ec 	.word	0x200003ec
 8005068:	200003f4 	.word	0x200003f4
 800506c:	200003fc 	.word	0x200003fc

08005070 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <hci_register_io_bus+0x3c>)
 800507e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <hci_register_io_bus+0x3c>)
 8005086:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	4a07      	ldr	r2, [pc, #28]	; (80050ac <hci_register_io_bus+0x3c>)
 800508e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4a05      	ldr	r2, [pc, #20]	; (80050ac <hci_register_io_bus+0x3c>)
 8005096:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a03      	ldr	r2, [pc, #12]	; (80050ac <hci_register_io_bus+0x3c>)
 800509e:	6093      	str	r3, [r2, #8]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	200006b8 	.word	0x200006b8

080050b0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	885b      	ldrh	r3, [r3, #2]
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c6:	b21a      	sxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f97a 	bl	80053d8 <list_init_head>

  free_event_list();
 80050e4:	f7ff ff64 	bl	8004fb0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8818      	ldrh	r0, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8859      	ldrh	r1, [r3, #2]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f7ff fefd 	bl	8004ef8 <send_cmd>
  
  if (async)
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <hci_send_req+0x58>
  {
    return 0;
 8005104:	2300      	movs	r3, #0
 8005106:	e0e5      	b.n	80052d4 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005108:	f7fd f84e 	bl	80021a8 <HAL_GetTick>
 800510c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800510e:	f7fd f84b 	bl	80021a8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511c:	f200 80b6 	bhi.w	800528c <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005120:	486e      	ldr	r0, [pc, #440]	; (80052dc <hci_send_req+0x22c>)
 8005122:	f000 f969 	bl	80053f8 <list_is_empty>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d000      	beq.n	800512e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800512c:	e7ef      	b.n	800510e <hci_send_req+0x5e>
      {
        break;
 800512e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	4619      	mov	r1, r3
 8005136:	4869      	ldr	r0, [pc, #420]	; (80052dc <hci_send_req+0x22c>)
 8005138:	f000 f9ed 	bl	8005516 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3308      	adds	r3, #8
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d17b      	bne.n	8005242 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	3301      	adds	r3, #1
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3308      	adds	r3, #8
 8005154:	3303      	adds	r3, #3
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800515e:	3b03      	subs	r3, #3
 8005160:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b3e      	cmp	r3, #62	; 0x3e
 8005168:	d04d      	beq.n	8005206 <hci_send_req+0x156>
 800516a:	2b3e      	cmp	r3, #62	; 0x3e
 800516c:	dc6b      	bgt.n	8005246 <hci_send_req+0x196>
 800516e:	2b10      	cmp	r3, #16
 8005170:	f000 808e 	beq.w	8005290 <hci_send_req+0x1e0>
 8005174:	2b10      	cmp	r3, #16
 8005176:	dc66      	bgt.n	8005246 <hci_send_req+0x196>
 8005178:	2b0e      	cmp	r3, #14
 800517a:	d024      	beq.n	80051c6 <hci_send_req+0x116>
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d162      	bne.n	8005246 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	885b      	ldrh	r3, [r3, #2]
 8005188:	b29b      	uxth	r3, r3
 800518a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800518c:	429a      	cmp	r2, r3
 800518e:	f040 8081 	bne.w	8005294 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d004      	beq.n	80051a4 <hci_send_req+0xf4>
          if (cs->status) {
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d053      	beq.n	800524a <hci_send_req+0x19a>
            goto failed;
 80051a2:	e07a      	b.n	800529a <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	bf28      	it	cs
 80051ae:	461a      	movcs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6918      	ldr	r0, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	461a      	mov	r2, r3
 80051be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c0:	f000 fc17 	bl	80059f2 <memcpy>
        goto done;
 80051c4:	e07a      	b.n	80052bc <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d15f      	bne.n	8005298 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3303      	adds	r3, #3
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	3b03      	subs	r3, #3
 80051e2:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf28      	it	cs
 80051ee:	461a      	movcs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6918      	ldr	r0, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005200:	f000 fbf7 	bl	80059f2 <memcpy>
        goto done;
 8005204:	e05a      	b.n	80052bc <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d11a      	bne.n	800524e <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	3b01      	subs	r3, #1
 800521c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	429a      	cmp	r2, r3
 8005226:	bf28      	it	cs
 8005228:	461a      	movcs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6918      	ldr	r0, [r3, #16]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fbd9 	bl	80059f2 <memcpy>
        goto done;
 8005240:	e03c      	b.n	80052bc <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <hci_send_req+0x1a0>
        break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <hci_send_req+0x1a0>
          break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <hci_send_req+0x1a0>
          break;
 800524e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005250:	4823      	ldr	r0, [pc, #140]	; (80052e0 <hci_send_req+0x230>)
 8005252:	f000 f8d1 	bl	80053f8 <list_is_empty>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <hci_send_req+0x1c8>
 800525c:	481f      	ldr	r0, [pc, #124]	; (80052dc <hci_send_req+0x22c>)
 800525e:	f000 f8cb 	bl	80053f8 <list_is_empty>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4619      	mov	r1, r3
 800526c:	481c      	ldr	r0, [pc, #112]	; (80052e0 <hci_send_req+0x230>)
 800526e:	f000 f90b 	bl	8005488 <list_insert_tail>
      hciReadPacket=NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e008      	b.n	800528a <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f901 	bl	8005488 <list_insert_tail>
      hciReadPacket=NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
  {
 800528a:	e73d      	b.n	8005108 <hci_send_req+0x58>
        goto failed;
 800528c:	bf00      	nop
 800528e:	e004      	b.n	800529a <hci_send_req+0x1ea>
        goto failed;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <hci_send_req+0x1ea>
          goto failed;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <hci_send_req+0x1ea>
          goto failed;
 8005298:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4619      	mov	r1, r3
 80052a4:	480e      	ldr	r0, [pc, #56]	; (80052e0 <hci_send_req+0x230>)
 80052a6:	f000 f8c9 	bl	800543c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4619      	mov	r1, r3
 80052b0:	480a      	ldr	r0, [pc, #40]	; (80052dc <hci_send_req+0x22c>)
 80052b2:	f7ff fe61 	bl	8004f78 <move_list>

  return -1;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	e00b      	b.n	80052d4 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4619      	mov	r1, r3
 80052c0:	4807      	ldr	r0, [pc, #28]	; (80052e0 <hci_send_req+0x230>)
 80052c2:	f000 f8bb 	bl	800543c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80052c6:	f107 0308 	add.w	r3, r7, #8
 80052ca:	4619      	mov	r1, r3
 80052cc:	4803      	ldr	r0, [pc, #12]	; (80052dc <hci_send_req+0x22c>)
 80052ce:	f7ff fe53 	bl	8004f78 <move_list>

  return 0;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	; 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200003f4 	.word	0x200003f4
 80052e0:	200003ec 	.word	0x200003ec

080052e4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80052ee:	e013      	b.n	8005318 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	480e      	ldr	r0, [pc, #56]	; (8005330 <hci_user_evt_proc+0x4c>)
 80052f6:	f000 f90e 	bl	8005516 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <hci_user_evt_proc+0x50>)
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <hci_user_evt_proc+0x50>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	3208      	adds	r2, #8
 800530a:	4610      	mov	r0, r2
 800530c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4619      	mov	r1, r3
 8005312:	4809      	ldr	r0, [pc, #36]	; (8005338 <hci_user_evt_proc+0x54>)
 8005314:	f000 f8b8 	bl	8005488 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005318:	4805      	ldr	r0, [pc, #20]	; (8005330 <hci_user_evt_proc+0x4c>)
 800531a:	f000 f86d 	bl	80053f8 <list_is_empty>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0e5      	beq.n	80052f0 <hci_user_evt_proc+0xc>
  }
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200003f4 	.word	0x200003f4
 8005334:	200006b8 	.word	0x200006b8
 8005338:	200003ec 	.word	0x200003ec

0800533c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800534c:	481f      	ldr	r0, [pc, #124]	; (80053cc <hci_notify_asynch_evt+0x90>)
 800534e:	f000 f853 	bl	80053f8 <list_is_empty>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d132      	bne.n	80053be <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4619      	mov	r1, r3
 800535e:	481b      	ldr	r0, [pc, #108]	; (80053cc <hci_notify_asynch_evt+0x90>)
 8005360:	f000 f8d9 	bl	8005516 <list_remove_head>
    
    if (hciContext.io.Receive)
 8005364:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <hci_notify_asynch_evt+0x94>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02a      	beq.n	80053c2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <hci_notify_asynch_evt+0x94>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	3208      	adds	r2, #8
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	4610      	mov	r0, r2
 8005378:	4798      	blx	r3
 800537a:	4603      	mov	r3, r0
 800537c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	7cfa      	ldrb	r2, [r7, #19]
 8005388:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fd92 	bl	8004eb8 <verify_packet>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4619      	mov	r1, r3
 800539e:	480d      	ldr	r0, [pc, #52]	; (80053d4 <hci_notify_asynch_evt+0x98>)
 80053a0:	f000 f872 	bl	8005488 <list_insert_tail>
 80053a4:	e00d      	b.n	80053c2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4619      	mov	r1, r3
 80053aa:	4808      	ldr	r0, [pc, #32]	; (80053cc <hci_notify_asynch_evt+0x90>)
 80053ac:	f000 f846 	bl	800543c <list_insert_head>
 80053b0:	e007      	b.n	80053c2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4805      	ldr	r0, [pc, #20]	; (80053cc <hci_notify_asynch_evt+0x90>)
 80053b8:	f000 f840 	bl	800543c <list_insert_head>
 80053bc:	e001      	b.n	80053c2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80053c2:	697b      	ldr	r3, [r7, #20]

}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200003ec 	.word	0x200003ec
 80053d0:	200006b8 	.word	0x200006b8
 80053d4:	200003f4 	.word	0x200003f4

080053d8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	605a      	str	r2, [r3, #4]
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005400:	f3ef 8310 	mrs	r3, PRIMASK
 8005404:	60fb      	str	r3, [r7, #12]
  return(result);
 8005406:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800540a:	b672      	cpsid	i
}
 800540c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d102      	bne.n	800541e <list_is_empty+0x26>
  {
    return_value = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	e001      	b.n	8005422 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005446:	f3ef 8310 	mrs	r3, PRIMASK
 800544a:	60fb      	str	r3, [r7, #12]
  return(result);
 800544c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800544e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005450:	b672      	cpsid	i
}
 8005452:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005492:	f3ef 8310 	mrs	r3, PRIMASK
 8005496:	60fb      	str	r3, [r7, #12]
  return(result);
 8005498:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800549a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800549c:	b672      	cpsid	i
}
 800549e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054dc:	f3ef 8310 	mrs	r3, PRIMASK
 80054e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80054e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80054e6:	b672      	cpsid	i
}
 80054e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f383 8810 	msr	PRIMASK, r3
}
 8005508:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005520:	f3ef 8310 	mrs	r3, PRIMASK
 8005524:	60fb      	str	r3, [r7, #12]
  return(result);
 8005526:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800552a:	b672      	cpsid	i
}
 800552c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ffca 	bl	80054d4 <list_remove_node>
  (*node)->next = NULL;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f383 8810 	msr	PRIMASK, r3
}
 800555a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556e:	f3ef 8310 	mrs	r3, PRIMASK
 8005572:	60fb      	str	r3, [r7, #12]
  return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005578:	b672      	cpsid	i
}
 800557a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ffa3 	bl	80054d4 <list_remove_node>
  (*node)->next = NULL;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f383 8810 	msr	PRIMASK, r3
}
 80055a8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b089      	sub	sp, #36	; 0x24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  int size = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	613b      	str	r3, [r7, #16]
  return(result);
 80055c4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80055c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80055c8:	b672      	cpsid	i
}
 80055ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80055d2:	e005      	b.n	80055e0 <list_get_size+0x2e>
  {
    size++;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1f5      	bne.n	80055d4 <list_get_size+0x22>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f383 8810 	msr	PRIMASK, r3
}
 80055f2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80055f4:	69fb      	ldr	r3, [r7, #28]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3724      	adds	r7, #36	; 0x24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <__errno>:
 8005604:	4b01      	ldr	r3, [pc, #4]	; (800560c <__errno+0x8>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	2000002c 	.word	0x2000002c

08005610 <__sflush_r>:
 8005610:	898a      	ldrh	r2, [r1, #12]
 8005612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	4605      	mov	r5, r0
 8005618:	0710      	lsls	r0, r2, #28
 800561a:	460c      	mov	r4, r1
 800561c:	d458      	bmi.n	80056d0 <__sflush_r+0xc0>
 800561e:	684b      	ldr	r3, [r1, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	dc05      	bgt.n	8005630 <__sflush_r+0x20>
 8005624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	dc02      	bgt.n	8005630 <__sflush_r+0x20>
 800562a:	2000      	movs	r0, #0
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005632:	2e00      	cmp	r6, #0
 8005634:	d0f9      	beq.n	800562a <__sflush_r+0x1a>
 8005636:	2300      	movs	r3, #0
 8005638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800563c:	682f      	ldr	r7, [r5, #0]
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	d032      	beq.n	80056a8 <__sflush_r+0x98>
 8005642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	075a      	lsls	r2, r3, #29
 8005648:	d505      	bpl.n	8005656 <__sflush_r+0x46>
 800564a:	6863      	ldr	r3, [r4, #4]
 800564c:	1ac0      	subs	r0, r0, r3
 800564e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005650:	b10b      	cbz	r3, 8005656 <__sflush_r+0x46>
 8005652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005654:	1ac0      	subs	r0, r0, r3
 8005656:	2300      	movs	r3, #0
 8005658:	4602      	mov	r2, r0
 800565a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565c:	6a21      	ldr	r1, [r4, #32]
 800565e:	4628      	mov	r0, r5
 8005660:	47b0      	blx	r6
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	d106      	bne.n	8005676 <__sflush_r+0x66>
 8005668:	6829      	ldr	r1, [r5, #0]
 800566a:	291d      	cmp	r1, #29
 800566c:	d82c      	bhi.n	80056c8 <__sflush_r+0xb8>
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <__sflush_r+0x108>)
 8005670:	40ca      	lsrs	r2, r1
 8005672:	07d6      	lsls	r6, r2, #31
 8005674:	d528      	bpl.n	80056c8 <__sflush_r+0xb8>
 8005676:	2200      	movs	r2, #0
 8005678:	6062      	str	r2, [r4, #4]
 800567a:	04d9      	lsls	r1, r3, #19
 800567c:	6922      	ldr	r2, [r4, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	d504      	bpl.n	800568c <__sflush_r+0x7c>
 8005682:	1c42      	adds	r2, r0, #1
 8005684:	d101      	bne.n	800568a <__sflush_r+0x7a>
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	b903      	cbnz	r3, 800568c <__sflush_r+0x7c>
 800568a:	6560      	str	r0, [r4, #84]	; 0x54
 800568c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800568e:	602f      	str	r7, [r5, #0]
 8005690:	2900      	cmp	r1, #0
 8005692:	d0ca      	beq.n	800562a <__sflush_r+0x1a>
 8005694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005698:	4299      	cmp	r1, r3
 800569a:	d002      	beq.n	80056a2 <__sflush_r+0x92>
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f9bf 	bl	8005a20 <_free_r>
 80056a2:	2000      	movs	r0, #0
 80056a4:	6360      	str	r0, [r4, #52]	; 0x34
 80056a6:	e7c1      	b.n	800562c <__sflush_r+0x1c>
 80056a8:	6a21      	ldr	r1, [r4, #32]
 80056aa:	2301      	movs	r3, #1
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b0      	blx	r6
 80056b0:	1c41      	adds	r1, r0, #1
 80056b2:	d1c7      	bne.n	8005644 <__sflush_r+0x34>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0c4      	beq.n	8005644 <__sflush_r+0x34>
 80056ba:	2b1d      	cmp	r3, #29
 80056bc:	d001      	beq.n	80056c2 <__sflush_r+0xb2>
 80056be:	2b16      	cmp	r3, #22
 80056c0:	d101      	bne.n	80056c6 <__sflush_r+0xb6>
 80056c2:	602f      	str	r7, [r5, #0]
 80056c4:	e7b1      	b.n	800562a <__sflush_r+0x1a>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	e7ad      	b.n	800562c <__sflush_r+0x1c>
 80056d0:	690f      	ldr	r7, [r1, #16]
 80056d2:	2f00      	cmp	r7, #0
 80056d4:	d0a9      	beq.n	800562a <__sflush_r+0x1a>
 80056d6:	0793      	lsls	r3, r2, #30
 80056d8:	680e      	ldr	r6, [r1, #0]
 80056da:	bf08      	it	eq
 80056dc:	694b      	ldreq	r3, [r1, #20]
 80056de:	600f      	str	r7, [r1, #0]
 80056e0:	bf18      	it	ne
 80056e2:	2300      	movne	r3, #0
 80056e4:	eba6 0807 	sub.w	r8, r6, r7
 80056e8:	608b      	str	r3, [r1, #8]
 80056ea:	f1b8 0f00 	cmp.w	r8, #0
 80056ee:	dd9c      	ble.n	800562a <__sflush_r+0x1a>
 80056f0:	6a21      	ldr	r1, [r4, #32]
 80056f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056f4:	4643      	mov	r3, r8
 80056f6:	463a      	mov	r2, r7
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b0      	blx	r6
 80056fc:	2800      	cmp	r0, #0
 80056fe:	dc06      	bgt.n	800570e <__sflush_r+0xfe>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	e78e      	b.n	800562c <__sflush_r+0x1c>
 800570e:	4407      	add	r7, r0
 8005710:	eba8 0800 	sub.w	r8, r8, r0
 8005714:	e7e9      	b.n	80056ea <__sflush_r+0xda>
 8005716:	bf00      	nop
 8005718:	20400001 	.word	0x20400001

0800571c <_fflush_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	4605      	mov	r5, r0
 8005722:	460c      	mov	r4, r1
 8005724:	b913      	cbnz	r3, 800572c <_fflush_r+0x10>
 8005726:	2500      	movs	r5, #0
 8005728:	4628      	mov	r0, r5
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	b118      	cbz	r0, 8005736 <_fflush_r+0x1a>
 800572e:	6983      	ldr	r3, [r0, #24]
 8005730:	b90b      	cbnz	r3, 8005736 <_fflush_r+0x1a>
 8005732:	f000 f899 	bl	8005868 <__sinit>
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <_fflush_r+0x6c>)
 8005738:	429c      	cmp	r4, r3
 800573a:	d11b      	bne.n	8005774 <_fflush_r+0x58>
 800573c:	686c      	ldr	r4, [r5, #4]
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ef      	beq.n	8005726 <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x3a>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x3a>
 8005750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005752:	f000 f94c 	bl	80059ee <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff59 	bl	8005610 <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005760:	07da      	lsls	r2, r3, #31
 8005762:	4605      	mov	r5, r0
 8005764:	d4e0      	bmi.n	8005728 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4dd      	bmi.n	8005728 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f000 f93f 	bl	80059f0 <__retarget_lock_release_recursive>
 8005772:	e7d9      	b.n	8005728 <_fflush_r+0xc>
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <_fflush_r+0x70>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d101      	bne.n	800577e <_fflush_r+0x62>
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	e7df      	b.n	800573e <_fflush_r+0x22>
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <_fflush_r+0x74>)
 8005780:	429c      	cmp	r4, r3
 8005782:	bf08      	it	eq
 8005784:	68ec      	ldreq	r4, [r5, #12]
 8005786:	e7da      	b.n	800573e <_fflush_r+0x22>
 8005788:	08006b98 	.word	0x08006b98
 800578c:	08006bb8 	.word	0x08006bb8
 8005790:	08006b78 	.word	0x08006b78

08005794 <fflush>:
 8005794:	4601      	mov	r1, r0
 8005796:	b920      	cbnz	r0, 80057a2 <fflush+0xe>
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <fflush+0x18>)
 800579a:	4905      	ldr	r1, [pc, #20]	; (80057b0 <fflush+0x1c>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f000 b8e1 	b.w	8005964 <_fwalk_reent>
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <fflush+0x20>)
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f7ff bfb9 	b.w	800571c <_fflush_r>
 80057aa:	bf00      	nop
 80057ac:	08006bd8 	.word	0x08006bd8
 80057b0:	0800571d 	.word	0x0800571d
 80057b4:	2000002c 	.word	0x2000002c

080057b8 <std>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	e9c0 3300 	strd	r3, r3, [r0]
 80057c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057c6:	6083      	str	r3, [r0, #8]
 80057c8:	8181      	strh	r1, [r0, #12]
 80057ca:	6643      	str	r3, [r0, #100]	; 0x64
 80057cc:	81c2      	strh	r2, [r0, #14]
 80057ce:	6183      	str	r3, [r0, #24]
 80057d0:	4619      	mov	r1, r3
 80057d2:	2208      	movs	r2, #8
 80057d4:	305c      	adds	r0, #92	; 0x5c
 80057d6:	f000 f91a 	bl	8005a0e <memset>
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x38>)
 80057dc:	6263      	str	r3, [r4, #36]	; 0x24
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <std+0x3c>)
 80057e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <std+0x40>)
 80057e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <std+0x44>)
 80057e8:	6224      	str	r4, [r4, #32]
 80057ea:	6323      	str	r3, [r4, #48]	; 0x30
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop
 80057f0:	08005d49 	.word	0x08005d49
 80057f4:	08005d6b 	.word	0x08005d6b
 80057f8:	08005da3 	.word	0x08005da3
 80057fc:	08005dc7 	.word	0x08005dc7

08005800 <_cleanup_r>:
 8005800:	4901      	ldr	r1, [pc, #4]	; (8005808 <_cleanup_r+0x8>)
 8005802:	f000 b8af 	b.w	8005964 <_fwalk_reent>
 8005806:	bf00      	nop
 8005808:	0800571d 	.word	0x0800571d

0800580c <__sfmoreglue>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	2268      	movs	r2, #104	; 0x68
 8005810:	1e4d      	subs	r5, r1, #1
 8005812:	4355      	muls	r5, r2
 8005814:	460e      	mov	r6, r1
 8005816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800581a:	f000 f96d 	bl	8005af8 <_malloc_r>
 800581e:	4604      	mov	r4, r0
 8005820:	b140      	cbz	r0, 8005834 <__sfmoreglue+0x28>
 8005822:	2100      	movs	r1, #0
 8005824:	e9c0 1600 	strd	r1, r6, [r0]
 8005828:	300c      	adds	r0, #12
 800582a:	60a0      	str	r0, [r4, #8]
 800582c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005830:	f000 f8ed 	bl	8005a0e <memset>
 8005834:	4620      	mov	r0, r4
 8005836:	bd70      	pop	{r4, r5, r6, pc}

08005838 <__sfp_lock_acquire>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__sfp_lock_acquire+0x8>)
 800583a:	f000 b8d8 	b.w	80059ee <__retarget_lock_acquire_recursive>
 800583e:	bf00      	nop
 8005840:	200006d9 	.word	0x200006d9

08005844 <__sfp_lock_release>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__sfp_lock_release+0x8>)
 8005846:	f000 b8d3 	b.w	80059f0 <__retarget_lock_release_recursive>
 800584a:	bf00      	nop
 800584c:	200006d9 	.word	0x200006d9

08005850 <__sinit_lock_acquire>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sinit_lock_acquire+0x8>)
 8005852:	f000 b8cc 	b.w	80059ee <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	200006da 	.word	0x200006da

0800585c <__sinit_lock_release>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sinit_lock_release+0x8>)
 800585e:	f000 b8c7 	b.w	80059f0 <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	200006da 	.word	0x200006da

08005868 <__sinit>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	f7ff fff0 	bl	8005850 <__sinit_lock_acquire>
 8005870:	69a3      	ldr	r3, [r4, #24]
 8005872:	b11b      	cbz	r3, 800587c <__sinit+0x14>
 8005874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005878:	f7ff bff0 	b.w	800585c <__sinit_lock_release>
 800587c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005880:	6523      	str	r3, [r4, #80]	; 0x50
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <__sinit+0x68>)
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <__sinit+0x6c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	62a2      	str	r2, [r4, #40]	; 0x28
 800588a:	42a3      	cmp	r3, r4
 800588c:	bf04      	itt	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	61a3      	streq	r3, [r4, #24]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f820 	bl	80058d8 <__sfp>
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f81c 	bl	80058d8 <__sfp>
 80058a0:	60a0      	str	r0, [r4, #8]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f818 	bl	80058d8 <__sfp>
 80058a8:	2200      	movs	r2, #0
 80058aa:	60e0      	str	r0, [r4, #12]
 80058ac:	2104      	movs	r1, #4
 80058ae:	6860      	ldr	r0, [r4, #4]
 80058b0:	f7ff ff82 	bl	80057b8 <std>
 80058b4:	68a0      	ldr	r0, [r4, #8]
 80058b6:	2201      	movs	r2, #1
 80058b8:	2109      	movs	r1, #9
 80058ba:	f7ff ff7d 	bl	80057b8 <std>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff ff78 	bl	80057b8 <std>
 80058c8:	2301      	movs	r3, #1
 80058ca:	61a3      	str	r3, [r4, #24]
 80058cc:	e7d2      	b.n	8005874 <__sinit+0xc>
 80058ce:	bf00      	nop
 80058d0:	08006bd8 	.word	0x08006bd8
 80058d4:	08005801 	.word	0x08005801

080058d8 <__sfp>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	4607      	mov	r7, r0
 80058dc:	f7ff ffac 	bl	8005838 <__sfp_lock_acquire>
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <__sfp+0x84>)
 80058e2:	681e      	ldr	r6, [r3, #0]
 80058e4:	69b3      	ldr	r3, [r6, #24]
 80058e6:	b913      	cbnz	r3, 80058ee <__sfp+0x16>
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7ff ffbd 	bl	8005868 <__sinit>
 80058ee:	3648      	adds	r6, #72	; 0x48
 80058f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	d503      	bpl.n	8005900 <__sfp+0x28>
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	b30b      	cbz	r3, 8005940 <__sfp+0x68>
 80058fc:	6836      	ldr	r6, [r6, #0]
 80058fe:	e7f7      	b.n	80058f0 <__sfp+0x18>
 8005900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005904:	b9d5      	cbnz	r5, 800593c <__sfp+0x64>
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <__sfp+0x88>)
 8005908:	60e3      	str	r3, [r4, #12]
 800590a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800590e:	6665      	str	r5, [r4, #100]	; 0x64
 8005910:	f000 f86c 	bl	80059ec <__retarget_lock_init_recursive>
 8005914:	f7ff ff96 	bl	8005844 <__sfp_lock_release>
 8005918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800591c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005920:	6025      	str	r5, [r4, #0]
 8005922:	61a5      	str	r5, [r4, #24]
 8005924:	2208      	movs	r2, #8
 8005926:	4629      	mov	r1, r5
 8005928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800592c:	f000 f86f 	bl	8005a0e <memset>
 8005930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005938:	4620      	mov	r0, r4
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593c:	3468      	adds	r4, #104	; 0x68
 800593e:	e7d9      	b.n	80058f4 <__sfp+0x1c>
 8005940:	2104      	movs	r1, #4
 8005942:	4638      	mov	r0, r7
 8005944:	f7ff ff62 	bl	800580c <__sfmoreglue>
 8005948:	4604      	mov	r4, r0
 800594a:	6030      	str	r0, [r6, #0]
 800594c:	2800      	cmp	r0, #0
 800594e:	d1d5      	bne.n	80058fc <__sfp+0x24>
 8005950:	f7ff ff78 	bl	8005844 <__sfp_lock_release>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	e7ee      	b.n	8005938 <__sfp+0x60>
 800595a:	bf00      	nop
 800595c:	08006bd8 	.word	0x08006bd8
 8005960:	ffff0001 	.word	0xffff0001

08005964 <_fwalk_reent>:
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	4606      	mov	r6, r0
 800596a:	4688      	mov	r8, r1
 800596c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005970:	2700      	movs	r7, #0
 8005972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005976:	f1b9 0901 	subs.w	r9, r9, #1
 800597a:	d505      	bpl.n	8005988 <_fwalk_reent+0x24>
 800597c:	6824      	ldr	r4, [r4, #0]
 800597e:	2c00      	cmp	r4, #0
 8005980:	d1f7      	bne.n	8005972 <_fwalk_reent+0xe>
 8005982:	4638      	mov	r0, r7
 8005984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005988:	89ab      	ldrh	r3, [r5, #12]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d907      	bls.n	800599e <_fwalk_reent+0x3a>
 800598e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005992:	3301      	adds	r3, #1
 8005994:	d003      	beq.n	800599e <_fwalk_reent+0x3a>
 8005996:	4629      	mov	r1, r5
 8005998:	4630      	mov	r0, r6
 800599a:	47c0      	blx	r8
 800599c:	4307      	orrs	r7, r0
 800599e:	3568      	adds	r5, #104	; 0x68
 80059a0:	e7e9      	b.n	8005976 <_fwalk_reent+0x12>
	...

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	; (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	; (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	; (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	; (80059e8 <__libc_init_array+0x44>)
 80059b8:	f000 feda 	bl	8006770 <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08006c18 	.word	0x08006c18
 80059e0:	08006c18 	.word	0x08006c18
 80059e4:	08006c18 	.word	0x08006c18
 80059e8:	08006c1c 	.word	0x08006c1c

080059ec <__retarget_lock_init_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_acquire_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <__retarget_lock_release_recursive>:
 80059f0:	4770      	bx	lr

080059f2 <memcpy>:
 80059f2:	440a      	add	r2, r1
 80059f4:	4291      	cmp	r1, r2
 80059f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80059fa:	d100      	bne.n	80059fe <memcpy+0xc>
 80059fc:	4770      	bx	lr
 80059fe:	b510      	push	{r4, lr}
 8005a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a08:	4291      	cmp	r1, r2
 8005a0a:	d1f9      	bne.n	8005a00 <memcpy+0xe>
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <memset>:
 8005a0e:	4402      	add	r2, r0
 8005a10:	4603      	mov	r3, r0
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d100      	bne.n	8005a18 <memset+0xa>
 8005a16:	4770      	bx	lr
 8005a18:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1c:	e7f9      	b.n	8005a12 <memset+0x4>
	...

08005a20 <_free_r>:
 8005a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d044      	beq.n	8005ab0 <_free_r+0x90>
 8005a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2a:	9001      	str	r0, [sp, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a32:	bfb8      	it	lt
 8005a34:	18e4      	addlt	r4, r4, r3
 8005a36:	f000 fb25 	bl	8006084 <__malloc_lock>
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <_free_r+0x94>)
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x30>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f000 bb20 	b.w	8006090 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x46>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x22>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x50>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x46>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1855      	adds	r5, r2, r1
 8005a74:	42a5      	cmp	r5, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x70>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	4421      	add	r1, r4
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x26>
 8005a84:	681c      	ldr	r4, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x26>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x26>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1949      	addeq	r1, r1, r5
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x26>
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	200006dc 	.word	0x200006dc

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0e      	ldr	r6, [pc, #56]	; (8005af4 <sbrk_aligned+0x3c>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 f930 	bl	8005d28 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 f92b 	bl	8005d28 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d00a      	beq.n	8005aec <sbrk_aligned+0x34>
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d007      	beq.n	8005af0 <sbrk_aligned+0x38>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f920 	bl	8005d28 <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d101      	bne.n	8005af0 <sbrk_aligned+0x38>
 8005aec:	f04f 34ff 	mov.w	r4, #4294967295
 8005af0:	4620      	mov	r0, r4
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	200006e0 	.word	0x200006e0

08005af8 <_malloc_r>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	1ccd      	adds	r5, r1, #3
 8005afe:	f025 0503 	bic.w	r5, r5, #3
 8005b02:	3508      	adds	r5, #8
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	bf38      	it	cc
 8005b08:	250c      	movcc	r5, #12
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	db01      	blt.n	8005b14 <_malloc_r+0x1c>
 8005b10:	42a9      	cmp	r1, r5
 8005b12:	d905      	bls.n	8005b20 <_malloc_r+0x28>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	2600      	movs	r6, #0
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	4e2e      	ldr	r6, [pc, #184]	; (8005bdc <_malloc_r+0xe4>)
 8005b22:	f000 faaf 	bl	8006084 <__malloc_lock>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	461c      	mov	r4, r3
 8005b2a:	bb34      	cbnz	r4, 8005b7a <_malloc_r+0x82>
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7ff ffc2 	bl	8005ab8 <sbrk_aligned>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	4604      	mov	r4, r0
 8005b38:	d14d      	bne.n	8005bd6 <_malloc_r+0xde>
 8005b3a:	6834      	ldr	r4, [r6, #0]
 8005b3c:	4626      	mov	r6, r4
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d140      	bne.n	8005bc4 <_malloc_r+0xcc>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	4631      	mov	r1, r6
 8005b46:	4638      	mov	r0, r7
 8005b48:	eb04 0803 	add.w	r8, r4, r3
 8005b4c:	f000 f8ec 	bl	8005d28 <_sbrk_r>
 8005b50:	4580      	cmp	r8, r0
 8005b52:	d13a      	bne.n	8005bca <_malloc_r+0xd2>
 8005b54:	6821      	ldr	r1, [r4, #0]
 8005b56:	3503      	adds	r5, #3
 8005b58:	1a6d      	subs	r5, r5, r1
 8005b5a:	f025 0503 	bic.w	r5, r5, #3
 8005b5e:	3508      	adds	r5, #8
 8005b60:	2d0c      	cmp	r5, #12
 8005b62:	bf38      	it	cc
 8005b64:	250c      	movcc	r5, #12
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ffa5 	bl	8005ab8 <sbrk_aligned>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d02b      	beq.n	8005bca <_malloc_r+0xd2>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	442b      	add	r3, r5
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	e00e      	b.n	8005b98 <_malloc_r+0xa0>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	1b52      	subs	r2, r2, r5
 8005b7e:	d41e      	bmi.n	8005bbe <_malloc_r+0xc6>
 8005b80:	2a0b      	cmp	r2, #11
 8005b82:	d916      	bls.n	8005bb2 <_malloc_r+0xba>
 8005b84:	1961      	adds	r1, r4, r5
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	6025      	str	r5, [r4, #0]
 8005b8a:	bf18      	it	ne
 8005b8c:	6059      	strne	r1, [r3, #4]
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	bf08      	it	eq
 8005b92:	6031      	streq	r1, [r6, #0]
 8005b94:	5162      	str	r2, [r4, r5]
 8005b96:	604b      	str	r3, [r1, #4]
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f104 060b 	add.w	r6, r4, #11
 8005b9e:	f000 fa77 	bl	8006090 <__malloc_unlock>
 8005ba2:	f026 0607 	bic.w	r6, r6, #7
 8005ba6:	1d23      	adds	r3, r4, #4
 8005ba8:	1af2      	subs	r2, r6, r3
 8005baa:	d0b6      	beq.n	8005b1a <_malloc_r+0x22>
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	50a3      	str	r3, [r4, r2]
 8005bb0:	e7b3      	b.n	8005b1a <_malloc_r+0x22>
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	bf0c      	ite	eq
 8005bb8:	6032      	streq	r2, [r6, #0]
 8005bba:	605a      	strne	r2, [r3, #4]
 8005bbc:	e7ec      	b.n	8005b98 <_malloc_r+0xa0>
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	6864      	ldr	r4, [r4, #4]
 8005bc2:	e7b2      	b.n	8005b2a <_malloc_r+0x32>
 8005bc4:	4634      	mov	r4, r6
 8005bc6:	6876      	ldr	r6, [r6, #4]
 8005bc8:	e7b9      	b.n	8005b3e <_malloc_r+0x46>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f000 fa5e 	bl	8006090 <__malloc_unlock>
 8005bd4:	e7a1      	b.n	8005b1a <_malloc_r+0x22>
 8005bd6:	6025      	str	r5, [r4, #0]
 8005bd8:	e7de      	b.n	8005b98 <_malloc_r+0xa0>
 8005bda:	bf00      	nop
 8005bdc:	200006dc 	.word	0x200006dc

08005be0 <iprintf>:
 8005be0:	b40f      	push	{r0, r1, r2, r3}
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <iprintf+0x2c>)
 8005be4:	b513      	push	{r0, r1, r4, lr}
 8005be6:	681c      	ldr	r4, [r3, #0]
 8005be8:	b124      	cbz	r4, 8005bf4 <iprintf+0x14>
 8005bea:	69a3      	ldr	r3, [r4, #24]
 8005bec:	b913      	cbnz	r3, 8005bf4 <iprintf+0x14>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fe3a 	bl	8005868 <__sinit>
 8005bf4:	ab05      	add	r3, sp, #20
 8005bf6:	9a04      	ldr	r2, [sp, #16]
 8005bf8:	68a1      	ldr	r1, [r4, #8]
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fa77 	bl	80060f0 <_vfiprintf_r>
 8005c02:	b002      	add	sp, #8
 8005c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c08:	b004      	add	sp, #16
 8005c0a:	4770      	bx	lr
 8005c0c:	2000002c 	.word	0x2000002c

08005c10 <putchar>:
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <putchar+0x28>)
 8005c12:	b513      	push	{r0, r1, r4, lr}
 8005c14:	681c      	ldr	r4, [r3, #0]
 8005c16:	4601      	mov	r1, r0
 8005c18:	b134      	cbz	r4, 8005c28 <putchar+0x18>
 8005c1a:	69a3      	ldr	r3, [r4, #24]
 8005c1c:	b923      	cbnz	r3, 8005c28 <putchar+0x18>
 8005c1e:	9001      	str	r0, [sp, #4]
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff fe21 	bl	8005868 <__sinit>
 8005c26:	9901      	ldr	r1, [sp, #4]
 8005c28:	68a2      	ldr	r2, [r4, #8]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	b002      	add	sp, #8
 8005c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c32:	f000 bd21 	b.w	8006678 <_putc_r>
 8005c36:	bf00      	nop
 8005c38:	2000002c 	.word	0x2000002c

08005c3c <_puts_r>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	460e      	mov	r6, r1
 8005c40:	4605      	mov	r5, r0
 8005c42:	b118      	cbz	r0, 8005c4c <_puts_r+0x10>
 8005c44:	6983      	ldr	r3, [r0, #24]
 8005c46:	b90b      	cbnz	r3, 8005c4c <_puts_r+0x10>
 8005c48:	f7ff fe0e 	bl	8005868 <__sinit>
 8005c4c:	69ab      	ldr	r3, [r5, #24]
 8005c4e:	68ac      	ldr	r4, [r5, #8]
 8005c50:	b913      	cbnz	r3, 8005c58 <_puts_r+0x1c>
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff fe08 	bl	8005868 <__sinit>
 8005c58:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <_puts_r+0xd0>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d120      	bne.n	8005ca0 <_puts_r+0x64>
 8005c5e:	686c      	ldr	r4, [r5, #4]
 8005c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c62:	07db      	lsls	r3, r3, #31
 8005c64:	d405      	bmi.n	8005c72 <_puts_r+0x36>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	0598      	lsls	r0, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_puts_r+0x36>
 8005c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6e:	f7ff febe 	bl	80059ee <__retarget_lock_acquire_recursive>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	0719      	lsls	r1, r3, #28
 8005c76:	d51d      	bpl.n	8005cb4 <_puts_r+0x78>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	b1db      	cbz	r3, 8005cb4 <_puts_r+0x78>
 8005c7c:	3e01      	subs	r6, #1
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c84:	3b01      	subs	r3, #1
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	bb39      	cbnz	r1, 8005cda <_puts_r+0x9e>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da38      	bge.n	8005d00 <_puts_r+0xc4>
 8005c8e:	4622      	mov	r2, r4
 8005c90:	210a      	movs	r1, #10
 8005c92:	4628      	mov	r0, r5
 8005c94:	f000 f89c 	bl	8005dd0 <__swbuf_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d011      	beq.n	8005cc0 <_puts_r+0x84>
 8005c9c:	250a      	movs	r5, #10
 8005c9e:	e011      	b.n	8005cc4 <_puts_r+0x88>
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <_puts_r+0xd4>)
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d101      	bne.n	8005caa <_puts_r+0x6e>
 8005ca6:	68ac      	ldr	r4, [r5, #8]
 8005ca8:	e7da      	b.n	8005c60 <_puts_r+0x24>
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <_puts_r+0xd8>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	bf08      	it	eq
 8005cb0:	68ec      	ldreq	r4, [r5, #12]
 8005cb2:	e7d5      	b.n	8005c60 <_puts_r+0x24>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 f8ee 	bl	8005e98 <__swsetup_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d0dd      	beq.n	8005c7c <_puts_r+0x40>
 8005cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cc6:	07da      	lsls	r2, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_puts_r+0x9a>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	059b      	lsls	r3, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_puts_r+0x9a>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd2:	f7ff fe8d 	bl	80059f0 <__retarget_lock_release_recursive>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da04      	bge.n	8005ce8 <_puts_r+0xac>
 8005cde:	69a2      	ldr	r2, [r4, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	dc06      	bgt.n	8005cf2 <_puts_r+0xb6>
 8005ce4:	290a      	cmp	r1, #10
 8005ce6:	d004      	beq.n	8005cf2 <_puts_r+0xb6>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	7019      	strb	r1, [r3, #0]
 8005cf0:	e7c5      	b.n	8005c7e <_puts_r+0x42>
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f86b 	bl	8005dd0 <__swbuf_r>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d1bf      	bne.n	8005c7e <_puts_r+0x42>
 8005cfe:	e7df      	b.n	8005cc0 <_puts_r+0x84>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	250a      	movs	r5, #10
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	6022      	str	r2, [r4, #0]
 8005d08:	701d      	strb	r5, [r3, #0]
 8005d0a:	e7db      	b.n	8005cc4 <_puts_r+0x88>
 8005d0c:	08006b98 	.word	0x08006b98
 8005d10:	08006bb8 	.word	0x08006bb8
 8005d14:	08006b78 	.word	0x08006b78

08005d18 <puts>:
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <puts+0xc>)
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7ff bf8d 	b.w	8005c3c <_puts_r>
 8005d22:	bf00      	nop
 8005d24:	2000002c 	.word	0x2000002c

08005d28 <_sbrk_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d06      	ldr	r5, [pc, #24]	; (8005d44 <_sbrk_r+0x1c>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	f7fb ff44 	bl	8001bc0 <_sbrk>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_sbrk_r+0x1a>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_sbrk_r+0x1a>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	200006e4 	.word	0x200006e4

08005d48 <__sread>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	f000 fcda 	bl	8006708 <_read_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	bfab      	itete	ge
 8005d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d5c:	181b      	addge	r3, r3, r0
 8005d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d62:	bfac      	ite	ge
 8005d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d66:	81a3      	strhlt	r3, [r4, #12]
 8005d68:	bd10      	pop	{r4, pc}

08005d6a <__swrite>:
 8005d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	461f      	mov	r7, r3
 8005d70:	898b      	ldrh	r3, [r1, #12]
 8005d72:	05db      	lsls	r3, r3, #23
 8005d74:	4605      	mov	r5, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	4616      	mov	r6, r2
 8005d7a:	d505      	bpl.n	8005d88 <__swrite+0x1e>
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	2302      	movs	r3, #2
 8005d82:	2200      	movs	r2, #0
 8005d84:	f000 f906 	bl	8005f94 <_lseek_r>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	4632      	mov	r2, r6
 8005d96:	463b      	mov	r3, r7
 8005d98:	4628      	mov	r0, r5
 8005d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	f000 b869 	b.w	8005e74 <_write_r>

08005da2 <__sseek>:
 8005da2:	b510      	push	{r4, lr}
 8005da4:	460c      	mov	r4, r1
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 f8f3 	bl	8005f94 <_lseek_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	bf15      	itete	ne
 8005db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dbe:	81a3      	strheq	r3, [r4, #12]
 8005dc0:	bf18      	it	ne
 8005dc2:	81a3      	strhne	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__sclose>:
 8005dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dca:	f000 b8d3 	b.w	8005f74 <_close_r>
	...

08005dd0 <__swbuf_r>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	460e      	mov	r6, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	b118      	cbz	r0, 8005de2 <__swbuf_r+0x12>
 8005dda:	6983      	ldr	r3, [r0, #24]
 8005ddc:	b90b      	cbnz	r3, 8005de2 <__swbuf_r+0x12>
 8005dde:	f7ff fd43 	bl	8005868 <__sinit>
 8005de2:	4b21      	ldr	r3, [pc, #132]	; (8005e68 <__swbuf_r+0x98>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	d12b      	bne.n	8005e40 <__swbuf_r+0x70>
 8005de8:	686c      	ldr	r4, [r5, #4]
 8005dea:	69a3      	ldr	r3, [r4, #24]
 8005dec:	60a3      	str	r3, [r4, #8]
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	071a      	lsls	r2, r3, #28
 8005df2:	d52f      	bpl.n	8005e54 <__swbuf_r+0x84>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	b36b      	cbz	r3, 8005e54 <__swbuf_r+0x84>
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	1ac0      	subs	r0, r0, r3
 8005dfe:	6963      	ldr	r3, [r4, #20]
 8005e00:	b2f6      	uxtb	r6, r6
 8005e02:	4283      	cmp	r3, r0
 8005e04:	4637      	mov	r7, r6
 8005e06:	dc04      	bgt.n	8005e12 <__swbuf_r+0x42>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7ff fc86 	bl	800571c <_fflush_r>
 8005e10:	bb30      	cbnz	r0, 8005e60 <__swbuf_r+0x90>
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	60a3      	str	r3, [r4, #8]
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	6022      	str	r2, [r4, #0]
 8005e1e:	701e      	strb	r6, [r3, #0]
 8005e20:	6963      	ldr	r3, [r4, #20]
 8005e22:	3001      	adds	r0, #1
 8005e24:	4283      	cmp	r3, r0
 8005e26:	d004      	beq.n	8005e32 <__swbuf_r+0x62>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	07db      	lsls	r3, r3, #31
 8005e2c:	d506      	bpl.n	8005e3c <__swbuf_r+0x6c>
 8005e2e:	2e0a      	cmp	r6, #10
 8005e30:	d104      	bne.n	8005e3c <__swbuf_r+0x6c>
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7ff fc71 	bl	800571c <_fflush_r>
 8005e3a:	b988      	cbnz	r0, 8005e60 <__swbuf_r+0x90>
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <__swbuf_r+0x9c>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d101      	bne.n	8005e4a <__swbuf_r+0x7a>
 8005e46:	68ac      	ldr	r4, [r5, #8]
 8005e48:	e7cf      	b.n	8005dea <__swbuf_r+0x1a>
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <__swbuf_r+0xa0>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	bf08      	it	eq
 8005e50:	68ec      	ldreq	r4, [r5, #12]
 8005e52:	e7ca      	b.n	8005dea <__swbuf_r+0x1a>
 8005e54:	4621      	mov	r1, r4
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 f81e 	bl	8005e98 <__swsetup_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d0cb      	beq.n	8005df8 <__swbuf_r+0x28>
 8005e60:	f04f 37ff 	mov.w	r7, #4294967295
 8005e64:	e7ea      	b.n	8005e3c <__swbuf_r+0x6c>
 8005e66:	bf00      	nop
 8005e68:	08006b98 	.word	0x08006b98
 8005e6c:	08006bb8 	.word	0x08006bb8
 8005e70:	08006b78 	.word	0x08006b78

08005e74 <_write_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	; (8005e94 <_write_r+0x20>)
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	602a      	str	r2, [r5, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fb fe4b 	bl	8001b1e <_write>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_write_r+0x1e>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_write_r+0x1e>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	200006e4 	.word	0x200006e4

08005e98 <__swsetup_r>:
 8005e98:	4b32      	ldr	r3, [pc, #200]	; (8005f64 <__swsetup_r+0xcc>)
 8005e9a:	b570      	push	{r4, r5, r6, lr}
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b125      	cbz	r5, 8005eae <__swsetup_r+0x16>
 8005ea4:	69ab      	ldr	r3, [r5, #24]
 8005ea6:	b913      	cbnz	r3, 8005eae <__swsetup_r+0x16>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f7ff fcdd 	bl	8005868 <__sinit>
 8005eae:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <__swsetup_r+0xd0>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d10f      	bne.n	8005ed4 <__swsetup_r+0x3c>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebc:	0719      	lsls	r1, r3, #28
 8005ebe:	d42c      	bmi.n	8005f1a <__swsetup_r+0x82>
 8005ec0:	06dd      	lsls	r5, r3, #27
 8005ec2:	d411      	bmi.n	8005ee8 <__swsetup_r+0x50>
 8005ec4:	2309      	movs	r3, #9
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed2:	e03e      	b.n	8005f52 <__swsetup_r+0xba>
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <__swsetup_r+0xd4>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d101      	bne.n	8005ede <__swsetup_r+0x46>
 8005eda:	68ac      	ldr	r4, [r5, #8]
 8005edc:	e7eb      	b.n	8005eb6 <__swsetup_r+0x1e>
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <__swsetup_r+0xd8>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	bf08      	it	eq
 8005ee4:	68ec      	ldreq	r4, [r5, #12]
 8005ee6:	e7e6      	b.n	8005eb6 <__swsetup_r+0x1e>
 8005ee8:	0758      	lsls	r0, r3, #29
 8005eea:	d512      	bpl.n	8005f12 <__swsetup_r+0x7a>
 8005eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eee:	b141      	cbz	r1, 8005f02 <__swsetup_r+0x6a>
 8005ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	d002      	beq.n	8005efe <__swsetup_r+0x66>
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff fd91 	bl	8005a20 <_free_r>
 8005efe:	2300      	movs	r3, #0
 8005f00:	6363      	str	r3, [r4, #52]	; 0x34
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	b94b      	cbnz	r3, 8005f32 <__swsetup_r+0x9a>
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f28:	d003      	beq.n	8005f32 <__swsetup_r+0x9a>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f000 f869 	bl	8006004 <__smakebuf_r>
 8005f32:	89a0      	ldrh	r0, [r4, #12]
 8005f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f38:	f010 0301 	ands.w	r3, r0, #1
 8005f3c:	d00a      	beq.n	8005f54 <__swsetup_r+0xbc>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60a3      	str	r3, [r4, #8]
 8005f42:	6963      	ldr	r3, [r4, #20]
 8005f44:	425b      	negs	r3, r3
 8005f46:	61a3      	str	r3, [r4, #24]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	b943      	cbnz	r3, 8005f5e <__swsetup_r+0xc6>
 8005f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f50:	d1ba      	bne.n	8005ec8 <__swsetup_r+0x30>
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	0781      	lsls	r1, r0, #30
 8005f56:	bf58      	it	pl
 8005f58:	6963      	ldrpl	r3, [r4, #20]
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	e7f4      	b.n	8005f48 <__swsetup_r+0xb0>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e7f7      	b.n	8005f52 <__swsetup_r+0xba>
 8005f62:	bf00      	nop
 8005f64:	2000002c 	.word	0x2000002c
 8005f68:	08006b98 	.word	0x08006b98
 8005f6c:	08006bb8 	.word	0x08006bb8
 8005f70:	08006b78 	.word	0x08006b78

08005f74 <_close_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	; (8005f90 <_close_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fb fde9 	bl	8001b56 <_close>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_close_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_close_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	200006e4 	.word	0x200006e4

08005f94 <_lseek_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	; (8005fb4 <_lseek_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fb fdfe 	bl	8001ba4 <_lseek>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_lseek_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_lseek_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200006e4 	.word	0x200006e4

08005fb8 <__swhatbuf_r>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	460e      	mov	r6, r1
 8005fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	b096      	sub	sp, #88	; 0x58
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	da08      	bge.n	8005fdc <__swhatbuf_r+0x24>
 8005fca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	061a      	lsls	r2, r3, #24
 8005fd4:	d410      	bmi.n	8005ff8 <__swhatbuf_r+0x40>
 8005fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fda:	e00e      	b.n	8005ffa <__swhatbuf_r+0x42>
 8005fdc:	466a      	mov	r2, sp
 8005fde:	f000 fba5 	bl	800672c <_fstat_r>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	dbf1      	blt.n	8005fca <__swhatbuf_r+0x12>
 8005fe6:	9a01      	ldr	r2, [sp, #4]
 8005fe8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ff0:	425a      	negs	r2, r3
 8005ff2:	415a      	adcs	r2, r3
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	e7ee      	b.n	8005fd6 <__swhatbuf_r+0x1e>
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	b016      	add	sp, #88	; 0x58
 8006000:	bd70      	pop	{r4, r5, r6, pc}
	...

08006004 <__smakebuf_r>:
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006008:	079d      	lsls	r5, r3, #30
 800600a:	4606      	mov	r6, r0
 800600c:	460c      	mov	r4, r1
 800600e:	d507      	bpl.n	8006020 <__smakebuf_r+0x1c>
 8006010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	6123      	str	r3, [r4, #16]
 8006018:	2301      	movs	r3, #1
 800601a:	6163      	str	r3, [r4, #20]
 800601c:	b002      	add	sp, #8
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	ab01      	add	r3, sp, #4
 8006022:	466a      	mov	r2, sp
 8006024:	f7ff ffc8 	bl	8005fb8 <__swhatbuf_r>
 8006028:	9900      	ldr	r1, [sp, #0]
 800602a:	4605      	mov	r5, r0
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff fd63 	bl	8005af8 <_malloc_r>
 8006032:	b948      	cbnz	r0, 8006048 <__smakebuf_r+0x44>
 8006034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006038:	059a      	lsls	r2, r3, #22
 800603a:	d4ef      	bmi.n	800601c <__smakebuf_r+0x18>
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	81a3      	strh	r3, [r4, #12]
 8006046:	e7e3      	b.n	8006010 <__smakebuf_r+0xc>
 8006048:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <__smakebuf_r+0x7c>)
 800604a:	62b3      	str	r3, [r6, #40]	; 0x28
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	6020      	str	r0, [r4, #0]
 8006050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	6163      	str	r3, [r4, #20]
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	6120      	str	r0, [r4, #16]
 800605e:	b15b      	cbz	r3, 8006078 <__smakebuf_r+0x74>
 8006060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 fb73 	bl	8006750 <_isatty_r>
 800606a:	b128      	cbz	r0, 8006078 <__smakebuf_r+0x74>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	89a0      	ldrh	r0, [r4, #12]
 800607a:	4305      	orrs	r5, r0
 800607c:	81a5      	strh	r5, [r4, #12]
 800607e:	e7cd      	b.n	800601c <__smakebuf_r+0x18>
 8006080:	08005801 	.word	0x08005801

08006084 <__malloc_lock>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__malloc_lock+0x8>)
 8006086:	f7ff bcb2 	b.w	80059ee <__retarget_lock_acquire_recursive>
 800608a:	bf00      	nop
 800608c:	200006d8 	.word	0x200006d8

08006090 <__malloc_unlock>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__malloc_unlock+0x8>)
 8006092:	f7ff bcad 	b.w	80059f0 <__retarget_lock_release_recursive>
 8006096:	bf00      	nop
 8006098:	200006d8 	.word	0x200006d8

0800609c <__sfputc_r>:
 800609c:	6893      	ldr	r3, [r2, #8]
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	b410      	push	{r4}
 80060a4:	6093      	str	r3, [r2, #8]
 80060a6:	da08      	bge.n	80060ba <__sfputc_r+0x1e>
 80060a8:	6994      	ldr	r4, [r2, #24]
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	db01      	blt.n	80060b2 <__sfputc_r+0x16>
 80060ae:	290a      	cmp	r1, #10
 80060b0:	d103      	bne.n	80060ba <__sfputc_r+0x1e>
 80060b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b6:	f7ff be8b 	b.w	8005dd0 <__swbuf_r>
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	1c58      	adds	r0, r3, #1
 80060be:	6010      	str	r0, [r2, #0]
 80060c0:	7019      	strb	r1, [r3, #0]
 80060c2:	4608      	mov	r0, r1
 80060c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <__sfputs_r>:
 80060ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	4614      	mov	r4, r2
 80060d2:	18d5      	adds	r5, r2, r3
 80060d4:	42ac      	cmp	r4, r5
 80060d6:	d101      	bne.n	80060dc <__sfputs_r+0x12>
 80060d8:	2000      	movs	r0, #0
 80060da:	e007      	b.n	80060ec <__sfputs_r+0x22>
 80060dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e0:	463a      	mov	r2, r7
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff ffda 	bl	800609c <__sfputc_r>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d1f3      	bne.n	80060d4 <__sfputs_r+0xa>
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060f0 <_vfiprintf_r>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	460d      	mov	r5, r1
 80060f6:	b09d      	sub	sp, #116	; 0x74
 80060f8:	4614      	mov	r4, r2
 80060fa:	4698      	mov	r8, r3
 80060fc:	4606      	mov	r6, r0
 80060fe:	b118      	cbz	r0, 8006108 <_vfiprintf_r+0x18>
 8006100:	6983      	ldr	r3, [r0, #24]
 8006102:	b90b      	cbnz	r3, 8006108 <_vfiprintf_r+0x18>
 8006104:	f7ff fbb0 	bl	8005868 <__sinit>
 8006108:	4b89      	ldr	r3, [pc, #548]	; (8006330 <_vfiprintf_r+0x240>)
 800610a:	429d      	cmp	r5, r3
 800610c:	d11b      	bne.n	8006146 <_vfiprintf_r+0x56>
 800610e:	6875      	ldr	r5, [r6, #4]
 8006110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	d405      	bmi.n	8006122 <_vfiprintf_r+0x32>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	059a      	lsls	r2, r3, #22
 800611a:	d402      	bmi.n	8006122 <_vfiprintf_r+0x32>
 800611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800611e:	f7ff fc66 	bl	80059ee <__retarget_lock_acquire_recursive>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	d501      	bpl.n	800612c <_vfiprintf_r+0x3c>
 8006128:	692b      	ldr	r3, [r5, #16]
 800612a:	b9eb      	cbnz	r3, 8006168 <_vfiprintf_r+0x78>
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff feb2 	bl	8005e98 <__swsetup_r>
 8006134:	b1c0      	cbz	r0, 8006168 <_vfiprintf_r+0x78>
 8006136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006138:	07dc      	lsls	r4, r3, #31
 800613a:	d50e      	bpl.n	800615a <_vfiprintf_r+0x6a>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	b01d      	add	sp, #116	; 0x74
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	4b7b      	ldr	r3, [pc, #492]	; (8006334 <_vfiprintf_r+0x244>)
 8006148:	429d      	cmp	r5, r3
 800614a:	d101      	bne.n	8006150 <_vfiprintf_r+0x60>
 800614c:	68b5      	ldr	r5, [r6, #8]
 800614e:	e7df      	b.n	8006110 <_vfiprintf_r+0x20>
 8006150:	4b79      	ldr	r3, [pc, #484]	; (8006338 <_vfiprintf_r+0x248>)
 8006152:	429d      	cmp	r5, r3
 8006154:	bf08      	it	eq
 8006156:	68f5      	ldreq	r5, [r6, #12]
 8006158:	e7da      	b.n	8006110 <_vfiprintf_r+0x20>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	0598      	lsls	r0, r3, #22
 800615e:	d4ed      	bmi.n	800613c <_vfiprintf_r+0x4c>
 8006160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006162:	f7ff fc45 	bl	80059f0 <__retarget_lock_release_recursive>
 8006166:	e7e9      	b.n	800613c <_vfiprintf_r+0x4c>
 8006168:	2300      	movs	r3, #0
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	2320      	movs	r3, #32
 800616e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006172:	f8cd 800c 	str.w	r8, [sp, #12]
 8006176:	2330      	movs	r3, #48	; 0x30
 8006178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800633c <_vfiprintf_r+0x24c>
 800617c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006180:	f04f 0901 	mov.w	r9, #1
 8006184:	4623      	mov	r3, r4
 8006186:	469a      	mov	sl, r3
 8006188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618c:	b10a      	cbz	r2, 8006192 <_vfiprintf_r+0xa2>
 800618e:	2a25      	cmp	r2, #37	; 0x25
 8006190:	d1f9      	bne.n	8006186 <_vfiprintf_r+0x96>
 8006192:	ebba 0b04 	subs.w	fp, sl, r4
 8006196:	d00b      	beq.n	80061b0 <_vfiprintf_r+0xc0>
 8006198:	465b      	mov	r3, fp
 800619a:	4622      	mov	r2, r4
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ff93 	bl	80060ca <__sfputs_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	f000 80aa 	beq.w	80062fe <_vfiprintf_r+0x20e>
 80061aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ac:	445a      	add	r2, fp
 80061ae:	9209      	str	r2, [sp, #36]	; 0x24
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a2 	beq.w	80062fe <_vfiprintf_r+0x20e>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f04f 32ff 	mov.w	r2, #4294967295
 80061c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c4:	f10a 0a01 	add.w	sl, sl, #1
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061d0:	931a      	str	r3, [sp, #104]	; 0x68
 80061d2:	4654      	mov	r4, sl
 80061d4:	2205      	movs	r2, #5
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	4858      	ldr	r0, [pc, #352]	; (800633c <_vfiprintf_r+0x24c>)
 80061dc:	f7fa f808 	bl	80001f0 <memchr>
 80061e0:	9a04      	ldr	r2, [sp, #16]
 80061e2:	b9d8      	cbnz	r0, 800621c <_vfiprintf_r+0x12c>
 80061e4:	06d1      	lsls	r1, r2, #27
 80061e6:	bf44      	itt	mi
 80061e8:	2320      	movmi	r3, #32
 80061ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ee:	0713      	lsls	r3, r2, #28
 80061f0:	bf44      	itt	mi
 80061f2:	232b      	movmi	r3, #43	; 0x2b
 80061f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f8:	f89a 3000 	ldrb.w	r3, [sl]
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d015      	beq.n	800622c <_vfiprintf_r+0x13c>
 8006200:	9a07      	ldr	r2, [sp, #28]
 8006202:	4654      	mov	r4, sl
 8006204:	2000      	movs	r0, #0
 8006206:	f04f 0c0a 	mov.w	ip, #10
 800620a:	4621      	mov	r1, r4
 800620c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006210:	3b30      	subs	r3, #48	; 0x30
 8006212:	2b09      	cmp	r3, #9
 8006214:	d94e      	bls.n	80062b4 <_vfiprintf_r+0x1c4>
 8006216:	b1b0      	cbz	r0, 8006246 <_vfiprintf_r+0x156>
 8006218:	9207      	str	r2, [sp, #28]
 800621a:	e014      	b.n	8006246 <_vfiprintf_r+0x156>
 800621c:	eba0 0308 	sub.w	r3, r0, r8
 8006220:	fa09 f303 	lsl.w	r3, r9, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	46a2      	mov	sl, r4
 800622a:	e7d2      	b.n	80061d2 <_vfiprintf_r+0xe2>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	1d19      	adds	r1, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9103      	str	r1, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfbb      	ittet	lt
 8006238:	425b      	neglt	r3, r3
 800623a:	f042 0202 	orrlt.w	r2, r2, #2
 800623e:	9307      	strge	r3, [sp, #28]
 8006240:	9307      	strlt	r3, [sp, #28]
 8006242:	bfb8      	it	lt
 8006244:	9204      	strlt	r2, [sp, #16]
 8006246:	7823      	ldrb	r3, [r4, #0]
 8006248:	2b2e      	cmp	r3, #46	; 0x2e
 800624a:	d10c      	bne.n	8006266 <_vfiprintf_r+0x176>
 800624c:	7863      	ldrb	r3, [r4, #1]
 800624e:	2b2a      	cmp	r3, #42	; 0x2a
 8006250:	d135      	bne.n	80062be <_vfiprintf_r+0x1ce>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d1a      	adds	r2, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9203      	str	r2, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfb8      	it	lt
 800625e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006262:	3402      	adds	r4, #2
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800634c <_vfiprintf_r+0x25c>
 800626a:	7821      	ldrb	r1, [r4, #0]
 800626c:	2203      	movs	r2, #3
 800626e:	4650      	mov	r0, sl
 8006270:	f7f9 ffbe 	bl	80001f0 <memchr>
 8006274:	b140      	cbz	r0, 8006288 <_vfiprintf_r+0x198>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	eba0 000a 	sub.w	r0, r0, sl
 800627c:	fa03 f000 	lsl.w	r0, r3, r0
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	4303      	orrs	r3, r0
 8006284:	3401      	adds	r4, #1
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628c:	482c      	ldr	r0, [pc, #176]	; (8006340 <_vfiprintf_r+0x250>)
 800628e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006292:	2206      	movs	r2, #6
 8006294:	f7f9 ffac 	bl	80001f0 <memchr>
 8006298:	2800      	cmp	r0, #0
 800629a:	d03f      	beq.n	800631c <_vfiprintf_r+0x22c>
 800629c:	4b29      	ldr	r3, [pc, #164]	; (8006344 <_vfiprintf_r+0x254>)
 800629e:	bb1b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x1f8>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	3307      	adds	r3, #7
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	3308      	adds	r3, #8
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	443b      	add	r3, r7
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	e767      	b.n	8006184 <_vfiprintf_r+0x94>
 80062b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b8:	460c      	mov	r4, r1
 80062ba:	2001      	movs	r0, #1
 80062bc:	e7a5      	b.n	800620a <_vfiprintf_r+0x11a>
 80062be:	2300      	movs	r3, #0
 80062c0:	3401      	adds	r4, #1
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	4619      	mov	r1, r3
 80062c6:	f04f 0c0a 	mov.w	ip, #10
 80062ca:	4620      	mov	r0, r4
 80062cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d0:	3a30      	subs	r2, #48	; 0x30
 80062d2:	2a09      	cmp	r2, #9
 80062d4:	d903      	bls.n	80062de <_vfiprintf_r+0x1ee>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0c5      	beq.n	8006266 <_vfiprintf_r+0x176>
 80062da:	9105      	str	r1, [sp, #20]
 80062dc:	e7c3      	b.n	8006266 <_vfiprintf_r+0x176>
 80062de:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e2:	4604      	mov	r4, r0
 80062e4:	2301      	movs	r3, #1
 80062e6:	e7f0      	b.n	80062ca <_vfiprintf_r+0x1da>
 80062e8:	ab03      	add	r3, sp, #12
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	462a      	mov	r2, r5
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <_vfiprintf_r+0x258>)
 80062f0:	a904      	add	r1, sp, #16
 80062f2:	4630      	mov	r0, r6
 80062f4:	f3af 8000 	nop.w
 80062f8:	4607      	mov	r7, r0
 80062fa:	1c78      	adds	r0, r7, #1
 80062fc:	d1d6      	bne.n	80062ac <_vfiprintf_r+0x1bc>
 80062fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006300:	07d9      	lsls	r1, r3, #31
 8006302:	d405      	bmi.n	8006310 <_vfiprintf_r+0x220>
 8006304:	89ab      	ldrh	r3, [r5, #12]
 8006306:	059a      	lsls	r2, r3, #22
 8006308:	d402      	bmi.n	8006310 <_vfiprintf_r+0x220>
 800630a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630c:	f7ff fb70 	bl	80059f0 <__retarget_lock_release_recursive>
 8006310:	89ab      	ldrh	r3, [r5, #12]
 8006312:	065b      	lsls	r3, r3, #25
 8006314:	f53f af12 	bmi.w	800613c <_vfiprintf_r+0x4c>
 8006318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800631a:	e711      	b.n	8006140 <_vfiprintf_r+0x50>
 800631c:	ab03      	add	r3, sp, #12
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	462a      	mov	r2, r5
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <_vfiprintf_r+0x258>)
 8006324:	a904      	add	r1, sp, #16
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f880 	bl	800642c <_printf_i>
 800632c:	e7e4      	b.n	80062f8 <_vfiprintf_r+0x208>
 800632e:	bf00      	nop
 8006330:	08006b98 	.word	0x08006b98
 8006334:	08006bb8 	.word	0x08006bb8
 8006338:	08006b78 	.word	0x08006b78
 800633c:	08006bdc 	.word	0x08006bdc
 8006340:	08006be6 	.word	0x08006be6
 8006344:	00000000 	.word	0x00000000
 8006348:	080060cb 	.word	0x080060cb
 800634c:	08006be2 	.word	0x08006be2

08006350 <_printf_common>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	4616      	mov	r6, r2
 8006356:	4699      	mov	r9, r3
 8006358:	688a      	ldr	r2, [r1, #8]
 800635a:	690b      	ldr	r3, [r1, #16]
 800635c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006360:	4293      	cmp	r3, r2
 8006362:	bfb8      	it	lt
 8006364:	4613      	movlt	r3, r2
 8006366:	6033      	str	r3, [r6, #0]
 8006368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800636c:	4607      	mov	r7, r0
 800636e:	460c      	mov	r4, r1
 8006370:	b10a      	cbz	r2, 8006376 <_printf_common+0x26>
 8006372:	3301      	adds	r3, #1
 8006374:	6033      	str	r3, [r6, #0]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	0699      	lsls	r1, r3, #26
 800637a:	bf42      	ittt	mi
 800637c:	6833      	ldrmi	r3, [r6, #0]
 800637e:	3302      	addmi	r3, #2
 8006380:	6033      	strmi	r3, [r6, #0]
 8006382:	6825      	ldr	r5, [r4, #0]
 8006384:	f015 0506 	ands.w	r5, r5, #6
 8006388:	d106      	bne.n	8006398 <_printf_common+0x48>
 800638a:	f104 0a19 	add.w	sl, r4, #25
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	6832      	ldr	r2, [r6, #0]
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	42ab      	cmp	r3, r5
 8006396:	dc26      	bgt.n	80063e6 <_printf_common+0x96>
 8006398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800639c:	1e13      	subs	r3, r2, #0
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	bf18      	it	ne
 80063a2:	2301      	movne	r3, #1
 80063a4:	0692      	lsls	r2, r2, #26
 80063a6:	d42b      	bmi.n	8006400 <_printf_common+0xb0>
 80063a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ac:	4649      	mov	r1, r9
 80063ae:	4638      	mov	r0, r7
 80063b0:	47c0      	blx	r8
 80063b2:	3001      	adds	r0, #1
 80063b4:	d01e      	beq.n	80063f4 <_printf_common+0xa4>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	68e5      	ldr	r5, [r4, #12]
 80063ba:	6832      	ldr	r2, [r6, #0]
 80063bc:	f003 0306 	and.w	r3, r3, #6
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	bf08      	it	eq
 80063c4:	1aad      	subeq	r5, r5, r2
 80063c6:	68a3      	ldr	r3, [r4, #8]
 80063c8:	6922      	ldr	r2, [r4, #16]
 80063ca:	bf0c      	ite	eq
 80063cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d0:	2500      	movne	r5, #0
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bfc4      	itt	gt
 80063d6:	1a9b      	subgt	r3, r3, r2
 80063d8:	18ed      	addgt	r5, r5, r3
 80063da:	2600      	movs	r6, #0
 80063dc:	341a      	adds	r4, #26
 80063de:	42b5      	cmp	r5, r6
 80063e0:	d11a      	bne.n	8006418 <_printf_common+0xc8>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e008      	b.n	80063f8 <_printf_common+0xa8>
 80063e6:	2301      	movs	r3, #1
 80063e8:	4652      	mov	r2, sl
 80063ea:	4649      	mov	r1, r9
 80063ec:	4638      	mov	r0, r7
 80063ee:	47c0      	blx	r8
 80063f0:	3001      	adds	r0, #1
 80063f2:	d103      	bne.n	80063fc <_printf_common+0xac>
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	3501      	adds	r5, #1
 80063fe:	e7c6      	b.n	800638e <_printf_common+0x3e>
 8006400:	18e1      	adds	r1, r4, r3
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	2030      	movs	r0, #48	; 0x30
 8006406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800640a:	4422      	add	r2, r4
 800640c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006414:	3302      	adds	r3, #2
 8006416:	e7c7      	b.n	80063a8 <_printf_common+0x58>
 8006418:	2301      	movs	r3, #1
 800641a:	4622      	mov	r2, r4
 800641c:	4649      	mov	r1, r9
 800641e:	4638      	mov	r0, r7
 8006420:	47c0      	blx	r8
 8006422:	3001      	adds	r0, #1
 8006424:	d0e6      	beq.n	80063f4 <_printf_common+0xa4>
 8006426:	3601      	adds	r6, #1
 8006428:	e7d9      	b.n	80063de <_printf_common+0x8e>
	...

0800642c <_printf_i>:
 800642c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	7e0f      	ldrb	r7, [r1, #24]
 8006432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006434:	2f78      	cmp	r7, #120	; 0x78
 8006436:	4691      	mov	r9, r2
 8006438:	4680      	mov	r8, r0
 800643a:	460c      	mov	r4, r1
 800643c:	469a      	mov	sl, r3
 800643e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006442:	d807      	bhi.n	8006454 <_printf_i+0x28>
 8006444:	2f62      	cmp	r7, #98	; 0x62
 8006446:	d80a      	bhi.n	800645e <_printf_i+0x32>
 8006448:	2f00      	cmp	r7, #0
 800644a:	f000 80d8 	beq.w	80065fe <_printf_i+0x1d2>
 800644e:	2f58      	cmp	r7, #88	; 0x58
 8006450:	f000 80a3 	beq.w	800659a <_printf_i+0x16e>
 8006454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800645c:	e03a      	b.n	80064d4 <_printf_i+0xa8>
 800645e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006462:	2b15      	cmp	r3, #21
 8006464:	d8f6      	bhi.n	8006454 <_printf_i+0x28>
 8006466:	a101      	add	r1, pc, #4	; (adr r1, 800646c <_printf_i+0x40>)
 8006468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800646c:	080064c5 	.word	0x080064c5
 8006470:	080064d9 	.word	0x080064d9
 8006474:	08006455 	.word	0x08006455
 8006478:	08006455 	.word	0x08006455
 800647c:	08006455 	.word	0x08006455
 8006480:	08006455 	.word	0x08006455
 8006484:	080064d9 	.word	0x080064d9
 8006488:	08006455 	.word	0x08006455
 800648c:	08006455 	.word	0x08006455
 8006490:	08006455 	.word	0x08006455
 8006494:	08006455 	.word	0x08006455
 8006498:	080065e5 	.word	0x080065e5
 800649c:	08006509 	.word	0x08006509
 80064a0:	080065c7 	.word	0x080065c7
 80064a4:	08006455 	.word	0x08006455
 80064a8:	08006455 	.word	0x08006455
 80064ac:	08006607 	.word	0x08006607
 80064b0:	08006455 	.word	0x08006455
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006455 	.word	0x08006455
 80064bc:	08006455 	.word	0x08006455
 80064c0:	080065cf 	.word	0x080065cf
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	602a      	str	r2, [r5, #0]
 80064cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0a3      	b.n	8006620 <_printf_i+0x1f4>
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	6829      	ldr	r1, [r5, #0]
 80064dc:	0606      	lsls	r6, r0, #24
 80064de:	f101 0304 	add.w	r3, r1, #4
 80064e2:	d50a      	bpl.n	80064fa <_printf_i+0xce>
 80064e4:	680e      	ldr	r6, [r1, #0]
 80064e6:	602b      	str	r3, [r5, #0]
 80064e8:	2e00      	cmp	r6, #0
 80064ea:	da03      	bge.n	80064f4 <_printf_i+0xc8>
 80064ec:	232d      	movs	r3, #45	; 0x2d
 80064ee:	4276      	negs	r6, r6
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f4:	485e      	ldr	r0, [pc, #376]	; (8006670 <_printf_i+0x244>)
 80064f6:	230a      	movs	r3, #10
 80064f8:	e019      	b.n	800652e <_printf_i+0x102>
 80064fa:	680e      	ldr	r6, [r1, #0]
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006502:	bf18      	it	ne
 8006504:	b236      	sxthne	r6, r6
 8006506:	e7ef      	b.n	80064e8 <_printf_i+0xbc>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	1d19      	adds	r1, r3, #4
 800650e:	6029      	str	r1, [r5, #0]
 8006510:	0601      	lsls	r1, r0, #24
 8006512:	d501      	bpl.n	8006518 <_printf_i+0xec>
 8006514:	681e      	ldr	r6, [r3, #0]
 8006516:	e002      	b.n	800651e <_printf_i+0xf2>
 8006518:	0646      	lsls	r6, r0, #25
 800651a:	d5fb      	bpl.n	8006514 <_printf_i+0xe8>
 800651c:	881e      	ldrh	r6, [r3, #0]
 800651e:	4854      	ldr	r0, [pc, #336]	; (8006670 <_printf_i+0x244>)
 8006520:	2f6f      	cmp	r7, #111	; 0x6f
 8006522:	bf0c      	ite	eq
 8006524:	2308      	moveq	r3, #8
 8006526:	230a      	movne	r3, #10
 8006528:	2100      	movs	r1, #0
 800652a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800652e:	6865      	ldr	r5, [r4, #4]
 8006530:	60a5      	str	r5, [r4, #8]
 8006532:	2d00      	cmp	r5, #0
 8006534:	bfa2      	ittt	ge
 8006536:	6821      	ldrge	r1, [r4, #0]
 8006538:	f021 0104 	bicge.w	r1, r1, #4
 800653c:	6021      	strge	r1, [r4, #0]
 800653e:	b90e      	cbnz	r6, 8006544 <_printf_i+0x118>
 8006540:	2d00      	cmp	r5, #0
 8006542:	d04d      	beq.n	80065e0 <_printf_i+0x1b4>
 8006544:	4615      	mov	r5, r2
 8006546:	fbb6 f1f3 	udiv	r1, r6, r3
 800654a:	fb03 6711 	mls	r7, r3, r1, r6
 800654e:	5dc7      	ldrb	r7, [r0, r7]
 8006550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006554:	4637      	mov	r7, r6
 8006556:	42bb      	cmp	r3, r7
 8006558:	460e      	mov	r6, r1
 800655a:	d9f4      	bls.n	8006546 <_printf_i+0x11a>
 800655c:	2b08      	cmp	r3, #8
 800655e:	d10b      	bne.n	8006578 <_printf_i+0x14c>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07de      	lsls	r6, r3, #31
 8006564:	d508      	bpl.n	8006578 <_printf_i+0x14c>
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	4299      	cmp	r1, r3
 800656c:	bfde      	ittt	le
 800656e:	2330      	movle	r3, #48	; 0x30
 8006570:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006574:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006578:	1b52      	subs	r2, r2, r5
 800657a:	6122      	str	r2, [r4, #16]
 800657c:	f8cd a000 	str.w	sl, [sp]
 8006580:	464b      	mov	r3, r9
 8006582:	aa03      	add	r2, sp, #12
 8006584:	4621      	mov	r1, r4
 8006586:	4640      	mov	r0, r8
 8006588:	f7ff fee2 	bl	8006350 <_printf_common>
 800658c:	3001      	adds	r0, #1
 800658e:	d14c      	bne.n	800662a <_printf_i+0x1fe>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b004      	add	sp, #16
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	4835      	ldr	r0, [pc, #212]	; (8006670 <_printf_i+0x244>)
 800659c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065a0:	6829      	ldr	r1, [r5, #0]
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065a8:	6029      	str	r1, [r5, #0]
 80065aa:	061d      	lsls	r5, r3, #24
 80065ac:	d514      	bpl.n	80065d8 <_printf_i+0x1ac>
 80065ae:	07df      	lsls	r7, r3, #31
 80065b0:	bf44      	itt	mi
 80065b2:	f043 0320 	orrmi.w	r3, r3, #32
 80065b6:	6023      	strmi	r3, [r4, #0]
 80065b8:	b91e      	cbnz	r6, 80065c2 <_printf_i+0x196>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f023 0320 	bic.w	r3, r3, #32
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	2310      	movs	r3, #16
 80065c4:	e7b0      	b.n	8006528 <_printf_i+0xfc>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f043 0320 	orr.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	2378      	movs	r3, #120	; 0x78
 80065d0:	4828      	ldr	r0, [pc, #160]	; (8006674 <_printf_i+0x248>)
 80065d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065d6:	e7e3      	b.n	80065a0 <_printf_i+0x174>
 80065d8:	0659      	lsls	r1, r3, #25
 80065da:	bf48      	it	mi
 80065dc:	b2b6      	uxthmi	r6, r6
 80065de:	e7e6      	b.n	80065ae <_printf_i+0x182>
 80065e0:	4615      	mov	r5, r2
 80065e2:	e7bb      	b.n	800655c <_printf_i+0x130>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	6826      	ldr	r6, [r4, #0]
 80065e8:	6961      	ldr	r1, [r4, #20]
 80065ea:	1d18      	adds	r0, r3, #4
 80065ec:	6028      	str	r0, [r5, #0]
 80065ee:	0635      	lsls	r5, r6, #24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	d501      	bpl.n	80065f8 <_printf_i+0x1cc>
 80065f4:	6019      	str	r1, [r3, #0]
 80065f6:	e002      	b.n	80065fe <_printf_i+0x1d2>
 80065f8:	0670      	lsls	r0, r6, #25
 80065fa:	d5fb      	bpl.n	80065f4 <_printf_i+0x1c8>
 80065fc:	8019      	strh	r1, [r3, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	4615      	mov	r5, r2
 8006604:	e7ba      	b.n	800657c <_printf_i+0x150>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	1d1a      	adds	r2, r3, #4
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	681d      	ldr	r5, [r3, #0]
 800660e:	6862      	ldr	r2, [r4, #4]
 8006610:	2100      	movs	r1, #0
 8006612:	4628      	mov	r0, r5
 8006614:	f7f9 fdec 	bl	80001f0 <memchr>
 8006618:	b108      	cbz	r0, 800661e <_printf_i+0x1f2>
 800661a:	1b40      	subs	r0, r0, r5
 800661c:	6060      	str	r0, [r4, #4]
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	2300      	movs	r3, #0
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006628:	e7a8      	b.n	800657c <_printf_i+0x150>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	462a      	mov	r2, r5
 800662e:	4649      	mov	r1, r9
 8006630:	4640      	mov	r0, r8
 8006632:	47d0      	blx	sl
 8006634:	3001      	adds	r0, #1
 8006636:	d0ab      	beq.n	8006590 <_printf_i+0x164>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	d413      	bmi.n	8006666 <_printf_i+0x23a>
 800663e:	68e0      	ldr	r0, [r4, #12]
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	4298      	cmp	r0, r3
 8006644:	bfb8      	it	lt
 8006646:	4618      	movlt	r0, r3
 8006648:	e7a4      	b.n	8006594 <_printf_i+0x168>
 800664a:	2301      	movs	r3, #1
 800664c:	4632      	mov	r2, r6
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d09b      	beq.n	8006590 <_printf_i+0x164>
 8006658:	3501      	adds	r5, #1
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	9903      	ldr	r1, [sp, #12]
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	42ab      	cmp	r3, r5
 8006662:	dcf2      	bgt.n	800664a <_printf_i+0x21e>
 8006664:	e7eb      	b.n	800663e <_printf_i+0x212>
 8006666:	2500      	movs	r5, #0
 8006668:	f104 0619 	add.w	r6, r4, #25
 800666c:	e7f5      	b.n	800665a <_printf_i+0x22e>
 800666e:	bf00      	nop
 8006670:	08006bed 	.word	0x08006bed
 8006674:	08006bfe 	.word	0x08006bfe

08006678 <_putc_r>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	460d      	mov	r5, r1
 800667c:	4614      	mov	r4, r2
 800667e:	4606      	mov	r6, r0
 8006680:	b118      	cbz	r0, 800668a <_putc_r+0x12>
 8006682:	6983      	ldr	r3, [r0, #24]
 8006684:	b90b      	cbnz	r3, 800668a <_putc_r+0x12>
 8006686:	f7ff f8ef 	bl	8005868 <__sinit>
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <_putc_r+0x84>)
 800668c:	429c      	cmp	r4, r3
 800668e:	d124      	bne.n	80066da <_putc_r+0x62>
 8006690:	6874      	ldr	r4, [r6, #4]
 8006692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006694:	07d8      	lsls	r0, r3, #31
 8006696:	d405      	bmi.n	80066a4 <_putc_r+0x2c>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	0599      	lsls	r1, r3, #22
 800669c:	d402      	bmi.n	80066a4 <_putc_r+0x2c>
 800669e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a0:	f7ff f9a5 	bl	80059ee <__retarget_lock_acquire_recursive>
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	60a3      	str	r3, [r4, #8]
 80066ac:	da05      	bge.n	80066ba <_putc_r+0x42>
 80066ae:	69a2      	ldr	r2, [r4, #24]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	db1c      	blt.n	80066ee <_putc_r+0x76>
 80066b4:	b2eb      	uxtb	r3, r5
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d019      	beq.n	80066ee <_putc_r+0x76>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	701d      	strb	r5, [r3, #0]
 80066c2:	b2ed      	uxtb	r5, r5
 80066c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066c6:	07da      	lsls	r2, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <_putc_r+0x5e>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	059b      	lsls	r3, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <_putc_r+0x5e>
 80066d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d2:	f7ff f98d 	bl	80059f0 <__retarget_lock_release_recursive>
 80066d6:	4628      	mov	r0, r5
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <_putc_r+0x88>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d101      	bne.n	80066e4 <_putc_r+0x6c>
 80066e0:	68b4      	ldr	r4, [r6, #8]
 80066e2:	e7d6      	b.n	8006692 <_putc_r+0x1a>
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <_putc_r+0x8c>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	bf08      	it	eq
 80066ea:	68f4      	ldreq	r4, [r6, #12]
 80066ec:	e7d1      	b.n	8006692 <_putc_r+0x1a>
 80066ee:	4629      	mov	r1, r5
 80066f0:	4622      	mov	r2, r4
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff fb6c 	bl	8005dd0 <__swbuf_r>
 80066f8:	4605      	mov	r5, r0
 80066fa:	e7e3      	b.n	80066c4 <_putc_r+0x4c>
 80066fc:	08006b98 	.word	0x08006b98
 8006700:	08006bb8 	.word	0x08006bb8
 8006704:	08006b78 	.word	0x08006b78

08006708 <_read_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	; (8006728 <_read_r+0x20>)
 800670c:	4604      	mov	r4, r0
 800670e:	4608      	mov	r0, r1
 8006710:	4611      	mov	r1, r2
 8006712:	2200      	movs	r2, #0
 8006714:	602a      	str	r2, [r5, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f7fb f9e4 	bl	8001ae4 <_read>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_read_r+0x1e>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_read_r+0x1e>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	200006e4 	.word	0x200006e4

0800672c <_fstat_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_fstat_r+0x20>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f7fb fa18 	bl	8001b6e <_fstat>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d102      	bne.n	8006748 <_fstat_r+0x1c>
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	b103      	cbz	r3, 8006748 <_fstat_r+0x1c>
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	200006e4 	.word	0x200006e4

08006750 <_isatty_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_isatty_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fa17 	bl	8001b8e <_isatty>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_isatty_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_isatty_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200006e4 	.word	0x200006e4

08006770 <_init>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr

0800677c <_fini>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr
