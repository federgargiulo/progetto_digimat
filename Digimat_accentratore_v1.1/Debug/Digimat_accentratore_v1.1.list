
Digimat_accentratore_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  200000a4  08006f00  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08006f00  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001697f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  00036a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00039de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  0003aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0c2  00000000  00000000  0003be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015936  00000000  00000000  00056f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927b0  00000000  00000000  0006c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fefe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  000ff038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069ac 	.word	0x080069ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080069ac 	.word	0x080069ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	; 0x38
 8000598:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059a:	4a73      	ldr	r2, [pc, #460]	; (8000768 <MX_BlueNRG_MS_Init+0x1d4>)
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005aa:	4a70      	ldr	r2, [pc, #448]	; (800076c <MX_BlueNRG_MS_Init+0x1d8>)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	6018      	str	r0, [r3, #0]
 80005b6:	3304      	adds	r3, #4
 80005b8:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 80005ba:	f000 f8fd 	bl	80007b8 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 fd78 	bl	80020b4 <BSP_PB_GetState>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b69      	ldr	r3, [pc, #420]	; (8000770 <MX_BlueNRG_MS_Init+0x1dc>)
 80005ca:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	4869      	ldr	r0, [pc, #420]	; (8000774 <MX_BlueNRG_MS_Init+0x1e0>)
 80005d0:	f004 fe2a 	bl	8005228 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80005d4:	1cba      	adds	r2, r7, #2
 80005d6:	1d7b      	adds	r3, r7, #5
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fc99 	bl	8004f12 <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 80005e0:	f004 fcdb 	bl	8004f9a <hci_reset>

	HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f001 ff09 	bl	80023fc <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	4619      	mov	r1, r3
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4861      	ldr	r0, [pc, #388]	; (8000778 <MX_BlueNRG_MS_Init+0x1e4>)
 80005f4:	f005 fc12 	bl	8005e1c <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	2b30      	cmp	r3, #48	; 0x30
 80005fc:	d902      	bls.n	8000604 <MX_BlueNRG_MS_Init+0x70>
		bnrg_expansion_board = IDB05A1;
 80005fe:	4b5f      	ldr	r3, [pc, #380]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT) {
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <MX_BlueNRG_MS_Init+0x8c>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	f107 021c 	add.w	r2, r7, #28
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	e008      	b.n	8000632 <MX_BlueNRG_MS_Init+0x9e>
	} else {
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	f107 0214 	add.w	r2, r7, #20
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	6018      	str	r0, [r3, #0]
 800062e:	3304      	adds	r3, #4
 8000630:	8019      	strh	r1, [r3, #0]
	}

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	461a      	mov	r2, r3
 8000638:	2106      	movs	r1, #6
 800063a:	2000      	movs	r0, #0
 800063c:	f004 fbd3 	bl	8004de6 <aci_hal_write_config_data>
 8000640:	4603      	mov	r3, r0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
			CONFIG_DATA_PUBADDR_LEN,
			bdaddr);
	if (ret) {
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <MX_BlueNRG_MS_Init+0xbe>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800064a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800064c:	484d      	ldr	r0, [pc, #308]	; (8000784 <MX_BlueNRG_MS_Init+0x1f0>)
 800064e:	f005 fbe5 	bl	8005e1c <iprintf>
	}

	ret = aci_gatt_init();
 8000652:	f004 f948 	bl	80048e6 <aci_gatt_init>
 8000656:	4603      	mov	r3, r0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
	if (ret) {
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <MX_BlueNRG_MS_Init+0xd2>
		printf("GATT_Init failed.\n");
 8000660:	4849      	ldr	r0, [pc, #292]	; (8000788 <MX_BlueNRG_MS_Init+0x1f4>)
 8000662:	f005 fc77 	bl	8005f54 <puts>
	}

	if (BLE_Role == SERVER) {
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d11e      	bne.n	80006ac <MX_BlueNRG_MS_Init+0x118>
		if (bnrg_expansion_board == IDB05A1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d10f      	bne.n	8000696 <MX_BlueNRG_MS_Init+0x102>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000676:	f107 020a 	add.w	r2, r7, #10
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4613      	mov	r3, r2
 8000686:	2207      	movs	r2, #7
 8000688:	2100      	movs	r1, #0
 800068a:	2001      	movs	r0, #1
 800068c:	f003 fefc 	bl	8004488 <aci_gap_init_IDB05A1>
 8000690:	4603      	mov	r3, r0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
 8000694:	e028      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	f107 010a 	add.w	r1, r7, #10
 80006a0:	2001      	movs	r0, #1
 80006a2:	f003 ff41 	bl	8004528 <aci_gap_init_IDB04A1>
 80006a6:	4603      	mov	r3, r0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
 80006aa:	e01d      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
	}
	else {
		if (bnrg_expansion_board == IDB05A1) {
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10f      	bne.n	80006d4 <MX_BlueNRG_MS_Init+0x140>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4613      	mov	r3, r2
 80006c4:	2207      	movs	r2, #7
 80006c6:	2100      	movs	r1, #0
 80006c8:	2004      	movs	r0, #4
 80006ca:	f003 fedd 	bl	8004488 <aci_gap_init_IDB05A1>
 80006ce:	4603      	mov	r3, r0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	e009      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 010a 	add.w	r1, r7, #10
 80006de:	2003      	movs	r0, #3
 80006e0:	f003 ff22 	bl	8004528 <aci_gap_init_IDB04A1>
 80006e4:	4603      	mov	r3, r0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (ret != BLE_STATUS_SUCCESS) {
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <MX_BlueNRG_MS_Init+0x160>
		printf("GAP_Init failed.\n");
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <MX_BlueNRG_MS_Init+0x1f8>)
 80006f0:	f005 fc30 	bl	8005f54 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006f4:	2301      	movs	r3, #1
 80006f6:	9303      	str	r3, [sp, #12]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_BlueNRG_MS_Init+0x1fc>)
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2310      	movs	r3, #16
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2307      	movs	r3, #7
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f004 f840 	bl	8004790 <aci_gap_set_auth_requirement>
 8000710:	4603      	mov	r3, r0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <MX_BlueNRG_MS_Init+0x18c>
		printf("BLE Stack Initialized.\n");
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <MX_BlueNRG_MS_Init+0x200>)
 800071c:	f005 fc1a 	bl	8005f54 <puts>
	}

	if (BLE_Role == SERVER) {
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d111      	bne.n	800074c <MX_BlueNRG_MS_Init+0x1b8>
		printf("SERVER: BLE Stack Initialized\n");
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_BlueNRG_MS_Init+0x204>)
 800072a:	f005 fc13 	bl	8005f54 <puts>
		ret = Add_Sample_Service();
 800072e:	f000 f9fb 	bl	8000b28 <Add_Sample_Service>
 8000732:	4603      	mov	r3, r0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24

		if (ret == BLE_STATUS_SUCCESS)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <MX_BlueNRG_MS_Init+0x1b0>
			printf("Service added successfully.\n");
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <MX_BlueNRG_MS_Init+0x208>)
 800073e:	f005 fc09 	bl	8005f54 <puts>
 8000742:	e006      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>
		else
			printf("Error while adding service.\n");
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_BlueNRG_MS_Init+0x20c>)
 8000746:	f005 fc05 	bl	8005f54 <puts>
 800074a:	e002      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>

	} else {
		printf("CLIENT: BLE Stack Initialized\n");
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_BlueNRG_MS_Init+0x210>)
 800074e:	f005 fc01 	bl	8005f54 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 8000752:	2104      	movs	r1, #4
 8000754:	2001      	movs	r0, #1
 8000756:	f004 fbab 	bl	8004eb0 <aci_hal_set_tx_power_level>
 800075a:	4603      	mov	r3, r0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	08006b68 	.word	0x08006b68
 800076c:	08006b70 	.word	0x08006b70
 8000770:	20000000 	.word	0x20000000
 8000774:	08001109 	.word	0x08001109
 8000778:	08006a7c 	.word	0x08006a7c
 800077c:	200000c0 	.word	0x200000c0
 8000780:	20000001 	.word	0x20000001
 8000784:	08006a90 	.word	0x08006a90
 8000788:	08006ab0 	.word	0x08006ab0
 800078c:	08006ac4 	.word	0x08006ac4
 8000790:	0001e240 	.word	0x0001e240
 8000794:	08006ad8 	.word	0x08006ad8
 8000798:	08006af0 	.word	0x08006af0
 800079c:	08006b10 	.word	0x08006b10
 80007a0:	08006b2c 	.word	0x08006b2c
 80007a4:	08006b48 	.word	0x08006b48

080007a8 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	/* USER CODE END BlueNRG_MS_Process_PreTreatment */

	User_Process();
 80007ac:	f000 f92e 	bl	8000a0c <User_Process>
	hci_user_evt_proc();
 80007b0:	f004 feb6 	bl	8005520 <hci_user_evt_proc>


	/* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

	/* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 fc24 	bl	800200c <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fb8b 	bl	8001ee0 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fcd4 	bl	8002178 <BSP_COM_Init>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <modem_at_cmd>:
 *         between a client and a server.
 *
 * @param  None
 * @retval None
 */
void modem_at_cmd(char* buffer, int n){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0; i<n; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	75fb      	strb	r3, [r7, #23]
 80007e2:	e010      	b.n	8000806 <modem_at_cmd+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer+i, 1, 100);
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	18d1      	adds	r1, r2, r3
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <modem_at_cmd+0xa0>)
 80007f0:	f003 fa33 	bl	8003c5a <HAL_UART_Transmit>
		//printf("tx: %c\n",buffer[i]);
		HAL_UART_Receive(&huart1, &c, 1, 100);
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2201      	movs	r2, #1
 80007f8:	491f      	ldr	r1, [pc, #124]	; (8000878 <modem_at_cmd+0xa4>)
 80007fa:	481e      	ldr	r0, [pc, #120]	; (8000874 <modem_at_cmd+0xa0>)
 80007fc:	f003 fabf 	bl	8003d7e <HAL_UART_Receive>
	for(uint8_t i=0; i<n; i++) {
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	3301      	adds	r3, #1
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	dcea      	bgt.n	80007e4 <modem_at_cmd+0x10>
		//printf("rx: %c\n",c);
	}

	//	memset(response,0,sizeof(response));
	char tredici='\r';
 800080e:	230d      	movs	r3, #13
 8000810:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tredici, 1, 100);
 8000812:	f107 010f 	add.w	r1, r7, #15
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2201      	movs	r2, #1
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <modem_at_cmd+0xa0>)
 800081c:	f003 fa1d 	bl	8003c5a <HAL_UART_Transmit>
	//	printf("tx: %c\n",tredici);
	HAL_UART_Receive(&huart1, &c, 1, 100);
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4914      	ldr	r1, [pc, #80]	; (8000878 <modem_at_cmd+0xa4>)
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <modem_at_cmd+0xa0>)
 8000828:	f003 faa9 	bl	8003d7e <HAL_UART_Receive>
	//	printf("rx: %c\n",c);
	int i=0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
	memset(risposta_uart,0,sizeof(risposta_uart));
 8000830:	2232      	movs	r2, #50	; 0x32
 8000832:	2100      	movs	r1, #0
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <modem_at_cmd+0xa8>)
 8000836:	f005 fa08 	bl	8005c4a <memset>
	do {
		//		if (lora.readable()) {
		HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 100);
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <modem_at_cmd+0xa4>)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <modem_at_cmd+0xa0>)
 8000842:	f003 fa9c 	bl	8003d7e <HAL_UART_Receive>
		//printf("rx: %c",c);
		risposta_uart[i]=c;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <modem_at_cmd+0xa4>)
 8000848:	7819      	ldrb	r1, [r3, #0]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <modem_at_cmd+0xa8>)
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	4413      	add	r3, r2
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
		i++;
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	613b      	str	r3, [r7, #16]

		//	} while(c!='#' && c!='\r'&& c!=' ' && c!='\n');
	} while(c!=' ');
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <modem_at_cmd+0xa4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b20      	cmp	r3, #32
 8000860:	d1eb      	bne.n	800083a <modem_at_cmd+0x66>
	printf("%s",risposta_uart);
 8000862:	4906      	ldr	r1, [pc, #24]	; (800087c <modem_at_cmd+0xa8>)
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <modem_at_cmd+0xac>)
 8000866:	f005 fad9 	bl	8005e1c <iprintf>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000304 	.word	0x20000304
 8000878:	200000c2 	.word	0x200000c2
 800087c:	200000c8 	.word	0x200000c8
 8000880:	08006b78 	.word	0x08006b78

08000884 <wait4join>:

void wait4join(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	memset(risposta_uart,0,sizeof(risposta_uart));
 8000888:	2232      	movs	r2, #50	; 0x32
 800088a:	2100      	movs	r1, #0
 800088c:	4810      	ldr	r0, [pc, #64]	; (80008d0 <wait4join+0x4c>)
 800088e:	f005 f9dc 	bl	8005c4a <memset>
		//		if(HAL_UART_Receive(&huart1, (uint8_t *) &response, 1, 100)){
		//			//        if (lora.readable()) {
		//
		//			printf("response: %s\n",response);
		//		}
		HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 100);
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	2201      	movs	r2, #1
 8000896:	490f      	ldr	r1, [pc, #60]	; (80008d4 <wait4join+0x50>)
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <wait4join+0x54>)
 800089a:	f003 fa70 	bl	8003d7e <HAL_UART_Receive>
		//		printf("rx: %c",c);
		risposta_uart[i]=c;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <wait4join+0x58>)
 80008a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <wait4join+0x50>)
 80008a8:	7819      	ldrb	r1, [r3, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <wait4join+0x4c>)
 80008ac:	5499      	strb	r1, [r3, r2]
		i++;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <wait4join+0x58>)
 80008b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <wait4join+0x58>)
 80008be:	801a      	strh	r2, [r3, #0]
	}while(c!='d');
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <wait4join+0x50>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b64      	cmp	r3, #100	; 0x64
 80008c6:	d1e4      	bne.n	8000892 <wait4join+0xe>
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200000c2 	.word	0x200000c2
 80008d8:	20000304 	.word	0x20000304
 80008dc:	200000c4 	.word	0x200000c4

080008e0 <lora_join>:

void lora_join(){
 80008e0:	b598      	push	{r3, r4, r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	printf("Test seriale no pc\r\n");
 80008e4:	483b      	ldr	r0, [pc, #236]	; (80009d4 <lora_join+0xf4>)
 80008e6:	f005 fb35 	bl	8005f54 <puts>
	modem_at_cmd(msg1,(int)strlen(msg1));
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <lora_join+0xf8>)
 80008ec:	681c      	ldr	r4, [r3, #0]
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <lora_join+0xf8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc74 	bl	80001e0 <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff ff69 	bl	80007d4 <modem_at_cmd>
	printf("Inviato AT\r\n");
 8000902:	4836      	ldr	r0, [pc, #216]	; (80009dc <lora_join+0xfc>)
 8000904:	f005 fb26 	bl	8005f54 <puts>
	HAL_Delay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090c:	f001 fd76 	bl	80023fc <HAL_Delay>
	//  	modem_at_cmd(msg_at_verbose,(int)strlen(msg_at_verbose));
	//	printf("Verbose attivato\r\n");



	HAL_Delay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f001 fd72 	bl	80023fc <HAL_Delay>
	modem_at_cmd(msg6,(int)strlen(msg6));
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <lora_join+0x100>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <lora_join+0x100>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc5d 	bl	80001e0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	4619      	mov	r1, r3
 800092a:	4620      	mov	r0, r4
 800092c:	f7ff ff52 	bl	80007d4 <modem_at_cmd>
	printf("Inviato band\r\n");
 8000930:	482c      	ldr	r0, [pc, #176]	; (80009e4 <lora_join+0x104>)
 8000932:	f005 fb0f 	bl	8005f54 <puts>


	HAL_Delay(1000);
 8000936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093a:	f001 fd5f 	bl	80023fc <HAL_Delay>
	modem_at_cmd(msg2,(int)strlen(msg2));
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <lora_join+0x108>)
 8000940:	681c      	ldr	r4, [r3, #0]
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <lora_join+0x108>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fc4a 	bl	80001e0 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff ff3f 	bl	80007d4 <modem_at_cmd>
	printf("Inviato EUI\r\n");
 8000956:	4825      	ldr	r0, [pc, #148]	; (80009ec <lora_join+0x10c>)
 8000958:	f005 fafc 	bl	8005f54 <puts>
	HAL_Delay(1000);
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f001 fd4c 	bl	80023fc <HAL_Delay>
	//	HAL_Delay(1000);
	//	modem_at_cmd(msg_at_appeui,(int)strlen(msg_at_appeui));
	//	printf("Inviato band\r\n");


	modem_at_cmd(msg3,(int)strlen(msg3));
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <lora_join+0x110>)
 8000966:	681c      	ldr	r4, [r3, #0]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <lora_join+0x110>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc37 	bl	80001e0 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	4619      	mov	r1, r3
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff ff2c 	bl	80007d4 <modem_at_cmd>
	printf("Inviato AK\r\n");
 800097c:	481d      	ldr	r0, [pc, #116]	; (80009f4 <lora_join+0x114>)
 800097e:	f005 fae9 	bl	8005f54 <puts>
	HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000986:	f001 fd39 	bl	80023fc <HAL_Delay>
	modem_at_cmd("AT+DC=0",7);
 800098a:	2107      	movs	r1, #7
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <lora_join+0x118>)
 800098e:	f7ff ff21 	bl	80007d4 <modem_at_cmd>
	printf("Disabled DUTY Cycle\r\n");
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <lora_join+0x11c>)
 8000994:	f005 fade 	bl	8005f54 <puts>
	//  	printf("Enabled ADR\r\n");
	//	    modem_at_cmd(msg9,(int)strlen(msg9));
	//		  	    printf("Inviato JOIN Delay RX1\r\n");
	//		  	    modem_at_cmd(msg10,(int)strlen(msg10));
	//		  	    printf("Inviato JOIN Delay RX2\r\n");
	modem_at_cmd(msg4,(int)strlen(msg4));
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <lora_join+0x120>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <lora_join+0x120>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc1d 	bl	80001e0 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff ff12 	bl	80007d4 <modem_at_cmd>

	printf("Inviato JOIN\r\n");
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <lora_join+0x124>)
 80009b2:	f005 facf 	bl	8005f54 <puts>
	HAL_Delay(1000);
 80009b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ba:	f001 fd1f 	bl	80023fc <HAL_Delay>
	wait4join();
 80009be:	f7ff ff61 	bl	8000884 <wait4join>
	HAL_Delay(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f001 fd19 	bl	80023fc <HAL_Delay>
	printf("Inzialization done\r\n");
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <lora_join+0x128>)
 80009cc:	f005 fac2 	bl	8005f54 <puts>
//	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
//	printf("Inviato msg_ascii\r\n");
	//	HAL_Delay(1000);
}
 80009d0:	bf00      	nop
 80009d2:	bd98      	pop	{r3, r4, r7, pc}
 80009d4:	08006b7c 	.word	0x08006b7c
 80009d8:	20000004 	.word	0x20000004
 80009dc:	08006b90 	.word	0x08006b90
 80009e0:	20000014 	.word	0x20000014
 80009e4:	08006b9c 	.word	0x08006b9c
 80009e8:	20000008 	.word	0x20000008
 80009ec:	08006bac 	.word	0x08006bac
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	08006bbc 	.word	0x08006bbc
 80009f8:	08006bc8 	.word	0x08006bc8
 80009fc:	08006bd0 	.word	0x08006bd0
 8000a00:	20000010 	.word	0x20000010
 8000a04:	08006be8 	.word	0x08006be8
 8000a08:	08006bf8 	.word	0x08006bf8

08000a0c <User_Process>:
void lora_send(char * msg_ascii){
	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
	printf("Inviato send msg_not_ascii\r\n");
}
static void User_Process(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	if (set_connectable)
 8000a10:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <User_Process+0xdc>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00d      	beq.n	8000a36 <User_Process+0x2a>
	{
		/* Establish connection with remote device */
		Make_Connection();
 8000a1a:	f000 f8f7 	bl	8000c0c <Make_Connection>
		lora_join();
 8000a1e:	f7ff ff5f 	bl	80008e0 <lora_join>
		set_connectable = FALSE;
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <User_Process+0xdc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fb43 	bl	80020b4 <BSP_PB_GetState>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <User_Process+0xe0>)
 8000a34:	701a      	strb	r2, [r3, #0]

	}

	if (BLE_Role == CLIENT)
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <User_Process+0xe4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d12e      	bne.n	8000a9c <User_Process+0x90>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <User_Process+0xe8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <User_Process+0x4a>
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <User_Process+0xec>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <User_Process+0x4a>
			startReadTXCharHandle();
 8000a50:	f000 f946 	bl	8000ce0 <startReadTXCharHandle>
 8000a54:	e00a      	b.n	8000a6c <User_Process+0x60>
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <User_Process+0xe8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <User_Process+0x60>
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <User_Process+0xf0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <User_Process+0x60>
			startReadRXCharHandle();
 8000a68:	f000 f960 	bl	8000d2c <startReadRXCharHandle>
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <User_Process+0xe8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <User_Process+0x90>
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <User_Process+0xec>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00e      	beq.n	8000a9c <User_Process+0x90>
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <User_Process+0xf0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d009      	beq.n	8000a9c <User_Process+0x90>
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <User_Process+0xf4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <User_Process+0x90>
		{
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000a92:	2000      	movs	r0, #0
 8000a94:	f001 fa4c 	bl	8001f30 <BSP_LED_Off>
			enableNotification();
 8000a98:	f000 fa60 	bl	8000f5c <enableNotification>
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed)
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <User_Process+0xf8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01d      	beq.n	8000ae2 <User_Process+0xd6>
	{
		/* Debouncing */
		HAL_Delay(50);
 8000aa6:	2032      	movs	r0, #50	; 0x32
 8000aa8:	f001 fca8 	bl	80023fc <HAL_Delay>

		/* Wait until the User Button is released */
		while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000aac:	bf00      	nop
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f001 fb00 	bl	80020b4 <BSP_PB_GetState>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <User_Process+0xe0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf0c      	ite	eq
 8000ac0:	2301      	moveq	r3, #1
 8000ac2:	2300      	movne	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d0f1      	beq.n	8000aae <User_Process+0xa2>

		/* Debouncing */
		HAL_Delay(50);
 8000aca:	2032      	movs	r0, #50	; 0x32
 8000acc:	f001 fc96 	bl	80023fc <HAL_Delay>

		if (connected && notification_enabled)
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <User_Process+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <User_Process+0xd0>
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <User_Process+0xf4>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
			 * is called in main().
			 * E.g. it can be enabled for debugging. */
		}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <User_Process+0xf8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000001 	.word	0x20000001
 8000af4:	200001e4 	.word	0x200001e4
 8000af8:	200001ed 	.word	0x200001ed
 8000afc:	200001ee 	.word	0x200001ee
 8000b00:	200001ea 	.word	0x200001ea
 8000b04:	200000c1 	.word	0x200000c1

08000b08 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	/* Set the User Button flag */
	user_button_pressed = 1;
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <BSP_PB_Callback+0x1c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200000c1 	.word	0x200000c1

08000b28 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b095      	sub	sp, #84	; 0x54
 8000b2c:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <Add_Sample_Service+0xcc>)
 8000b30:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <Add_Sample_Service+0xd0>)
 8000b3c:	f107 0414 	add.w	r4, r7, #20
 8000b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <Add_Sample_Service+0xd4>)
 8000b48:	1d3c      	adds	r4, r7, #4
 8000b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000b50:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <Add_Sample_Service+0xd8>)
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2307      	movs	r3, #7
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f003 fee5 	bl	800492c <aci_gatt_add_serv>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000b68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d136      	bne.n	8000bde <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <Add_Sample_Service+0xd8>)
 8000b72:	8818      	ldrh	r0, [r3, #0]
 8000b74:	f107 0214 	add.w	r2, r7, #20
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <Add_Sample_Service+0xdc>)
 8000b7a:	9305      	str	r3, [sp, #20]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9304      	str	r3, [sp, #16]
 8000b80:	2310      	movs	r3, #16
 8000b82:	9303      	str	r3, [sp, #12]
 8000b84:	2300      	movs	r3, #0
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2314      	movs	r3, #20
 8000b92:	2102      	movs	r1, #2
 8000b94:	f003 ff53 	bl	8004a3e <aci_gatt_add_char>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d11d      	bne.n	8000be2 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <Add_Sample_Service+0xd8>)
 8000ba8:	8818      	ldrh	r0, [r3, #0]
 8000baa:	1d3a      	adds	r2, r7, #4
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <Add_Sample_Service+0xe0>)
 8000bae:	9305      	str	r3, [sp, #20]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9304      	str	r3, [sp, #16]
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	f003 ff39 	bl	8004a3e <aci_gatt_add_char>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e005      	b.n	8000bea <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000bde:	bf00      	nop
 8000be0:	e002      	b.n	8000be8 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000be2:	bf00      	nop
 8000be4:	e000      	b.n	8000be8 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000be6:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000be8:	2347      	movs	r3, #71	; 0x47
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	373c      	adds	r7, #60	; 0x3c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08006c48 	.word	0x08006c48
 8000bf8:	08006c58 	.word	0x08006c58
 8000bfc:	08006c68 	.word	0x08006c68
 8000c00:	200001f4 	.word	0x200001f4
 8000c04:	200001f6 	.word	0x200001f6
 8000c08:	200001f8 	.word	0x200001f8

08000c0c <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08f      	sub	sp, #60	; 0x3c
 8000c10:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <Make_Connection+0xc0>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d132      	bne.n	8000c80 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8000c1a:	482d      	ldr	r0, [pc, #180]	; (8000cd0 <Make_Connection+0xc4>)
 8000c1c:	f005 f99a 	bl	8005f54 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000c20:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <Make_Connection+0xc8>)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	6018      	str	r0, [r3, #0]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000c30:	2000      	movs	r0, #0
 8000c32:	f001 f967 	bl	8001f04 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c3e:	9206      	str	r2, [sp, #24]
 8000c40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c44:	9205      	str	r2, [sp, #20]
 8000c46:	223c      	movs	r2, #60	; 0x3c
 8000c48:	9204      	str	r2, [sp, #16]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	9203      	str	r2, [sp, #12]
 8000c4e:	2228      	movs	r2, #40	; 0x28
 8000c50:	9202      	str	r2, [sp, #8]
 8000c52:	2228      	movs	r2, #40	; 0x28
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c64:	f003 fdeb 	bl	800483e <aci_gap_create_connection>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d027      	beq.n	8000cc2 <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 8000c72:	4819      	ldr	r0, [pc, #100]	; (8000cd8 <Make_Connection+0xcc>)
 8000c74:	f005 f96e 	bl	8005f54 <puts>
      HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	; 0x64
 8000c7a:	f001 fbbf 	bl	80023fc <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000c7e:	e020      	b.n	8000cc2 <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <Make_Connection+0xd0>)
 8000c82:	463c      	mov	r4, r7
 8000c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c86:	c407      	stmia	r4!, {r0, r1, r2}
 8000c88:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f004 f9f0 	bl	8005072 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000c92:	2300      	movs	r3, #0
 8000c94:	9306      	str	r3, [sp, #24]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9305      	str	r3, [sp, #20]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9304      	str	r3, [sp, #16]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9303      	str	r3, [sp, #12]
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	230d      	movs	r3, #13
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f003 fc7f 	bl	80045bc <aci_gap_set_discoverable>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	75fb      	strb	r3, [r7, #23]
}
 8000cc2:	bf00      	nop
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000001 	.word	0x20000001
 8000cd0:	08006c78 	.word	0x08006c78
 8000cd4:	08006cb8 	.word	0x08006cb8
 8000cd8:	08006c94 	.word	0x08006c94
 8000cdc:	08006cc0 	.word	0x08006cc0

08000ce0 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <startReadTXCharHandle+0x40>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d112      	bne.n	8000d16 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <startReadTXCharHandle+0x44>)
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <startReadTXCharHandle+0x48>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	463b      	mov	r3, r7
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2302      	movs	r3, #2
 8000d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	f003 ff62 	bl	8004bd4 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <startReadTXCharHandle+0x40>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
  }
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001eb 	.word	0x200001eb
 8000d24:	08006c58 	.word	0x08006c58
 8000d28:	200001e8 	.word	0x200001e8

08000d2c <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <startReadRXCharHandle+0x40>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d112      	bne.n	8000d62 <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <startReadRXCharHandle+0x44>)
 8000d3e:	463c      	mov	r4, r7
 8000d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <startReadRXCharHandle+0x48>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b298      	uxth	r0, r3
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2302      	movs	r3, #2
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	2101      	movs	r1, #1
 8000d58:	f003 ff3c 	bl	8004bd4 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <startReadRXCharHandle+0x40>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
  }
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001ec 	.word	0x200001ec
 8000d70:	08006c68 	.word	0x08006c68
 8000d74:	200001e8 	.word	0x200001e8

08000d78 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f001 f8e9 	bl	8001f5c <BSP_LED_Toggle>
  printf("Messaggio ricevuto\n\r");
 8000d8a:	4837      	ldr	r0, [pc, #220]	; (8000e68 <receiveData+0xf0>)
 8000d8c:	f005 f846 	bl	8005e1c <iprintf>
  for(int i = 0; i < Nb_bytes; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e009      	b.n	8000daa <receiveData+0x32>
    printf("%c", data_buffer[i]);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 f854 	bl	8005e4c <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf1      	blt.n	8000d96 <receiveData+0x1e>
//
//  	printf("Inviato JOIN\r\n");
//  	HAL_Delay(1000);
//  	wait4join();
//  	HAL_Delay(1000);
  modem_at_cmd2(msg_ascii_2,(int)strlen(msg_ascii_2));
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <receiveData+0xf4>)
 8000db4:	681c      	ldr	r4, [r3, #0]
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <receiveData+0xf4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fa10 	bl	80001e0 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f000 f861 	bl	8000e8c <modem_at_cmd2>
  printf("Inviato send msg_not_ascii\r\n");
 8000dca:	4829      	ldr	r0, [pc, #164]	; (8000e70 <receiveData+0xf8>)
 8000dcc:	f005 f8c2 	bl	8005f54 <puts>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	4827      	ldr	r0, [pc, #156]	; (8000e74 <receiveData+0xfc>)
 8000dd8:	f001 ff18 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f001 fb0d 	bl	80023fc <HAL_Delay>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4822      	ldr	r0, [pc, #136]	; (8000e74 <receiveData+0xfc>)
 8000dea:	f001 ff0f 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f001 fb04 	bl	80023fc <HAL_Delay>
  HAL_UART_Receive (&huart6, read_buf, 180, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	22b4      	movs	r2, #180	; 0xb4
 8000dfa:	491f      	ldr	r1, [pc, #124]	; (8000e78 <receiveData+0x100>)
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <receiveData+0x104>)
 8000dfe:	f002 ffbe 	bl	8003d7e <HAL_UART_Receive>
  		//HAL_Delay(1);

  		for (int i = 0; i < 180; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e021      	b.n	8000e4c <receiveData+0xd4>
  			if (read_buf[i] == 'N') {
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <receiveData+0x100>)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b4e      	cmp	r3, #78	; 0x4e
 8000e12:	d107      	bne.n	8000e24 <receiveData+0xac>
  				// Trovato il carattere 'N'
  				//found = 1;

  				//HAL_UART_Transmit(&huart2, read_buf + i - 11, 12, 1000);
  				printf("%s \n\r",read_buf + i - 11);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3b0b      	subs	r3, #11
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <receiveData+0x100>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <receiveData+0x108>)
 8000e20:	f004 fffc 	bl	8005e1c <iprintf>
  				//Console_Write("\r\n");
  				// break;
  			}
  			if (read_buf[i] == 'E') {
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <receiveData+0x100>)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b45      	cmp	r3, #69	; 0x45
 8000e2e:	d10a      	bne.n	8000e46 <receiveData+0xce>
  				// Trovato il carattere 'N'
  				//found = 1;

  				HAL_UART_Transmit(&huart2, read_buf + i - 11, 12, 1000);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b0b      	subs	r3, #11
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <receiveData+0x100>)
 8000e36:	1899      	adds	r1, r3, r2
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <receiveData+0x10c>)
 8000e40:	f002 ff0b 	bl	8003c5a <HAL_UART_Transmit>
  				//Console_Write("\r\n");
  				break;
 8000e44:	e005      	b.n	8000e52 <receiveData+0xda>
  		for (int i = 0; i < 180; i++) {
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2bb3      	cmp	r3, #179	; 0xb3
 8000e50:	ddda      	ble.n	8000e08 <receiveData+0x90>
  			}
  		}


  fflush(stdout);
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <receiveData+0x110>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fdb9 	bl	80059d0 <fflush>
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08006cd0 	.word	0x08006cd0
 8000e6c:	20000018 	.word	0x20000018
 8000e70:	08006ce8 	.word	0x08006ce8
 8000e74:	40020400 	.word	0x40020400
 8000e78:	20000130 	.word	0x20000130
 8000e7c:	20000348 	.word	0x20000348
 8000e80:	08006d04 	.word	0x08006d04
 8000e84:	200003ec 	.word	0x200003ec
 8000e88:	20000040 	.word	0x20000040

08000e8c <modem_at_cmd2>:

void modem_at_cmd2(char* buffer, int n){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0; i<n; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
 8000e9a:	e010      	b.n	8000ebe <modem_at_cmd2+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer+i, 1, 100);
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4828      	ldr	r0, [pc, #160]	; (8000f48 <modem_at_cmd2+0xbc>)
 8000ea8:	f002 fed7 	bl	8003c5a <HAL_UART_Transmit>
		//printf("tx: %c\n",buffer[i]);
		HAL_UART_Receive(&huart1, &c2, 1, 100);
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4926      	ldr	r1, [pc, #152]	; (8000f4c <modem_at_cmd2+0xc0>)
 8000eb2:	4825      	ldr	r0, [pc, #148]	; (8000f48 <modem_at_cmd2+0xbc>)
 8000eb4:	f002 ff63 	bl	8003d7e <HAL_UART_Receive>
	for(uint8_t i=0; i<n; i++) {
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dcea      	bgt.n	8000e9c <modem_at_cmd2+0x10>
		//printf("rx: %c\n",c);
	}

	//	memset(response,0,sizeof(response));
	char tredici='\r';
 8000ec6:	230d      	movs	r3, #13
 8000ec8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tredici, 1, 100);
 8000eca:	f107 010f 	add.w	r1, r7, #15
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	481d      	ldr	r0, [pc, #116]	; (8000f48 <modem_at_cmd2+0xbc>)
 8000ed4:	f002 fec1 	bl	8003c5a <HAL_UART_Transmit>
	//	printf("tx: %c\n",tredici);
	HAL_UART_Receive(&huart1, &c2, 1, 100);
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	2201      	movs	r2, #1
 8000edc:	491b      	ldr	r1, [pc, #108]	; (8000f4c <modem_at_cmd2+0xc0>)
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <modem_at_cmd2+0xbc>)
 8000ee0:	f002 ff4d 	bl	8003d7e <HAL_UART_Receive>
	//	printf("rx: %c\n",c);
	int i=0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
	memset(risposta_uart2,0,sizeof(risposta_uart2));
 8000ee8:	2232      	movs	r2, #50	; 0x32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <modem_at_cmd2+0xc4>)
 8000eee:	f004 feac 	bl	8005c4a <memset>
	do {
		//		if (lora.readable()) {
		HAL_UART_Receive(&huart1,(uint8_t *) &c2, 1, 100);
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4915      	ldr	r1, [pc, #84]	; (8000f4c <modem_at_cmd2+0xc0>)
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <modem_at_cmd2+0xbc>)
 8000efa:	f002 ff40 	bl	8003d7e <HAL_UART_Receive>
		//printf("rx: %c",c);
		risposta_uart2[i]=c2;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <modem_at_cmd2+0xc0>)
 8000f00:	7819      	ldrb	r1, [r3, #0]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <modem_at_cmd2+0xc4>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4413      	add	r3, r2
 8000f08:	460a      	mov	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
		i=i%49;
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <modem_at_cmd2+0xc8>)
 8000f16:	fb83 2301 	smull	r2, r3, r3, r1
 8000f1a:	111a      	asrs	r2, r3, #4
 8000f1c:	17cb      	asrs	r3, r1, #31
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	00da      	lsls	r2, r3, #3
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	1a8b      	subs	r3, r1, r2
 8000f2c:	613b      	str	r3, [r7, #16]

		//	} while(c!='#' && c!='\r'&& c!=' ' && c!='\n');
	} while(c2!=' ');
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <modem_at_cmd2+0xc0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d1dd      	bne.n	8000ef2 <modem_at_cmd2+0x66>
	printf("%s",risposta_uart2);
 8000f36:	4906      	ldr	r1, [pc, #24]	; (8000f50 <modem_at_cmd2+0xc4>)
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <modem_at_cmd2+0xcc>)
 8000f3a:	f004 ff6f 	bl	8005e1c <iprintf>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000304 	.word	0x20000304
 8000f4c:	200000fa 	.word	0x200000fa
 8000f50:	200000fc 	.word	0x200000fc
 8000f54:	5397829d 	.word	0x5397829d
 8000f58:	08006d0c 	.word	0x08006d0c

08000f5c <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000f62:	2301      	movs	r3, #1
 8000f64:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000f66:	f001 fa3d 	bl	80023e4 <HAL_GetTick>
 8000f6a:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000f6c:	e008      	b.n	8000f80 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000f6e:	f001 fa39 	bl	80023e4 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d80e      	bhi.n	8000f9e <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <enableNotification+0x54>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	b298      	uxth	r0, r3
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <enableNotification+0x58>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2202      	movs	r2, #2
 8000f92:	f003 fead 	bl	8004cf0 <aci_gatt_write_charac_descriptor>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b46      	cmp	r3, #70	; 0x46
 8000f9a:	d0e8      	beq.n	8000f6e <enableNotification+0x12>
 8000f9c:	e000      	b.n	8000fa0 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000f9e:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <enableNotification+0x5c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001e8 	.word	0x200001e8
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	200001ea 	.word	0x200001ea

08000fbc <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	603a      	str	r2, [r7, #0]
 8000fc6:	80fb      	strh	r3, [r7, #6]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000fcc:	88fa      	ldrh	r2, [r7, #6]
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <Attribute_Modified_CB+0x4c>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d105      	bne.n	8000fe4 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f7ff fecb 	bl	8000d78 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000fe2:	e00c      	b.n	8000ffe <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <Attribute_Modified_CB+0x50>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	3302      	adds	r3, #2
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d106      	bne.n	8000ffe <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <Attribute_Modified_CB+0x54>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f8 	.word	0x200001f8
 800100c:	200001f6 	.word	0x200001f6
 8001010:	200001ea 	.word	0x200001ea

08001014 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <GAP_ConnectionComplete_CB+0x54>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <GAP_ConnectionComplete_CB+0x58>)
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <GAP_ConnectionComplete_CB+0x5c>)
 800102e:	f004 fef5 	bl	8005e1c <iprintf>
  for(int i = 5; i > 0; i--){
 8001032:	2305      	movs	r3, #5
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e00a      	b.n	800104e <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <GAP_ConnectionComplete_CB+0x60>)
 8001044:	f004 feea 	bl	8005e1c <iprintf>
  for(int i = 5; i > 0; i--){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dcf1      	bgt.n	8001038 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <GAP_ConnectionComplete_CB+0x64>)
 800105c:	f004 fede 	bl	8005e1c <iprintf>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001e4 	.word	0x200001e4
 800106c:	200001e8 	.word	0x200001e8
 8001070:	08006d10 	.word	0x08006d10
 8001074:	08006d28 	.word	0x08006d28
 8001078:	08006d30 	.word	0x08006d30

0800107c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <GAP_DisconnectionComplete_CB+0x38>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <GAP_DisconnectionComplete_CB+0x3c>)
 8001088:	f004 ff64 	bl	8005f54 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <GAP_DisconnectionComplete_CB+0x40>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <GAP_DisconnectionComplete_CB+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <GAP_DisconnectionComplete_CB+0x48>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <GAP_DisconnectionComplete_CB+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <GAP_DisconnectionComplete_CB+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <GAP_DisconnectionComplete_CB+0x54>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001e4 	.word	0x200001e4
 80010b8:	08006d38 	.word	0x08006d38
 80010bc:	2000001c 	.word	0x2000001c
 80010c0:	200001ea 	.word	0x200001ea
 80010c4:	200001eb 	.word	0x200001eb
 80010c8:	200001ec 	.word	0x200001ec
 80010cc:	200001ed 	.word	0x200001ed
 80010d0:	200001ee 	.word	0x200001ee

080010d4 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	460b      	mov	r3, r1
 80010e2:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <GATT_Notification_CB+0x30>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d104      	bne.n	80010fa <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff fe3f 	bl	8000d78 <receiveData>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f0 	.word	0x200001f0

08001108 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	3301      	adds	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	f040 80e2 	bne.w	80012e8 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8001124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2bff      	cmp	r3, #255	; 0xff
 800112a:	d021      	beq.n	8001170 <user_notify+0x68>
 800112c:	2bff      	cmp	r3, #255	; 0xff
 800112e:	f300 80e0 	bgt.w	80012f2 <user_notify+0x1ea>
 8001132:	2b05      	cmp	r3, #5
 8001134:	d002      	beq.n	800113c <user_notify+0x34>
 8001136:	2b3e      	cmp	r3, #62	; 0x3e
 8001138:	d003      	beq.n	8001142 <user_notify+0x3a>
 800113a:	e0da      	b.n	80012f2 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800113c:	f7ff ff9e 	bl	800107c <GAP_DisconnectionComplete_CB>
    }
    break;
 8001140:	e0d7      	b.n	80012f2 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	3302      	adds	r3, #2
 8001146:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	f040 80cd 	bne.w	80012ec <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1d5a      	adds	r2, r3, #5
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	4610      	mov	r0, r2
 8001168:	f7ff ff54 	bl	8001014 <GAP_ConnectionComplete_CB>
        }
        break;
 800116c:	bf00      	nop
      }
    }
    break;
 800116e:	e0bd      	b.n	80012ec <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	3302      	adds	r3, #2
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001180:	2b11      	cmp	r3, #17
 8001182:	f200 80b5 	bhi.w	80012f0 <user_notify+0x1e8>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <user_notify+0x84>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011d5 	.word	0x080011d5
 8001190:	080012f1 	.word	0x080012f1
 8001194:	080012f1 	.word	0x080012f1
 8001198:	080012f1 	.word	0x080012f1
 800119c:	080012f1 	.word	0x080012f1
 80011a0:	080012f1 	.word	0x080012f1
 80011a4:	080012f1 	.word	0x080012f1
 80011a8:	080012f1 	.word	0x080012f1
 80011ac:	080012f1 	.word	0x080012f1
 80011b0:	080012f1 	.word	0x080012f1
 80011b4:	080012f1 	.word	0x080012f1
 80011b8:	080012f1 	.word	0x080012f1
 80011bc:	080012f1 	.word	0x080012f1
 80011c0:	080012f1 	.word	0x080012f1
 80011c4:	08001215 	.word	0x08001215
 80011c8:	080012a1 	.word	0x080012a1
 80011cc:	080012f1 	.word	0x080012f1
 80011d0:	08001237 	.word	0x08001237

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <user_notify+0x1f0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10d      	bne.n	80011f8 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	3302      	adds	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	885b      	ldrh	r3, [r3, #2]
 80011e6:	b298      	uxth	r0, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	7919      	ldrb	r1, [r3, #4]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3307      	adds	r3, #7
 80011f0:	461a      	mov	r2, r3
 80011f2:	f7ff fee3 	bl	8000fbc <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 80011f6:	e076      	b.n	80012e6 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3302      	adds	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	885b      	ldrh	r3, [r3, #2]
 8001202:	b298      	uxth	r0, r3
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	7919      	ldrb	r1, [r3, #4]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	3305      	adds	r3, #5
 800120c:	461a      	mov	r2, r3
 800120e:	f7ff fed5 	bl	8000fbc <Attribute_Modified_CB>
        break;
 8001212:	e068      	b.n	80012e6 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	3302      	adds	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001220:	b298      	uxth	r0, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	789b      	ldrb	r3, [r3, #2]
 8001226:	3b02      	subs	r3, #2
 8001228:	b2d9      	uxtb	r1, r3
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3305      	adds	r3, #5
 800122e:	461a      	mov	r2, r3
 8001230:	f7ff ff50 	bl	80010d4 <GATT_Notification_CB>
        }
        break;
 8001234:	e057      	b.n	80012e6 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <user_notify+0x1f4>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d150      	bne.n	80012e0 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	3302      	adds	r3, #2
 8001242:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <user_notify+0x1f8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d011      	beq.n	8001272 <user_notify+0x16a>
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <user_notify+0x1fc>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <user_notify+0x200>)
 8001262:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <user_notify+0x200>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4828      	ldr	r0, [pc, #160]	; (800130c <user_notify+0x204>)
 800126c:	f004 fdd6 	bl	8005e1c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001270:	e036      	b.n	80012e0 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <user_notify+0x208>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d031      	beq.n	80012e0 <user_notify+0x1d8>
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <user_notify+0x20c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12c      	bne.n	80012e0 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <user_notify+0x210>)
 8001290:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <user_notify+0x210>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <user_notify+0x214>)
 800129a:	f004 fdbf 	bl	8005e1c <iprintf>
        break;
 800129e:	e01f      	b.n	80012e0 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <user_notify+0x1f4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11d      	bne.n	80012e4 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <user_notify+0x1f8>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <user_notify+0x1bc>
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <user_notify+0x1fc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <user_notify+0x1fc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 80012c2:	e00f      	b.n	80012e4 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <user_notify+0x208>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <user_notify+0x1dc>
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <user_notify+0x20c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <user_notify+0x20c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
        break;
 80012de:	e001      	b.n	80012e4 <user_notify+0x1dc>
        break;
 80012e0:	bf00      	nop
 80012e2:	e005      	b.n	80012f0 <user_notify+0x1e8>
        break;
 80012e4:	bf00      	nop
      }
    }
    break;
 80012e6:	e003      	b.n	80012f0 <user_notify+0x1e8>
    return;
 80012e8:	bf00      	nop
 80012ea:	e002      	b.n	80012f2 <user_notify+0x1ea>
    break;
 80012ec:	bf00      	nop
 80012ee:	e000      	b.n	80012f2 <user_notify+0x1ea>
    break;
 80012f0:	bf00      	nop
  }
}
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000c0 	.word	0x200000c0
 80012fc:	20000001 	.word	0x20000001
 8001300:	200001eb 	.word	0x200001eb
 8001304:	200001ed 	.word	0x200001ed
 8001308:	200001f0 	.word	0x200001f0
 800130c:	08006d48 	.word	0x08006d48
 8001310:	200001ec 	.word	0x200001ec
 8001314:	200001ee 	.word	0x200001ee
 8001318:	200001f2 	.word	0x200001f2
 800131c:	08006d60 	.word	0x08006d60

08001320 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HCI_TL_SPI_Init+0x88>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HCI_TL_SPI_Init+0x88>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HCI_TL_SPI_Init+0x88>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001344:	2301      	movs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001348:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <HCI_TL_SPI_Init+0x8c>)
 800135a:	f001 f9d7 	bl	800270c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <HCI_TL_SPI_Init+0x8c>)
 8001378:	f001 f9c8 	bl	800270c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800137c:	2302      	movs	r3, #2
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <HCI_TL_SPI_Init+0x8c>)
 8001394:	f001 f9ba 	bl	800270c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8001398:	f000 fbc6 	bl	8001b28 <BSP_SPI1_Init>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80013b4:	2101      	movs	r1, #1
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HCI_TL_SPI_DeInit+0x24>)
 80013b8:	f001 fb2c 	bl	8002a14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80013bc:	2102      	movs	r1, #2
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HCI_TL_SPI_DeInit+0x24>)
 80013c0:	f001 fb28 	bl	8002a14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <HCI_TL_SPI_DeInit+0x24>)
 80013ca:	f001 fb23 	bl	8002a14 <HAL_GPIO_DeInit>
  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020000 	.word	0x40020000

080013d8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2102      	movs	r1, #2
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <HCI_TL_SPI_Reset+0x38>)
 80013e2:	f001 fc13 	bl	8002c0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <HCI_TL_SPI_Reset+0x38>)
 80013ee:	f001 fc0d 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f001 f802 	bl	80023fc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <HCI_TL_SPI_Reset+0x38>)
 8001400:	f001 fc04 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001404:	2005      	movs	r0, #5
 8001406:	f000 fff9 	bl	80023fc <HAL_Delay>
  return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020000 	.word	0x40020000

08001414 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001424:	23ff      	movs	r3, #255	; 0xff
 8001426:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <HCI_TL_SPI_Receive+0xac>)
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001432:	6018      	str	r0, [r3, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <HCI_TL_SPI_Receive+0xb0>)
 800143e:	f001 fbe5 	bl	8002c0c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001442:	f107 010c 	add.w	r1, r7, #12
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2205      	movs	r2, #5
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fb9b 	bl	8001b88 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d129      	bne.n	80014ac <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001458:	7c3b      	ldrb	r3, [r7, #16]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001468:	8bfb      	ldrh	r3, [r7, #30]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01e      	beq.n	80014ac <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800146e:	8bfa      	ldrh	r2, [r7, #30]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	429a      	cmp	r2, r3
 8001474:	d901      	bls.n	800147a <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800147a:	2300      	movs	r3, #0
 800147c:	777b      	strb	r3, [r7, #29]
 800147e:	e010      	b.n	80014a2 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001480:	f107 011b 	add.w	r1, r7, #27
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2201      	movs	r2, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fb7c 	bl	8001b88 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001490:	7f7b      	ldrb	r3, [r7, #29]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	7efa      	ldrb	r2, [r7, #27]
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800149c:	7f7b      	ldrb	r3, [r7, #29]
 800149e:	3301      	adds	r3, #1
 80014a0:	777b      	strb	r3, [r7, #29]
 80014a2:	7f7b      	ldrb	r3, [r7, #29]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	8bfa      	ldrh	r2, [r7, #30]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8e9      	bhi.n	8001480 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2102      	movs	r1, #2
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <HCI_TL_SPI_Receive+0xb0>)
 80014b2:	f001 fbab 	bl	8002c0c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80014b6:	7f7b      	ldrb	r3, [r7, #29]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08006d78 	.word	0x08006d78
 80014c4:	40020000 	.word	0x40020000

080014c8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HCI_TL_SPI_Send+0x9c>)
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014de:	6018      	str	r0, [r3, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f000 ff7e 	bl	80023e4 <HAL_GetTick>
 80014e8:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2102      	movs	r1, #2
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <HCI_TL_SPI_Send+0xa0>)
 80014f4:	f001 fb8a 	bl	8002c0c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80014f8:	f107 0108 	add.w	r1, r7, #8
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2205      	movs	r2, #5
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fb40 	bl	8001b88 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d10f      	bne.n	800152e <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800150e:	7a7b      	ldrb	r3, [r7, #9]
 8001510:	b29b      	uxth	r3, r3
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	429a      	cmp	r2, r3
 8001516:	d806      	bhi.n	8001526 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	461a      	mov	r2, r3
 800151c:	4913      	ldr	r1, [pc, #76]	; (800156c <HCI_TL_SPI_Send+0xa4>)
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fb32 	bl	8001b88 <BSP_SPI1_SendRecv>
 8001524:	e006      	b.n	8001534 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001526:	f06f 0301 	mvn.w	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e002      	b.n	8001534 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2102      	movs	r1, #2
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <HCI_TL_SPI_Send+0xa0>)
 800153a:	f001 fb67 	bl	8002c0c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800153e:	f000 ff51 	bl	80023e4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d903      	bls.n	8001554 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 800154c:	f06f 0302 	mvn.w	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
      break;
 8001552:	e002      	b.n	800155a <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dbc7      	blt.n	80014ea <HCI_TL_SPI_Send+0x22>

  return result;
 800155a:	69fb      	ldr	r3, [r7, #28]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	08006d80 	.word	0x08006d80
 8001568:	40020000 	.word	0x40020000
 800156c:	20000204 	.word	0x20000204

08001570 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001574:	2101      	movs	r1, #1
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <IsDataAvailable+0x1c>)
 8001578:	f001 fb30 	bl	8002bdc <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020000 	.word	0x40020000

08001590 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <hci_tl_lowlevel_init+0x54>)
 8001598:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <hci_tl_lowlevel_init+0x58>)
 800159c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <hci_tl_lowlevel_init+0x5c>)
 80015a0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <hci_tl_lowlevel_init+0x60>)
 80015a4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <hci_tl_lowlevel_init+0x64>)
 80015a8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <hci_tl_lowlevel_init+0x68>)
 80015ac:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fe7b 	bl	80052ac <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80015b6:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <hci_tl_lowlevel_init+0x6c>)
 80015bc:	f001 f86d 	bl	800269a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <hci_tl_lowlevel_init+0x70>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <hci_tl_lowlevel_init+0x6c>)
 80015c6:	f001 f84e 	bl	8002666 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2006      	movs	r0, #6
 80015d0:	f001 f813 	bl	80025fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015d4:	2006      	movs	r0, #6
 80015d6:	f001 f82c 	bl	8002632 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	08001321 	.word	0x08001321
 80015e8:	080013b1 	.word	0x080013b1
 80015ec:	080014c9 	.word	0x080014c9
 80015f0:	08001415 	.word	0x08001415
 80015f4:	080013d9 	.word	0x080013d9
 80015f8:	08001bc9 	.word	0x08001bc9
 80015fc:	200001fc 	.word	0x200001fc
 8001600:	08001605 	.word	0x08001605

08001604 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001608:	e005      	b.n	8001616 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800160a:	2000      	movs	r0, #0
 800160c:	f003 ffb4 	bl	8005578 <hci_notify_asynch_evt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001616:	f7ff ffab 	bl	8001570 <IsDataAvailable>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f4      	bne.n	800160a <hci_tl_lowlevel_isr+0x6>
 8001620:	e000      	b.n	8001624 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001622:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f000 fe74 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f81c 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 f8da 	bl	80017ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001638:	f000 f884 	bl	8001744 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800163c:	f000 f8ac 	bl	8001798 <MX_USART6_UART_Init>
  MX_BlueNRG_MS_Init();
 8001640:	f7fe ffa8 	bl	8000594 <MX_BlueNRG_MS_Init>
//	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
//	printf("Inviato send msg_not_ascii\r\n");
//
//	printf("Initialization..\r\n");

	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <main+0x40>)
 800164c:	f001 fade 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 fed3 	bl	80023fc <HAL_Delay>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <main+0x40>)
 800165e:	f001 fad5 	bl	8002c0c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001662:	f7ff f8a1 	bl	80007a8 <MX_BlueNRG_MS_Process>
 8001666:	e7fc      	b.n	8001662 <main+0x3a>
 8001668:	40020400 	.word	0x40020400

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fae5 	bl	8005c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <SystemClock_Config+0xd0>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a28      	ldr	r2, [pc, #160]	; (800173c <SystemClock_Config+0xd0>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <SystemClock_Config+0xd0>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <SystemClock_Config+0xd4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <SystemClock_Config+0xd4>)
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <SystemClock_Config+0xd4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d4:	2310      	movs	r3, #16
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d8:	2302      	movs	r3, #2
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016e0:	2310      	movs	r3, #16
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016ea:	2304      	movs	r3, #4
 80016ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ee:	2307      	movs	r3, #7
 80016f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fabc 	bl	8002c74 <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001702:	f000 f907 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001706:	230f      	movs	r3, #15
 8001708:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	2302      	movs	r3, #2
 800170c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fd1e 	bl	8003164 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800172e:	f000 f8f1 	bl	8001914 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_USART1_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART1_UART_Init+0x4c>)
 800177c:	f002 fa20 	bl	8003bc0 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f000 f8c5 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000304 	.word	0x20000304
 8001794:	40011000 	.word	0x40011000

08001798 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_USART6_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART6_UART_Init+0x4c>)
 80017d0:	f002 f9f6 	bl	8003bc0 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f89b 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000348 	.word	0x20000348
 80017e8:	40011400 	.word	0x40011400

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b40      	ldr	r3, [pc, #256]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <MX_GPIO_Init+0x11c>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <MX_GPIO_Init+0x11c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_GPIO_Init+0x11c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a2a      	ldr	r2, [pc, #168]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <MX_GPIO_Init+0x11c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f240 3102 	movw	r1, #770	; 0x302
 8001878:	4824      	ldr	r0, [pc, #144]	; (800190c <MX_GPIO_Init+0x120>)
 800187a:	f001 f9c7 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001884:	4822      	ldr	r0, [pc, #136]	; (8001910 <MX_GPIO_Init+0x124>)
 8001886:	f001 f9c1 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	481b      	ldr	r0, [pc, #108]	; (800190c <MX_GPIO_Init+0x120>)
 80018a0:	f000 ff34 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 80018a4:	f240 3302 	movw	r3, #770	; 0x302
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_GPIO_Init+0x120>)
 80018be:	f000 ff25 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80018c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_GPIO_Init+0x124>)
 80018dc:	f000 ff16 	bl	800270c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2006      	movs	r0, #6
 80018e6:	f000 fe88 	bl	80025fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018ea:	2006      	movs	r0, #6
 80018ec:	f000 fea1 	bl	8002632 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2028      	movs	r0, #40	; 0x28
 80018f6:	f000 fe80 	bl	80025fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018fa:	2028      	movs	r0, #40	; 0x28
 80018fc:	f000 fe99 	bl	8002632 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195e:	2007      	movs	r0, #7
 8001960:	f000 fe40 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a41      	ldr	r2, [pc, #260]	; (8001a94 <HAL_UART_MspInit+0x124>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d14b      	bne.n	8001a2a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_UART_MspInit+0x128>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_UART_MspInit+0x128>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f8:	2307      	movs	r3, #7
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4826      	ldr	r0, [pc, #152]	; (8001a9c <HAL_UART_MspInit+0x12c>)
 8001a04:	f000 fe82 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <HAL_UART_MspInit+0x130>)
 8001a24:	f000 fe72 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a28:	e030      	b.n	8001a8c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x134>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d12b      	bne.n	8001a8c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a3e:	f043 0320 	orr.w	r3, r3, #32
 8001a42:	6453      	str	r3, [r2, #68]	; 0x44
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_UART_MspInit+0x128>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a6c:	23c0      	movs	r3, #192	; 0xc0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <HAL_UART_MspInit+0x138>)
 8001a88:	f000 fe40 	bl	800270c <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40011400 	.word	0x40011400
 8001aa8:	40020800 	.word	0x40020800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 fc60 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <EXTI0_IRQHandler+0x10>)
 8001b06:	f000 fddd 	bl	80026c4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200001fc 	.word	0x200001fc

08001b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <EXTI15_10_IRQHandler+0x10>)
 8001b1a:	f000 fdd3 	bl	80026c4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000002c 	.word	0x2000002c

08001b28 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <BSP_SPI1_Init+0x54>)
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <BSP_SPI1_Init+0x58>)
 8001b36:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <BSP_SPI1_Init+0x5c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	4911      	ldr	r1, [pc, #68]	; (8001b84 <BSP_SPI1_Init+0x5c>)
 8001b40:	600a      	str	r2, [r1, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d114      	bne.n	8001b70 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <BSP_SPI1_Init+0x54>)
 8001b48:	f001 ff61 	bl	8003a0e <HAL_SPI_GetState>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <BSP_SPI1_Init+0x54>)
 8001b54:	f000 f87c 	bl	8001c50 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <BSP_SPI1_Init+0x54>)
 8001b60:	f000 f83a 	bl	8001bd8 <MX_SPI1_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b6a:	f06f 0307 	mvn.w	r3, #7
 8001b6e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000038c 	.word	0x2000038c
 8001b80:	40013000 	.word	0x40013000
 8001b84:	200003e4 	.word	0x200003e4

08001b88 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba0:	9200      	str	r2, [sp, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <BSP_SPI1_SendRecv+0x3c>)
 8001ba8:	f001 fd8f 	bl	80036ca <HAL_SPI_TransmitReceive>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001bb2:	f06f 0305 	mvn.w	r3, #5
 8001bb6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001bb8:	697b      	ldr	r3, [r7, #20]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000038c 	.word	0x2000038c

08001bc8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001bcc:	f000 fc0a 	bl	80023e4 <HAL_GetTick>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2218      	movs	r2, #24
 8001c16:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f001 fcb7 	bl	80035a4 <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40013000 	.word	0x40013000

08001c50 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c66:	6453      	str	r3, [r2, #68]	; 0x44
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <SPI1_MspInit+0xc4>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001cac:	2340      	movs	r3, #64	; 0x40
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4814      	ldr	r0, [pc, #80]	; (8001d18 <SPI1_MspInit+0xc8>)
 8001cc8:	f000 fd20 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <SPI1_MspInit+0xc8>)
 8001ce8:	f000 fd10 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001cec:	2308      	movs	r3, #8
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <SPI1_MspInit+0xcc>)
 8001d08:	f000 fd00 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400

08001d20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
  }

  return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e009      	b.n	8001d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fa6b 	bl	8002250 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf1      	blt.n	8001d6c <_write+0x12>
  }
  return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_close>:

int _close(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dba:	605a      	str	r2, [r3, #4]
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_isatty>:

int _isatty(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f003 fd08 	bl	8005840 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20018000 	.word	0x20018000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	200003e8 	.word	0x200003e8
 8001e64:	20000738 	.word	0x20000738

08001e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea8:	4c0b      	ldr	r4, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ffd7 	bl	8001e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 fe91 	bl	8005be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fbb3 	bl	8001628 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001ed0:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8001ed4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001ed8:	20000734 	.word	0x20000734

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <BSP_LED_Init+0x20>)
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08006da0 	.word	0x08006da0

08001f04 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <BSP_LED_On+0x28>)
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	2120      	movs	r1, #32
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe76 	bl	8002c0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000024 	.word	0x20000024

08001f30 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <BSP_LED_Off+0x28>)
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	2120      	movs	r1, #32
 8001f44:	2200      	movs	r2, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fe60 	bl	8002c0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000024 	.word	0x20000024

08001f5c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <BSP_LED_Toggle+0x28>)
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fe63 	bl	8002c3e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000024 	.word	0x20000024

08001f88 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <LED_USER_GPIO_Init+0x7c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2120      	movs	r1, #32
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <LED_USER_GPIO_Init+0x80>)
 8001fdc:	f000 fe16 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <LED_USER_GPIO_Init+0x80>)
 8001ff8:	f000 fb88 	bl	800270c <HAL_GPIO_Init>

}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000

0800200c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	460a      	mov	r2, r1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	4613      	mov	r3, r2
 800201a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <BSP_PB_Init+0x94>)
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d132      	bne.n	8002096 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <BSP_PB_Init+0x98>)
 8002036:	441a      	add	r2, r3
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <BSP_PB_Init+0x9c>)
 800203c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 fb29 	bl	800269a <HAL_EXTI_GetHandle>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800204e:	f06f 0303 	mvn.w	r3, #3
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e01f      	b.n	8002096 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <BSP_PB_Init+0x98>)
 800205c:	1898      	adds	r0, r3, r2
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <BSP_PB_Init+0xa0>)
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	461a      	mov	r2, r3
 8002068:	2100      	movs	r1, #0
 800206a:	f000 fafc 	bl	8002666 <HAL_EXTI_RegisterCallback>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002074:	f06f 0303 	mvn.w	r3, #3
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e00c      	b.n	8002096 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800207c:	2028      	movs	r0, #40	; 0x28
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <BSP_PB_Init+0xa4>)
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	2200      	movs	r2, #0
 8002088:	4619      	mov	r1, r3
 800208a:	f000 fab6 	bl	80025fa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800208e:	2328      	movs	r3, #40	; 0x28
 8002090:	4618      	mov	r0, r3
 8002092:	f000 face 	bl	8002632 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	08006da4 	.word	0x08006da4
 80020a4:	2000002c 	.word	0x2000002c
 80020a8:	08006da8 	.word	0x08006da8
 80020ac:	08006dac 	.word	0x08006dac
 80020b0:	08006db0 	.word	0x08006db0

080020b4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <BSP_PB_GetState+0x34>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fd85 	bl	8002bdc <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000028 	.word	0x20000028

080020ec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7fe fd09 	bl	8000b08 <BSP_PB_Callback>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a19      	ldr	r2, [pc, #100]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <BUTTON_USER_GPIO_Init+0x74>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800214a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002150:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <BUTTON_USER_GPIO_Init+0x78>)
 8002162:	f000 fad3 	bl	800270c <HAL_GPIO_Init>

}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40020800 	.word	0x40020800

08002178 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d903      	bls.n	8002194 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800218c:	f06f 0301 	mvn.w	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e025      	b.n	80021e0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	4914      	ldr	r1, [pc, #80]	; (80021ec <BSP_COM_Init+0x74>)
 800219a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <BSP_COM_Init+0x78>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4403      	add	r3, r0
 80021aa:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80021ac:	79fa      	ldrb	r2, [r7, #7]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <BSP_COM_Init+0x78>)
 80021b8:	4413      	add	r3, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f864 	bl	8002288 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <BSP_COM_Init+0x78>)
 80021cc:	4413      	add	r3, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f810 	bl	80021f4 <MX_USART2_UART_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80021da:	f06f 0303 	mvn.w	r3, #3
 80021de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000034 	.word	0x20000034
 80021f0:	200003ec 	.word	0x200003ec

080021f4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <MX_USART2_UART_Init+0x58>)
 8002204:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f001 fcc4 	bl	8003bc0 <HAL_UART_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004400 	.word	0x40004400

08002250 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <__io_putchar+0x30>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <__io_putchar+0x34>)
 8002268:	1898      	adds	r0, r3, r2
 800226a:	1d39      	adds	r1, r7, #4
 800226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002270:	2201      	movs	r2, #1
 8002272:	f001 fcf2 	bl	8003c5a <HAL_UART_Transmit>
  return ch;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000430 	.word	0x20000430
 8002284:	200003ec 	.word	0x200003ec

08002288 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <USART2_MspInit+0x88>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <USART2_MspInit+0x88>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <USART2_MspInit+0x88>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <USART2_MspInit+0x88>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <USART2_MspInit+0x88>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <USART2_MspInit+0x88>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80022c8:	2304      	movs	r3, #4
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80022d8:	2307      	movs	r3, #7
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <USART2_MspInit+0x8c>)
 80022e4:	f000 fa12 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80022e8:	2308      	movs	r3, #8
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80022f8:	2307      	movs	r3, #7
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4804      	ldr	r0, [pc, #16]	; (8002314 <USART2_MspInit+0x8c>)
 8002304:	f000 fa02 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_Init+0x40>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_Init+0x40>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_Init+0x40>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f94f 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	2000      	movs	r0, #0
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fae8 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f967 	bl	800264e <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 f92f 	bl	80025fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000020 	.word	0x20000020
 80023b4:	2000003c 	.word	0x2000003c
 80023b8:	20000038 	.word	0x20000038

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000003c 	.word	0x2000003c
 80023e0:	20000434 	.word	0x20000434

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000434 	.word	0x20000434

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff ffee 	bl	80023e4 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffde 	bl	80023e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000003c 	.word	0x2000003c

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <__NVIC_EnableIRQ+0x38>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b0:	d301      	bcc.n	80025b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00f      	b.n	80025d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <SysTick_Config+0x40>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025be:	210f      	movs	r1, #15
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f7ff ff8e 	bl	80024e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <SysTick_Config+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SysTick_Config+0x40>)
 80025d0:	2207      	movs	r2, #7
 80025d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff29 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800260c:	f7ff ff3e 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7ff ff8e 	bl	8002538 <NVIC_EncodePriority>
 800261c:	4602      	mov	r2, r0
 800261e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff5d 	bl	80024e4 <__NVIC_SetPriority>
}
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff31 	bl	80024a8 <__NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffa2 	bl	80025a0 <SysTick_Config>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	460b      	mov	r3, r1
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]
      break;
 8002684:	e002      	b.n	800268c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
      break;
 800268a:	bf00      	nop
  }

  return status;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
}
 800268e:	4618      	mov	r0, r3
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e003      	b.n	80026b6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2201      	movs	r2, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_EXTI_IRQHandler+0x44>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <HAL_EXTI_IRQHandler+0x44>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4798      	blx	r3
    }
  }
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e159      	b.n	80029dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 8148 	bne.w	80029d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d005      	beq.n	800275e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	2b02      	cmp	r3, #2
 800275c:	d130      	bne.n	80027c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0201 	and.w	r2, r3, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d017      	beq.n	80027fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a2 	beq.w	80029d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_GPIO_Init+0x2e8>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_GPIO_Init+0x2e8>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <HAL_GPIO_Init+0x2e8>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x2ec>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a49      	ldr	r2, [pc, #292]	; (80029fc <HAL_GPIO_Init+0x2f0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <HAL_GPIO_Init+0x202>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <HAL_GPIO_Init+0x2f4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0x1fe>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a47      	ldr	r2, [pc, #284]	; (8002a04 <HAL_GPIO_Init+0x2f8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_Init+0x1fa>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a46      	ldr	r2, [pc, #280]	; (8002a08 <HAL_GPIO_Init+0x2fc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x1f6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a45      	ldr	r2, [pc, #276]	; (8002a0c <HAL_GPIO_Init+0x300>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_Init+0x1f2>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_Init+0x204>
 80028fe:	2307      	movs	r3, #7
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x204>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_Init+0x204>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_Init+0x204>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x204>
 800290e:	2300      	movs	r3, #0
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002920:	4935      	ldr	r1, [pc, #212]	; (80029f8 <HAL_GPIO_Init+0x2ec>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_GPIO_Init+0x304>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <HAL_GPIO_Init+0x304>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_GPIO_Init+0x304>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_GPIO_Init+0x304>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_GPIO_Init+0x304>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d0:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	f67f aea2 	bls.w	8002728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40013c00 	.word	0x40013c00

08002a14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e0bb      	b.n	8002ba8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a30:	2201      	movs	r2, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f040 80ab 	bne.w	8002ba2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a4c:	4a5c      	ldr	r2, [pc, #368]	; (8002bc0 <HAL_GPIO_DeInit+0x1ac>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <HAL_GPIO_DeInit+0x1b0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_DeInit+0x96>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a53      	ldr	r2, [pc, #332]	; (8002bc8 <HAL_GPIO_DeInit+0x1b4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_DeInit+0x92>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_GPIO_DeInit+0x1b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_DeInit+0x8e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_GPIO_DeInit+0x1bc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_DeInit+0x8a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_GPIO_DeInit+0x1c0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_DeInit+0x86>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_DeInit+0x98>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_DeInit+0x98>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_DeInit+0x98>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_DeInit+0x98>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_DeInit+0x98>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d132      	bne.n	8002b22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4944      	ldr	r1, [pc, #272]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4941      	ldr	r1, [pc, #260]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	493d      	ldr	r1, [pc, #244]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	493a      	ldr	r1, [pc, #232]	; (8002bd8 <HAL_GPIO_DeInit+0x1c4>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b04:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <HAL_GPIO_DeInit+0x1ac>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	482a      	ldr	r0, [pc, #168]	; (8002bc0 <HAL_GPIO_DeInit+0x1ac>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2103      	movs	r1, #3
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	08d2      	lsrs	r2, r2, #3
 8002b58:	4019      	ands	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2103      	movs	r1, #3
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	f67f af40 	bls.w	8002a30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40020c00 	.word	0x40020c00
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40013c00 	.word	0x40013c00

08002bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e001      	b.n	8002bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	041a      	lsls	r2, r3, #16
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	400b      	ands	r3, r1
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e267      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d075      	beq.n	8002d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d112      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d05b      	beq.n	8002d7c <HAL_RCC_OscConfig+0x108>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d157      	bne.n	8002d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e242      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d106      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x74>
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a75      	ldr	r2, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0xb0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x98>
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6f      	ldr	r2, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a68      	ldr	r2, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fb5a 	bl	80023e4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d34:	f7ff fb56 	bl	80023e4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e207      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0xc0>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7ff fb46 	bl	80023e4 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7ff fb42 	bl	80023e4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1f3      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0xe8>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x152>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1c7      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4937      	ldr	r1, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	e03a      	b.n	8002e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_RCC_OscConfig+0x244>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7ff fafb 	bl	80023e4 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7ff faf7 	bl	80023e4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a8      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4925      	ldr	r1, [pc, #148]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_OscConfig+0x244>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fada 	bl	80023e4 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e34:	f7ff fad6 	bl	80023e4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e187      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d036      	beq.n	8002ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_RCC_OscConfig+0x248>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7ff faba 	bl	80023e4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e74:	f7ff fab6 	bl	80023e4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e167      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x200>
 8002e92:	e01b      	b.n	8002ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_OscConfig+0x248>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7ff faa3 	bl	80023e4 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	e00e      	b.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7ff fa9f 	bl	80023e4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d907      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e150      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ea      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8097 	beq.w	8003008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b74      	ldr	r3, [pc, #464]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fa5f 	bl	80023e4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7ff fa5b 	bl	80023e4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e10c      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2ea>
 8002f50:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a63      	ldr	r2, [pc, #396]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x324>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x30c>
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0x324>
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a54      	ldr	r2, [pc, #336]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0304 	bic.w	r3, r3, #4
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fa20 	bl	80023e4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7ff fa1c 	bl	80023e4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0cb      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ee      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x334>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fcc:	f7ff fa0a 	bl	80023e4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff fa06 	bl	80023e4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0b5      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ee      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003006:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80a1 	beq.w	8003154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d05c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d141      	bne.n	80030aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff f9da 	bl	80023e4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7ff f9d6 	bl	80023e4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e087      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	491b      	ldr	r1, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7ff f9af 	bl	80023e4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308a:	f7ff f9ab 	bl	80023e4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e05c      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x416>
 80030a8:	e054      	b.n	8003154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7ff f998 	bl	80023e4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b8:	f7ff f994 	bl	80023e4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e045      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x444>
 80030d6:	e03d      	b.n	8003154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e038      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x4ec>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d028      	beq.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d121      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003128:	4293      	cmp	r3, r2
 800312a:	d111      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	3b01      	subs	r3, #1
 800313a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0cc      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d90c      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b8      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d044      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d119      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	2b03      	cmp	r3, #3
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e067      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7ff f8c6 	bl	80023e4 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7ff f8c2 	bl	80023e4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e04f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d20c      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e032      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f821 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f826 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00
 8003320:	40023800 	.word	0x40023800
 8003324:	08006d88 	.word	0x08006d88
 8003328:	20000020 	.word	0x20000020
 800332c:	20000038 	.word	0x20000038

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b094      	sub	sp, #80	; 0x50
 8003336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
 800333c:	2300      	movs	r3, #0
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	2300      	movs	r3, #0
 8003342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003348:	4b79      	ldr	r3, [pc, #484]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d00d      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x40>
 8003354:	2b08      	cmp	r3, #8
 8003356:	f200 80e1 	bhi.w	800351c <HAL_RCC_GetSysClockFreq+0x1ec>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x34>
 800335e:	2b04      	cmp	r3, #4
 8003360:	d003      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x3a>
 8003362:	e0db      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b73      	ldr	r3, [pc, #460]	; (8003534 <HAL_RCC_GetSysClockFreq+0x204>)
 8003366:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003368:	e0db      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800336a:	4b73      	ldr	r3, [pc, #460]	; (8003538 <HAL_RCC_GetSysClockFreq+0x208>)
 800336c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336e:	e0d8      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003370:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800337a:	4b6d      	ldr	r3, [pc, #436]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d063      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003386:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	2200      	movs	r2, #0
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
 800339e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033a2:	4622      	mov	r2, r4
 80033a4:	462b      	mov	r3, r5
 80033a6:	f04f 0000 	mov.w	r0, #0
 80033aa:	f04f 0100 	mov.w	r1, #0
 80033ae:	0159      	lsls	r1, r3, #5
 80033b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b4:	0150      	lsls	r0, r2, #5
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4621      	mov	r1, r4
 80033bc:	1a51      	subs	r1, r2, r1
 80033be:	6139      	str	r1, [r7, #16]
 80033c0:	4629      	mov	r1, r5
 80033c2:	eb63 0301 	sbc.w	r3, r3, r1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033d4:	4659      	mov	r1, fp
 80033d6:	018b      	lsls	r3, r1, #6
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033de:	4651      	mov	r1, sl
 80033e0:	018a      	lsls	r2, r1, #6
 80033e2:	4651      	mov	r1, sl
 80033e4:	ebb2 0801 	subs.w	r8, r2, r1
 80033e8:	4659      	mov	r1, fp
 80033ea:	eb63 0901 	sbc.w	r9, r3, r1
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003402:	4690      	mov	r8, r2
 8003404:	4699      	mov	r9, r3
 8003406:	4623      	mov	r3, r4
 8003408:	eb18 0303 	adds.w	r3, r8, r3
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	462b      	mov	r3, r5
 8003410:	eb49 0303 	adc.w	r3, r9, r3
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003422:	4629      	mov	r1, r5
 8003424:	024b      	lsls	r3, r1, #9
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800342c:	4621      	mov	r1, r4
 800342e:	024a      	lsls	r2, r1, #9
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003436:	2200      	movs	r2, #0
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
 800343a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003440:	f7fc ff26 	bl	8000290 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344c:	e058      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	2200      	movs	r2, #0
 8003456:	4618      	mov	r0, r3
 8003458:	4611      	mov	r1, r2
 800345a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	f04f 0000 	mov.w	r0, #0
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	0159      	lsls	r1, r3, #5
 8003476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347a:	0150      	lsls	r0, r2, #5
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4641      	mov	r1, r8
 8003482:	ebb2 0a01 	subs.w	sl, r2, r1
 8003486:	4649      	mov	r1, r9
 8003488:	eb63 0b01 	sbc.w	fp, r3, r1
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800349c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034a0:	ebb2 040a 	subs.w	r4, r2, sl
 80034a4:	eb63 050b 	sbc.w	r5, r3, fp
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	00eb      	lsls	r3, r5, #3
 80034b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b6:	00e2      	lsls	r2, r4, #3
 80034b8:	4614      	mov	r4, r2
 80034ba:	461d      	mov	r5, r3
 80034bc:	4643      	mov	r3, r8
 80034be:	18e3      	adds	r3, r4, r3
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	464b      	mov	r3, r9
 80034c4:	eb45 0303 	adc.w	r3, r5, r3
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034d6:	4629      	mov	r1, r5
 80034d8:	028b      	lsls	r3, r1, #10
 80034da:	4621      	mov	r1, r4
 80034dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e0:	4621      	mov	r1, r4
 80034e2:	028a      	lsls	r2, r1, #10
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	2200      	movs	r2, #0
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	61fa      	str	r2, [r7, #28]
 80034f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f4:	f7fc fecc 	bl	8000290 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4613      	mov	r3, r2
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_GetSysClockFreq+0x200>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	3301      	adds	r3, #1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351a:	e002      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetSysClockFreq+0x204>)
 800351e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003524:	4618      	mov	r0, r3
 8003526:	3750      	adds	r7, #80	; 0x50
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	00f42400 	.word	0x00f42400
 8003538:	007a1200 	.word	0x007a1200

0800353c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_GetHCLKFreq+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000020 	.word	0x20000020

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003558:	f7ff fff0 	bl	800353c <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0a9b      	lsrs	r3, r3, #10
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4903      	ldr	r1, [pc, #12]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	08006d98 	.word	0x08006d98

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003580:	f7ff ffdc 	bl	800353c <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0b5b      	lsrs	r3, r3, #13
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	08006d98 	.word	0x08006d98

080035a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07b      	b.n	80036ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c6:	d009      	beq.n	80035dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
 80035ce:	e005      	b.n	80035dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f85d 	bl	80036b6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	ea42 0103 	orr.w	r1, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	f003 0104 	and.w	r1, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0210 	and.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b08c      	sub	sp, #48	; 0x30
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x26>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e18a      	b.n	8003a06 <HAL_SPI_TransmitReceive+0x33c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f8:	f7fe fe74 	bl	80023e4 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003716:	2b01      	cmp	r3, #1
 8003718:	d00f      	beq.n	800373a <HAL_SPI_TransmitReceive+0x70>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003720:	d107      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x68>
 800372a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800372e:	2b04      	cmp	r3, #4
 8003730:	d003      	beq.n	800373a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003738:	e15b      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_SPI_TransmitReceive+0x82>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_SPI_TransmitReceive+0x82>
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003752:	e14e      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b04      	cmp	r3, #4
 800375e:	d003      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2205      	movs	r2, #5
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d007      	beq.n	80037bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c4:	d178      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x10a>
 80037ce:	8b7b      	ldrh	r3, [r7, #26]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d166      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f8:	e053      	b.n	80038a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11b      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x176>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x176>
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d113      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d119      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x1b8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d014      	beq.n	8003882 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	b292      	uxth	r2, r2
 8003864:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	1c9a      	adds	r2, r3, #2
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800387e:	2301      	movs	r3, #1
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003882:	f7fe fdaf 	bl	80023e4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388e:	429a      	cmp	r2, r3
 8003890:	d807      	bhi.n	80038a2 <HAL_SPI_TransmitReceive+0x1d8>
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d003      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038a0:	e0a7      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1a6      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x130>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1a1      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x130>
 80038b6:	e07c      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_TransmitReceive+0x1fc>
 80038c0:	8b7b      	ldrh	r3, [r7, #26]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d16b      	bne.n	800399e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ec:	e057      	b.n	800399e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d11c      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x26c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x26c>
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d114      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d119      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x2ae>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d014      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003978:	f7fe fd34 	bl	80023e4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003984:	429a      	cmp	r2, r3
 8003986:	d803      	bhi.n	8003990 <HAL_SPI_TransmitReceive+0x2c6>
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d102      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x2cc>
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800399c:	e029      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1a2      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x224>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d19d      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8c0 	bl	8003b3c <SPI_EndRxTxTransaction>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039ce:	e010      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	e000      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1c:	b2db      	uxtb	r3, r3
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a3c:	f7fe fcd2 	bl	80023e4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a4c:	f7fe fcca 	bl	80023e4 <HAL_GetTick>
 8003a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	015b      	lsls	r3, r3, #5
 8003a58:	0d1b      	lsrs	r3, r3, #20
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a62:	e054      	b.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d050      	beq.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a6c:	f7fe fcba 	bl	80023e4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d902      	bls.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d13d      	bne.n	8003afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9a:	d111      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d004      	beq.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d107      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d10f      	bne.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e017      	b.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d19b      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000020 	.word	0x20000020

08003b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <SPI_EndRxTxTransaction+0x7c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <SPI_EndRxTxTransaction+0x80>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0d5b      	lsrs	r3, r3, #21
 8003b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b58:	fb02 f303 	mul.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b66:	d112      	bne.n	8003b8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff ff5a 	bl	8003a2c <SPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d0f2      	beq.n	8003b8e <SPI_EndRxTxTransaction+0x52>
 8003ba8:	e000      	b.n	8003bac <SPI_EndRxTxTransaction+0x70>
        break;
 8003baa:	bf00      	nop
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000020 	.word	0x20000020
 8003bbc:	165e9f81 	.word	0x165e9f81

08003bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e03f      	b.n	8003c52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fec2 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	; 0x24
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9cb 	bl	8003fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b08a      	sub	sp, #40	; 0x28
 8003c5e:	af02      	add	r7, sp, #8
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d17c      	bne.n	8003d74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_UART_Transmit+0x2c>
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e075      	b.n	8003d76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Transmit+0x3e>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e06e      	b.n	8003d76 <HAL_UART_Transmit+0x11c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2221      	movs	r2, #33	; 0x21
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cae:	f7fe fb99 	bl	80023e4 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d108      	bne.n	8003cdc <HAL_UART_Transmit+0x82>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e003      	b.n	8003ce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cec:	e02a      	b.n	8003d44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f8e2 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e036      	b.n	8003d76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	3302      	adds	r3, #2
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e007      	b.n	8003d36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	3301      	adds	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1cf      	bne.n	8003cee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2140      	movs	r1, #64	; 0x40
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f8b2 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e006      	b.n	8003d76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b08a      	sub	sp, #40	; 0x28
 8003d82:	af02      	add	r7, sp, #8
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	f040 808c 	bne.w	8003eb8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Receive+0x2e>
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e084      	b.n	8003eba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Receive+0x40>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e07d      	b.n	8003eba <HAL_UART_Receive+0x13c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2222      	movs	r2, #34	; 0x22
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dda:	f7fe fb03 	bl	80023e4 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Receive+0x8a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e18:	e043      	b.n	8003ea2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2120      	movs	r1, #32
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f84c 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e042      	b.n	8003eba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10c      	bne.n	8003e54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	3302      	adds	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e01f      	b.n	8003e94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d007      	beq.n	8003e6e <HAL_UART_Receive+0xf0>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_UART_Receive+0xfe>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e008      	b.n	8003e8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1b6      	bne.n	8003e1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b090      	sub	sp, #64	; 0x40
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	e050      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d04c      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee2:	f7fe fa7f 	bl	80023e4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d241      	bcs.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f12:	637a      	str	r2, [r7, #52]	; 0x34
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	613b      	str	r3, [r7, #16]
   return(result);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f46:	623a      	str	r2, [r7, #32]
 8003f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	69f9      	ldr	r1, [r7, #28]
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e00f      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d09f      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3740      	adds	r7, #64	; 0x40
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa4:	b0c0      	sub	sp, #256	; 0x100
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	68d9      	ldr	r1, [r3, #12]
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	ea40 0301 	orr.w	r3, r0, r1
 8003fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ff8:	f021 010c 	bic.w	r1, r1, #12
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004006:	430b      	orrs	r3, r1
 8004008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401a:	6999      	ldr	r1, [r3, #24]
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	ea40 0301 	orr.w	r3, r0, r1
 8004026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8f      	ldr	r3, [pc, #572]	; (800426c <UART_SetConfig+0x2cc>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d005      	beq.n	8004040 <UART_SetConfig+0xa0>
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b8d      	ldr	r3, [pc, #564]	; (8004270 <UART_SetConfig+0x2d0>)
 800403c:	429a      	cmp	r2, r3
 800403e:	d104      	bne.n	800404a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7ff fa9c 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004044:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004048:	e003      	b.n	8004052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800404a:	f7ff fa83 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 800404e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405c:	f040 810c 	bne.w	8004278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004064:	2200      	movs	r2, #0
 8004066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800406a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800406e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	1891      	adds	r1, r2, r2
 8004078:	65b9      	str	r1, [r7, #88]	; 0x58
 800407a:	415b      	adcs	r3, r3
 800407c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800407e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004082:	4621      	mov	r1, r4
 8004084:	eb12 0801 	adds.w	r8, r2, r1
 8004088:	4629      	mov	r1, r5
 800408a:	eb43 0901 	adc.w	r9, r3, r1
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800409a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a2:	4690      	mov	r8, r2
 80040a4:	4699      	mov	r9, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	eb18 0303 	adds.w	r3, r8, r3
 80040ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040b0:	462b      	mov	r3, r5
 80040b2:	eb49 0303 	adc.w	r3, r9, r3
 80040b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040ce:	460b      	mov	r3, r1
 80040d0:	18db      	adds	r3, r3, r3
 80040d2:	653b      	str	r3, [r7, #80]	; 0x50
 80040d4:	4613      	mov	r3, r2
 80040d6:	eb42 0303 	adc.w	r3, r2, r3
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
 80040dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040e4:	f7fc f8d4 	bl	8000290 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <UART_SetConfig+0x2d4>)
 80040ee:	fba3 2302 	umull	r2, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	011c      	lsls	r4, r3, #4
 80040f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004100:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	1891      	adds	r1, r2, r2
 800410e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004110:	415b      	adcs	r3, r3
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004118:	4641      	mov	r1, r8
 800411a:	eb12 0a01 	adds.w	sl, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb43 0b01 	adc.w	fp, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004138:	4692      	mov	sl, r2
 800413a:	469b      	mov	fp, r3
 800413c:	4643      	mov	r3, r8
 800413e:	eb1a 0303 	adds.w	r3, sl, r3
 8004142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004146:	464b      	mov	r3, r9
 8004148:	eb4b 0303 	adc.w	r3, fp, r3
 800414c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800415c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004164:	460b      	mov	r3, r1
 8004166:	18db      	adds	r3, r3, r3
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
 800416a:	4613      	mov	r3, r2
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	647b      	str	r3, [r7, #68]	; 0x44
 8004172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800417a:	f7fc f889 	bl	8000290 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4611      	mov	r1, r2
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <UART_SetConfig+0x2d4>)
 8004186:	fba3 2301 	umull	r2, r3, r3, r1
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2264      	movs	r2, #100	; 0x64
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	1acb      	subs	r3, r1, r3
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <UART_SetConfig+0x2d4>)
 800419c:	fba3 2302 	umull	r2, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a8:	441c      	add	r4, r3
 80041aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	1891      	adds	r1, r2, r2
 80041c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041c4:	415b      	adcs	r3, r3
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041cc:	4641      	mov	r1, r8
 80041ce:	1851      	adds	r1, r2, r1
 80041d0:	6339      	str	r1, [r7, #48]	; 0x30
 80041d2:	4649      	mov	r1, r9
 80041d4:	414b      	adcs	r3, r1
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041e4:	4659      	mov	r1, fp
 80041e6:	00cb      	lsls	r3, r1, #3
 80041e8:	4651      	mov	r1, sl
 80041ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ee:	4651      	mov	r1, sl
 80041f0:	00ca      	lsls	r2, r1, #3
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	4642      	mov	r2, r8
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004200:	464b      	mov	r3, r9
 8004202:	460a      	mov	r2, r1
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004218:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800421c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004220:	460b      	mov	r3, r1
 8004222:	18db      	adds	r3, r3, r3
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	4613      	mov	r3, r2
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004236:	f7fc f82b 	bl	8000290 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <UART_SetConfig+0x2d4>)
 8004240:	fba3 1302 	umull	r1, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	2164      	movs	r1, #100	; 0x64
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3332      	adds	r3, #50	; 0x32
 8004252:	4a08      	ldr	r2, [pc, #32]	; (8004274 <UART_SetConfig+0x2d4>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 0207 	and.w	r2, r3, #7
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4422      	add	r2, r4
 8004266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004268:	e105      	b.n	8004476 <UART_SetConfig+0x4d6>
 800426a:	bf00      	nop
 800426c:	40011000 	.word	0x40011000
 8004270:	40011400 	.word	0x40011400
 8004274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800428a:	4642      	mov	r2, r8
 800428c:	464b      	mov	r3, r9
 800428e:	1891      	adds	r1, r2, r2
 8004290:	6239      	str	r1, [r7, #32]
 8004292:	415b      	adcs	r3, r3
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800429a:	4641      	mov	r1, r8
 800429c:	1854      	adds	r4, r2, r1
 800429e:	4649      	mov	r1, r9
 80042a0:	eb43 0501 	adc.w	r5, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	00eb      	lsls	r3, r5, #3
 80042ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b2:	00e2      	lsls	r2, r4, #3
 80042b4:	4614      	mov	r4, r2
 80042b6:	461d      	mov	r5, r3
 80042b8:	4643      	mov	r3, r8
 80042ba:	18e3      	adds	r3, r4, r3
 80042bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c0:	464b      	mov	r3, r9
 80042c2:	eb45 0303 	adc.w	r3, r5, r3
 80042c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042e6:	4629      	mov	r1, r5
 80042e8:	008b      	lsls	r3, r1, #2
 80042ea:	4621      	mov	r1, r4
 80042ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f0:	4621      	mov	r1, r4
 80042f2:	008a      	lsls	r2, r1, #2
 80042f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042f8:	f7fb ffca 	bl	8000290 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4b60      	ldr	r3, [pc, #384]	; (8004484 <UART_SetConfig+0x4e4>)
 8004302:	fba3 2302 	umull	r2, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	011c      	lsls	r4, r3, #4
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	1891      	adds	r1, r2, r2
 8004322:	61b9      	str	r1, [r7, #24]
 8004324:	415b      	adcs	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800432c:	4641      	mov	r1, r8
 800432e:	1851      	adds	r1, r2, r1
 8004330:	6139      	str	r1, [r7, #16]
 8004332:	4649      	mov	r1, r9
 8004334:	414b      	adcs	r3, r1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004344:	4659      	mov	r1, fp
 8004346:	00cb      	lsls	r3, r1, #3
 8004348:	4651      	mov	r1, sl
 800434a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434e:	4651      	mov	r1, sl
 8004350:	00ca      	lsls	r2, r1, #3
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4603      	mov	r3, r0
 8004358:	4642      	mov	r2, r8
 800435a:	189b      	adds	r3, r3, r2
 800435c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004360:	464b      	mov	r3, r9
 8004362:	460a      	mov	r2, r1
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	67bb      	str	r3, [r7, #120]	; 0x78
 8004376:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004384:	4649      	mov	r1, r9
 8004386:	008b      	lsls	r3, r1, #2
 8004388:	4641      	mov	r1, r8
 800438a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438e:	4641      	mov	r1, r8
 8004390:	008a      	lsls	r2, r1, #2
 8004392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004396:	f7fb ff7b 	bl	8000290 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <UART_SetConfig+0x4e4>)
 80043a0:	fba3 1302 	umull	r1, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2164      	movs	r1, #100	; 0x64
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	3332      	adds	r3, #50	; 0x32
 80043b2:	4a34      	ldr	r2, [pc, #208]	; (8004484 <UART_SetConfig+0x4e4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043be:	441c      	add	r4, r3
 80043c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c4:	2200      	movs	r2, #0
 80043c6:	673b      	str	r3, [r7, #112]	; 0x70
 80043c8:	677a      	str	r2, [r7, #116]	; 0x74
 80043ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043de:	4641      	mov	r1, r8
 80043e0:	1851      	adds	r1, r2, r1
 80043e2:	6039      	str	r1, [r7, #0]
 80043e4:	4649      	mov	r1, r9
 80043e6:	414b      	adcs	r3, r1
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043f6:	4659      	mov	r1, fp
 80043f8:	00cb      	lsls	r3, r1, #3
 80043fa:	4651      	mov	r1, sl
 80043fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004400:	4651      	mov	r1, sl
 8004402:	00ca      	lsls	r2, r1, #3
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	4603      	mov	r3, r0
 800440a:	4642      	mov	r2, r8
 800440c:	189b      	adds	r3, r3, r2
 800440e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	663b      	str	r3, [r7, #96]	; 0x60
 8004424:	667a      	str	r2, [r7, #100]	; 0x64
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004432:	4649      	mov	r1, r9
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	4641      	mov	r1, r8
 8004438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800443c:	4641      	mov	r1, r8
 800443e:	008a      	lsls	r2, r1, #2
 8004440:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004444:	f7fb ff24 	bl	8000290 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <UART_SetConfig+0x4e4>)
 800444e:	fba3 1302 	umull	r1, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2164      	movs	r1, #100	; 0x64
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	; 0x32
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <UART_SetConfig+0x4e4>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4422      	add	r2, r4
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	bf00      	nop
 8004478:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	51eb851f 	.word	0x51eb851f

08004488 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	460b      	mov	r3, r1
 8004496:	71bb      	strb	r3, [r7, #6]
 8004498:	4613      	mov	r3, r2
 800449a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80044a0:	79bb      	ldrb	r3, [r7, #6]
 80044a2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80044a4:	797b      	ldrb	r3, [r7, #5]
 80044a6:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	2207      	movs	r2, #7
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 fbca 	bl	8005c4a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80044b6:	f107 0318 	add.w	r3, r7, #24
 80044ba:	2218      	movs	r2, #24
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fbc3 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80044c4:	233f      	movs	r3, #63	; 0x3f
 80044c6:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80044c8:	238a      	movs	r3, #138	; 0x8a
 80044ca:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80044d2:	2303      	movs	r3, #3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80044dc:	2307      	movs	r3, #7
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80044e0:	f107 0318 	add.w	r3, r7, #24
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 ff00 	bl	80052ec <hci_send_req>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da01      	bge.n	80044f6 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80044f2:	23ff      	movs	r3, #255	; 0xff
 80044f4:	e014      	b.n	8004520 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80044f6:	7b3b      	ldrb	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80044fc:	7b3b      	ldrb	r3, [r7, #12]
 80044fe:	e00f      	b.n	8004520 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004500:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8004504:	b29a      	uxth	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800450a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800450e:	b29a      	uxth	r2, r3
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004514:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8004518:	b29a      	uxth	r2, r3
 800451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af00      	add	r7, sp, #0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	2207      	movs	r2, #7
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fb80 	bl	8005c4a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800454a:	f107 0320 	add.w	r3, r7, #32
 800454e:	2218      	movs	r2, #24
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fb79 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004558:	233f      	movs	r3, #63	; 0x3f
 800455a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800455c:	238a      	movs	r3, #138	; 0x8a
 800455e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8004566:	2301      	movs	r3, #1
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8004570:	2307      	movs	r3, #7
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004574:	f107 0320 	add.w	r3, r7, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 feb6 	bl	80052ec <hci_send_req>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	da01      	bge.n	800458a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8004586:	23ff      	movs	r3, #255	; 0xff
 8004588:	e014      	b.n	80045b4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800458a:	7d3b      	ldrb	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8004590:	7d3b      	ldrb	r3, [r7, #20]
 8004592:	e00f      	b.n	80045b4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004594:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8004598:	b29a      	uxth	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800459e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80045a8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3738      	adds	r7, #56	; 0x38
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b095      	sub	sp, #84	; 0x54
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	71fb      	strb	r3, [r7, #7]
 80045ce:	4603      	mov	r3, r0
 80045d0:	80bb      	strh	r3, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	807b      	strh	r3, [r7, #2]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80045e0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80045e4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80045e8:	4413      	add	r3, r2
 80045ea:	330e      	adds	r3, #14
 80045ec:	2b28      	cmp	r3, #40	; 0x28
 80045ee:	d901      	bls.n	80045f4 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80045f0:	2342      	movs	r3, #66	; 0x42
 80045f2:	e0c9      	b.n	8004788 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80045f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80045f8:	3350      	adds	r3, #80	; 0x50
 80045fa:	443b      	add	r3, r7
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004606:	3301      	adds	r3, #1
 8004608:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800460c:	88bb      	ldrh	r3, [r7, #4]
 800460e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004614:	f107 0208 	add.w	r2, r7, #8
 8004618:	4413      	add	r3, r2
 800461a:	88ba      	ldrh	r2, [r7, #4]
 800461c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800461e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004622:	3302      	adds	r3, #2
 8004624:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800462c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004630:	f107 0208 	add.w	r2, r7, #8
 8004634:	4413      	add	r3, r2
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800463a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800463e:	3302      	adds	r3, #2
 8004640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8004644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004648:	3350      	adds	r3, #80	; 0x50
 800464a:	443b      	add	r3, r7
 800464c:	79ba      	ldrb	r2, [r7, #6]
 800464e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004652:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004656:	3301      	adds	r3, #1
 8004658:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800465c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004660:	3350      	adds	r3, #80	; 0x50
 8004662:	443b      	add	r3, r7
 8004664:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004668:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800466c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004670:	3301      	adds	r3, #1
 8004672:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8004676:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800467a:	3350      	adds	r3, #80	; 0x50
 800467c:	443b      	add	r3, r7
 800467e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004682:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004686:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800468a:	3301      	adds	r3, #1
 800468c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004694:	f107 0208 	add.w	r2, r7, #8
 8004698:	4413      	add	r3, r2
 800469a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800469e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fac4 	bl	8005c2e <memcpy>
  indx +=  LocalNameLen;
 80046a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80046aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80046ae:	4413      	add	r3, r2
 80046b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80046b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046b8:	3350      	adds	r3, #80	; 0x50
 80046ba:	443b      	add	r3, r7
 80046bc:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80046c0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80046c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046c8:	3301      	adds	r3, #1
 80046ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80046ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046d2:	f107 0208 	add.w	r2, r7, #8
 80046d6:	4413      	add	r3, r2
 80046d8:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80046dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 faa5 	bl	8005c2e <memcpy>
  indx +=  ServiceUUIDLen;  
 80046e4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80046e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80046ec:	4413      	add	r3, r2
 80046ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80046f2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80046f6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80046fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046fe:	f107 0208 	add.w	r2, r7, #8
 8004702:	4413      	add	r3, r2
 8004704:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8004708:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800470a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800470e:	3302      	adds	r3, #2
 8004710:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8004714:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004718:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800471c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004720:	f107 0208 	add.w	r2, r7, #8
 8004724:	4413      	add	r3, r2
 8004726:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800472a:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800472c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004730:	3302      	adds	r3, #2
 8004732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800473a:	2218      	movs	r2, #24
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f001 fa83 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004744:	233f      	movs	r3, #63	; 0x3f
 8004746:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8004748:	2383      	movs	r3, #131	; 0x83
 800474a:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800474c:	f107 0308 	add.w	r3, r7, #8
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8004752:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8004758:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800475c:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8004762:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fdbf 	bl	80052ec <hci_send_req>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	da01      	bge.n	8004778 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8004774:	23ff      	movs	r3, #255	; 0xff
 8004776:	e007      	b.n	8004788 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8004778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <aci_gap_set_discoverable+0x1ca>
    return status;
 8004780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004784:	e000      	b.n	8004788 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3754      	adds	r7, #84	; 0x54
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}

08004790 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b091      	sub	sp, #68	; 0x44
 8004794:	af00      	add	r7, sp, #0
 8004796:	603a      	str	r2, [r7, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
 800479e:	460b      	mov	r3, r1
 80047a0:	71bb      	strb	r3, [r7, #6]
 80047a2:	4613      	mov	r3, r2
 80047a4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80047aa:	79bb      	ldrb	r3, [r7, #6]
 80047ac:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80047ae:	79bb      	ldrb	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f107 030e 	add.w	r3, r7, #14
 80047ba:	6814      	ldr	r4, [r2, #0]
 80047bc:	6850      	ldr	r0, [r2, #4]
 80047be:	6891      	ldr	r1, [r2, #8]
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	601c      	str	r4, [r3, #0]
 80047c4:	6058      	str	r0, [r3, #4]
 80047c6:	6099      	str	r1, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80047ca:	797b      	ldrb	r3, [r7, #5]
 80047cc:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80047ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80047d2:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80047d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80047d8:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80047dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047de:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80047e2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80047e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80047ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ee:	2218      	movs	r2, #24
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fa29 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80047f8:	233f      	movs	r3, #63	; 0x3f
 80047fa:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80047fc:	2386      	movs	r3, #134	; 0x86
 80047fe:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8004806:	231a      	movs	r3, #26
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800480a:	f107 030b 	add.w	r3, r7, #11
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8004814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd66 	bl	80052ec <hci_send_req>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	da01      	bge.n	800482a <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8004826:	23ff      	movs	r3, #255	; 0xff
 8004828:	e005      	b.n	8004836 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8004830:	7afb      	ldrb	r3, [r7, #11]
 8004832:	e000      	b.n	8004836 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3744      	adds	r7, #68	; 0x44
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}

0800483e <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b092      	sub	sp, #72	; 0x48
 8004842:	af00      	add	r7, sp, #0
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	4603      	mov	r3, r0
 8004848:	81fb      	strh	r3, [r7, #14]
 800484a:	460b      	mov	r3, r1
 800484c:	81bb      	strh	r3, [r7, #12]
 800484e:	4613      	mov	r3, r2
 8004850:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8004852:	89fb      	ldrh	r3, [r7, #14]
 8004854:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8004856:	89bb      	ldrh	r3, [r7, #12]
 8004858:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	f107 031d 	add.w	r3, r7, #29
 8004864:	6811      	ldr	r1, [r2, #0]
 8004866:	6019      	str	r1, [r3, #0]
 8004868:	8892      	ldrh	r2, [r2, #4]
 800486a:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 800486c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8004874:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004878:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 800487a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800487e:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8004880:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004884:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8004886:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800488a:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800488c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004890:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8004892:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004896:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800489c:	2218      	movs	r2, #24
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 f9d2 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80048a6:	233f      	movs	r3, #63	; 0x3f
 80048a8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80048aa:	239c      	movs	r3, #156	; 0x9c
 80048ac:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 80048ae:	f107 0318 	add.w	r3, r7, #24
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 80048b4:	2318      	movs	r3, #24
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 80048b8:	230f      	movs	r3, #15
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80048bc:	f107 0317 	add.w	r3, r7, #23
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80048c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fd0d 	bl	80052ec <hci_send_req>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	da01      	bge.n	80048dc <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 80048d8:	23ff      	movs	r3, #255	; 0xff
 80048da:	e000      	b.n	80048de <aci_gap_create_connection+0xa0>

  return status;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3748      	adds	r7, #72	; 0x48
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b088      	sub	sp, #32
 80048ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80048ec:	f107 0308 	add.w	r3, r7, #8
 80048f0:	2218      	movs	r2, #24
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f9a8 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80048fa:	233f      	movs	r3, #63	; 0x3f
 80048fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80048fe:	f240 1301 	movw	r3, #257	; 0x101
 8004902:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004904:	1dfb      	adds	r3, r7, #7
 8004906:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fcea 	bl	80052ec <hci_send_req>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	da01      	bge.n	8004922 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800491e:	23ff      	movs	r3, #255	; 0xff
 8004920:	e000      	b.n	8004924 <aci_gatt_init+0x3e>

  return status;
 8004922:	79fb      	ldrb	r3, [r7, #7]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b090      	sub	sp, #64	; 0x40
 8004930:	af00      	add	r7, sp, #0
 8004932:	6039      	str	r1, [r7, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	461a      	mov	r2, r3
 8004938:	4603      	mov	r3, r0
 800493a:	71fb      	strb	r3, [r7, #7]
 800493c:	460b      	mov	r3, r1
 800493e:	71bb      	strb	r3, [r7, #6]
 8004940:	4613      	mov	r3, r2
 8004942:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800494a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800494e:	3340      	adds	r3, #64	; 0x40
 8004950:	443b      	add	r3, r7
 8004952:	79fa      	ldrb	r2, [r7, #7]
 8004954:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004958:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800495c:	3301      	adds	r3, #1
 800495e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d103      	bne.n	8004970 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8004968:	2302      	movs	r3, #2
 800496a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800496e:	e002      	b.n	8004976 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8004970:	2310      	movs	r3, #16
 8004972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8004976:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800497a:	f107 020c 	add.w	r2, r7, #12
 800497e:	4413      	add	r3, r2
 8004980:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f951 	bl	8005c2e <memcpy>
  indx +=  uuid_len;
 800498c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004990:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004994:	4413      	add	r3, r2
 8004996:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800499a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800499e:	3340      	adds	r3, #64	; 0x40
 80049a0:	443b      	add	r3, r7
 80049a2:	79ba      	ldrb	r2, [r7, #6]
 80049a4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80049a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049ac:	3301      	adds	r3, #1
 80049ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80049b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049b6:	3340      	adds	r3, #64	; 0x40
 80049b8:	443b      	add	r3, r7
 80049ba:	797a      	ldrb	r2, [r7, #5]
 80049bc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80049c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049c4:	3301      	adds	r3, #1
 80049c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80049ca:	f107 0320 	add.w	r3, r7, #32
 80049ce:	2203      	movs	r2, #3
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f939 	bl	8005c4a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80049d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049dc:	2218      	movs	r2, #24
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f932 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80049e6:	233f      	movs	r3, #63	; 0x3f
 80049e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80049ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80049ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80049f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80049fc:	f107 0320 	add.w	r3, r7, #32
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004a02:	2303      	movs	r3, #3
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fc6d 	bl	80052ec <hci_send_req>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da01      	bge.n	8004a1c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8004a18:	23ff      	movs	r3, #255	; 0xff
 8004a1a:	e00c      	b.n	8004a36 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8004a1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <aci_gatt_add_serv+0xfe>
    return resp.status;
 8004a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a28:	e005      	b.n	8004a36 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8004a2a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a32:	801a      	strh	r2, [r3, #0]

  return 0;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3740      	adds	r7, #64	; 0x40
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b092      	sub	sp, #72	; 0x48
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	603a      	str	r2, [r7, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	80fb      	strh	r3, [r7, #6]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	717b      	strb	r3, [r7, #5]
 8004a50:	4613      	mov	r3, r2
 8004a52:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8004a5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a62:	f107 020c 	add.w	r2, r7, #12
 8004a66:	4413      	add	r3, r2
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004a6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a70:	3302      	adds	r3, #2
 8004a72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8004a76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a7a:	3348      	adds	r3, #72	; 0x48
 8004a7c:	443b      	add	r3, r7
 8004a7e:	797a      	ldrb	r2, [r7, #5]
 8004a80:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004a84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8004a8e:	797b      	ldrb	r3, [r7, #5]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d103      	bne.n	8004a9c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8004a94:	2302      	movs	r3, #2
 8004a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004a9a:	e002      	b.n	8004aa2 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004aa6:	f107 020c 	add.w	r2, r7, #12
 8004aaa:	4413      	add	r3, r2
 8004aac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f8bb 	bl	8005c2e <memcpy>
  indx +=  uuid_len;
 8004ab8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004abc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8004ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004aca:	3348      	adds	r3, #72	; 0x48
 8004acc:	443b      	add	r3, r7
 8004ace:	793a      	ldrb	r2, [r7, #4]
 8004ad0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004ad4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8004ade:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004ae2:	3348      	adds	r3, #72	; 0x48
 8004ae4:	443b      	add	r3, r7
 8004ae6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8004aea:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004aee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004af2:	3301      	adds	r3, #1
 8004af4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8004af8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004afc:	3348      	adds	r3, #72	; 0x48
 8004afe:	443b      	add	r3, r7
 8004b00:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8004b04:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004b08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8004b12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b16:	3348      	adds	r3, #72	; 0x48
 8004b18:	443b      	add	r3, r7
 8004b1a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8004b1e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b26:	3301      	adds	r3, #1
 8004b28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8004b2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b30:	3348      	adds	r3, #72	; 0x48
 8004b32:	443b      	add	r3, r7
 8004b34:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004b38:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004b3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b40:	3301      	adds	r3, #1
 8004b42:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8004b46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b4a:	3348      	adds	r3, #72	; 0x48
 8004b4c:	443b      	add	r3, r7
 8004b4e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004b52:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004b56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b64:	2203      	movs	r2, #3
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 f86e 	bl	8005c4a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b72:	2218      	movs	r2, #24
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f867 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004b7c:	233f      	movs	r3, #63	; 0x3f
 8004b7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8004b80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8004b8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8004b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8004b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fba2 	bl	80052ec <hci_send_req>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da01      	bge.n	8004bb2 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8004bae:	23ff      	movs	r3, #255	; 0xff
 8004bb0:	e00c      	b.n	8004bcc <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8004bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <aci_gatt_add_char+0x182>
    return resp.status;
 8004bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bbe:	e005      	b.n	8004bcc <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8004bc0:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc8:	801a      	strh	r2, [r3, #0]

  return 0;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3748      	adds	r7, #72	; 0x48
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b091      	sub	sp, #68	; 0x44
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4623      	mov	r3, r4
 8004be4:	80fb      	strh	r3, [r7, #6]
 8004be6:	4603      	mov	r3, r0
 8004be8:	80bb      	strh	r3, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	807b      	strh	r3, [r7, #2]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8004bfc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c00:	f107 020c 	add.w	r2, r7, #12
 8004c04:	4413      	add	r3, r2
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004c0a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c0e:	3302      	adds	r3, #2
 8004c10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8004c14:	88bb      	ldrh	r3, [r7, #4]
 8004c16:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8004c18:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c1c:	f107 020c 	add.w	r2, r7, #12
 8004c20:	4413      	add	r3, r2
 8004c22:	88ba      	ldrh	r2, [r7, #4]
 8004c24:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004c26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8004c34:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c38:	f107 020c 	add.w	r2, r7, #12
 8004c3c:	4413      	add	r3, r2
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004c42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c46:	3302      	adds	r3, #2
 8004c48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8004c4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c50:	3340      	adds	r3, #64	; 0x40
 8004c52:	443b      	add	r3, r7
 8004c54:	787a      	ldrb	r2, [r7, #1]
 8004c56:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004c5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 8004c64:	787b      	ldrb	r3, [r7, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d103      	bne.n	8004c72 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004c70:	e002      	b.n	8004c78 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 8004c72:	2310      	movs	r3, #16
 8004c74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004c78:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c7c:	f107 020c 	add.w	r2, r7, #12
 8004c80:	4413      	add	r3, r2
 8004c82:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 ffd0 	bl	8005c2e <memcpy>
  indx +=  uuid_len;
 8004c8e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004c92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c96:	4413      	add	r3, r2
 8004c98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca0:	2218      	movs	r2, #24
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 ffd0 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004caa:	233f      	movs	r3, #63	; 0x3f
 8004cac:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8004cae:	f44f 738b 	mov.w	r3, #278	; 0x116
 8004cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8004cba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8004cc0:	230f      	movs	r3, #15
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8004cc4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fb09 	bl	80052ec <hci_send_req>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da01      	bge.n	8004ce4 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 8004ce0:	23ff      	movs	r3, #255	; 0xff
 8004ce2:	e001      	b.n	8004ce8 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3744      	adds	r7, #68	; 0x44
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}

08004cf0 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0ac      	sub	sp, #176	; 0xb0
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	81fb      	strh	r3, [r7, #14]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	81bb      	strh	r3, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	2b7b      	cmp	r3, #123	; 0x7b
 8004d0e:	d901      	bls.n	8004d14 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 8004d10:	2342      	movs	r3, #66	; 0x42
 8004d12:	e064      	b.n	8004dde <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 8004d14:	89fb      	ldrh	r3, [r7, #14]
 8004d16:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8004d18:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d1c:	f107 0210 	add.w	r2, r7, #16
 8004d20:	4413      	add	r3, r2
 8004d22:	89fa      	ldrh	r2, [r7, #14]
 8004d24:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004d26:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8004d30:	89bb      	ldrh	r3, [r7, #12]
 8004d32:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8004d34:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d38:	f107 0210 	add.w	r2, r7, #16
 8004d3c:	4413      	add	r3, r2
 8004d3e:	89ba      	ldrh	r2, [r7, #12]
 8004d40:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004d42:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d46:	3302      	adds	r3, #2
 8004d48:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8004d4c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d50:	33b0      	adds	r3, #176	; 0xb0
 8004d52:	443b      	add	r3, r7
 8004d54:	7afa      	ldrb	r2, [r7, #11]
 8004d56:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004d5a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8004d64:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004d68:	f107 0210 	add.w	r2, r7, #16
 8004d6c:	4413      	add	r3, r2
 8004d6e:	7afa      	ldrb	r2, [r7, #11]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 ff5b 	bl	8005c2e <memcpy>
  indx +=  value_len;
 8004d78:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d88:	2218      	movs	r2, #24
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ff5c 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004d92:	233f      	movs	r3, #63	; 0x3f
 8004d94:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8004d98:	f240 1321 	movw	r3, #289	; 0x121
 8004d9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8004da8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8004db0:	230f      	movs	r3, #15
 8004db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004db6:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8004dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8004dc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa8e 	bl	80052ec <hci_send_req>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da01      	bge.n	8004dda <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 8004dd6:	23ff      	movs	r3, #255	; 0xff
 8004dd8:	e001      	b.n	8004dde <aci_gatt_write_charac_descriptor+0xee>

  return status;
 8004dda:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	37b0      	adds	r7, #176	; 0xb0
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b0aa      	sub	sp, #168	; 0xa8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	603a      	str	r2, [r7, #0]
 8004df0:	71fb      	strb	r3, [r7, #7]
 8004df2:	460b      	mov	r3, r1
 8004df4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8004dfc:	79bb      	ldrb	r3, [r7, #6]
 8004dfe:	2b7e      	cmp	r3, #126	; 0x7e
 8004e00:	d901      	bls.n	8004e06 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8004e02:	2342      	movs	r3, #66	; 0x42
 8004e04:	e050      	b.n	8004ea8 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 8004e06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e0a:	33a8      	adds	r3, #168	; 0xa8
 8004e0c:	443b      	add	r3, r7
 8004e0e:	79fa      	ldrb	r2, [r7, #7]
 8004e10:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004e14:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8004e1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e22:	33a8      	adds	r3, #168	; 0xa8
 8004e24:	443b      	add	r3, r7
 8004e26:	79ba      	ldrb	r2, [r7, #6]
 8004e28:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004e2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e30:	3301      	adds	r3, #1
 8004e32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004e36:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e3a:	f107 0208 	add.w	r2, r7, #8
 8004e3e:	4413      	add	r3, r2
 8004e40:	79ba      	ldrb	r2, [r7, #6]
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fef2 	bl	8005c2e <memcpy>
  indx +=  len;
 8004e4a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8004e4e:	79bb      	ldrb	r3, [r7, #6]
 8004e50:	4413      	add	r3, r2
 8004e52:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004e5a:	2218      	movs	r2, #24
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fef3 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004e64:	233f      	movs	r3, #63	; 0x3f
 8004e66:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8004e78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004e80:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8004e8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fa29 	bl	80052ec <hci_send_req>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da01      	bge.n	8004ea4 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004ea0:	23ff      	movs	r3, #255	; 0xff
 8004ea2:	e001      	b.n	8004ea8 <aci_hal_write_config_data+0xc2>

  return status;
 8004ea4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	37a8      	adds	r7, #168	; 0xa8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	460a      	mov	r2, r1
 8004eba:	71fb      	strb	r3, [r7, #7]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8004ec4:	79bb      	ldrb	r3, [r7, #6]
 8004ec6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	2218      	movs	r2, #24
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 feba 	bl	8005c4a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004ed6:	233f      	movs	r3, #63	; 0x3f
 8004ed8:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8004eda:	230f      	movs	r3, #15
 8004edc:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8004ee8:	f107 030b 	add.w	r3, r7, #11
 8004eec:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f9f7 	bl	80052ec <hci_send_req>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da01      	bge.n	8004f08 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8004f04:	23ff      	movs	r3, #255	; 0xff
 8004f06:	e000      	b.n	8004f0a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8004f08:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3728      	adds	r7, #40	; 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8004f12:	b590      	push	{r4, r7, lr}
 8004f14:	b089      	sub	sp, #36	; 0x24
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8004f1c:	f107 0410 	add.w	r4, r7, #16
 8004f20:	f107 0215 	add.w	r2, r7, #21
 8004f24:	f107 0112 	add.w	r1, r7, #18
 8004f28:	f107 0016 	add.w	r0, r7, #22
 8004f2c:	f107 030e 	add.w	r3, r7, #14
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4623      	mov	r3, r4
 8004f34:	f000 f853 	bl	8004fde <hci_le_read_local_version>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d126      	bne.n	8004f90 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8004f42:	8a7b      	ldrh	r3, [r7, #18]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8004f4e:	8a7b      	ldrh	r3, [r7, #18]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b21a      	sxth	r2, r3
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	b21b      	sxth	r3, r3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	89fb      	ldrh	r3, [r7, #14]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}

08004f9a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b088      	sub	sp, #32
 8004f9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	2218      	movs	r2, #24
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fe4e 	bl	8005c4a <memset>
  rq.ogf = OGF_HOST_CTL;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004fb6:	1dfb      	adds	r3, r7, #7
 8004fb8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f991 	bl	80052ec <hci_send_req>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da01      	bge.n	8004fd4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8004fd0:	23ff      	movs	r3, #255	; 0xff
 8004fd2:	e000      	b.n	8004fd6 <hci_reset+0x3c>
  
  return status;  
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08e      	sub	sp, #56	; 0x38
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	2209      	movs	r2, #9
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fe28 	bl	8005c4a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ffa:	f107 0320 	add.w	r3, r7, #32
 8004ffe:	2218      	movs	r2, #24
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fe21 	bl	8005c4a <memset>
  rq.ogf = OGF_INFO_PARAM;
 8005008:	2304      	movs	r3, #4
 800500a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800500c:	2301      	movs	r3, #1
 800500e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800501e:	2309      	movs	r3, #9
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005022:	f107 0320 	add.w	r3, r7, #32
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f95f 	bl	80052ec <hci_send_req>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	da01      	bge.n	8005038 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8005034:	23ff      	movs	r3, #255	; 0xff
 8005036:	e018      	b.n	800506a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8005038:	7d3b      	ldrb	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <hci_le_read_local_version+0x64>
    return resp.status;
 800503e:	7d3b      	ldrb	r3, [r7, #20]
 8005040:	e013      	b.n	800506a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8005042:	7d7a      	ldrb	r2, [r7, #21]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8005048:	8afa      	ldrh	r2, [r7, #22]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800504e:	7e3a      	ldrb	r2, [r7, #24]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8005054:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8005058:	b29a      	uxth	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800505e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8005062:	b29a      	uxth	r2, r3
 8005064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005066:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3738      	adds	r7, #56	; 0x38
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b092      	sub	sp, #72	; 0x48
 8005076:	af00      	add	r7, sp, #0
 8005078:	4603      	mov	r3, r0
 800507a:	6039      	str	r1, [r7, #0]
 800507c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800507e:	f107 0310 	add.w	r3, r7, #16
 8005082:	2220      	movs	r2, #32
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fddf 	bl	8005c4a <memset>
  scan_resp_cp.length = length;
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	2b1f      	cmp	r3, #31
 8005094:	bf28      	it	cs
 8005096:	231f      	movcs	r3, #31
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	f107 0310 	add.w	r3, r7, #16
 80050a0:	3301      	adds	r3, #1
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fdc2 	bl	8005c2e <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050ae:	2218      	movs	r2, #24
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fdc9 	bl	8005c4a <memset>
  rq.ogf = OGF_LE_CTL;
 80050b8:	2308      	movs	r3, #8
 80050ba:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80050bc:	2309      	movs	r3, #9
 80050be:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80050c6:	2320      	movs	r3, #32
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80050ca:	f107 030f 	add.w	r3, r7, #15
 80050ce:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80050d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f906 	bl	80052ec <hci_send_req>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	da01      	bge.n	80050ea <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80050e6:	23ff      	movs	r3, #255	; 0xff
 80050e8:	e000      	b.n	80050ec <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3748      	adds	r7, #72	; 0x48
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3308      	adds	r3, #8
 8005100:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d001      	beq.n	800510e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800510a:	2301      	movs	r3, #1
 800510c:	e00c      	b.n	8005128 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3302      	adds	r3, #2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800511c:	3b03      	subs	r3, #3
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005122:	2302      	movs	r3, #2
 8005124:	e000      	b.n	8005128 <verify_packet+0x34>
  
  return 0;      
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0a6      	sub	sp, #152	; 0x98
 8005138:	af00      	add	r7, sp, #0
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	4603      	mov	r3, r0
 800513e:	81fb      	strh	r3, [r7, #14]
 8005140:	460b      	mov	r3, r1
 8005142:	81bb      	strh	r3, [r7, #12]
 8005144:	4613      	mov	r3, r2
 8005146:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005148:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800514c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005150:	b21a      	sxth	r2, r3
 8005152:	89fb      	ldrh	r3, [r7, #14]
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b21b      	sxth	r3, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	b21b      	sxth	r3, r3
 800515c:	b29b      	uxth	r3, r3
 800515e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005160:	7afb      	ldrb	r3, [r7, #11]
 8005162:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005164:	2301      	movs	r3, #1
 8005166:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005168:	f107 0318 	add.w	r3, r7, #24
 800516c:	3301      	adds	r3, #1
 800516e:	461a      	mov	r2, r3
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	8819      	ldrh	r1, [r3, #0]
 8005176:	789b      	ldrb	r3, [r3, #2]
 8005178:	8011      	strh	r1, [r2, #0]
 800517a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800517c:	f107 0318 	add.w	r3, r7, #24
 8005180:	3304      	adds	r3, #4
 8005182:	7afa      	ldrb	r2, [r7, #11]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fd51 	bl	8005c2e <memcpy>
  
  if (hciContext.io.Send)
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <send_cmd+0x7c>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <send_cmd+0x7c>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	7afa      	ldrb	r2, [r7, #11]
 800519a:	b292      	uxth	r2, r2
 800519c:	3204      	adds	r2, #4
 800519e:	b291      	uxth	r1, r2
 80051a0:	f107 0218 	add.w	r2, r7, #24
 80051a4:	4610      	mov	r0, r2
 80051a6:	4798      	blx	r3
  }
}
 80051a8:	bf00      	nop
 80051aa:	3798      	adds	r7, #152	; 0x98
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000704 	.word	0x20000704

080051b4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80051be:	e00a      	b.n	80051d6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80051c0:	f107 030c 	add.w	r3, r7, #12
 80051c4:	4619      	mov	r1, r3
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f000 faea 	bl	80057a0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fa51 	bl	8005678 <list_insert_head>
  while (!list_is_empty(src_list))
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f000 fa2c 	bl	8005634 <list_is_empty>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ee      	beq.n	80051c0 <move_list+0xc>
  }
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80051f2:	e009      	b.n	8005208 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <free_event_list+0x34>)
 80051fa:	f000 faaa 	bl	8005752 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4619      	mov	r1, r3
 8005202:	4808      	ldr	r0, [pc, #32]	; (8005224 <free_event_list+0x38>)
 8005204:	f000 fa5e 	bl	80056c4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005208:	4806      	ldr	r0, [pc, #24]	; (8005224 <free_event_list+0x38>)
 800520a:	f000 faf0 	bl	80057ee <list_get_size>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	ddef      	ble.n	80051f4 <free_event_list+0x8>
  }
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000440 	.word	0x20000440
 8005224:	20000438 	.word	0x20000438

08005228 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005238:	4a18      	ldr	r2, [pc, #96]	; (800529c <hci_init+0x74>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800523e:	4818      	ldr	r0, [pc, #96]	; (80052a0 <hci_init+0x78>)
 8005240:	f000 f9e8 	bl	8005614 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005244:	4817      	ldr	r0, [pc, #92]	; (80052a4 <hci_init+0x7c>)
 8005246:	f000 f9e5 	bl	8005614 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800524a:	f7fc f9a1 	bl	8001590 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e00c      	b.n	800526e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	228c      	movs	r2, #140	; 0x8c
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <hci_init+0x80>)
 800525e:	4413      	add	r3, r2
 8005260:	4619      	mov	r1, r3
 8005262:	480f      	ldr	r0, [pc, #60]	; (80052a0 <hci_init+0x78>)
 8005264:	f000 fa2e 	bl	80056c4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	3301      	adds	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d9ef      	bls.n	8005254 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <hci_init+0x74>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <hci_init+0x5c>
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <hci_init+0x74>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2000      	movs	r0, #0
 8005282:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <hci_init+0x74>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <hci_init+0x6a>
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <hci_init+0x74>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4798      	blx	r3
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000704 	.word	0x20000704
 80052a0:	20000438 	.word	0x20000438
 80052a4:	20000440 	.word	0x20000440
 80052a8:	20000448 	.word	0x20000448

080052ac <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	; (80052e8 <hci_register_io_bus+0x3c>)
 80052ba:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <hci_register_io_bus+0x3c>)
 80052c2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <hci_register_io_bus+0x3c>)
 80052ca:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <hci_register_io_bus+0x3c>)
 80052d2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <hci_register_io_bus+0x3c>)
 80052da:	6093      	str	r3, [r2, #8]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20000704 	.word	0x20000704

080052ec <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	; 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	885b      	ldrh	r3, [r3, #2]
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005302:	b21a      	sxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	b21b      	sxth	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b21b      	sxth	r3, r3
 8005310:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f97a 	bl	8005614 <list_init_head>

  free_event_list();
 8005320:	f7ff ff64 	bl	80051ec <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8818      	ldrh	r0, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8859      	ldrh	r1, [r3, #2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f7ff fefd 	bl	8005134 <send_cmd>
  
  if (async)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <hci_send_req+0x58>
  {
    return 0;
 8005340:	2300      	movs	r3, #0
 8005342:	e0e5      	b.n	8005510 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005344:	f7fd f84e 	bl	80023e4 <HAL_GetTick>
 8005348:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800534a:	f7fd f84b 	bl	80023e4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005358:	f200 80b6 	bhi.w	80054c8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800535c:	486e      	ldr	r0, [pc, #440]	; (8005518 <hci_send_req+0x22c>)
 800535e:	f000 f969 	bl	8005634 <list_is_empty>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d000      	beq.n	800536a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005368:	e7ef      	b.n	800534a <hci_send_req+0x5e>
      {
        break;
 800536a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800536c:	f107 0310 	add.w	r3, r7, #16
 8005370:	4619      	mov	r1, r3
 8005372:	4869      	ldr	r0, [pc, #420]	; (8005518 <hci_send_req+0x22c>)
 8005374:	f000 f9ed 	bl	8005752 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3308      	adds	r3, #8
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d17b      	bne.n	800547e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	3301      	adds	r3, #1
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3308      	adds	r3, #8
 8005390:	3303      	adds	r3, #3
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800539a:	3b03      	subs	r3, #3
 800539c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b3e      	cmp	r3, #62	; 0x3e
 80053a4:	d04d      	beq.n	8005442 <hci_send_req+0x156>
 80053a6:	2b3e      	cmp	r3, #62	; 0x3e
 80053a8:	dc6b      	bgt.n	8005482 <hci_send_req+0x196>
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	f000 808e 	beq.w	80054cc <hci_send_req+0x1e0>
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	dc66      	bgt.n	8005482 <hci_send_req+0x196>
 80053b4:	2b0e      	cmp	r3, #14
 80053b6:	d024      	beq.n	8005402 <hci_send_req+0x116>
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d162      	bne.n	8005482 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	885b      	ldrh	r3, [r3, #2]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f040 8081 	bne.w	80054d0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d004      	beq.n	80053e0 <hci_send_req+0xf4>
          if (cs->status) {
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d053      	beq.n	8005486 <hci_send_req+0x19a>
            goto failed;
 80053de:	e07a      	b.n	80054d6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bf28      	it	cs
 80053ea:	461a      	movcs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6918      	ldr	r0, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053fc:	f000 fc17 	bl	8005c2e <memcpy>
        goto done;
 8005400:	e07a      	b.n	80054f8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800540c:	b29b      	uxth	r3, r3
 800540e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005410:	429a      	cmp	r2, r3
 8005412:	d15f      	bne.n	80054d4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	3303      	adds	r3, #3
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	3b03      	subs	r3, #3
 800541e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	429a      	cmp	r2, r3
 8005428:	bf28      	it	cs
 800542a:	461a      	movcs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6918      	ldr	r0, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	461a      	mov	r2, r3
 800543a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800543c:	f000 fbf7 	bl	8005c2e <memcpy>
        goto done;
 8005440:	e05a      	b.n	80054f8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d11a      	bne.n	800548a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	3b01      	subs	r3, #1
 8005458:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	429a      	cmp	r2, r3
 8005462:	bf28      	it	cs
 8005464:	461a      	movcs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6918      	ldr	r0, [r3, #16]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	461a      	mov	r2, r3
 8005478:	f000 fbd9 	bl	8005c2e <memcpy>
        goto done;
 800547c:	e03c      	b.n	80054f8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800547e:	bf00      	nop
 8005480:	e004      	b.n	800548c <hci_send_req+0x1a0>
        break;
 8005482:	bf00      	nop
 8005484:	e002      	b.n	800548c <hci_send_req+0x1a0>
          break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <hci_send_req+0x1a0>
          break;
 800548a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800548c:	4823      	ldr	r0, [pc, #140]	; (800551c <hci_send_req+0x230>)
 800548e:	f000 f8d1 	bl	8005634 <list_is_empty>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <hci_send_req+0x1c8>
 8005498:	481f      	ldr	r0, [pc, #124]	; (8005518 <hci_send_req+0x22c>)
 800549a:	f000 f8cb 	bl	8005634 <list_is_empty>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4619      	mov	r1, r3
 80054a8:	481c      	ldr	r0, [pc, #112]	; (800551c <hci_send_req+0x230>)
 80054aa:	f000 f90b 	bl	80056c4 <list_insert_tail>
      hciReadPacket=NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e008      	b.n	80054c6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f901 	bl	80056c4 <list_insert_tail>
      hciReadPacket=NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
  {
 80054c6:	e73d      	b.n	8005344 <hci_send_req+0x58>
        goto failed;
 80054c8:	bf00      	nop
 80054ca:	e004      	b.n	80054d6 <hci_send_req+0x1ea>
        goto failed;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <hci_send_req+0x1ea>
          goto failed;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <hci_send_req+0x1ea>
          goto failed;
 80054d4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4619      	mov	r1, r3
 80054e0:	480e      	ldr	r0, [pc, #56]	; (800551c <hci_send_req+0x230>)
 80054e2:	f000 f8c9 	bl	8005678 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4619      	mov	r1, r3
 80054ec:	480a      	ldr	r0, [pc, #40]	; (8005518 <hci_send_req+0x22c>)
 80054ee:	f7ff fe61 	bl	80051b4 <move_list>

  return -1;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	e00b      	b.n	8005510 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4619      	mov	r1, r3
 80054fc:	4807      	ldr	r0, [pc, #28]	; (800551c <hci_send_req+0x230>)
 80054fe:	f000 f8bb 	bl	8005678 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005502:	f107 0308 	add.w	r3, r7, #8
 8005506:	4619      	mov	r1, r3
 8005508:	4803      	ldr	r0, [pc, #12]	; (8005518 <hci_send_req+0x22c>)
 800550a:	f7ff fe53 	bl	80051b4 <move_list>

  return 0;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3738      	adds	r7, #56	; 0x38
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000440 	.word	0x20000440
 800551c:	20000438 	.word	0x20000438

08005520 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800552a:	e013      	b.n	8005554 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	4619      	mov	r1, r3
 8005530:	480e      	ldr	r0, [pc, #56]	; (800556c <hci_user_evt_proc+0x4c>)
 8005532:	f000 f90e 	bl	8005752 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <hci_user_evt_proc+0x50>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <hci_user_evt_proc+0x50>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	3208      	adds	r2, #8
 8005546:	4610      	mov	r0, r2
 8005548:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4619      	mov	r1, r3
 800554e:	4809      	ldr	r0, [pc, #36]	; (8005574 <hci_user_evt_proc+0x54>)
 8005550:	f000 f8b8 	bl	80056c4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005554:	4805      	ldr	r0, [pc, #20]	; (800556c <hci_user_evt_proc+0x4c>)
 8005556:	f000 f86d 	bl	8005634 <list_is_empty>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0e5      	beq.n	800552c <hci_user_evt_proc+0xc>
  }
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000440 	.word	0x20000440
 8005570:	20000704 	.word	0x20000704
 8005574:	20000438 	.word	0x20000438

08005578 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005588:	481f      	ldr	r0, [pc, #124]	; (8005608 <hci_notify_asynch_evt+0x90>)
 800558a:	f000 f853 	bl	8005634 <list_is_empty>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d132      	bne.n	80055fa <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005594:	f107 030c 	add.w	r3, r7, #12
 8005598:	4619      	mov	r1, r3
 800559a:	481b      	ldr	r0, [pc, #108]	; (8005608 <hci_notify_asynch_evt+0x90>)
 800559c:	f000 f8d9 	bl	8005752 <list_remove_head>
    
    if (hciContext.io.Receive)
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <hci_notify_asynch_evt+0x94>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02a      	beq.n	80055fe <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <hci_notify_asynch_evt+0x94>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	3208      	adds	r2, #8
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	4610      	mov	r0, r2
 80055b4:	4798      	blx	r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d016      	beq.n	80055ee <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	7cfa      	ldrb	r2, [r7, #19]
 80055c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fd92 	bl	80050f4 <verify_packet>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4619      	mov	r1, r3
 80055da:	480d      	ldr	r0, [pc, #52]	; (8005610 <hci_notify_asynch_evt+0x98>)
 80055dc:	f000 f872 	bl	80056c4 <list_insert_tail>
 80055e0:	e00d      	b.n	80055fe <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4619      	mov	r1, r3
 80055e6:	4808      	ldr	r0, [pc, #32]	; (8005608 <hci_notify_asynch_evt+0x90>)
 80055e8:	f000 f846 	bl	8005678 <list_insert_head>
 80055ec:	e007      	b.n	80055fe <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4619      	mov	r1, r3
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <hci_notify_asynch_evt+0x90>)
 80055f4:	f000 f840 	bl	8005678 <list_insert_head>
 80055f8:	e001      	b.n	80055fe <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80055fe:	697b      	ldr	r3, [r7, #20]

}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000438 	.word	0x20000438
 800560c:	20000704 	.word	0x20000704
 8005610:	20000440 	.word	0x20000440

08005614 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	605a      	str	r2, [r3, #4]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563c:	f3ef 8310 	mrs	r3, PRIMASK
 8005640:	60fb      	str	r3, [r7, #12]
  return(result);
 8005642:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005646:	b672      	cpsid	i
}
 8005648:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d102      	bne.n	800565a <list_is_empty+0x26>
  {
    return_value = 1;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
 8005658:	e001      	b.n	800565e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	75fb      	strb	r3, [r7, #23]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	60fb      	str	r3, [r7, #12]
  return(result);
 8005688:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800568a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800568c:	b672      	cpsid	i
}
 800568e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ce:	f3ef 8310 	mrs	r3, PRIMASK
 80056d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80056d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80056d8:	b672      	cpsid	i
}
 80056da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005718:	f3ef 8310 	mrs	r3, PRIMASK
 800571c:	60fb      	str	r3, [r7, #12]
  return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005722:	b672      	cpsid	i
}
 8005724:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6852      	ldr	r2, [r2, #4]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575c:	f3ef 8310 	mrs	r3, PRIMASK
 8005760:	60fb      	str	r3, [r7, #12]
  return(result);
 8005762:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005766:	b672      	cpsid	i
}
 8005768:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ffca 	bl	8005710 <list_remove_node>
  (*node)->next = NULL;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80057b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80057b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80057b4:	b672      	cpsid	i
}
 80057b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff ffa3 	bl	8005710 <list_remove_node>
  (*node)->next = NULL;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f383 8810 	msr	PRIMASK, r3
}
 80057e4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80057e6:	bf00      	nop
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b089      	sub	sp, #36	; 0x24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  int size = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fa:	f3ef 8310 	mrs	r3, PRIMASK
 80057fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005800:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005804:	b672      	cpsid	i
}
 8005806:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800580e:	e005      	b.n	800581c <list_get_size+0x2e>
  {
    size++;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d1f5      	bne.n	8005810 <list_get_size+0x22>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005830:	69fb      	ldr	r3, [r7, #28]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	; 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <__errno>:
 8005840:	4b01      	ldr	r3, [pc, #4]	; (8005848 <__errno+0x8>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000040 	.word	0x20000040

0800584c <__sflush_r>:
 800584c:	898a      	ldrh	r2, [r1, #12]
 800584e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005852:	4605      	mov	r5, r0
 8005854:	0710      	lsls	r0, r2, #28
 8005856:	460c      	mov	r4, r1
 8005858:	d458      	bmi.n	800590c <__sflush_r+0xc0>
 800585a:	684b      	ldr	r3, [r1, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dc05      	bgt.n	800586c <__sflush_r+0x20>
 8005860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	dc02      	bgt.n	800586c <__sflush_r+0x20>
 8005866:	2000      	movs	r0, #0
 8005868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800586e:	2e00      	cmp	r6, #0
 8005870:	d0f9      	beq.n	8005866 <__sflush_r+0x1a>
 8005872:	2300      	movs	r3, #0
 8005874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005878:	682f      	ldr	r7, [r5, #0]
 800587a:	602b      	str	r3, [r5, #0]
 800587c:	d032      	beq.n	80058e4 <__sflush_r+0x98>
 800587e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	075a      	lsls	r2, r3, #29
 8005884:	d505      	bpl.n	8005892 <__sflush_r+0x46>
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	1ac0      	subs	r0, r0, r3
 800588a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800588c:	b10b      	cbz	r3, 8005892 <__sflush_r+0x46>
 800588e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005890:	1ac0      	subs	r0, r0, r3
 8005892:	2300      	movs	r3, #0
 8005894:	4602      	mov	r2, r0
 8005896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005898:	6a21      	ldr	r1, [r4, #32]
 800589a:	4628      	mov	r0, r5
 800589c:	47b0      	blx	r6
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	d106      	bne.n	80058b2 <__sflush_r+0x66>
 80058a4:	6829      	ldr	r1, [r5, #0]
 80058a6:	291d      	cmp	r1, #29
 80058a8:	d82c      	bhi.n	8005904 <__sflush_r+0xb8>
 80058aa:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <__sflush_r+0x108>)
 80058ac:	40ca      	lsrs	r2, r1
 80058ae:	07d6      	lsls	r6, r2, #31
 80058b0:	d528      	bpl.n	8005904 <__sflush_r+0xb8>
 80058b2:	2200      	movs	r2, #0
 80058b4:	6062      	str	r2, [r4, #4]
 80058b6:	04d9      	lsls	r1, r3, #19
 80058b8:	6922      	ldr	r2, [r4, #16]
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	d504      	bpl.n	80058c8 <__sflush_r+0x7c>
 80058be:	1c42      	adds	r2, r0, #1
 80058c0:	d101      	bne.n	80058c6 <__sflush_r+0x7a>
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	b903      	cbnz	r3, 80058c8 <__sflush_r+0x7c>
 80058c6:	6560      	str	r0, [r4, #84]	; 0x54
 80058c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ca:	602f      	str	r7, [r5, #0]
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d0ca      	beq.n	8005866 <__sflush_r+0x1a>
 80058d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d4:	4299      	cmp	r1, r3
 80058d6:	d002      	beq.n	80058de <__sflush_r+0x92>
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f9bf 	bl	8005c5c <_free_r>
 80058de:	2000      	movs	r0, #0
 80058e0:	6360      	str	r0, [r4, #52]	; 0x34
 80058e2:	e7c1      	b.n	8005868 <__sflush_r+0x1c>
 80058e4:	6a21      	ldr	r1, [r4, #32]
 80058e6:	2301      	movs	r3, #1
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b0      	blx	r6
 80058ec:	1c41      	adds	r1, r0, #1
 80058ee:	d1c7      	bne.n	8005880 <__sflush_r+0x34>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0c4      	beq.n	8005880 <__sflush_r+0x34>
 80058f6:	2b1d      	cmp	r3, #29
 80058f8:	d001      	beq.n	80058fe <__sflush_r+0xb2>
 80058fa:	2b16      	cmp	r3, #22
 80058fc:	d101      	bne.n	8005902 <__sflush_r+0xb6>
 80058fe:	602f      	str	r7, [r5, #0]
 8005900:	e7b1      	b.n	8005866 <__sflush_r+0x1a>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7ad      	b.n	8005868 <__sflush_r+0x1c>
 800590c:	690f      	ldr	r7, [r1, #16]
 800590e:	2f00      	cmp	r7, #0
 8005910:	d0a9      	beq.n	8005866 <__sflush_r+0x1a>
 8005912:	0793      	lsls	r3, r2, #30
 8005914:	680e      	ldr	r6, [r1, #0]
 8005916:	bf08      	it	eq
 8005918:	694b      	ldreq	r3, [r1, #20]
 800591a:	600f      	str	r7, [r1, #0]
 800591c:	bf18      	it	ne
 800591e:	2300      	movne	r3, #0
 8005920:	eba6 0807 	sub.w	r8, r6, r7
 8005924:	608b      	str	r3, [r1, #8]
 8005926:	f1b8 0f00 	cmp.w	r8, #0
 800592a:	dd9c      	ble.n	8005866 <__sflush_r+0x1a>
 800592c:	6a21      	ldr	r1, [r4, #32]
 800592e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005930:	4643      	mov	r3, r8
 8005932:	463a      	mov	r2, r7
 8005934:	4628      	mov	r0, r5
 8005936:	47b0      	blx	r6
 8005938:	2800      	cmp	r0, #0
 800593a:	dc06      	bgt.n	800594a <__sflush_r+0xfe>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e78e      	b.n	8005868 <__sflush_r+0x1c>
 800594a:	4407      	add	r7, r0
 800594c:	eba8 0800 	sub.w	r8, r8, r0
 8005950:	e7e9      	b.n	8005926 <__sflush_r+0xda>
 8005952:	bf00      	nop
 8005954:	20400001 	.word	0x20400001

08005958 <_fflush_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	690b      	ldr	r3, [r1, #16]
 800595c:	4605      	mov	r5, r0
 800595e:	460c      	mov	r4, r1
 8005960:	b913      	cbnz	r3, 8005968 <_fflush_r+0x10>
 8005962:	2500      	movs	r5, #0
 8005964:	4628      	mov	r0, r5
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	b118      	cbz	r0, 8005972 <_fflush_r+0x1a>
 800596a:	6983      	ldr	r3, [r0, #24]
 800596c:	b90b      	cbnz	r3, 8005972 <_fflush_r+0x1a>
 800596e:	f000 f899 	bl	8005aa4 <__sinit>
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <_fflush_r+0x6c>)
 8005974:	429c      	cmp	r4, r3
 8005976:	d11b      	bne.n	80059b0 <_fflush_r+0x58>
 8005978:	686c      	ldr	r4, [r5, #4]
 800597a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ef      	beq.n	8005962 <_fflush_r+0xa>
 8005982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005984:	07d0      	lsls	r0, r2, #31
 8005986:	d404      	bmi.n	8005992 <_fflush_r+0x3a>
 8005988:	0599      	lsls	r1, r3, #22
 800598a:	d402      	bmi.n	8005992 <_fflush_r+0x3a>
 800598c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800598e:	f000 f94c 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8005992:	4628      	mov	r0, r5
 8005994:	4621      	mov	r1, r4
 8005996:	f7ff ff59 	bl	800584c <__sflush_r>
 800599a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800599c:	07da      	lsls	r2, r3, #31
 800599e:	4605      	mov	r5, r0
 80059a0:	d4e0      	bmi.n	8005964 <_fflush_r+0xc>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	059b      	lsls	r3, r3, #22
 80059a6:	d4dd      	bmi.n	8005964 <_fflush_r+0xc>
 80059a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059aa:	f000 f93f 	bl	8005c2c <__retarget_lock_release_recursive>
 80059ae:	e7d9      	b.n	8005964 <_fflush_r+0xc>
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_fflush_r+0x70>)
 80059b2:	429c      	cmp	r4, r3
 80059b4:	d101      	bne.n	80059ba <_fflush_r+0x62>
 80059b6:	68ac      	ldr	r4, [r5, #8]
 80059b8:	e7df      	b.n	800597a <_fflush_r+0x22>
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <_fflush_r+0x74>)
 80059bc:	429c      	cmp	r4, r3
 80059be:	bf08      	it	eq
 80059c0:	68ec      	ldreq	r4, [r5, #12]
 80059c2:	e7da      	b.n	800597a <_fflush_r+0x22>
 80059c4:	08006dd4 	.word	0x08006dd4
 80059c8:	08006df4 	.word	0x08006df4
 80059cc:	08006db4 	.word	0x08006db4

080059d0 <fflush>:
 80059d0:	4601      	mov	r1, r0
 80059d2:	b920      	cbnz	r0, 80059de <fflush+0xe>
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <fflush+0x18>)
 80059d6:	4905      	ldr	r1, [pc, #20]	; (80059ec <fflush+0x1c>)
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f000 b8e1 	b.w	8005ba0 <_fwalk_reent>
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <fflush+0x20>)
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f7ff bfb9 	b.w	8005958 <_fflush_r>
 80059e6:	bf00      	nop
 80059e8:	08006e14 	.word	0x08006e14
 80059ec:	08005959 	.word	0x08005959
 80059f0:	20000040 	.word	0x20000040

080059f4 <std>:
 80059f4:	2300      	movs	r3, #0
 80059f6:	b510      	push	{r4, lr}
 80059f8:	4604      	mov	r4, r0
 80059fa:	e9c0 3300 	strd	r3, r3, [r0]
 80059fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a02:	6083      	str	r3, [r0, #8]
 8005a04:	8181      	strh	r1, [r0, #12]
 8005a06:	6643      	str	r3, [r0, #100]	; 0x64
 8005a08:	81c2      	strh	r2, [r0, #14]
 8005a0a:	6183      	str	r3, [r0, #24]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	2208      	movs	r2, #8
 8005a10:	305c      	adds	r0, #92	; 0x5c
 8005a12:	f000 f91a 	bl	8005c4a <memset>
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <std+0x38>)
 8005a18:	6263      	str	r3, [r4, #36]	; 0x24
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <std+0x3c>)
 8005a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <std+0x40>)
 8005a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <std+0x44>)
 8005a24:	6224      	str	r4, [r4, #32]
 8005a26:	6323      	str	r3, [r4, #48]	; 0x30
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	bf00      	nop
 8005a2c:	08005f85 	.word	0x08005f85
 8005a30:	08005fa7 	.word	0x08005fa7
 8005a34:	08005fdf 	.word	0x08005fdf
 8005a38:	08006003 	.word	0x08006003

08005a3c <_cleanup_r>:
 8005a3c:	4901      	ldr	r1, [pc, #4]	; (8005a44 <_cleanup_r+0x8>)
 8005a3e:	f000 b8af 	b.w	8005ba0 <_fwalk_reent>
 8005a42:	bf00      	nop
 8005a44:	08005959 	.word	0x08005959

08005a48 <__sfmoreglue>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	2268      	movs	r2, #104	; 0x68
 8005a4c:	1e4d      	subs	r5, r1, #1
 8005a4e:	4355      	muls	r5, r2
 8005a50:	460e      	mov	r6, r1
 8005a52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a56:	f000 f96d 	bl	8005d34 <_malloc_r>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	b140      	cbz	r0, 8005a70 <__sfmoreglue+0x28>
 8005a5e:	2100      	movs	r1, #0
 8005a60:	e9c0 1600 	strd	r1, r6, [r0]
 8005a64:	300c      	adds	r0, #12
 8005a66:	60a0      	str	r0, [r4, #8]
 8005a68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a6c:	f000 f8ed 	bl	8005c4a <memset>
 8005a70:	4620      	mov	r0, r4
 8005a72:	bd70      	pop	{r4, r5, r6, pc}

08005a74 <__sfp_lock_acquire>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__sfp_lock_acquire+0x8>)
 8005a76:	f000 b8d8 	b.w	8005c2a <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000725 	.word	0x20000725

08005a80 <__sfp_lock_release>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__sfp_lock_release+0x8>)
 8005a82:	f000 b8d3 	b.w	8005c2c <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000725 	.word	0x20000725

08005a8c <__sinit_lock_acquire>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	; (8005a94 <__sinit_lock_acquire+0x8>)
 8005a8e:	f000 b8cc 	b.w	8005c2a <__retarget_lock_acquire_recursive>
 8005a92:	bf00      	nop
 8005a94:	20000726 	.word	0x20000726

08005a98 <__sinit_lock_release>:
 8005a98:	4801      	ldr	r0, [pc, #4]	; (8005aa0 <__sinit_lock_release+0x8>)
 8005a9a:	f000 b8c7 	b.w	8005c2c <__retarget_lock_release_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	20000726 	.word	0x20000726

08005aa4 <__sinit>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	f7ff fff0 	bl	8005a8c <__sinit_lock_acquire>
 8005aac:	69a3      	ldr	r3, [r4, #24]
 8005aae:	b11b      	cbz	r3, 8005ab8 <__sinit+0x14>
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f7ff bff0 	b.w	8005a98 <__sinit_lock_release>
 8005ab8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005abc:	6523      	str	r3, [r4, #80]	; 0x50
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <__sinit+0x68>)
 8005ac0:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <__sinit+0x6c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	bf04      	itt	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	61a3      	streq	r3, [r4, #24]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f820 	bl	8005b14 <__sfp>
 8005ad4:	6060      	str	r0, [r4, #4]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f81c 	bl	8005b14 <__sfp>
 8005adc:	60a0      	str	r0, [r4, #8]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 f818 	bl	8005b14 <__sfp>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	60e0      	str	r0, [r4, #12]
 8005ae8:	2104      	movs	r1, #4
 8005aea:	6860      	ldr	r0, [r4, #4]
 8005aec:	f7ff ff82 	bl	80059f4 <std>
 8005af0:	68a0      	ldr	r0, [r4, #8]
 8005af2:	2201      	movs	r2, #1
 8005af4:	2109      	movs	r1, #9
 8005af6:	f7ff ff7d 	bl	80059f4 <std>
 8005afa:	68e0      	ldr	r0, [r4, #12]
 8005afc:	2202      	movs	r2, #2
 8005afe:	2112      	movs	r1, #18
 8005b00:	f7ff ff78 	bl	80059f4 <std>
 8005b04:	2301      	movs	r3, #1
 8005b06:	61a3      	str	r3, [r4, #24]
 8005b08:	e7d2      	b.n	8005ab0 <__sinit+0xc>
 8005b0a:	bf00      	nop
 8005b0c:	08006e14 	.word	0x08006e14
 8005b10:	08005a3d 	.word	0x08005a3d

08005b14 <__sfp>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	4607      	mov	r7, r0
 8005b18:	f7ff ffac 	bl	8005a74 <__sfp_lock_acquire>
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <__sfp+0x84>)
 8005b1e:	681e      	ldr	r6, [r3, #0]
 8005b20:	69b3      	ldr	r3, [r6, #24]
 8005b22:	b913      	cbnz	r3, 8005b2a <__sfp+0x16>
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffbd 	bl	8005aa4 <__sinit>
 8005b2a:	3648      	adds	r6, #72	; 0x48
 8005b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	d503      	bpl.n	8005b3c <__sfp+0x28>
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	b30b      	cbz	r3, 8005b7c <__sfp+0x68>
 8005b38:	6836      	ldr	r6, [r6, #0]
 8005b3a:	e7f7      	b.n	8005b2c <__sfp+0x18>
 8005b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b40:	b9d5      	cbnz	r5, 8005b78 <__sfp+0x64>
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <__sfp+0x88>)
 8005b44:	60e3      	str	r3, [r4, #12]
 8005b46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b4a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b4c:	f000 f86c 	bl	8005c28 <__retarget_lock_init_recursive>
 8005b50:	f7ff ff96 	bl	8005a80 <__sfp_lock_release>
 8005b54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b5c:	6025      	str	r5, [r4, #0]
 8005b5e:	61a5      	str	r5, [r4, #24]
 8005b60:	2208      	movs	r2, #8
 8005b62:	4629      	mov	r1, r5
 8005b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b68:	f000 f86f 	bl	8005c4a <memset>
 8005b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b74:	4620      	mov	r0, r4
 8005b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b78:	3468      	adds	r4, #104	; 0x68
 8005b7a:	e7d9      	b.n	8005b30 <__sfp+0x1c>
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f7ff ff62 	bl	8005a48 <__sfmoreglue>
 8005b84:	4604      	mov	r4, r0
 8005b86:	6030      	str	r0, [r6, #0]
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d1d5      	bne.n	8005b38 <__sfp+0x24>
 8005b8c:	f7ff ff78 	bl	8005a80 <__sfp_lock_release>
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	e7ee      	b.n	8005b74 <__sfp+0x60>
 8005b96:	bf00      	nop
 8005b98:	08006e14 	.word	0x08006e14
 8005b9c:	ffff0001 	.word	0xffff0001

08005ba0 <_fwalk_reent>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	4688      	mov	r8, r1
 8005ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bac:	2700      	movs	r7, #0
 8005bae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb2:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb6:	d505      	bpl.n	8005bc4 <_fwalk_reent+0x24>
 8005bb8:	6824      	ldr	r4, [r4, #0]
 8005bba:	2c00      	cmp	r4, #0
 8005bbc:	d1f7      	bne.n	8005bae <_fwalk_reent+0xe>
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc4:	89ab      	ldrh	r3, [r5, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d907      	bls.n	8005bda <_fwalk_reent+0x3a>
 8005bca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	d003      	beq.n	8005bda <_fwalk_reent+0x3a>
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	47c0      	blx	r8
 8005bd8:	4307      	orrs	r7, r0
 8005bda:	3568      	adds	r5, #104	; 0x68
 8005bdc:	e7e9      	b.n	8005bb2 <_fwalk_reent+0x12>
	...

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4d0d      	ldr	r5, [pc, #52]	; (8005c18 <__libc_init_array+0x38>)
 8005be4:	4c0d      	ldr	r4, [pc, #52]	; (8005c1c <__libc_init_array+0x3c>)
 8005be6:	1b64      	subs	r4, r4, r5
 8005be8:	10a4      	asrs	r4, r4, #2
 8005bea:	2600      	movs	r6, #0
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	4d0b      	ldr	r5, [pc, #44]	; (8005c20 <__libc_init_array+0x40>)
 8005bf2:	4c0c      	ldr	r4, [pc, #48]	; (8005c24 <__libc_init_array+0x44>)
 8005bf4:	f000 feda 	bl	80069ac <_init>
 8005bf8:	1b64      	subs	r4, r4, r5
 8005bfa:	10a4      	asrs	r4, r4, #2
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	08006e54 	.word	0x08006e54
 8005c1c:	08006e54 	.word	0x08006e54
 8005c20:	08006e54 	.word	0x08006e54
 8005c24:	08006e58 	.word	0x08006e58

08005c28 <__retarget_lock_init_recursive>:
 8005c28:	4770      	bx	lr

08005c2a <__retarget_lock_acquire_recursive>:
 8005c2a:	4770      	bx	lr

08005c2c <__retarget_lock_release_recursive>:
 8005c2c:	4770      	bx	lr

08005c2e <memcpy>:
 8005c2e:	440a      	add	r2, r1
 8005c30:	4291      	cmp	r1, r2
 8005c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c36:	d100      	bne.n	8005c3a <memcpy+0xc>
 8005c38:	4770      	bx	lr
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c44:	4291      	cmp	r1, r2
 8005c46:	d1f9      	bne.n	8005c3c <memcpy+0xe>
 8005c48:	bd10      	pop	{r4, pc}

08005c4a <memset>:
 8005c4a:	4402      	add	r2, r0
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d100      	bne.n	8005c54 <memset+0xa>
 8005c52:	4770      	bx	lr
 8005c54:	f803 1b01 	strb.w	r1, [r3], #1
 8005c58:	e7f9      	b.n	8005c4e <memset+0x4>
	...

08005c5c <_free_r>:
 8005c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d044      	beq.n	8005cec <_free_r+0x90>
 8005c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c66:	9001      	str	r0, [sp, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c6e:	bfb8      	it	lt
 8005c70:	18e4      	addlt	r4, r4, r3
 8005c72:	f000 fb25 	bl	80062c0 <__malloc_lock>
 8005c76:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <_free_r+0x94>)
 8005c78:	9801      	ldr	r0, [sp, #4]
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	b933      	cbnz	r3, 8005c8c <_free_r+0x30>
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	6014      	str	r4, [r2, #0]
 8005c82:	b003      	add	sp, #12
 8005c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c88:	f000 bb20 	b.w	80062cc <__malloc_unlock>
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d908      	bls.n	8005ca2 <_free_r+0x46>
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	1961      	adds	r1, r4, r5
 8005c94:	428b      	cmp	r3, r1
 8005c96:	bf01      	itttt	eq
 8005c98:	6819      	ldreq	r1, [r3, #0]
 8005c9a:	685b      	ldreq	r3, [r3, #4]
 8005c9c:	1949      	addeq	r1, r1, r5
 8005c9e:	6021      	streq	r1, [r4, #0]
 8005ca0:	e7ed      	b.n	8005c7e <_free_r+0x22>
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b10b      	cbz	r3, 8005cac <_free_r+0x50>
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	d9fa      	bls.n	8005ca2 <_free_r+0x46>
 8005cac:	6811      	ldr	r1, [r2, #0]
 8005cae:	1855      	adds	r5, r2, r1
 8005cb0:	42a5      	cmp	r5, r4
 8005cb2:	d10b      	bne.n	8005ccc <_free_r+0x70>
 8005cb4:	6824      	ldr	r4, [r4, #0]
 8005cb6:	4421      	add	r1, r4
 8005cb8:	1854      	adds	r4, r2, r1
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	d1e0      	bne.n	8005c82 <_free_r+0x26>
 8005cc0:	681c      	ldr	r4, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	6053      	str	r3, [r2, #4]
 8005cc6:	4421      	add	r1, r4
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	e7da      	b.n	8005c82 <_free_r+0x26>
 8005ccc:	d902      	bls.n	8005cd4 <_free_r+0x78>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	e7d6      	b.n	8005c82 <_free_r+0x26>
 8005cd4:	6825      	ldr	r5, [r4, #0]
 8005cd6:	1961      	adds	r1, r4, r5
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	bf04      	itt	eq
 8005cdc:	6819      	ldreq	r1, [r3, #0]
 8005cde:	685b      	ldreq	r3, [r3, #4]
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	bf04      	itt	eq
 8005ce4:	1949      	addeq	r1, r1, r5
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	6054      	str	r4, [r2, #4]
 8005cea:	e7ca      	b.n	8005c82 <_free_r+0x26>
 8005cec:	b003      	add	sp, #12
 8005cee:	bd30      	pop	{r4, r5, pc}
 8005cf0:	20000728 	.word	0x20000728

08005cf4 <sbrk_aligned>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	4e0e      	ldr	r6, [pc, #56]	; (8005d30 <sbrk_aligned+0x3c>)
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	6831      	ldr	r1, [r6, #0]
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b911      	cbnz	r1, 8005d06 <sbrk_aligned+0x12>
 8005d00:	f000 f930 	bl	8005f64 <_sbrk_r>
 8005d04:	6030      	str	r0, [r6, #0]
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f92b 	bl	8005f64 <_sbrk_r>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	d00a      	beq.n	8005d28 <sbrk_aligned+0x34>
 8005d12:	1cc4      	adds	r4, r0, #3
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	42a0      	cmp	r0, r4
 8005d1a:	d007      	beq.n	8005d2c <sbrk_aligned+0x38>
 8005d1c:	1a21      	subs	r1, r4, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f920 	bl	8005f64 <_sbrk_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d101      	bne.n	8005d2c <sbrk_aligned+0x38>
 8005d28:	f04f 34ff 	mov.w	r4, #4294967295
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	2000072c 	.word	0x2000072c

08005d34 <_malloc_r>:
 8005d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d38:	1ccd      	adds	r5, r1, #3
 8005d3a:	f025 0503 	bic.w	r5, r5, #3
 8005d3e:	3508      	adds	r5, #8
 8005d40:	2d0c      	cmp	r5, #12
 8005d42:	bf38      	it	cc
 8005d44:	250c      	movcc	r5, #12
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	4607      	mov	r7, r0
 8005d4a:	db01      	blt.n	8005d50 <_malloc_r+0x1c>
 8005d4c:	42a9      	cmp	r1, r5
 8005d4e:	d905      	bls.n	8005d5c <_malloc_r+0x28>
 8005d50:	230c      	movs	r3, #12
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	2600      	movs	r6, #0
 8005d56:	4630      	mov	r0, r6
 8005d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d5c:	4e2e      	ldr	r6, [pc, #184]	; (8005e18 <_malloc_r+0xe4>)
 8005d5e:	f000 faaf 	bl	80062c0 <__malloc_lock>
 8005d62:	6833      	ldr	r3, [r6, #0]
 8005d64:	461c      	mov	r4, r3
 8005d66:	bb34      	cbnz	r4, 8005db6 <_malloc_r+0x82>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ffc2 	bl	8005cf4 <sbrk_aligned>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	4604      	mov	r4, r0
 8005d74:	d14d      	bne.n	8005e12 <_malloc_r+0xde>
 8005d76:	6834      	ldr	r4, [r6, #0]
 8005d78:	4626      	mov	r6, r4
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	d140      	bne.n	8005e00 <_malloc_r+0xcc>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	4631      	mov	r1, r6
 8005d82:	4638      	mov	r0, r7
 8005d84:	eb04 0803 	add.w	r8, r4, r3
 8005d88:	f000 f8ec 	bl	8005f64 <_sbrk_r>
 8005d8c:	4580      	cmp	r8, r0
 8005d8e:	d13a      	bne.n	8005e06 <_malloc_r+0xd2>
 8005d90:	6821      	ldr	r1, [r4, #0]
 8005d92:	3503      	adds	r5, #3
 8005d94:	1a6d      	subs	r5, r5, r1
 8005d96:	f025 0503 	bic.w	r5, r5, #3
 8005d9a:	3508      	adds	r5, #8
 8005d9c:	2d0c      	cmp	r5, #12
 8005d9e:	bf38      	it	cc
 8005da0:	250c      	movcc	r5, #12
 8005da2:	4629      	mov	r1, r5
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff ffa5 	bl	8005cf4 <sbrk_aligned>
 8005daa:	3001      	adds	r0, #1
 8005dac:	d02b      	beq.n	8005e06 <_malloc_r+0xd2>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	442b      	add	r3, r5
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	e00e      	b.n	8005dd4 <_malloc_r+0xa0>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	1b52      	subs	r2, r2, r5
 8005dba:	d41e      	bmi.n	8005dfa <_malloc_r+0xc6>
 8005dbc:	2a0b      	cmp	r2, #11
 8005dbe:	d916      	bls.n	8005dee <_malloc_r+0xba>
 8005dc0:	1961      	adds	r1, r4, r5
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	6025      	str	r5, [r4, #0]
 8005dc6:	bf18      	it	ne
 8005dc8:	6059      	strne	r1, [r3, #4]
 8005dca:	6863      	ldr	r3, [r4, #4]
 8005dcc:	bf08      	it	eq
 8005dce:	6031      	streq	r1, [r6, #0]
 8005dd0:	5162      	str	r2, [r4, r5]
 8005dd2:	604b      	str	r3, [r1, #4]
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f104 060b 	add.w	r6, r4, #11
 8005dda:	f000 fa77 	bl	80062cc <__malloc_unlock>
 8005dde:	f026 0607 	bic.w	r6, r6, #7
 8005de2:	1d23      	adds	r3, r4, #4
 8005de4:	1af2      	subs	r2, r6, r3
 8005de6:	d0b6      	beq.n	8005d56 <_malloc_r+0x22>
 8005de8:	1b9b      	subs	r3, r3, r6
 8005dea:	50a3      	str	r3, [r4, r2]
 8005dec:	e7b3      	b.n	8005d56 <_malloc_r+0x22>
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	bf0c      	ite	eq
 8005df4:	6032      	streq	r2, [r6, #0]
 8005df6:	605a      	strne	r2, [r3, #4]
 8005df8:	e7ec      	b.n	8005dd4 <_malloc_r+0xa0>
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	6864      	ldr	r4, [r4, #4]
 8005dfe:	e7b2      	b.n	8005d66 <_malloc_r+0x32>
 8005e00:	4634      	mov	r4, r6
 8005e02:	6876      	ldr	r6, [r6, #4]
 8005e04:	e7b9      	b.n	8005d7a <_malloc_r+0x46>
 8005e06:	230c      	movs	r3, #12
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f000 fa5e 	bl	80062cc <__malloc_unlock>
 8005e10:	e7a1      	b.n	8005d56 <_malloc_r+0x22>
 8005e12:	6025      	str	r5, [r4, #0]
 8005e14:	e7de      	b.n	8005dd4 <_malloc_r+0xa0>
 8005e16:	bf00      	nop
 8005e18:	20000728 	.word	0x20000728

08005e1c <iprintf>:
 8005e1c:	b40f      	push	{r0, r1, r2, r3}
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <iprintf+0x2c>)
 8005e20:	b513      	push	{r0, r1, r4, lr}
 8005e22:	681c      	ldr	r4, [r3, #0]
 8005e24:	b124      	cbz	r4, 8005e30 <iprintf+0x14>
 8005e26:	69a3      	ldr	r3, [r4, #24]
 8005e28:	b913      	cbnz	r3, 8005e30 <iprintf+0x14>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f7ff fe3a 	bl	8005aa4 <__sinit>
 8005e30:	ab05      	add	r3, sp, #20
 8005e32:	9a04      	ldr	r2, [sp, #16]
 8005e34:	68a1      	ldr	r1, [r4, #8]
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fa77 	bl	800632c <_vfiprintf_r>
 8005e3e:	b002      	add	sp, #8
 8005e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr
 8005e48:	20000040 	.word	0x20000040

08005e4c <putchar>:
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <putchar+0x28>)
 8005e4e:	b513      	push	{r0, r1, r4, lr}
 8005e50:	681c      	ldr	r4, [r3, #0]
 8005e52:	4601      	mov	r1, r0
 8005e54:	b134      	cbz	r4, 8005e64 <putchar+0x18>
 8005e56:	69a3      	ldr	r3, [r4, #24]
 8005e58:	b923      	cbnz	r3, 8005e64 <putchar+0x18>
 8005e5a:	9001      	str	r0, [sp, #4]
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff fe21 	bl	8005aa4 <__sinit>
 8005e62:	9901      	ldr	r1, [sp, #4]
 8005e64:	68a2      	ldr	r2, [r4, #8]
 8005e66:	4620      	mov	r0, r4
 8005e68:	b002      	add	sp, #8
 8005e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6e:	f000 bd21 	b.w	80068b4 <_putc_r>
 8005e72:	bf00      	nop
 8005e74:	20000040 	.word	0x20000040

08005e78 <_puts_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	b118      	cbz	r0, 8005e88 <_puts_r+0x10>
 8005e80:	6983      	ldr	r3, [r0, #24]
 8005e82:	b90b      	cbnz	r3, 8005e88 <_puts_r+0x10>
 8005e84:	f7ff fe0e 	bl	8005aa4 <__sinit>
 8005e88:	69ab      	ldr	r3, [r5, #24]
 8005e8a:	68ac      	ldr	r4, [r5, #8]
 8005e8c:	b913      	cbnz	r3, 8005e94 <_puts_r+0x1c>
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7ff fe08 	bl	8005aa4 <__sinit>
 8005e94:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <_puts_r+0xd0>)
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d120      	bne.n	8005edc <_puts_r+0x64>
 8005e9a:	686c      	ldr	r4, [r5, #4]
 8005e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e9e:	07db      	lsls	r3, r3, #31
 8005ea0:	d405      	bmi.n	8005eae <_puts_r+0x36>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0598      	lsls	r0, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_puts_r+0x36>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eaa:	f7ff febe 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	0719      	lsls	r1, r3, #28
 8005eb2:	d51d      	bpl.n	8005ef0 <_puts_r+0x78>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	b1db      	cbz	r3, 8005ef0 <_puts_r+0x78>
 8005eb8:	3e01      	subs	r6, #1
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	bb39      	cbnz	r1, 8005f16 <_puts_r+0x9e>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da38      	bge.n	8005f3c <_puts_r+0xc4>
 8005eca:	4622      	mov	r2, r4
 8005ecc:	210a      	movs	r1, #10
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f89c 	bl	800600c <__swbuf_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d011      	beq.n	8005efc <_puts_r+0x84>
 8005ed8:	250a      	movs	r5, #10
 8005eda:	e011      	b.n	8005f00 <_puts_r+0x88>
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <_puts_r+0xd4>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d101      	bne.n	8005ee6 <_puts_r+0x6e>
 8005ee2:	68ac      	ldr	r4, [r5, #8]
 8005ee4:	e7da      	b.n	8005e9c <_puts_r+0x24>
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <_puts_r+0xd8>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	bf08      	it	eq
 8005eec:	68ec      	ldreq	r4, [r5, #12]
 8005eee:	e7d5      	b.n	8005e9c <_puts_r+0x24>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f8ee 	bl	80060d4 <__swsetup_r>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d0dd      	beq.n	8005eb8 <_puts_r+0x40>
 8005efc:	f04f 35ff 	mov.w	r5, #4294967295
 8005f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f02:	07da      	lsls	r2, r3, #31
 8005f04:	d405      	bmi.n	8005f12 <_puts_r+0x9a>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	059b      	lsls	r3, r3, #22
 8005f0a:	d402      	bmi.n	8005f12 <_puts_r+0x9a>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f7ff fe8d 	bl	8005c2c <__retarget_lock_release_recursive>
 8005f12:	4628      	mov	r0, r5
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da04      	bge.n	8005f24 <_puts_r+0xac>
 8005f1a:	69a2      	ldr	r2, [r4, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	dc06      	bgt.n	8005f2e <_puts_r+0xb6>
 8005f20:	290a      	cmp	r1, #10
 8005f22:	d004      	beq.n	8005f2e <_puts_r+0xb6>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	6022      	str	r2, [r4, #0]
 8005f2a:	7019      	strb	r1, [r3, #0]
 8005f2c:	e7c5      	b.n	8005eba <_puts_r+0x42>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 f86b 	bl	800600c <__swbuf_r>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d1bf      	bne.n	8005eba <_puts_r+0x42>
 8005f3a:	e7df      	b.n	8005efc <_puts_r+0x84>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	250a      	movs	r5, #10
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	701d      	strb	r5, [r3, #0]
 8005f46:	e7db      	b.n	8005f00 <_puts_r+0x88>
 8005f48:	08006dd4 	.word	0x08006dd4
 8005f4c:	08006df4 	.word	0x08006df4
 8005f50:	08006db4 	.word	0x08006db4

08005f54 <puts>:
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <puts+0xc>)
 8005f56:	4601      	mov	r1, r0
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	f7ff bf8d 	b.w	8005e78 <_puts_r>
 8005f5e:	bf00      	nop
 8005f60:	20000040 	.word	0x20000040

08005f64 <_sbrk_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	; (8005f80 <_sbrk_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fb ff44 	bl	8001dfc <_sbrk>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_sbrk_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_sbrk_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20000730 	.word	0x20000730

08005f84 <__sread>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	460c      	mov	r4, r1
 8005f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8c:	f000 fcda 	bl	8006944 <_read_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	bfab      	itete	ge
 8005f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f96:	89a3      	ldrhlt	r3, [r4, #12]
 8005f98:	181b      	addge	r3, r3, r0
 8005f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f9e:	bfac      	ite	ge
 8005fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fa2:	81a3      	strhlt	r3, [r4, #12]
 8005fa4:	bd10      	pop	{r4, pc}

08005fa6 <__swrite>:
 8005fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005faa:	461f      	mov	r7, r3
 8005fac:	898b      	ldrh	r3, [r1, #12]
 8005fae:	05db      	lsls	r3, r3, #23
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	d505      	bpl.n	8005fc4 <__swrite+0x1e>
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f000 f906 	bl	80061d0 <_lseek_r>
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fce:	81a3      	strh	r3, [r4, #12]
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fda:	f000 b869 	b.w	80060b0 <_write_r>

08005fde <__sseek>:
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe6:	f000 f8f3 	bl	80061d0 <_lseek_r>
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	bf15      	itete	ne
 8005ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ffa:	81a3      	strheq	r3, [r4, #12]
 8005ffc:	bf18      	it	ne
 8005ffe:	81a3      	strhne	r3, [r4, #12]
 8006000:	bd10      	pop	{r4, pc}

08006002 <__sclose>:
 8006002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006006:	f000 b8d3 	b.w	80061b0 <_close_r>
	...

0800600c <__swbuf_r>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	460e      	mov	r6, r1
 8006010:	4614      	mov	r4, r2
 8006012:	4605      	mov	r5, r0
 8006014:	b118      	cbz	r0, 800601e <__swbuf_r+0x12>
 8006016:	6983      	ldr	r3, [r0, #24]
 8006018:	b90b      	cbnz	r3, 800601e <__swbuf_r+0x12>
 800601a:	f7ff fd43 	bl	8005aa4 <__sinit>
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <__swbuf_r+0x98>)
 8006020:	429c      	cmp	r4, r3
 8006022:	d12b      	bne.n	800607c <__swbuf_r+0x70>
 8006024:	686c      	ldr	r4, [r5, #4]
 8006026:	69a3      	ldr	r3, [r4, #24]
 8006028:	60a3      	str	r3, [r4, #8]
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	071a      	lsls	r2, r3, #28
 800602e:	d52f      	bpl.n	8006090 <__swbuf_r+0x84>
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	b36b      	cbz	r3, 8006090 <__swbuf_r+0x84>
 8006034:	6923      	ldr	r3, [r4, #16]
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	1ac0      	subs	r0, r0, r3
 800603a:	6963      	ldr	r3, [r4, #20]
 800603c:	b2f6      	uxtb	r6, r6
 800603e:	4283      	cmp	r3, r0
 8006040:	4637      	mov	r7, r6
 8006042:	dc04      	bgt.n	800604e <__swbuf_r+0x42>
 8006044:	4621      	mov	r1, r4
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fc86 	bl	8005958 <_fflush_r>
 800604c:	bb30      	cbnz	r0, 800609c <__swbuf_r+0x90>
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	3b01      	subs	r3, #1
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	6022      	str	r2, [r4, #0]
 800605a:	701e      	strb	r6, [r3, #0]
 800605c:	6963      	ldr	r3, [r4, #20]
 800605e:	3001      	adds	r0, #1
 8006060:	4283      	cmp	r3, r0
 8006062:	d004      	beq.n	800606e <__swbuf_r+0x62>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	07db      	lsls	r3, r3, #31
 8006068:	d506      	bpl.n	8006078 <__swbuf_r+0x6c>
 800606a:	2e0a      	cmp	r6, #10
 800606c:	d104      	bne.n	8006078 <__swbuf_r+0x6c>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f7ff fc71 	bl	8005958 <_fflush_r>
 8006076:	b988      	cbnz	r0, 800609c <__swbuf_r+0x90>
 8006078:	4638      	mov	r0, r7
 800607a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <__swbuf_r+0x9c>)
 800607e:	429c      	cmp	r4, r3
 8006080:	d101      	bne.n	8006086 <__swbuf_r+0x7a>
 8006082:	68ac      	ldr	r4, [r5, #8]
 8006084:	e7cf      	b.n	8006026 <__swbuf_r+0x1a>
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <__swbuf_r+0xa0>)
 8006088:	429c      	cmp	r4, r3
 800608a:	bf08      	it	eq
 800608c:	68ec      	ldreq	r4, [r5, #12]
 800608e:	e7ca      	b.n	8006026 <__swbuf_r+0x1a>
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f000 f81e 	bl	80060d4 <__swsetup_r>
 8006098:	2800      	cmp	r0, #0
 800609a:	d0cb      	beq.n	8006034 <__swbuf_r+0x28>
 800609c:	f04f 37ff 	mov.w	r7, #4294967295
 80060a0:	e7ea      	b.n	8006078 <__swbuf_r+0x6c>
 80060a2:	bf00      	nop
 80060a4:	08006dd4 	.word	0x08006dd4
 80060a8:	08006df4 	.word	0x08006df4
 80060ac:	08006db4 	.word	0x08006db4

080060b0 <_write_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d07      	ldr	r5, [pc, #28]	; (80060d0 <_write_r+0x20>)
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	602a      	str	r2, [r5, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fb fe4b 	bl	8001d5a <_write>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_write_r+0x1e>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_write_r+0x1e>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	20000730 	.word	0x20000730

080060d4 <__swsetup_r>:
 80060d4:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <__swsetup_r+0xcc>)
 80060d6:	b570      	push	{r4, r5, r6, lr}
 80060d8:	681d      	ldr	r5, [r3, #0]
 80060da:	4606      	mov	r6, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	b125      	cbz	r5, 80060ea <__swsetup_r+0x16>
 80060e0:	69ab      	ldr	r3, [r5, #24]
 80060e2:	b913      	cbnz	r3, 80060ea <__swsetup_r+0x16>
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7ff fcdd 	bl	8005aa4 <__sinit>
 80060ea:	4b2e      	ldr	r3, [pc, #184]	; (80061a4 <__swsetup_r+0xd0>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	d10f      	bne.n	8006110 <__swsetup_r+0x3c>
 80060f0:	686c      	ldr	r4, [r5, #4]
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f8:	0719      	lsls	r1, r3, #28
 80060fa:	d42c      	bmi.n	8006156 <__swsetup_r+0x82>
 80060fc:	06dd      	lsls	r5, r3, #27
 80060fe:	d411      	bmi.n	8006124 <__swsetup_r+0x50>
 8006100:	2309      	movs	r3, #9
 8006102:	6033      	str	r3, [r6, #0]
 8006104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	e03e      	b.n	800618e <__swsetup_r+0xba>
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <__swsetup_r+0xd4>)
 8006112:	429c      	cmp	r4, r3
 8006114:	d101      	bne.n	800611a <__swsetup_r+0x46>
 8006116:	68ac      	ldr	r4, [r5, #8]
 8006118:	e7eb      	b.n	80060f2 <__swsetup_r+0x1e>
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <__swsetup_r+0xd8>)
 800611c:	429c      	cmp	r4, r3
 800611e:	bf08      	it	eq
 8006120:	68ec      	ldreq	r4, [r5, #12]
 8006122:	e7e6      	b.n	80060f2 <__swsetup_r+0x1e>
 8006124:	0758      	lsls	r0, r3, #29
 8006126:	d512      	bpl.n	800614e <__swsetup_r+0x7a>
 8006128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800612a:	b141      	cbz	r1, 800613e <__swsetup_r+0x6a>
 800612c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006130:	4299      	cmp	r1, r3
 8006132:	d002      	beq.n	800613a <__swsetup_r+0x66>
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fd91 	bl	8005c5c <_free_r>
 800613a:	2300      	movs	r3, #0
 800613c:	6363      	str	r3, [r4, #52]	; 0x34
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	2300      	movs	r3, #0
 8006148:	6063      	str	r3, [r4, #4]
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0308 	orr.w	r3, r3, #8
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	b94b      	cbnz	r3, 800616e <__swsetup_r+0x9a>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006164:	d003      	beq.n	800616e <__swsetup_r+0x9a>
 8006166:	4621      	mov	r1, r4
 8006168:	4630      	mov	r0, r6
 800616a:	f000 f869 	bl	8006240 <__smakebuf_r>
 800616e:	89a0      	ldrh	r0, [r4, #12]
 8006170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006174:	f010 0301 	ands.w	r3, r0, #1
 8006178:	d00a      	beq.n	8006190 <__swsetup_r+0xbc>
 800617a:	2300      	movs	r3, #0
 800617c:	60a3      	str	r3, [r4, #8]
 800617e:	6963      	ldr	r3, [r4, #20]
 8006180:	425b      	negs	r3, r3
 8006182:	61a3      	str	r3, [r4, #24]
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	b943      	cbnz	r3, 800619a <__swsetup_r+0xc6>
 8006188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800618c:	d1ba      	bne.n	8006104 <__swsetup_r+0x30>
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	0781      	lsls	r1, r0, #30
 8006192:	bf58      	it	pl
 8006194:	6963      	ldrpl	r3, [r4, #20]
 8006196:	60a3      	str	r3, [r4, #8]
 8006198:	e7f4      	b.n	8006184 <__swsetup_r+0xb0>
 800619a:	2000      	movs	r0, #0
 800619c:	e7f7      	b.n	800618e <__swsetup_r+0xba>
 800619e:	bf00      	nop
 80061a0:	20000040 	.word	0x20000040
 80061a4:	08006dd4 	.word	0x08006dd4
 80061a8:	08006df4 	.word	0x08006df4
 80061ac:	08006db4 	.word	0x08006db4

080061b0 <_close_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d06      	ldr	r5, [pc, #24]	; (80061cc <_close_r+0x1c>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fde9 	bl	8001d92 <_close>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_close_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_close_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20000730 	.word	0x20000730

080061d0 <_lseek_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_lseek_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fb fdfe 	bl	8001de0 <_lseek>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_lseek_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_lseek_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20000730 	.word	0x20000730

080061f4 <__swhatbuf_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460e      	mov	r6, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	2900      	cmp	r1, #0
 80061fe:	b096      	sub	sp, #88	; 0x58
 8006200:	4614      	mov	r4, r2
 8006202:	461d      	mov	r5, r3
 8006204:	da08      	bge.n	8006218 <__swhatbuf_r+0x24>
 8006206:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	602a      	str	r2, [r5, #0]
 800620e:	061a      	lsls	r2, r3, #24
 8006210:	d410      	bmi.n	8006234 <__swhatbuf_r+0x40>
 8006212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006216:	e00e      	b.n	8006236 <__swhatbuf_r+0x42>
 8006218:	466a      	mov	r2, sp
 800621a:	f000 fba5 	bl	8006968 <_fstat_r>
 800621e:	2800      	cmp	r0, #0
 8006220:	dbf1      	blt.n	8006206 <__swhatbuf_r+0x12>
 8006222:	9a01      	ldr	r2, [sp, #4]
 8006224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800622c:	425a      	negs	r2, r3
 800622e:	415a      	adcs	r2, r3
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	e7ee      	b.n	8006212 <__swhatbuf_r+0x1e>
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	2000      	movs	r0, #0
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	b016      	add	sp, #88	; 0x58
 800623c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006240 <__smakebuf_r>:
 8006240:	898b      	ldrh	r3, [r1, #12]
 8006242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006244:	079d      	lsls	r5, r3, #30
 8006246:	4606      	mov	r6, r0
 8006248:	460c      	mov	r4, r1
 800624a:	d507      	bpl.n	800625c <__smakebuf_r+0x1c>
 800624c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	2301      	movs	r3, #1
 8006256:	6163      	str	r3, [r4, #20]
 8006258:	b002      	add	sp, #8
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	ab01      	add	r3, sp, #4
 800625e:	466a      	mov	r2, sp
 8006260:	f7ff ffc8 	bl	80061f4 <__swhatbuf_r>
 8006264:	9900      	ldr	r1, [sp, #0]
 8006266:	4605      	mov	r5, r0
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff fd63 	bl	8005d34 <_malloc_r>
 800626e:	b948      	cbnz	r0, 8006284 <__smakebuf_r+0x44>
 8006270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d4ef      	bmi.n	8006258 <__smakebuf_r+0x18>
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	e7e3      	b.n	800624c <__smakebuf_r+0xc>
 8006284:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <__smakebuf_r+0x7c>)
 8006286:	62b3      	str	r3, [r6, #40]	; 0x28
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	6020      	str	r0, [r4, #0]
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	6163      	str	r3, [r4, #20]
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	6120      	str	r0, [r4, #16]
 800629a:	b15b      	cbz	r3, 80062b4 <__smakebuf_r+0x74>
 800629c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a0:	4630      	mov	r0, r6
 80062a2:	f000 fb73 	bl	800698c <_isatty_r>
 80062a6:	b128      	cbz	r0, 80062b4 <__smakebuf_r+0x74>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	89a0      	ldrh	r0, [r4, #12]
 80062b6:	4305      	orrs	r5, r0
 80062b8:	81a5      	strh	r5, [r4, #12]
 80062ba:	e7cd      	b.n	8006258 <__smakebuf_r+0x18>
 80062bc:	08005a3d 	.word	0x08005a3d

080062c0 <__malloc_lock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__malloc_lock+0x8>)
 80062c2:	f7ff bcb2 	b.w	8005c2a <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	20000724 	.word	0x20000724

080062cc <__malloc_unlock>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__malloc_unlock+0x8>)
 80062ce:	f7ff bcad 	b.w	8005c2c <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	20000724 	.word	0x20000724

080062d8 <__sfputc_r>:
 80062d8:	6893      	ldr	r3, [r2, #8]
 80062da:	3b01      	subs	r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	b410      	push	{r4}
 80062e0:	6093      	str	r3, [r2, #8]
 80062e2:	da08      	bge.n	80062f6 <__sfputc_r+0x1e>
 80062e4:	6994      	ldr	r4, [r2, #24]
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	db01      	blt.n	80062ee <__sfputc_r+0x16>
 80062ea:	290a      	cmp	r1, #10
 80062ec:	d103      	bne.n	80062f6 <__sfputc_r+0x1e>
 80062ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f2:	f7ff be8b 	b.w	800600c <__swbuf_r>
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	1c58      	adds	r0, r3, #1
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	7019      	strb	r1, [r3, #0]
 80062fe:	4608      	mov	r0, r1
 8006300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006304:	4770      	bx	lr

08006306 <__sfputs_r>:
 8006306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006308:	4606      	mov	r6, r0
 800630a:	460f      	mov	r7, r1
 800630c:	4614      	mov	r4, r2
 800630e:	18d5      	adds	r5, r2, r3
 8006310:	42ac      	cmp	r4, r5
 8006312:	d101      	bne.n	8006318 <__sfputs_r+0x12>
 8006314:	2000      	movs	r0, #0
 8006316:	e007      	b.n	8006328 <__sfputs_r+0x22>
 8006318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631c:	463a      	mov	r2, r7
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffda 	bl	80062d8 <__sfputc_r>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d1f3      	bne.n	8006310 <__sfputs_r+0xa>
 8006328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800632c <_vfiprintf_r>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	460d      	mov	r5, r1
 8006332:	b09d      	sub	sp, #116	; 0x74
 8006334:	4614      	mov	r4, r2
 8006336:	4698      	mov	r8, r3
 8006338:	4606      	mov	r6, r0
 800633a:	b118      	cbz	r0, 8006344 <_vfiprintf_r+0x18>
 800633c:	6983      	ldr	r3, [r0, #24]
 800633e:	b90b      	cbnz	r3, 8006344 <_vfiprintf_r+0x18>
 8006340:	f7ff fbb0 	bl	8005aa4 <__sinit>
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <_vfiprintf_r+0x240>)
 8006346:	429d      	cmp	r5, r3
 8006348:	d11b      	bne.n	8006382 <_vfiprintf_r+0x56>
 800634a:	6875      	ldr	r5, [r6, #4]
 800634c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d405      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d402      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800635a:	f7ff fc66 	bl	8005c2a <__retarget_lock_acquire_recursive>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	071b      	lsls	r3, r3, #28
 8006362:	d501      	bpl.n	8006368 <_vfiprintf_r+0x3c>
 8006364:	692b      	ldr	r3, [r5, #16]
 8006366:	b9eb      	cbnz	r3, 80063a4 <_vfiprintf_r+0x78>
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f7ff feb2 	bl	80060d4 <__swsetup_r>
 8006370:	b1c0      	cbz	r0, 80063a4 <_vfiprintf_r+0x78>
 8006372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006374:	07dc      	lsls	r4, r3, #31
 8006376:	d50e      	bpl.n	8006396 <_vfiprintf_r+0x6a>
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	b01d      	add	sp, #116	; 0x74
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	4b7b      	ldr	r3, [pc, #492]	; (8006570 <_vfiprintf_r+0x244>)
 8006384:	429d      	cmp	r5, r3
 8006386:	d101      	bne.n	800638c <_vfiprintf_r+0x60>
 8006388:	68b5      	ldr	r5, [r6, #8]
 800638a:	e7df      	b.n	800634c <_vfiprintf_r+0x20>
 800638c:	4b79      	ldr	r3, [pc, #484]	; (8006574 <_vfiprintf_r+0x248>)
 800638e:	429d      	cmp	r5, r3
 8006390:	bf08      	it	eq
 8006392:	68f5      	ldreq	r5, [r6, #12]
 8006394:	e7da      	b.n	800634c <_vfiprintf_r+0x20>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	0598      	lsls	r0, r3, #22
 800639a:	d4ed      	bmi.n	8006378 <_vfiprintf_r+0x4c>
 800639c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639e:	f7ff fc45 	bl	8005c2c <__retarget_lock_release_recursive>
 80063a2:	e7e9      	b.n	8006378 <_vfiprintf_r+0x4c>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	2320      	movs	r3, #32
 80063aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b2:	2330      	movs	r3, #48	; 0x30
 80063b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006578 <_vfiprintf_r+0x24c>
 80063b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063bc:	f04f 0901 	mov.w	r9, #1
 80063c0:	4623      	mov	r3, r4
 80063c2:	469a      	mov	sl, r3
 80063c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c8:	b10a      	cbz	r2, 80063ce <_vfiprintf_r+0xa2>
 80063ca:	2a25      	cmp	r2, #37	; 0x25
 80063cc:	d1f9      	bne.n	80063c2 <_vfiprintf_r+0x96>
 80063ce:	ebba 0b04 	subs.w	fp, sl, r4
 80063d2:	d00b      	beq.n	80063ec <_vfiprintf_r+0xc0>
 80063d4:	465b      	mov	r3, fp
 80063d6:	4622      	mov	r2, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ff93 	bl	8006306 <__sfputs_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	f000 80aa 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e8:	445a      	add	r2, fp
 80063ea:	9209      	str	r2, [sp, #36]	; 0x24
 80063ec:	f89a 3000 	ldrb.w	r3, [sl]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a2 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006400:	f10a 0a01 	add.w	sl, sl, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800640c:	931a      	str	r3, [sp, #104]	; 0x68
 800640e:	4654      	mov	r4, sl
 8006410:	2205      	movs	r2, #5
 8006412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006416:	4858      	ldr	r0, [pc, #352]	; (8006578 <_vfiprintf_r+0x24c>)
 8006418:	f7f9 feea 	bl	80001f0 <memchr>
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	b9d8      	cbnz	r0, 8006458 <_vfiprintf_r+0x12c>
 8006420:	06d1      	lsls	r1, r2, #27
 8006422:	bf44      	itt	mi
 8006424:	2320      	movmi	r3, #32
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642a:	0713      	lsls	r3, r2, #28
 800642c:	bf44      	itt	mi
 800642e:	232b      	movmi	r3, #43	; 0x2b
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006434:	f89a 3000 	ldrb.w	r3, [sl]
 8006438:	2b2a      	cmp	r3, #42	; 0x2a
 800643a:	d015      	beq.n	8006468 <_vfiprintf_r+0x13c>
 800643c:	9a07      	ldr	r2, [sp, #28]
 800643e:	4654      	mov	r4, sl
 8006440:	2000      	movs	r0, #0
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4621      	mov	r1, r4
 8006448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800644c:	3b30      	subs	r3, #48	; 0x30
 800644e:	2b09      	cmp	r3, #9
 8006450:	d94e      	bls.n	80064f0 <_vfiprintf_r+0x1c4>
 8006452:	b1b0      	cbz	r0, 8006482 <_vfiprintf_r+0x156>
 8006454:	9207      	str	r2, [sp, #28]
 8006456:	e014      	b.n	8006482 <_vfiprintf_r+0x156>
 8006458:	eba0 0308 	sub.w	r3, r0, r8
 800645c:	fa09 f303 	lsl.w	r3, r9, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	46a2      	mov	sl, r4
 8006466:	e7d2      	b.n	800640e <_vfiprintf_r+0xe2>
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	1d19      	adds	r1, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfbb      	ittet	lt
 8006474:	425b      	neglt	r3, r3
 8006476:	f042 0202 	orrlt.w	r2, r2, #2
 800647a:	9307      	strge	r3, [sp, #28]
 800647c:	9307      	strlt	r3, [sp, #28]
 800647e:	bfb8      	it	lt
 8006480:	9204      	strlt	r2, [sp, #16]
 8006482:	7823      	ldrb	r3, [r4, #0]
 8006484:	2b2e      	cmp	r3, #46	; 0x2e
 8006486:	d10c      	bne.n	80064a2 <_vfiprintf_r+0x176>
 8006488:	7863      	ldrb	r3, [r4, #1]
 800648a:	2b2a      	cmp	r3, #42	; 0x2a
 800648c:	d135      	bne.n	80064fa <_vfiprintf_r+0x1ce>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	9203      	str	r2, [sp, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	bfb8      	it	lt
 800649a:	f04f 33ff 	movlt.w	r3, #4294967295
 800649e:	3402      	adds	r4, #2
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006588 <_vfiprintf_r+0x25c>
 80064a6:	7821      	ldrb	r1, [r4, #0]
 80064a8:	2203      	movs	r2, #3
 80064aa:	4650      	mov	r0, sl
 80064ac:	f7f9 fea0 	bl	80001f0 <memchr>
 80064b0:	b140      	cbz	r0, 80064c4 <_vfiprintf_r+0x198>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	eba0 000a 	sub.w	r0, r0, sl
 80064b8:	fa03 f000 	lsl.w	r0, r3, r0
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	4303      	orrs	r3, r0
 80064c0:	3401      	adds	r4, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	482c      	ldr	r0, [pc, #176]	; (800657c <_vfiprintf_r+0x250>)
 80064ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ce:	2206      	movs	r2, #6
 80064d0:	f7f9 fe8e 	bl	80001f0 <memchr>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d03f      	beq.n	8006558 <_vfiprintf_r+0x22c>
 80064d8:	4b29      	ldr	r3, [pc, #164]	; (8006580 <_vfiprintf_r+0x254>)
 80064da:	bb1b      	cbnz	r3, 8006524 <_vfiprintf_r+0x1f8>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	3308      	adds	r3, #8
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	443b      	add	r3, r7
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	e767      	b.n	80063c0 <_vfiprintf_r+0x94>
 80064f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f4:	460c      	mov	r4, r1
 80064f6:	2001      	movs	r0, #1
 80064f8:	e7a5      	b.n	8006446 <_vfiprintf_r+0x11a>
 80064fa:	2300      	movs	r3, #0
 80064fc:	3401      	adds	r4, #1
 80064fe:	9305      	str	r3, [sp, #20]
 8006500:	4619      	mov	r1, r3
 8006502:	f04f 0c0a 	mov.w	ip, #10
 8006506:	4620      	mov	r0, r4
 8006508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800650c:	3a30      	subs	r2, #48	; 0x30
 800650e:	2a09      	cmp	r2, #9
 8006510:	d903      	bls.n	800651a <_vfiprintf_r+0x1ee>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0c5      	beq.n	80064a2 <_vfiprintf_r+0x176>
 8006516:	9105      	str	r1, [sp, #20]
 8006518:	e7c3      	b.n	80064a2 <_vfiprintf_r+0x176>
 800651a:	fb0c 2101 	mla	r1, ip, r1, r2
 800651e:	4604      	mov	r4, r0
 8006520:	2301      	movs	r3, #1
 8006522:	e7f0      	b.n	8006506 <_vfiprintf_r+0x1da>
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	462a      	mov	r2, r5
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <_vfiprintf_r+0x258>)
 800652c:	a904      	add	r1, sp, #16
 800652e:	4630      	mov	r0, r6
 8006530:	f3af 8000 	nop.w
 8006534:	4607      	mov	r7, r0
 8006536:	1c78      	adds	r0, r7, #1
 8006538:	d1d6      	bne.n	80064e8 <_vfiprintf_r+0x1bc>
 800653a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	d405      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006540:	89ab      	ldrh	r3, [r5, #12]
 8006542:	059a      	lsls	r2, r3, #22
 8006544:	d402      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006548:	f7ff fb70 	bl	8005c2c <__retarget_lock_release_recursive>
 800654c:	89ab      	ldrh	r3, [r5, #12]
 800654e:	065b      	lsls	r3, r3, #25
 8006550:	f53f af12 	bmi.w	8006378 <_vfiprintf_r+0x4c>
 8006554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006556:	e711      	b.n	800637c <_vfiprintf_r+0x50>
 8006558:	ab03      	add	r3, sp, #12
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	462a      	mov	r2, r5
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <_vfiprintf_r+0x258>)
 8006560:	a904      	add	r1, sp, #16
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f880 	bl	8006668 <_printf_i>
 8006568:	e7e4      	b.n	8006534 <_vfiprintf_r+0x208>
 800656a:	bf00      	nop
 800656c:	08006dd4 	.word	0x08006dd4
 8006570:	08006df4 	.word	0x08006df4
 8006574:	08006db4 	.word	0x08006db4
 8006578:	08006e18 	.word	0x08006e18
 800657c:	08006e22 	.word	0x08006e22
 8006580:	00000000 	.word	0x00000000
 8006584:	08006307 	.word	0x08006307
 8006588:	08006e1e 	.word	0x08006e1e

0800658c <_printf_common>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	4616      	mov	r6, r2
 8006592:	4699      	mov	r9, r3
 8006594:	688a      	ldr	r2, [r1, #8]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800659c:	4293      	cmp	r3, r2
 800659e:	bfb8      	it	lt
 80065a0:	4613      	movlt	r3, r2
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a8:	4607      	mov	r7, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b10a      	cbz	r2, 80065b2 <_printf_common+0x26>
 80065ae:	3301      	adds	r3, #1
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	6833      	ldrmi	r3, [r6, #0]
 80065ba:	3302      	addmi	r3, #2
 80065bc:	6033      	strmi	r3, [r6, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	f015 0506 	ands.w	r5, r5, #6
 80065c4:	d106      	bne.n	80065d4 <_printf_common+0x48>
 80065c6:	f104 0a19 	add.w	sl, r4, #25
 80065ca:	68e3      	ldr	r3, [r4, #12]
 80065cc:	6832      	ldr	r2, [r6, #0]
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc26      	bgt.n	8006622 <_printf_common+0x96>
 80065d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d8:	1e13      	subs	r3, r2, #0
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	bf18      	it	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	0692      	lsls	r2, r2, #26
 80065e2:	d42b      	bmi.n	800663c <_printf_common+0xb0>
 80065e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e8:	4649      	mov	r1, r9
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c0      	blx	r8
 80065ee:	3001      	adds	r0, #1
 80065f0:	d01e      	beq.n	8006630 <_printf_common+0xa4>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	68e5      	ldr	r5, [r4, #12]
 80065f6:	6832      	ldr	r2, [r6, #0]
 80065f8:	f003 0306 	and.w	r3, r3, #6
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	bf08      	it	eq
 8006600:	1aad      	subeq	r5, r5, r2
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	bf0c      	ite	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	2500      	movne	r5, #0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfc4      	itt	gt
 8006612:	1a9b      	subgt	r3, r3, r2
 8006614:	18ed      	addgt	r5, r5, r3
 8006616:	2600      	movs	r6, #0
 8006618:	341a      	adds	r4, #26
 800661a:	42b5      	cmp	r5, r6
 800661c:	d11a      	bne.n	8006654 <_printf_common+0xc8>
 800661e:	2000      	movs	r0, #0
 8006620:	e008      	b.n	8006634 <_printf_common+0xa8>
 8006622:	2301      	movs	r3, #1
 8006624:	4652      	mov	r2, sl
 8006626:	4649      	mov	r1, r9
 8006628:	4638      	mov	r0, r7
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d103      	bne.n	8006638 <_printf_common+0xac>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	3501      	adds	r5, #1
 800663a:	e7c6      	b.n	80065ca <_printf_common+0x3e>
 800663c:	18e1      	adds	r1, r4, r3
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	2030      	movs	r0, #48	; 0x30
 8006642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006646:	4422      	add	r2, r4
 8006648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800664c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006650:	3302      	adds	r3, #2
 8006652:	e7c7      	b.n	80065e4 <_printf_common+0x58>
 8006654:	2301      	movs	r3, #1
 8006656:	4622      	mov	r2, r4
 8006658:	4649      	mov	r1, r9
 800665a:	4638      	mov	r0, r7
 800665c:	47c0      	blx	r8
 800665e:	3001      	adds	r0, #1
 8006660:	d0e6      	beq.n	8006630 <_printf_common+0xa4>
 8006662:	3601      	adds	r6, #1
 8006664:	e7d9      	b.n	800661a <_printf_common+0x8e>
	...

08006668 <_printf_i>:
 8006668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	7e0f      	ldrb	r7, [r1, #24]
 800666e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006670:	2f78      	cmp	r7, #120	; 0x78
 8006672:	4691      	mov	r9, r2
 8006674:	4680      	mov	r8, r0
 8006676:	460c      	mov	r4, r1
 8006678:	469a      	mov	sl, r3
 800667a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800667e:	d807      	bhi.n	8006690 <_printf_i+0x28>
 8006680:	2f62      	cmp	r7, #98	; 0x62
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x32>
 8006684:	2f00      	cmp	r7, #0
 8006686:	f000 80d8 	beq.w	800683a <_printf_i+0x1d2>
 800668a:	2f58      	cmp	r7, #88	; 0x58
 800668c:	f000 80a3 	beq.w	80067d6 <_printf_i+0x16e>
 8006690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006698:	e03a      	b.n	8006710 <_printf_i+0xa8>
 800669a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800669e:	2b15      	cmp	r3, #21
 80066a0:	d8f6      	bhi.n	8006690 <_printf_i+0x28>
 80066a2:	a101      	add	r1, pc, #4	; (adr r1, 80066a8 <_printf_i+0x40>)
 80066a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006691 	.word	0x08006691
 80066b4:	08006691 	.word	0x08006691
 80066b8:	08006691 	.word	0x08006691
 80066bc:	08006691 	.word	0x08006691
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006691 	.word	0x08006691
 80066c8:	08006691 	.word	0x08006691
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	08006821 	.word	0x08006821
 80066d8:	08006745 	.word	0x08006745
 80066dc:	08006803 	.word	0x08006803
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	08006843 	.word	0x08006843
 80066ec:	08006691 	.word	0x08006691
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	0800680b 	.word	0x0800680b
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800670c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006710:	2301      	movs	r3, #1
 8006712:	e0a3      	b.n	800685c <_printf_i+0x1f4>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	6829      	ldr	r1, [r5, #0]
 8006718:	0606      	lsls	r6, r0, #24
 800671a:	f101 0304 	add.w	r3, r1, #4
 800671e:	d50a      	bpl.n	8006736 <_printf_i+0xce>
 8006720:	680e      	ldr	r6, [r1, #0]
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	2e00      	cmp	r6, #0
 8006726:	da03      	bge.n	8006730 <_printf_i+0xc8>
 8006728:	232d      	movs	r3, #45	; 0x2d
 800672a:	4276      	negs	r6, r6
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006730:	485e      	ldr	r0, [pc, #376]	; (80068ac <_printf_i+0x244>)
 8006732:	230a      	movs	r3, #10
 8006734:	e019      	b.n	800676a <_printf_i+0x102>
 8006736:	680e      	ldr	r6, [r1, #0]
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800673e:	bf18      	it	ne
 8006740:	b236      	sxthne	r6, r6
 8006742:	e7ef      	b.n	8006724 <_printf_i+0xbc>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1d19      	adds	r1, r3, #4
 800674a:	6029      	str	r1, [r5, #0]
 800674c:	0601      	lsls	r1, r0, #24
 800674e:	d501      	bpl.n	8006754 <_printf_i+0xec>
 8006750:	681e      	ldr	r6, [r3, #0]
 8006752:	e002      	b.n	800675a <_printf_i+0xf2>
 8006754:	0646      	lsls	r6, r0, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0xe8>
 8006758:	881e      	ldrh	r6, [r3, #0]
 800675a:	4854      	ldr	r0, [pc, #336]	; (80068ac <_printf_i+0x244>)
 800675c:	2f6f      	cmp	r7, #111	; 0x6f
 800675e:	bf0c      	ite	eq
 8006760:	2308      	moveq	r3, #8
 8006762:	230a      	movne	r3, #10
 8006764:	2100      	movs	r1, #0
 8006766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676a:	6865      	ldr	r5, [r4, #4]
 800676c:	60a5      	str	r5, [r4, #8]
 800676e:	2d00      	cmp	r5, #0
 8006770:	bfa2      	ittt	ge
 8006772:	6821      	ldrge	r1, [r4, #0]
 8006774:	f021 0104 	bicge.w	r1, r1, #4
 8006778:	6021      	strge	r1, [r4, #0]
 800677a:	b90e      	cbnz	r6, 8006780 <_printf_i+0x118>
 800677c:	2d00      	cmp	r5, #0
 800677e:	d04d      	beq.n	800681c <_printf_i+0x1b4>
 8006780:	4615      	mov	r5, r2
 8006782:	fbb6 f1f3 	udiv	r1, r6, r3
 8006786:	fb03 6711 	mls	r7, r3, r1, r6
 800678a:	5dc7      	ldrb	r7, [r0, r7]
 800678c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006790:	4637      	mov	r7, r6
 8006792:	42bb      	cmp	r3, r7
 8006794:	460e      	mov	r6, r1
 8006796:	d9f4      	bls.n	8006782 <_printf_i+0x11a>
 8006798:	2b08      	cmp	r3, #8
 800679a:	d10b      	bne.n	80067b4 <_printf_i+0x14c>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07de      	lsls	r6, r3, #31
 80067a0:	d508      	bpl.n	80067b4 <_printf_i+0x14c>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	4299      	cmp	r1, r3
 80067a8:	bfde      	ittt	le
 80067aa:	2330      	movle	r3, #48	; 0x30
 80067ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b4:	1b52      	subs	r2, r2, r5
 80067b6:	6122      	str	r2, [r4, #16]
 80067b8:	f8cd a000 	str.w	sl, [sp]
 80067bc:	464b      	mov	r3, r9
 80067be:	aa03      	add	r2, sp, #12
 80067c0:	4621      	mov	r1, r4
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7ff fee2 	bl	800658c <_printf_common>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d14c      	bne.n	8006866 <_printf_i+0x1fe>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	b004      	add	sp, #16
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	4835      	ldr	r0, [pc, #212]	; (80068ac <_printf_i+0x244>)
 80067d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067dc:	6829      	ldr	r1, [r5, #0]
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067e4:	6029      	str	r1, [r5, #0]
 80067e6:	061d      	lsls	r5, r3, #24
 80067e8:	d514      	bpl.n	8006814 <_printf_i+0x1ac>
 80067ea:	07df      	lsls	r7, r3, #31
 80067ec:	bf44      	itt	mi
 80067ee:	f043 0320 	orrmi.w	r3, r3, #32
 80067f2:	6023      	strmi	r3, [r4, #0]
 80067f4:	b91e      	cbnz	r6, 80067fe <_printf_i+0x196>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f023 0320 	bic.w	r3, r3, #32
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	2310      	movs	r3, #16
 8006800:	e7b0      	b.n	8006764 <_printf_i+0xfc>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f043 0320 	orr.w	r3, r3, #32
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	2378      	movs	r3, #120	; 0x78
 800680c:	4828      	ldr	r0, [pc, #160]	; (80068b0 <_printf_i+0x248>)
 800680e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006812:	e7e3      	b.n	80067dc <_printf_i+0x174>
 8006814:	0659      	lsls	r1, r3, #25
 8006816:	bf48      	it	mi
 8006818:	b2b6      	uxthmi	r6, r6
 800681a:	e7e6      	b.n	80067ea <_printf_i+0x182>
 800681c:	4615      	mov	r5, r2
 800681e:	e7bb      	b.n	8006798 <_printf_i+0x130>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	6826      	ldr	r6, [r4, #0]
 8006824:	6961      	ldr	r1, [r4, #20]
 8006826:	1d18      	adds	r0, r3, #4
 8006828:	6028      	str	r0, [r5, #0]
 800682a:	0635      	lsls	r5, r6, #24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	d501      	bpl.n	8006834 <_printf_i+0x1cc>
 8006830:	6019      	str	r1, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0x1d2>
 8006834:	0670      	lsls	r0, r6, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0x1c8>
 8006838:	8019      	strh	r1, [r3, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	4615      	mov	r5, r2
 8006840:	e7ba      	b.n	80067b8 <_printf_i+0x150>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	602a      	str	r2, [r5, #0]
 8006848:	681d      	ldr	r5, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	2100      	movs	r1, #0
 800684e:	4628      	mov	r0, r5
 8006850:	f7f9 fcce 	bl	80001f0 <memchr>
 8006854:	b108      	cbz	r0, 800685a <_printf_i+0x1f2>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	e7a8      	b.n	80067b8 <_printf_i+0x150>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	462a      	mov	r2, r5
 800686a:	4649      	mov	r1, r9
 800686c:	4640      	mov	r0, r8
 800686e:	47d0      	blx	sl
 8006870:	3001      	adds	r0, #1
 8006872:	d0ab      	beq.n	80067cc <_printf_i+0x164>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d413      	bmi.n	80068a2 <_printf_i+0x23a>
 800687a:	68e0      	ldr	r0, [r4, #12]
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	4298      	cmp	r0, r3
 8006880:	bfb8      	it	lt
 8006882:	4618      	movlt	r0, r3
 8006884:	e7a4      	b.n	80067d0 <_printf_i+0x168>
 8006886:	2301      	movs	r3, #1
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d09b      	beq.n	80067cc <_printf_i+0x164>
 8006894:	3501      	adds	r5, #1
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	42ab      	cmp	r3, r5
 800689e:	dcf2      	bgt.n	8006886 <_printf_i+0x21e>
 80068a0:	e7eb      	b.n	800687a <_printf_i+0x212>
 80068a2:	2500      	movs	r5, #0
 80068a4:	f104 0619 	add.w	r6, r4, #25
 80068a8:	e7f5      	b.n	8006896 <_printf_i+0x22e>
 80068aa:	bf00      	nop
 80068ac:	08006e29 	.word	0x08006e29
 80068b0:	08006e3a 	.word	0x08006e3a

080068b4 <_putc_r>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	460d      	mov	r5, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	4606      	mov	r6, r0
 80068bc:	b118      	cbz	r0, 80068c6 <_putc_r+0x12>
 80068be:	6983      	ldr	r3, [r0, #24]
 80068c0:	b90b      	cbnz	r3, 80068c6 <_putc_r+0x12>
 80068c2:	f7ff f8ef 	bl	8005aa4 <__sinit>
 80068c6:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <_putc_r+0x84>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	d124      	bne.n	8006916 <_putc_r+0x62>
 80068cc:	6874      	ldr	r4, [r6, #4]
 80068ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068d0:	07d8      	lsls	r0, r3, #31
 80068d2:	d405      	bmi.n	80068e0 <_putc_r+0x2c>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	0599      	lsls	r1, r3, #22
 80068d8:	d402      	bmi.n	80068e0 <_putc_r+0x2c>
 80068da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068dc:	f7ff f9a5 	bl	8005c2a <__retarget_lock_acquire_recursive>
 80068e0:	68a3      	ldr	r3, [r4, #8]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	da05      	bge.n	80068f6 <_putc_r+0x42>
 80068ea:	69a2      	ldr	r2, [r4, #24]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	db1c      	blt.n	800692a <_putc_r+0x76>
 80068f0:	b2eb      	uxtb	r3, r5
 80068f2:	2b0a      	cmp	r3, #10
 80068f4:	d019      	beq.n	800692a <_putc_r+0x76>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	701d      	strb	r5, [r3, #0]
 80068fe:	b2ed      	uxtb	r5, r5
 8006900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d405      	bmi.n	8006912 <_putc_r+0x5e>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	059b      	lsls	r3, r3, #22
 800690a:	d402      	bmi.n	8006912 <_putc_r+0x5e>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f7ff f98d 	bl	8005c2c <__retarget_lock_release_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <_putc_r+0x88>)
 8006918:	429c      	cmp	r4, r3
 800691a:	d101      	bne.n	8006920 <_putc_r+0x6c>
 800691c:	68b4      	ldr	r4, [r6, #8]
 800691e:	e7d6      	b.n	80068ce <_putc_r+0x1a>
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <_putc_r+0x8c>)
 8006922:	429c      	cmp	r4, r3
 8006924:	bf08      	it	eq
 8006926:	68f4      	ldreq	r4, [r6, #12]
 8006928:	e7d1      	b.n	80068ce <_putc_r+0x1a>
 800692a:	4629      	mov	r1, r5
 800692c:	4622      	mov	r2, r4
 800692e:	4630      	mov	r0, r6
 8006930:	f7ff fb6c 	bl	800600c <__swbuf_r>
 8006934:	4605      	mov	r5, r0
 8006936:	e7e3      	b.n	8006900 <_putc_r+0x4c>
 8006938:	08006dd4 	.word	0x08006dd4
 800693c:	08006df4 	.word	0x08006df4
 8006940:	08006db4 	.word	0x08006db4

08006944 <_read_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d07      	ldr	r5, [pc, #28]	; (8006964 <_read_r+0x20>)
 8006948:	4604      	mov	r4, r0
 800694a:	4608      	mov	r0, r1
 800694c:	4611      	mov	r1, r2
 800694e:	2200      	movs	r2, #0
 8006950:	602a      	str	r2, [r5, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f7fb f9e4 	bl	8001d20 <_read>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_read_r+0x1e>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_read_r+0x1e>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000730 	.word	0x20000730

08006968 <_fstat_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d07      	ldr	r5, [pc, #28]	; (8006988 <_fstat_r+0x20>)
 800696c:	2300      	movs	r3, #0
 800696e:	4604      	mov	r4, r0
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	f7fb fa18 	bl	8001daa <_fstat>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	d102      	bne.n	8006984 <_fstat_r+0x1c>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	b103      	cbz	r3, 8006984 <_fstat_r+0x1c>
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	bd38      	pop	{r3, r4, r5, pc}
 8006986:	bf00      	nop
 8006988:	20000730 	.word	0x20000730

0800698c <_isatty_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d06      	ldr	r5, [pc, #24]	; (80069a8 <_isatty_r+0x1c>)
 8006990:	2300      	movs	r3, #0
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	f7fb fa17 	bl	8001dca <_isatty>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_isatty_r+0x1a>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_isatty_r+0x1a>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	20000730 	.word	0x20000730

080069ac <_init>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	bf00      	nop
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr

080069b8 <_fini>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr
