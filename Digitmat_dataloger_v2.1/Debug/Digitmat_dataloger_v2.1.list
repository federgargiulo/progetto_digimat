
Digitmat_dataloger_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800e014  0800e014  0001e014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5e0  0800e5e0  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5e0  0800e5e0  0001e5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5e8  0800e5e8  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5e8  0800e5e8  0001e5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5ec  0800e5ec  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800e5f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000170a8  20000148  0800e738  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200171f0  0800e738  000271f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031a73  00000000  00000000  000201bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004353  00000000  00000000  00051c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ad8  00000000  00000000  00055f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002173  00000000  00000000  00058a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3dc  00000000  00000000  0005abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f85  00000000  00000000  00075faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2504  00000000  00000000  0009ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bec8  00000000  00000000  00142438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0014e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dffc 	.word	0x0800dffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	0800dffc 	.word	0x0800dffc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2110      	movs	r1, #16
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SELECT+0x18>)
 8000596:	f006 ff1d 	bl	80073d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f006 fb7c 	bl	8006c98 <HAL_Delay>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020000 	.word	0x40020000

080005a8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <DESELECT+0x18>)
 80005b2:	f006 ff0f 	bl	80073d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f006 fb6e 	bl	8006c98 <HAL_Delay>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020000 	.word	0x40020000

080005c4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ce:	bf00      	nop
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <SPI_TxByte+0x30>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d1f8      	bne.n	80005d0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <SPI_TxByte+0x30>)
 80005e6:	f008 fcc4 	bl	8008f72 <HAL_SPI_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000174 	.word	0x20000174

080005f8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000604:	bf00      	nop
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <SPI_TxBuffer+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b02      	cmp	r3, #2
 8000612:	d1f8      	bne.n	8000606 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000614:	887a      	ldrh	r2, [r7, #2]
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <SPI_TxBuffer+0x30>)
 800061c:	f008 fca9 	bl	8008f72 <HAL_SPI_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000174 	.word	0x20000174

0800062c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000632:	23ff      	movs	r3, #255	; 0xff
 8000634:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000636:	bf00      	nop
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <SPI_RxByte+0x34>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	2b02      	cmp	r3, #2
 8000644:	d1f8      	bne.n	8000638 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000646:	1dba      	adds	r2, r7, #6
 8000648:	1df9      	adds	r1, r7, #7
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <SPI_RxByte+0x34>)
 8000652:	f008 fdca 	bl	80091ea <HAL_SPI_TransmitReceive>

	return data;
 8000656:	79bb      	ldrb	r3, [r7, #6]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000174 	.word	0x20000174

08000664 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800066c:	f7ff ffde 	bl	800062c <SPI_RxByte>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <SD_ReadyWait+0x30>)
 8000688:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800068c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800068e:	f7ff ffcd 	bl	800062c <SPI_RxByte>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bff      	cmp	r3, #255	; 0xff
 800069a:	d004      	beq.n	80006a6 <SD_ReadyWait+0x26>
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SD_ReadyWait+0x30>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f3      	bne.n	800068e <SD_ReadyWait+0xe>

	return res;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20016d1a 	.word	0x20016d1a

080006b4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006be:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006c0:	f7ff ff72 	bl	80005a8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	e005      	b.n	80006d6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	f7ff ff7a 	bl	80005c4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	ddf6      	ble.n	80006ca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006dc:	f7ff ff56 	bl	800058c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006f4:	2395      	movs	r3, #149	; 0x95
 80006f6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006f8:	463b      	mov	r3, r7
 80006fa:	2106      	movs	r1, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff7b 	bl	80005f8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000702:	e002      	b.n	800070a <SD_PowerOn+0x56>
	{
		cnt--;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3b01      	subs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800070a:	f7ff ff8f 	bl	800062c <SPI_RxByte>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d002      	beq.n	800071a <SD_PowerOn+0x66>
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f4      	bne.n	8000704 <SD_PowerOn+0x50>
	}

	DESELECT();
 800071a:	f7ff ff45 	bl	80005a8 <DESELECT>
	SPI_TxByte(0XFF);
 800071e:	20ff      	movs	r0, #255	; 0xff
 8000720:	f7ff ff50 	bl	80005c4 <SPI_TxByte>

	PowerFlag = 1;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SD_PowerOn+0x80>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000165 	.word	0x20000165

08000738 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SD_PowerOff+0x14>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000165 	.word	0x20000165

08000750 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <SD_CheckPower+0x14>)
 8000756:	781b      	ldrb	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000165 	.word	0x20000165

08000768 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SD_RxDataBlock+0x5c>)
 8000774:	22c8      	movs	r2, #200	; 0xc8
 8000776:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000778:	f7ff ff58 	bl	800062c <SPI_RxByte>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2bff      	cmp	r3, #255	; 0xff
 8000784:	d104      	bne.n	8000790 <SD_RxDataBlock+0x28>
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SD_RxDataBlock+0x5c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f3      	bne.n	8000778 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2bfe      	cmp	r3, #254	; 0xfe
 8000794:	d001      	beq.n	800079a <SD_RxDataBlock+0x32>
 8000796:	2300      	movs	r3, #0
 8000798:	e00f      	b.n	80007ba <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5f 	bl	8000664 <SPI_RxBytePtr>
	} while(len--);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	603a      	str	r2, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f4      	bne.n	800079a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007b0:	f7ff ff3c 	bl	800062c <SPI_RxByte>
	SPI_RxByte();
 80007b4:	f7ff ff3a 	bl	800062c <SPI_RxByte>

	return TRUE;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20016d19 	.word	0x20016d19

080007c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007d8:	f7ff ff52 	bl	8000680 <SD_ReadyWait>
 80007dc:	4603      	mov	r3, r0
 80007de:	2bff      	cmp	r3, #255	; 0xff
 80007e0:	d001      	beq.n	80007e6 <SD_TxDataBlock+0x1e>
 80007e2:	2300      	movs	r3, #0
 80007e4:	e02f      	b.n	8000846 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff feeb 	bl	80005c4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2bfd      	cmp	r3, #253	; 0xfd
 80007f2:	d020      	beq.n	8000836 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fefd 	bl	80005f8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007fe:	f7ff ff15 	bl	800062c <SPI_RxByte>
		SPI_RxByte();
 8000802:	f7ff ff13 	bl	800062c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000806:	e00b      	b.n	8000820 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000808:	f7ff ff10 	bl	800062c <SPI_RxByte>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	2b05      	cmp	r3, #5
 8000818:	d006      	beq.n	8000828 <SD_TxDataBlock+0x60>
			i++;
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	2b40      	cmp	r3, #64	; 0x40
 8000824:	d9f0      	bls.n	8000808 <SD_TxDataBlock+0x40>
 8000826:	e000      	b.n	800082a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000828:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800082a:	bf00      	nop
 800082c:	f7ff fefe 	bl	800062c <SPI_RxByte>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0fa      	beq.n	800082c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	2b05      	cmp	r3, #5
 800083e:	d101      	bne.n	8000844 <SD_TxDataBlock+0x7c>
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	6039      	str	r1, [r7, #0]
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800085a:	f7ff ff11 	bl	8000680 <SD_ReadyWait>
 800085e:	4603      	mov	r3, r0
 8000860:	2bff      	cmp	r3, #255	; 0xff
 8000862:	d001      	beq.n	8000868 <SD_SendCmd+0x1a>
 8000864:	23ff      	movs	r3, #255	; 0xff
 8000866:	e042      	b.n	80008ee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff feaa 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0e1b      	lsrs	r3, r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fea4 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe9e 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe98 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe93 	bl	80005c4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b40      	cmp	r3, #64	; 0x40
 80008a2:	d102      	bne.n	80008aa <SD_SendCmd+0x5c>
 80008a4:	2395      	movs	r3, #149	; 0x95
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e007      	b.n	80008ba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b48      	cmp	r3, #72	; 0x48
 80008ae:	d102      	bne.n	80008b6 <SD_SendCmd+0x68>
 80008b0:	2387      	movs	r3, #135	; 0x87
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e001      	b.n	80008ba <SD_SendCmd+0x6c>
	else crc = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe81 	bl	80005c4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b4c      	cmp	r3, #76	; 0x4c
 80008c6:	d101      	bne.n	80008cc <SD_SendCmd+0x7e>
 80008c8:	f7ff feb0 	bl	800062c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008d0:	f7ff feac 	bl	800062c <SPI_RxByte>
 80008d4:	4603      	mov	r3, r0
 80008d6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	da05      	bge.n	80008ec <SD_SendCmd+0x9e>
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	73bb      	strb	r3, [r7, #14]
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f1      	bne.n	80008d0 <SD_SendCmd+0x82>

	return res;
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SD_disk_initialize+0x14>
 8000908:	2301      	movs	r3, #1
 800090a:	e0d6      	b.n	8000aba <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800090c:	4b6d      	ldr	r3, [pc, #436]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <SD_disk_initialize+0x2a>
 800091a:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	e0cb      	b.n	8000aba <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000922:	f7ff fec7 	bl	80006b4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000926:	f7ff fe31 	bl	800058c <SELECT>

	/* check disk type */
	type = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800092e:	2100      	movs	r1, #0
 8000930:	2040      	movs	r0, #64	; 0x40
 8000932:	f7ff ff8c 	bl	800084e <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	f040 80a6 	bne.w	8000a8a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000946:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800094a:	2048      	movs	r0, #72	; 0x48
 800094c:	f7ff ff7f 	bl	800084e <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d158      	bne.n	8000a08 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e00c      	b.n	8000976 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800095c:	7bfc      	ldrb	r4, [r7, #15]
 800095e:	f7ff fe65 	bl	800062c <SPI_RxByte>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	f104 0310 	add.w	r3, r4, #16
 800096a:	443b      	add	r3, r7
 800096c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	3301      	adds	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b03      	cmp	r3, #3
 800097a:	d9ef      	bls.n	800095c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800097c:	7abb      	ldrb	r3, [r7, #10]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f040 8083 	bne.w	8000a8a <SD_disk_initialize+0x192>
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	2baa      	cmp	r3, #170	; 0xaa
 8000988:	d17f      	bne.n	8000a8a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800098a:	2100      	movs	r1, #0
 800098c:	2077      	movs	r0, #119	; 0x77
 800098e:	f7ff ff5e 	bl	800084e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d807      	bhi.n	80009a8 <SD_disk_initialize+0xb0>
 8000998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800099c:	2069      	movs	r0, #105	; 0x69
 800099e:	f7ff ff56 	bl	800084e <SD_SendCmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1eb      	bne.n	800098a <SD_disk_initialize+0x92>
 80009b2:	e000      	b.n	80009b6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009b4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009b6:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d064      	beq.n	8000a8a <SD_disk_initialize+0x192>
 80009c0:	2100      	movs	r1, #0
 80009c2:	207a      	movs	r0, #122	; 0x7a
 80009c4:	f7ff ff43 	bl	800084e <SD_SendCmd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d15d      	bne.n	8000a8a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e00c      	b.n	80009ee <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009d4:	7bfc      	ldrb	r4, [r7, #15]
 80009d6:	f7ff fe29 	bl	800062c <SPI_RxByte>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	f104 0310 	add.w	r3, r4, #16
 80009e2:	443b      	add	r3, r7
 80009e4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d9ef      	bls.n	80009d4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SD_disk_initialize+0x10a>
 80009fe:	230c      	movs	r3, #12
 8000a00:	e000      	b.n	8000a04 <SD_disk_initialize+0x10c>
 8000a02:	2304      	movs	r3, #4
 8000a04:	73bb      	strb	r3, [r7, #14]
 8000a06:	e040      	b.n	8000a8a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2077      	movs	r0, #119	; 0x77
 8000a0c:	f7ff ff1f 	bl	800084e <SD_SendCmd>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d808      	bhi.n	8000a28 <SD_disk_initialize+0x130>
 8000a16:	2100      	movs	r1, #0
 8000a18:	2069      	movs	r0, #105	; 0x69
 8000a1a:	f7ff ff18 	bl	800084e <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d801      	bhi.n	8000a28 <SD_disk_initialize+0x130>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e000      	b.n	8000a2a <SD_disk_initialize+0x132>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d10e      	bne.n	8000a50 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2077      	movs	r0, #119	; 0x77
 8000a36:	f7ff ff0a 	bl	800084e <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d80e      	bhi.n	8000a5e <SD_disk_initialize+0x166>
 8000a40:	2100      	movs	r1, #0
 8000a42:	2069      	movs	r0, #105	; 0x69
 8000a44:	f7ff ff03 	bl	800084e <SD_SendCmd>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d107      	bne.n	8000a5e <SD_disk_initialize+0x166>
 8000a4e:	e00d      	b.n	8000a6c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a50:	2100      	movs	r1, #0
 8000a52:	2041      	movs	r0, #65	; 0x41
 8000a54:	f7ff fefb 	bl	800084e <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e1      	bne.n	8000a2c <SD_disk_initialize+0x134>
 8000a68:	e000      	b.n	8000a6c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a6a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <SD_disk_initialize+0x18e>
 8000a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7a:	2050      	movs	r0, #80	; 0x50
 8000a7c:	f7ff fee7 	bl	800084e <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SD_disk_initialize+0x192>
 8000a86:	2300      	movs	r3, #0
 8000a88:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <SD_disk_initialize+0x1d4>)
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a90:	f7ff fd8a 	bl	80005a8 <DESELECT>
	SPI_RxByte();
 8000a94:	f7ff fdca 	bl	800062c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d008      	beq.n	8000ab0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e001      	b.n	8000ab4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab0:	f7ff fe42 	bl	8000738 <SD_PowerOff>
	}

	return Stat;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20016d19 	.word	0x20016d19
 8000acc:	20000164 	.word	0x20000164

08000ad0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_status+0x14>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e002      	b.n	8000aea <SD_disk_status+0x1a>
	return Stat;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_disk_status+0x28>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000

08000afc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x1c>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <SD_disk_read+0x20>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e051      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SD_disk_read+0xcc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SD_disk_read+0x32>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e048      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SD_disk_read+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <SD_disk_read+0x44>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b40:	f7ff fd24 	bl	800058c <SELECT>

	if (count == 1)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d111      	bne.n	8000b6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2051      	movs	r0, #81	; 0x51
 8000b4e:	f7ff fe7e 	bl	800084e <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d129      	bne.n	8000bac <SD_disk_read+0xb0>
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fe03 	bl	8000768 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d021      	beq.n	8000bac <SD_disk_read+0xb0>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e01e      	b.n	8000bac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2052      	movs	r0, #82	; 0x52
 8000b72:	f7ff fe6c 	bl	800084e <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d117      	bne.n	8000bac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdf1 	bl	8000768 <SD_RxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <SD_disk_read+0xa6>
				buff += 512;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ed      	bne.n	8000b7c <SD_disk_read+0x80>
 8000ba0:	e000      	b.n	8000ba4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ba2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	204c      	movs	r0, #76	; 0x4c
 8000ba8:	f7ff fe51 	bl	800084e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bac:	f7ff fcfc 	bl	80005a8 <DESELECT>
	SPI_RxByte();
 8000bb0:	f7ff fd3c 	bl	800062c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000164 	.word	0x20000164

08000bd0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <SD_disk_write+0x1c>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <SD_disk_write+0x20>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e06b      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SD_disk_write+0x100>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SD_disk_write+0x32>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e062      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <SD_disk_write+0x100>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_write+0x44>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e059      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SD_disk_write+0x104>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <SD_disk_write+0x56>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c26:	f7ff fcb1 	bl	800058c <SELECT>

	if (count == 1)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2058      	movs	r0, #88	; 0x58
 8000c34:	f7ff fe0b 	bl	800084e <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d13a      	bne.n	8000cb4 <SD_disk_write+0xe4>
 8000c3e:	21fe      	movs	r1, #254	; 0xfe
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f7ff fdc1 	bl	80007c8 <SD_TxDataBlock>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d033      	beq.n	8000cb4 <SD_disk_write+0xe4>
			count = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	e030      	b.n	8000cb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SD_disk_write+0x104>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2077      	movs	r0, #119	; 0x77
 8000c62:	f7ff fdf4 	bl	800084e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	2057      	movs	r0, #87	; 0x57
 8000c6a:	f7ff fdf0 	bl	800084e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2059      	movs	r0, #89	; 0x59
 8000c72:	f7ff fdec 	bl	800084e <SD_SendCmd>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11b      	bne.n	8000cb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	21fc      	movs	r1, #252	; 0xfc
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff fda2 	bl	80007c8 <SD_TxDataBlock>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <SD_disk_write+0xd0>
				buff += 512;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ee      	bne.n	8000c7c <SD_disk_write+0xac>
 8000c9e:	e000      	b.n	8000ca2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ca2:	21fd      	movs	r1, #253	; 0xfd
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd8f 	bl	80007c8 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cb4:	f7ff fc78 	bl	80005a8 <DESELECT>
	SPI_RxByte();
 8000cb8:	f7ff fcb8 	bl	800062c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000164 	.word	0x20000164

08000cd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603a      	str	r2, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_ioctl+0x1e>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e115      	b.n	8000f22 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d124      	bne.n	8000d4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d012      	beq.n	8000d30 <SD_disk_ioctl+0x58>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc1a      	bgt.n	8000d44 <SD_disk_ioctl+0x6c>
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <SD_disk_ioctl+0x40>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d006      	beq.n	8000d24 <SD_disk_ioctl+0x4c>
 8000d16:	e015      	b.n	8000d44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d18:	f7ff fd0e 	bl	8000738 <SD_PowerOff>
			res = RES_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d22:	e0fc      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d24:	f7ff fcc6 	bl	80006b4 <SD_PowerOn>
			res = RES_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2e:	e0f6      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	f7ff fd0c 	bl	8000750 <SD_CheckPower>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d42:	e0ec      	b.n	8000f1e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d4a:	e0e8      	b.n	8000f1e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d4c:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <SD_disk_ioctl+0x254>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SD_disk_ioctl+0x86>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e0e1      	b.n	8000f22 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d5e:	f7ff fc15 	bl	800058c <SELECT>

		switch (ctrl)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	f200 80cb 	bhi.w	8000f00 <SD_disk_ioctl+0x228>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <SD_disk_ioctl+0x98>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000e6b 	.word	0x08000e6b
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000f01 	.word	0x08000f01
 8000d80:	08000f01 	.word	0x08000f01
 8000d84:	08000f01 	.word	0x08000f01
 8000d88:	08000f01 	.word	0x08000f01
 8000d8c:	08000f01 	.word	0x08000f01
 8000d90:	08000f01 	.word	0x08000f01
 8000d94:	08000f01 	.word	0x08000f01
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000e7d 	.word	0x08000e7d
 8000da0:	08000ea1 	.word	0x08000ea1
 8000da4:	08000ec5 	.word	0x08000ec5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da8:	2100      	movs	r1, #0
 8000daa:	2049      	movs	r0, #73	; 0x49
 8000dac:	f7ff fd4f 	bl	800084e <SD_SendCmd>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 80a8 	bne.w	8000f08 <SD_disk_ioctl+0x230>
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcd2 	bl	8000768 <SD_RxDataBlock>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 809e 	beq.w	8000f08 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10e      	bne.n	8000df4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dea:	8bfb      	ldrh	r3, [r7, #30]
 8000dec:	029a      	lsls	r2, r3, #10
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e02e      	b.n	8000e52 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000df4:	7c7b      	ldrb	r3, [r7, #17]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	09db      	lsrs	r3, r3, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0306 	and.w	r3, r3, #6
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3302      	adds	r3, #2
 8000e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e1c:	7d3b      	ldrb	r3, [r7, #20]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e44:	8bfa      	ldrh	r2, [r7, #30]
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4a:	3b09      	subs	r3, #9
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e58:	e056      	b.n	8000f08 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e68:	e055      	b.n	8000f16 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e6a:	f7ff fc09 	bl	8000680 <SD_ReadyWait>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2bff      	cmp	r3, #255	; 0xff
 8000e72:	d14b      	bne.n	8000f0c <SD_disk_ioctl+0x234>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e047      	b.n	8000f0c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2049      	movs	r0, #73	; 0x49
 8000e80:	f7ff fce5 	bl	800084e <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d142      	bne.n	8000f10 <SD_disk_ioctl+0x238>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc6b 	bl	8000768 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03b      	beq.n	8000f10 <SD_disk_ioctl+0x238>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e037      	b.n	8000f10 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	204a      	movs	r0, #74	; 0x4a
 8000ea4:	f7ff fcd3 	bl	800084e <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d132      	bne.n	8000f14 <SD_disk_ioctl+0x23c>
 8000eae:	2110      	movs	r1, #16
 8000eb0:	6a38      	ldr	r0, [r7, #32]
 8000eb2:	f7ff fc59 	bl	8000768 <SD_RxDataBlock>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02b      	beq.n	8000f14 <SD_disk_ioctl+0x23c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ec2:	e027      	b.n	8000f14 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	207a      	movs	r0, #122	; 0x7a
 8000ec8:	f7ff fcc1 	bl	800084e <SD_SendCmd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed8:	e00b      	b.n	8000ef2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eda:	6a3c      	ldr	r4, [r7, #32]
 8000edc:	1c63      	adds	r3, r4, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	f7ff fba4 	bl	800062c <SPI_RxByte>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d9ef      	bls.n	8000eda <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f06:	e006      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
		}

		DESELECT();
 8000f16:	f7ff fb47 	bl	80005a8 <DESELECT>
		SPI_RxByte();
 8000f1a:	f7ff fb87 	bl	800062c <SPI_RxByte>
	}

	return res;
 8000f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <bufsize>:
volatile char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	int i=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000f3c:	e002      	b.n	8000f44 <bufsize+0x14>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f6      	bne.n	8000f3e <bufsize+0xe>
	return i;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <send_uart>:
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart (char *string)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff f939 	bl	80001e0 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <send_uart+0x2c>)
 8000f7e:	f009 f86c 	bl	800a05a <HAL_UART_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000214 	.word	0x20000214

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f005 fe0d 	bl	8006bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f995 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fac9 	bl	8001534 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fa2:	f000 fa19 	bl	80013d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 fa9b 	bl	80014e0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000faa:	f009 fbcb 	bl	800a744 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000fae:	f000 fa49 	bl	8001444 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000fb2:	f000 f9f7 	bl	80013a4 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	stato_data_logger= WAIT_FOR_START;
 8000fb6:	4bab      	ldr	r3, [pc, #684]	; (8001264 <main+0x2d4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	premuto=false;
 8000fbc:	4baa      	ldr	r3, [pc, #680]	; (8001268 <main+0x2d8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	acquisizioni=0;
 8000fc2:	4baa      	ldr	r3, [pc, #680]	; (800126c <main+0x2dc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_IWDG_Refresh(&hiwdg);
 8000fc8:	48a9      	ldr	r0, [pc, #676]	; (8001270 <main+0x2e0>)
 8000fca:	f007 faa0 	bl	800850e <HAL_IWDG_Refresh>

		switch (stato_data_logger){
 8000fce:	4ba5      	ldr	r3, [pc, #660]	; (8001264 <main+0x2d4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	f200 8140 	bhi.w	8001258 <main+0x2c8>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <main+0x50>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	080010ef 	.word	0x080010ef
 8000fec:	080011b1 	.word	0x080011b1

		case WAIT_FOR_START:

			if(premuto==true){
 8000ff0:	4b9d      	ldr	r3, [pc, #628]	; (8001268 <main+0x2d8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8130 	beq.w	800125c <main+0x2cc>

				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8000ffc:	4b99      	ldr	r3, [pc, #612]	; (8001264 <main+0x2d4>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]

				contatore_campioni=0;
 8001002:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <main+0x2e4>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
				fresult = f_mount(&fs, "/", 1);
 8001008:	2201      	movs	r2, #1
 800100a:	499b      	ldr	r1, [pc, #620]	; (8001278 <main+0x2e8>)
 800100c:	489b      	ldr	r0, [pc, #620]	; (800127c <main+0x2ec>)
 800100e:	f00b fde1 	bl	800cbd4 <f_mount>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b9a      	ldr	r3, [pc, #616]	; (8001280 <main+0x2f0>)
 8001018:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK) {
 800101a:	4b99      	ldr	r3, [pc, #612]	; (8001280 <main+0x2f0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <main+0xa0>
					send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001022:	4898      	ldr	r0, [pc, #608]	; (8001284 <main+0x2f4>)
 8001024:	f7ff ff9c 	bl	8000f60 <send_uart>
					stato_data_logger=WAIT_FOR_START;
 8001028:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <main+0x2d4>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e002      	b.n	8001036 <main+0xa6>
				}
				else send_uart("SD CARD mounted successfully...\n\n");
 8001030:	4895      	ldr	r0, [pc, #596]	; (8001288 <main+0x2f8>)
 8001032:	f7ff ff95 	bl	8000f60 <send_uart>
				//				lsm6dso_reset_set(&(pObj->Ctx),1);

				//				HAL_I2C_Mem_Write(&hi2c1,0x57 , 0x12, 0, reset, 1, 100);

				if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001036:	2102      	movs	r1, #2
 8001038:	2000      	movs	r0, #0
 800103a:	f005 f8f1 	bl	8006220 <IKS01A3_MOTION_SENSOR_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d117      	bne.n	8001074 <main+0xe4>
					IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 3332);
 8001044:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800128c <main+0x2fc>
 8001048:	2102      	movs	r1, #2
 800104a:	2000      	movs	r0, #0
 800104c:	f005 fb5c 	bl	8006708 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
					IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001050:	2102      	movs	r1, #2
 8001052:	2000      	movs	r0, #0
 8001054:	f005 fa08 	bl	8006468 <IKS01A3_MOTION_SENSOR_Enable>
					IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &result);
 8001058:	4a8d      	ldr	r2, [pc, #564]	; (8001290 <main+0x300>)
 800105a:	2102      	movs	r1, #2
 800105c:	2000      	movs	r0, #0
 800105e:	f005 facb 	bl	80065f8 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
					IKS01A3_MOTION_SENSOR_GetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &check_fullscale);
 8001062:	4a8c      	ldr	r2, [pc, #560]	; (8001294 <main+0x304>)
 8001064:	2102      	movs	r1, #2
 8001066:	2000      	movs	r0, #0
 8001068:	f005 fb0a 	bl	8006680 <IKS01A3_MOTION_SENSOR_GetFullScale>
					HAL_Delay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f005 fe13 	bl	8006c98 <HAL_Delay>

					send_uart ("ERROR!!! inizialization accelerometer. Data logger to be reset \n\n");
					stato_data_logger=WAIT_FOR_START;
				}
			}
			break;
 8001072:	e0f3      	b.n	800125c <main+0x2cc>
					send_uart ("ERROR!!! inizialization accelerometer. Data logger to be reset \n\n");
 8001074:	4888      	ldr	r0, [pc, #544]	; (8001298 <main+0x308>)
 8001076:	f7ff ff73 	bl	8000f60 <send_uart>
					stato_data_logger=WAIT_FOR_START;
 800107a:	4b7a      	ldr	r3, [pc, #488]	; (8001264 <main+0x2d4>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
			break;
 8001080:	e0ec      	b.n	800125c <main+0x2cc>

		case WAIT_FOR_OPEN_FILE:
			//			HAL_Delay(50);
			acquisizioni++;
 8001082:	4b7a      	ldr	r3, [pc, #488]	; (800126c <main+0x2dc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a78      	ldr	r2, [pc, #480]	; (800126c <main+0x2dc>)
 800108a:	6013      	str	r3, [r2, #0]
			sprintf(nome_file, "acqusizione_%d.csv ",acquisizioni);
 800108c:	4b77      	ldr	r3, [pc, #476]	; (800126c <main+0x2dc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4982      	ldr	r1, [pc, #520]	; (800129c <main+0x30c>)
 8001094:	4882      	ldr	r0, [pc, #520]	; (80012a0 <main+0x310>)
 8001096:	f00c fb0d 	bl	800d6b4 <siprintf>
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 800109a:	220a      	movs	r2, #10
 800109c:	4980      	ldr	r1, [pc, #512]	; (80012a0 <main+0x310>)
 800109e:	4881      	ldr	r0, [pc, #516]	; (80012a4 <main+0x314>)
 80010a0:	f00b fdde 	bl	800cc60 <f_open>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b75      	ldr	r3, [pc, #468]	; (8001280 <main+0x2f0>)
 80010aa:	701a      	strb	r2, [r3, #0]
			send_uart("file creato");
 80010ac:	487e      	ldr	r0, [pc, #504]	; (80012a8 <main+0x318>)
 80010ae:	f7ff ff57 	bl	8000f60 <send_uart>
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 80010b2:	497e      	ldr	r1, [pc, #504]	; (80012ac <main+0x31c>)
 80010b4:	487e      	ldr	r0, [pc, #504]	; (80012b0 <main+0x320>)
 80010b6:	f00c fafd 	bl	800d6b4 <siprintf>
			fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80010ba:	487d      	ldr	r0, [pc, #500]	; (80012b0 <main+0x320>)
 80010bc:	f7ff ff38 	bl	8000f30 <bufsize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <main+0x324>)
 80010c6:	497a      	ldr	r1, [pc, #488]	; (80012b0 <main+0x320>)
 80010c8:	4876      	ldr	r0, [pc, #472]	; (80012a4 <main+0x314>)
 80010ca:	f00b ff95 	bl	800cff8 <f_write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <main+0x2f0>)
 80010d4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80010d6:	4878      	ldr	r0, [pc, #480]	; (80012b8 <main+0x328>)
 80010d8:	f008 fb44 	bl	8009764 <HAL_TIM_Base_Start_IT>
			stato_data_logger=WAIT_FOR_STOP;
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <main+0x2d4>)
 80010de:	2202      	movs	r2, #2
 80010e0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	4875      	ldr	r0, [pc, #468]	; (80012bc <main+0x32c>)
 80010e8:	f006 f974 	bl	80073d4 <HAL_GPIO_WritePin>
			break;
 80010ec:	e0b9      	b.n	8001262 <main+0x2d2>

		case WAIT_FOR_STOP:
			if(contatore_campioni>=DIM){
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <main+0x2e4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f641 3257 	movw	r2, #6999	; 0x1b57
 80010f6:	4293      	cmp	r3, r2
 80010f8:	dd08      	ble.n	800110c <main+0x17c>
				HAL_TIM_Base_Stop_IT(&htim3);
 80010fa:	486f      	ldr	r0, [pc, #444]	; (80012b8 <main+0x328>)
 80010fc:	f008 fb94 	bl	8009828 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 8001100:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <main+0x2e4>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
				//				dimesione=true;
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <main+0x2d4>)
 8001108:	2203      	movs	r2, #3
 800110a:	701a      	strb	r2, [r3, #0]

			}
			if(premuto==false)
 800110c:	4b56      	ldr	r3, [pc, #344]	; (8001268 <main+0x2d8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a1 	beq.w	8001260 <main+0x2d0>
			{
				HAL_TIM_Base_Stop_IT(&htim3);
 800111e:	4866      	ldr	r0, [pc, #408]	; (80012b8 <main+0x328>)
 8001120:	f008 fb82 	bl	8009828 <HAL_TIM_Base_Stop_IT>
				contatore_campioni=0;
 8001124:	4b53      	ldr	r3, [pc, #332]	; (8001274 <main+0x2e4>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	e031      	b.n	8001194 <main+0x204>
					sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001130:	4963      	ldr	r1, [pc, #396]	; (80012c0 <main+0x330>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	485f      	ldr	r0, [pc, #380]	; (80012c0 <main+0x330>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4403      	add	r3, r0
 800114e:	3304      	adds	r3, #4
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	4c5b      	ldr	r4, [pc, #364]	; (80012c0 <main+0x330>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4423      	add	r3, r4
 8001160:	3308      	adds	r3, #8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	4956      	ldr	r1, [pc, #344]	; (80012c4 <main+0x334>)
 800116c:	4850      	ldr	r0, [pc, #320]	; (80012b0 <main+0x320>)
 800116e:	f00c faa1 	bl	800d6b4 <siprintf>
					fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001172:	484f      	ldr	r0, [pc, #316]	; (80012b0 <main+0x320>)
 8001174:	f7ff fedc 	bl	8000f30 <bufsize>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <main+0x324>)
 800117e:	494c      	ldr	r1, [pc, #304]	; (80012b0 <main+0x320>)
 8001180:	4848      	ldr	r0, [pc, #288]	; (80012a4 <main+0x314>)
 8001182:	f00b ff39 	bl	800cff8 <f_write>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <main+0x2f0>)
 800118c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<DIM; i++){
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f641 3257 	movw	r2, #6999	; 0x1b57
 800119a:	4293      	cmp	r3, r2
 800119c:	ddc8      	ble.n	8001130 <main+0x1a0>
				}
				f_close(&fil);
 800119e:	4841      	ldr	r0, [pc, #260]	; (80012a4 <main+0x314>)
 80011a0:	f00c f93c 	bl	800d41c <f_close>
				f_sync(&fil);
 80011a4:	483f      	ldr	r0, [pc, #252]	; (80012a4 <main+0x314>)
 80011a6:	f00c f8bb 	bl	800d320 <f_sync>
				stop_acquisizione();
 80011aa:	f000 fa49 	bl	8001640 <stop_acquisizione>

			}


			break;
 80011ae:	e057      	b.n	8001260 <main+0x2d0>

		case WAIT_FOR_CLOSE_FILE:{
			for(int i=0; i<DIM; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	e031      	b.n	800121a <main+0x28a>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 80011b6:	4942      	ldr	r1, [pc, #264]	; (80012c0 <main+0x330>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	483e      	ldr	r0, [pc, #248]	; (80012c0 <main+0x330>)
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4403      	add	r3, r0
 80011d4:	3304      	adds	r3, #4
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	4c39      	ldr	r4, [pc, #228]	; (80012c0 <main+0x330>)
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4423      	add	r3, r4
 80011e6:	3308      	adds	r3, #8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	460a      	mov	r2, r1
 80011f0:	4934      	ldr	r1, [pc, #208]	; (80012c4 <main+0x334>)
 80011f2:	482f      	ldr	r0, [pc, #188]	; (80012b0 <main+0x320>)
 80011f4:	f00c fa5e 	bl	800d6b4 <siprintf>
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80011f8:	482d      	ldr	r0, [pc, #180]	; (80012b0 <main+0x320>)
 80011fa:	f7ff fe99 	bl	8000f30 <bufsize>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <main+0x324>)
 8001204:	492a      	ldr	r1, [pc, #168]	; (80012b0 <main+0x320>)
 8001206:	4827      	ldr	r0, [pc, #156]	; (80012a4 <main+0x314>)
 8001208:	f00b fef6 	bl	800cff8 <f_write>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <main+0x2f0>)
 8001212:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<DIM; i++){
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001220:	4293      	cmp	r3, r2
 8001222:	ddc8      	ble.n	80011b6 <main+0x226>
			}
			f_close(&fil);
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <main+0x314>)
 8001226:	f00c f8f9 	bl	800d41c <f_close>
			f_sync(&fil);
 800122a:	481e      	ldr	r0, [pc, #120]	; (80012a4 <main+0x314>)
 800122c:	f00c f878 	bl	800d320 <f_sync>


			if(acquisizioni>=DIM_FINESTRA_BANCHI || premuto==false){
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <main+0x2dc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001238:	da07      	bge.n	800124a <main+0x2ba>
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <main+0x2d8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <main+0x2c0>
				stop_acquisizione();
 800124a:	f000 f9f9 	bl	8001640 <stop_acquisizione>
			else{
				stato_data_logger=WAIT_FOR_OPEN_FILE;
			}


			break;
 800124e:	e008      	b.n	8001262 <main+0x2d2>
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <main+0x2d4>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
			break;
 8001256:	e004      	b.n	8001262 <main+0x2d2>
		}
		default:
			break;
 8001258:	bf00      	nop
 800125a:	e6b5      	b.n	8000fc8 <main+0x38>
			break;
 800125c:	bf00      	nop
 800125e:	e6b3      	b.n	8000fc8 <main+0x38>
			break;
 8001260:	bf00      	nop
		HAL_IWDG_Refresh(&hiwdg);
 8001262:	e6b1      	b.n	8000fc8 <main+0x38>
 8001264:	20014aa6 	.word	0x20014aa6
 8001268:	20014a80 	.word	0x20014a80
 800126c:	20014a7c 	.word	0x20014a7c
 8001270:	20000168 	.word	0x20000168
 8001274:	20014a78 	.word	0x20014a78
 8001278:	0800e014 	.word	0x0800e014
 800127c:	20014aa8 	.word	0x20014aa8
 8001280:	20016b10 	.word	0x20016b10
 8001284:	0800e018 	.word	0x0800e018
 8001288:	0800e03c 	.word	0x0800e03c
 800128c:	45504000 	.word	0x45504000
 8001290:	20014a84 	.word	0x20014a84
 8001294:	20014a81 	.word	0x20014a81
 8001298:	0800e060 	.word	0x0800e060
 800129c:	0800e0a4 	.word	0x0800e0a4
 80012a0:	20014a88 	.word	0x20014a88
 80012a4:	20015ae0 	.word	0x20015ae0
 80012a8:	0800e0b8 	.word	0x0800e0b8
 80012ac:	0800e0c4 	.word	0x0800e0c4
 80012b0:	20016b18 	.word	0x20016b18
 80012b4:	20016b14 	.word	0x20016b14
 80012b8:	200001cc 	.word	0x200001cc
 80012bc:	40020000 	.word	0x40020000
 80012c0:	20000258 	.word	0x20000258
 80012c4:	0800e0d8 	.word	0x0800e0d8

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2230      	movs	r2, #48	; 0x30
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00c fa0c 	bl	800d6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <SystemClock_Config+0xd4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a29      	ldr	r2, [pc, #164]	; (800139c <SystemClock_Config+0xd4>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <SystemClock_Config+0xd4>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <SystemClock_Config+0xd8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001314:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <SystemClock_Config+0xd8>)
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <SystemClock_Config+0xd8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001328:	230a      	movs	r3, #10
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001340:	2310      	movs	r3, #16
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001344:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800134a:	2304      	movs	r3, #4
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134e:	2307      	movs	r3, #7
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4618      	mov	r0, r3
 8001358:	f007 f8ea 	bl	8008530 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001362:	f000 f99b 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f007 fb4c 	bl	8008a20 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800138e:	f000 f985 	bl	800169c <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <MX_IWDG_Init+0x30>)
 80013ac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2999;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80013ba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013be:	f007 f864 	bl	800848a <HAL_IWDG_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80013c8:	f000 f968 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000168 	.word	0x20000168
 80013d4:	40003000 	.word	0x40003000

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x64>)
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_SPI1_Init+0x64>)
 800142a:	f007 fd19 	bl	8008e60 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f000 f932 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000174 	.word	0x20000174
 8001440:	40013000 	.word	0x40013000

08001444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <MX_TIM3_Init+0x98>)
 8001464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001468:	2253      	movs	r2, #83	; 0x53
 800146a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM3_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001474:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001478:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_TIM3_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001488:	f008 f91c 	bl	80096c4 <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f903 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM3_Init+0x94>)
 80014a4:	f008 faf7 	bl	8009a96 <HAL_TIM_ConfigClockSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f000 f8f5 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM3_Init+0x94>)
 80014c0:	f008 fcfc 	bl	8009ebc <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014ca:	f000 f8e7 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001cc 	.word	0x200001cc
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART2_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001518:	f008 fd52 	bl	8009fc0 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f8bb 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000214 	.word	0x20000214
 8001530:	40004400 	.word	0x40004400

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <MX_GPIO_Init+0x100>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <MX_GPIO_Init+0x100>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <MX_GPIO_Init+0x100>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <MX_GPIO_Init+0x100>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a31      	ldr	r2, [pc, #196]	; (8001634 <MX_GPIO_Init+0x100>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <MX_GPIO_Init+0x100>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <MX_GPIO_Init+0x100>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2a      	ldr	r2, [pc, #168]	; (8001634 <MX_GPIO_Init+0x100>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <MX_GPIO_Init+0x100>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_GPIO_Init+0x100>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a23      	ldr	r2, [pc, #140]	; (8001634 <MX_GPIO_Init+0x100>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_GPIO_Init+0x100>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f240 2101 	movw	r1, #513	; 0x201
 80015c0:	481d      	ldr	r0, [pc, #116]	; (8001638 <MX_GPIO_Init+0x104>)
 80015c2:	f005 ff07 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4817      	ldr	r0, [pc, #92]	; (800163c <MX_GPIO_Init+0x108>)
 80015de:	f005 fc91 	bl	8006f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <MX_GPIO_Init+0x104>)
 80015fa:	f005 fc83 	bl	8006f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <MX_GPIO_Init+0x104>)
 8001618:	f005 fc74 	bl	8006f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2028      	movs	r0, #40	; 0x28
 8001622:	f005 fc38 	bl	8006e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001626:	2028      	movs	r0, #40	; 0x28
 8001628:	f005 fc51 	bl	8006ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020800 	.word	0x40020800

08001640 <stop_acquisizione>:

/* USER CODE BEGIN 4 */

void stop_acquisizione(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	fresult = f_mount(NULL, "/", 1);
 8001644:	2201      	movs	r2, #1
 8001646:	4910      	ldr	r1, [pc, #64]	; (8001688 <stop_acquisizione+0x48>)
 8001648:	2000      	movs	r0, #0
 800164a:	f00b fac3 	bl	800cbd4 <f_mount>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <stop_acquisizione+0x4c>)
 8001654:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <stop_acquisizione+0x4c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <stop_acquisizione+0x24>
		send_uart ("SD CARD UNMOUNTED successfully...\n");
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <stop_acquisizione+0x50>)
 8001660:	f7ff fc7e 	bl	8000f60 <send_uart>
	IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001664:	2102      	movs	r1, #2
 8001666:	2000      	movs	r0, #0
 8001668:	f004 ff40 	bl	80064ec <IKS01A3_MOTION_SENSOR_Disable>
	IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 800166c:	2000      	movs	r0, #0
 800166e:	f004 fed3 	bl	8006418 <IKS01A3_MOTION_SENSOR_DeInit>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2101      	movs	r1, #1
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <stop_acquisizione+0x54>)
 8001678:	f005 feac 	bl	80073d4 <HAL_GPIO_WritePin>
	stato_data_logger=WAIT_FOR_START;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <stop_acquisizione+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	0800e014 	.word	0x0800e014
 800168c:	20016b10 	.word	0x20016b10
 8001690:	0800e0e8 	.word	0x0800e0e8
 8001694:	40020000 	.word	0x40020000
 8001698:	20014aa6 	.word	0x20014aa6

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f005 fbca 	bl	8006e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_SPI_MspInit+0x84>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12b      	bne.n	8001772 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_SPI_MspInit+0x88>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_SPI_MspInit+0x88>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_SPI_MspInit+0x88>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_SPI_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_SPI_MspInit+0x88>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_SPI_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001752:	23e0      	movs	r3, #224	; 0xe0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001762:	2305      	movs	r3, #5
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_SPI_MspInit+0x8c>)
 800176e:	f005 fbc9 	bl	8006f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40013000 	.word	0x40013000
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_TIM_Base_MspInit+0x48>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d115      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	201d      	movs	r0, #29
 80017bc:	f005 fb6b 	bl	8006e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c0:	201d      	movs	r0, #29
 80017c2:	f005 fb84 	bl	8006ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_UART_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0x88>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_UART_MspInit+0x8c>)
 800184e:	f005 fb59 	bl	8006f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <SDTimer_Handler>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
/* USER CODE BEGIN EV */
void SDTimer_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <SDTimer_Handler+0x40>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <SDTimer_Handler+0x1c>
    Timer1--;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <SDTimer_Handler+0x40>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <SDTimer_Handler+0x40>)
 8001882:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <SDTimer_Handler+0x44>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <SDTimer_Handler+0x34>
    Timer2--;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <SDTimer_Handler+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SDTimer_Handler+0x44>)
 800189a:	701a      	strb	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20016d19 	.word	0x20016d19
 80018ac:	20016d1a 	.word	0x20016d1a

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <SysTick_Handler+0x30>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <SysTick_Handler+0x30>)
 8001908:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <SysTick_Handler+0x30>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b09      	cmp	r3, #9
 8001912:	d904      	bls.n	800191e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Handler+0x30>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800191a:	f7ff ffa5 	bl	8001868 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191e:	f005 f99b 	bl	8006c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20016d18 	.word	0x20016d18

0800192c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <TIM3_IRQHandler+0x30>)
 8001932:	f007 ffa8 	bl	8009886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_campioni++]);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <TIM3_IRQHandler+0x34>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	1c53      	adds	r3, r2, #1
 800193c:	4908      	ldr	r1, [pc, #32]	; (8001960 <TIM3_IRQHandler+0x34>)
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <TIM3_IRQHandler+0x38>)
 800194a:	4413      	add	r3, r2
 800194c:	461a      	mov	r2, r3
 800194e:	2102      	movs	r1, #2
 8001950:	2000      	movs	r0, #0
 8001952:	f004 fe0d 	bl	8006570 <IKS01A3_MOTION_SENSOR_GetAxes>
//  sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
//  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  /* USER CODE END TIM3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001cc 	.word	0x200001cc
 8001960:	20014a78 	.word	0x20014a78
 8001964:	20000258 	.word	0x20000258

08001968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800196c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001970:	f005 fd4a 	bl	8007408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  //flag da fare toggle
  //ogni volta che viene premuto il pulsante, viene invertito lo stato
  premuto=!(premuto);
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <EXTI15_10_IRQHandler+0x30>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f083 0301 	eor.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b02      	ldr	r3, [pc, #8]	; (8001998 <EXTI15_10_IRQHandler+0x30>)
 8001990:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20014a80 	.word	0x20014a80

0800199c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <BSP_I2C1_Init+0x58>)
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <BSP_I2C1_Init+0x5c>)
 80019aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <BSP_I2C1_Init+0x60>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	4912      	ldr	r1, [pc, #72]	; (80019fc <BSP_I2C1_Init+0x60>)
 80019b4:	600a      	str	r2, [r1, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d117      	bne.n	80019ea <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <BSP_I2C1_Init+0x58>)
 80019bc:	f006 f9f0 	bl	8007da0 <HAL_I2C_GetState>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d111      	bne.n	80019ea <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <BSP_I2C1_Init+0x58>)
 80019c8:	f000 f8e2 	bl	8001b90 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10b      	bne.n	80019ea <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <BSP_I2C1_Init+0x58>)
 80019d4:	f000 f8a8 	bl	8001b28 <MX_I2C1_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019de:	f06f 0307 	mvn.w	r3, #7
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e001      	b.n	80019ea <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20016d1c 	.word	0x20016d1c
 80019f8:	40005400 	.word	0x40005400
 80019fc:	20016d70 	.word	0x20016d70

08001a00 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d014      	beq.n	8001a3c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <BSP_I2C1_DeInit+0x4c>)
 8001a26:	f000 f8fd 	bl	8001c24 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <BSP_I2C1_DeInit+0x4c>)
 8001a2c:	f005 fe54 	bl	80076d8 <HAL_I2C_DeInit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001a36:	f06f 0307 	mvn.w	r3, #7
 8001a3a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20016d70 	.word	0x20016d70
 8001a4c:	20016d1c 	.word	0x20016d1c

08001a50 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af04      	add	r7, sp, #16
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	81bb      	strh	r3, [r7, #12]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a6a:	89ba      	ldrh	r2, [r7, #12]
 8001a6c:	89f9      	ldrh	r1, [r7, #14]
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <BSP_I2C1_WriteReg+0x60>)
 8001a80:	f005 fe6e 	bl	8007760 <HAL_I2C_Mem_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00c      	beq.n	8001aa4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <BSP_I2C1_WriteReg+0x60>)
 8001a8c:	f006 f996 	bl	8007dbc <HAL_I2C_GetError>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d103      	bne.n	8001a9e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a96:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e002      	b.n	8001aa4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a9e:	f06f 0303 	mvn.w	r3, #3
 8001aa2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001aa4:	697b      	ldr	r3, [r7, #20]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20016d1c 	.word	0x20016d1c

08001ab4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	81fb      	strh	r3, [r7, #14]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	81bb      	strh	r3, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ace:	89ba      	ldrh	r2, [r7, #12]
 8001ad0:	89f9      	ldrh	r1, [r7, #14]
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <BSP_I2C1_ReadReg+0x60>)
 8001ae4:	f005 ff36 	bl	8007954 <HAL_I2C_Mem_Read>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <BSP_I2C1_ReadReg+0x60>)
 8001af0:	f006 f964 	bl	8007dbc <HAL_I2C_GetError>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d103      	bne.n	8001b02 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001afa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e002      	b.n	8001b08 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b02:	f06f 0303 	mvn.w	r3, #3
 8001b06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20016d1c 	.word	0x20016d1c

08001b18 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b1c:	f005 f8b0 	bl	8006c80 <HAL_GetTick>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <MX_I2C1_Init+0x60>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_I2C1_Init+0x64>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b52:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 fc6f 	bl	8007450 <HAL_I2C_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	00061a80 	.word	0x00061a80

08001b90 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bba:	2312      	movs	r3, #18
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <I2C1_MspInit+0x90>)
 8001bd2:	f005 f997 	bl	8006f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001be8:	2304      	movs	r3, #4
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <I2C1_MspInit+0x90>)
 8001bf4:	f005 f986 	bl	8006f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <I2C1_MspInit+0x8c>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <I2C1_MspDeInit+0x30>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <I2C1_MspDeInit+0x30>)
 8001c32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3c:	4806      	ldr	r0, [pc, #24]	; (8001c58 <I2C1_MspDeInit+0x34>)
 8001c3e:	f005 fae5 	bl	800720c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c46:	4804      	ldr	r0, [pc, #16]	; (8001c58 <I2C1_MspDeInit+0x34>)
 8001c48:	f005 fae0 	bl	800720c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f00b fd3a 	bl	800d704 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20018000 	.word	0x20018000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20016d74 	.word	0x20016d74
 8001cc4:	200171f0 	.word	0x200171f0

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d16:	f7ff ffd7 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f00b fcf9 	bl	800d710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff f937 	bl	8000f90 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8001d30:	0800e5f0 	.word	0x0800e5f0
  ldr r2, =_sbss
 8001d34:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8001d38:	200171f0 	.word	0x200171f0

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e051      	b.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	7b1a      	ldrb	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <LIS2DW12_RegisterBusIO+0xcc>)
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <LIS2DW12_RegisterBusIO+0xd0>)
 8001d9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e020      	b.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e016      	b.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d112      	bne.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001de4:	2305      	movs	r3, #5
 8001de6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	461a      	mov	r2, r3
 8001dec:	2121      	movs	r1, #33	; 0x21
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fcc1 	bl	8002776 <LIS2DW12_Write_Reg>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08002b09 	.word	0x08002b09
 8001e10:	08002b3f 	.word	0x08002b3f

08001e14 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3320      	adds	r3, #32
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f9ce 	bl	80031c4 <lis2dw12_auto_increment_set>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e04b      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3320      	adds	r3, #32
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 f8e2 	bl	8003004 <lis2dw12_block_data_update_set>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e03f      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 f9dc 	bl	8003210 <lis2dw12_fifo_mode_set>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e033      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3320      	adds	r3, #32
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 feb2 	bl	8002bd4 <lis2dw12_power_mode_set>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e027      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <LIS2DW12_Init+0xc0>)
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3320      	adds	r3, #32
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 ffa3 	bl	8002de4 <lis2dw12_data_rate_set>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea8:	e010      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3320      	adds	r3, #32
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 f8cd 	bl	8003050 <lis2dw12_full_scale_set>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	e004      	b.n	8001ecc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	42c80000 	.word	0x42c80000

08001ed8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f888 	bl	8001ff6 <LIS2DW12_ACC_Disable>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	e010      	b.n	8001f14 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3320      	adds	r3, #32
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 f938 	bl	80031a2 <lis2dw12_device_id_get>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e000      	b.n	8001f40 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2210      	movs	r2, #16
 8001f74:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <LIS2DW12_GetCapabilities+0x58>)
 8001f88:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	44c80000 	.word	0x44c80000

08001fa4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e019      	b.n	8001fee <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fcc:	461a      	mov	r2, r3
 8001fce:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fbea 	bl	80027ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e004      	b.n	8001fee <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e010      	b.n	800202e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3320      	adds	r3, #32
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fee6 	bl	8002de4 <lis2dw12_data_rate_set>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e004      	b.n	800202e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3320      	adds	r3, #32
 800204a:	f107 020b 	add.w	r2, r7, #11
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f823 	bl	800309c <lis2dw12_full_scale_get>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	e080      	b.n	8002164 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3320      	adds	r3, #32
 8002066:	f107 020a 	add.w	r2, r7, #10
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fdff 	bl	8002c70 <lis2dw12_power_mode_get>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	e072      	b.n	8002164 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 800207e:	7abb      	ldrb	r3, [r7, #10]
 8002080:	2b1b      	cmp	r3, #27
 8002082:	bf8c      	ite	hi
 8002084:	2201      	movhi	r2, #1
 8002086:	2200      	movls	r2, #0
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	2a00      	cmp	r2, #0
 800208c:	d162      	bne.n	8002154 <LIS2DW12_ACC_GetSensitivity+0x11c>
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002096:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12f      	bne.n	8002108 <LIS2DW12_ACC_GetSensitivity+0xd0>
 80020a8:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d04c      	beq.n	8002154 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d81b      	bhi.n	80020f8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020e1 	.word	0x080020e1
 80020d0:	080020e9 	.word	0x080020e9
 80020d4:	080020f1 	.word	0x080020f1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4a24      	ldr	r2, [pc, #144]	; (800216c <LIS2DW12_ACC_GetSensitivity+0x134>)
 80020dc:	601a      	str	r2, [r3, #0]
          break;
 80020de:	e012      	b.n	8002106 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80020e4:	601a      	str	r2, [r3, #0]
          break;
 80020e6:	e00e      	b.n	8002106 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 80020ec:	601a      	str	r2, [r3, #0]
          break;
 80020ee:	e00a      	b.n	8002106 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <LIS2DW12_ACC_GetSensitivity+0x140>)
 80020f4:	601a      	str	r2, [r3, #0]
          break;
 80020f6:	e006      	b.n	8002106 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4a20      	ldr	r2, [pc, #128]	; (800217c <LIS2DW12_ACC_GetSensitivity+0x144>)
 80020fc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	60fb      	str	r3, [r7, #12]
          break;
 8002104:	bf00      	nop
      }
      break;
 8002106:	e02c      	b.n	8002162 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d81a      	bhi.n	8002144 <LIS2DW12_ACC_GetSensitivity+0x10c>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212d 	.word	0x0800212d
 800211c:	08002135 	.word	0x08002135
 8002120:	0800213d 	.word	0x0800213d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8002128:	601a      	str	r2, [r3, #0]
          break;
 800212a:	e012      	b.n	8002152 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8002130:	601a      	str	r2, [r3, #0]
          break;
 8002132:	e00e      	b.n	8002152 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4a0d      	ldr	r2, [pc, #52]	; (800216c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002138:	601a      	str	r2, [r3, #0]
          break;
 800213a:	e00a      	b.n	8002152 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002140:	601a      	str	r2, [r3, #0]
          break;
 8002142:	e006      	b.n	8002152 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002148:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	60fb      	str	r3, [r7, #12]
          break;
 8002150:	bf00      	nop
      }
      break;
 8002152:	e006      	b.n	8002162 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002158:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	60fb      	str	r3, [r7, #12]
      break;
 8002160:	bf00      	nop
  }

  return ret;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	3f79db23 	.word	0x3f79db23
 8002170:	3ff9db23 	.word	0x3ff9db23
 8002174:	4079db23 	.word	0x4079db23
 8002178:	40f9db23 	.word	0x40f9db23
 800217c:	bf800000 	.word	0xbf800000
 8002180:	3e79db23 	.word	0x3e79db23
 8002184:	3ef9db23 	.word	0x3ef9db23

08002188 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3320      	adds	r3, #32
 800219a:	f107 020b 	add.w	r2, r7, #11
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fe65 	bl	8002e70 <lis2dw12_data_rate_get>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	e14f      	b.n	8002452 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3320      	adds	r3, #32
 80021b6:	f107 020a 	add.w	r2, r7, #10
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fd57 	bl	8002c70 <lis2dw12_power_mode_get>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e141      	b.n	8002452 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	2b32      	cmp	r3, #50	; 0x32
 80021d2:	f200 8136 	bhi.w	8002442 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080022a9 	.word	0x080022a9
 80021e0:	080022b3 	.word	0x080022b3
 80021e4:	0800230d 	.word	0x0800230d
 80021e8:	08002315 	.word	0x08002315
 80021ec:	0800231d 	.word	0x0800231d
 80021f0:	08002325 	.word	0x08002325
 80021f4:	0800232d 	.word	0x0800232d
 80021f8:	08002335 	.word	0x08002335
 80021fc:	0800238f 	.word	0x0800238f
 8002200:	080023e9 	.word	0x080023e9
 8002204:	08002443 	.word	0x08002443
 8002208:	08002443 	.word	0x08002443
 800220c:	08002443 	.word	0x08002443
 8002210:	08002443 	.word	0x08002443
 8002214:	08002443 	.word	0x08002443
 8002218:	08002443 	.word	0x08002443
 800221c:	08002443 	.word	0x08002443
 8002220:	08002443 	.word	0x08002443
 8002224:	080022a9 	.word	0x080022a9
 8002228:	08002443 	.word	0x08002443
 800222c:	08002443 	.word	0x08002443
 8002230:	08002443 	.word	0x08002443
 8002234:	08002443 	.word	0x08002443
 8002238:	08002443 	.word	0x08002443
 800223c:	08002443 	.word	0x08002443
 8002240:	08002443 	.word	0x08002443
 8002244:	08002443 	.word	0x08002443
 8002248:	08002443 	.word	0x08002443
 800224c:	08002443 	.word	0x08002443
 8002250:	08002443 	.word	0x08002443
 8002254:	08002443 	.word	0x08002443
 8002258:	08002443 	.word	0x08002443
 800225c:	08002443 	.word	0x08002443
 8002260:	08002443 	.word	0x08002443
 8002264:	08002443 	.word	0x08002443
 8002268:	08002443 	.word	0x08002443
 800226c:	08002443 	.word	0x08002443
 8002270:	08002443 	.word	0x08002443
 8002274:	08002443 	.word	0x08002443
 8002278:	08002443 	.word	0x08002443
 800227c:	08002443 	.word	0x08002443
 8002280:	08002443 	.word	0x08002443
 8002284:	08002443 	.word	0x08002443
 8002288:	08002443 	.word	0x08002443
 800228c:	08002443 	.word	0x08002443
 8002290:	08002443 	.word	0x08002443
 8002294:	08002443 	.word	0x08002443
 8002298:	08002443 	.word	0x08002443
 800229c:	08002443 	.word	0x08002443
 80022a0:	08002443 	.word	0x08002443
 80022a4:	080022a9 	.word	0x080022a9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
      break;
 80022b0:	e0ce      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80022b2:	7abb      	ldrb	r3, [r7, #10]
 80022b4:	2b1b      	cmp	r3, #27
 80022b6:	bf8c      	ite	hi
 80022b8:	2201      	movhi	r2, #1
 80022ba:	2200      	movls	r2, #0
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d11c      	bne.n	80022fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80022cc:	2a00      	cmp	r2, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2201      	movne	r2, #1
 80022d2:	2200      	moveq	r2, #0
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d10c      	bne.n	80022f4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 80022da:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4a5b      	ldr	r2, [pc, #364]	; (800245c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80022f0:	601a      	str	r2, [r3, #0]
          break;
 80022f2:	e00a      	b.n	800230a <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4a5a      	ldr	r2, [pc, #360]	; (8002460 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80022f8:	601a      	str	r2, [r3, #0]
          break;
 80022fa:	e006      	b.n	800230a <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4a59      	ldr	r2, [pc, #356]	; (8002464 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002300:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	60fb      	str	r3, [r7, #12]
          break;
 8002308:	bf00      	nop
      }
      break;
 800230a:	e0a1      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4a53      	ldr	r2, [pc, #332]	; (800245c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8002310:	601a      	str	r2, [r3, #0]
      break;
 8002312:	e09d      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4a54      	ldr	r2, [pc, #336]	; (8002468 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8002318:	601a      	str	r2, [r3, #0]
      break;
 800231a:	e099      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4a53      	ldr	r2, [pc, #332]	; (800246c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8002320:	601a      	str	r2, [r3, #0]
      break;
 8002322:	e095      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4a52      	ldr	r2, [pc, #328]	; (8002470 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8002328:	601a      	str	r2, [r3, #0]
      break;
 800232a:	e091      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002330:	601a      	str	r2, [r3, #0]
      break;
 8002332:	e08d      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002334:	7abb      	ldrb	r3, [r7, #10]
 8002336:	2b1b      	cmp	r3, #27
 8002338:	bf8c      	ite	hi
 800233a:	2201      	movhi	r2, #1
 800233c:	2200      	movls	r2, #0
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	2a00      	cmp	r2, #0
 8002342:	d11c      	bne.n	800237e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8002344:	2201      	movs	r2, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800234e:	2a00      	cmp	r2, #0
 8002350:	bf14      	ite	ne
 8002352:	2201      	movne	r2, #1
 8002354:	2200      	moveq	r2, #0
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	2a00      	cmp	r2, #0
 800235a:	d10c      	bne.n	8002376 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800235c:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	4a41      	ldr	r2, [pc, #260]	; (8002478 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8002372:	601a      	str	r2, [r3, #0]
          break;
 8002374:	e00a      	b.n	800238c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800237a:	601a      	str	r2, [r3, #0]
          break;
 800237c:	e006      	b.n	800238c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002382:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	60fb      	str	r3, [r7, #12]
          break;
 800238a:	bf00      	nop
      }
      break;
 800238c:	e060      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800238e:	7abb      	ldrb	r3, [r7, #10]
 8002390:	2b1b      	cmp	r3, #27
 8002392:	bf8c      	ite	hi
 8002394:	2201      	movhi	r2, #1
 8002396:	2200      	movls	r2, #0
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	2a00      	cmp	r2, #0
 800239c:	d11c      	bne.n	80023d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800239e:	2201      	movs	r2, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2201      	movne	r2, #1
 80023ae:	2200      	moveq	r2, #0
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d10c      	bne.n	80023d0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80023b6:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a2c      	ldr	r2, [pc, #176]	; (800247c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80023cc:	601a      	str	r2, [r3, #0]
          break;
 80023ce:	e00a      	b.n	80023e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80023d4:	601a      	str	r2, [r3, #0]
          break;
 80023d6:	e006      	b.n	80023e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80023dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	60fb      	str	r3, [r7, #12]
          break;
 80023e4:	bf00      	nop
      }
      break;
 80023e6:	e033      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80023e8:	7abb      	ldrb	r3, [r7, #10]
 80023ea:	2b1b      	cmp	r3, #27
 80023ec:	bf8c      	ite	hi
 80023ee:	2201      	movhi	r2, #1
 80023f0:	2200      	movls	r2, #0
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	d11c      	bne.n	8002432 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80023f8:	2201      	movs	r2, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002402:	2a00      	cmp	r2, #0
 8002404:	bf14      	ite	ne
 8002406:	2201      	movne	r2, #1
 8002408:	2200      	moveq	r2, #0
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	2a00      	cmp	r2, #0
 800240e:	d10c      	bne.n	800242a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8002410:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	4a16      	ldr	r2, [pc, #88]	; (8002480 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8002426:	601a      	str	r2, [r3, #0]
          break;
 8002428:	e00a      	b.n	8002440 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800242e:	601a      	str	r2, [r3, #0]
          break;
 8002430:	e006      	b.n	8002440 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002436:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	60fb      	str	r3, [r7, #12]
          break;
 800243e:	bf00      	nop
      }
      break;
 8002440:	e006      	b.n	8002450 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002446:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	60fb      	str	r3, [r7, #12]
      break;
 800244e:	bf00      	nop
  }

  return ret;
 8002450:	68fb      	ldr	r3, [r7, #12]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	41480000 	.word	0x41480000
 8002460:	3fcccccd 	.word	0x3fcccccd
 8002464:	bf800000 	.word	0xbf800000
 8002468:	41c80000 	.word	0x41c80000
 800246c:	42480000 	.word	0x42480000
 8002470:	42c80000 	.word	0x42c80000
 8002474:	43480000 	.word	0x43480000
 8002478:	43c80000 	.word	0x43c80000
 800247c:	44480000 	.word	0x44480000
 8002480:	44c80000 	.word	0x44c80000

08002484 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	ed97 0a00 	vldr	s0, [r7]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f805 	bl	80024a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800249e:	4603      	mov	r3, r0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80024b4:	460b      	mov	r3, r1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d109      	bne.n	80024da <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80024c6:	79ba      	ldrb	r2, [r7, #6]
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4619      	mov	r1, r3
 80024cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f96b 	bl	80027ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	e008      	b.n	80024ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80024da:	79ba      	ldrb	r2, [r7, #6]
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4619      	mov	r1, r3
 80024e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fa7d 	bl	80029e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80024ea:	4603      	mov	r3, r0
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	f107 020b 	add.w	r2, r7, #11
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fdc5 	bl	800309c <lis2dw12_full_scale_get>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	e027      	b.n	800256e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d81b      	bhi.n	800255c <LIS2DW12_ACC_GetFullScale+0x68>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <LIS2DW12_ACC_GetFullScale+0x38>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002545 	.word	0x08002545
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002555 	.word	0x08002555
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	601a      	str	r2, [r3, #0]
      break;
 8002542:	e013      	b.n	800256c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	601a      	str	r2, [r3, #0]
      break;
 800254a:	e00f      	b.n	800256c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2208      	movs	r2, #8
 8002550:	601a      	str	r2, [r3, #0]
      break;
 8002552:	e00b      	b.n	800256c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	601a      	str	r2, [r3, #0]
      break;
 800255a:	e007      	b.n	800256c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f04f 32ff 	mov.w	r2, #4294967295
 8002562:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	60fb      	str	r3, [r7, #12]
      break;
 800256a:	bf00      	nop
  }

  return ret;
 800256c:	68fb      	ldr	r3, [r7, #12]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	dd0b      	ble.n	80025a0 <LIS2DW12_ACC_SetFullScale+0x28>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b04      	cmp	r3, #4
 800258c:	dd06      	ble.n	800259c <LIS2DW12_ACC_SetFullScale+0x24>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	dc01      	bgt.n	8002598 <LIS2DW12_ACC_SetFullScale+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e004      	b.n	80025a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002598:	2303      	movs	r3, #3
 800259a:	e002      	b.n	80025a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80025a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80025a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3320      	adds	r3, #32
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd4f 	bl	8003050 <lis2dw12_full_scale_set>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	e000      	b.n	80025c0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3320      	adds	r3, #32
 80025da:	f107 020b 	add.w	r2, r7, #11
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fb45 	bl	8002c70 <lis2dw12_power_mode_get>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	e068      	b.n	80026c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3320      	adds	r3, #32
 80025f6:	f107 020c 	add.w	r2, r7, #12
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fd85 	bl	800310c <lis2dw12_acceleration_raw_get>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	e05a      	b.n	80026c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	2b1b      	cmp	r3, #27
 8002612:	bf8c      	ite	hi
 8002614:	2201      	movhi	r2, #1
 8002616:	2200      	movls	r2, #0
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	2a00      	cmp	r2, #0
 800261c:	d14d      	bne.n	80026ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800261e:	2201      	movs	r2, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002626:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d124      	bne.n	8002682 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8002638:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d037      	beq.n	80026ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800264a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	da00      	bge.n	8002654 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8002652:	330f      	adds	r3, #15
 8002654:	111b      	asrs	r3, r3, #4
 8002656:	b21a      	sxth	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800265c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002660:	2b00      	cmp	r3, #0
 8002662:	da00      	bge.n	8002666 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8002664:	330f      	adds	r3, #15
 8002666:	111b      	asrs	r3, r3, #4
 8002668:	b21a      	sxth	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800266e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	da00      	bge.n	8002678 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8002676:	330f      	adds	r3, #15
 8002678:	111b      	asrs	r3, r3, #4
 800267a:	b21a      	sxth	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	809a      	strh	r2, [r3, #4]
      break;
 8002680:	e01f      	b.n	80026c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002682:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	da00      	bge.n	800268c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800268a:	3303      	adds	r3, #3
 800268c:	109b      	asrs	r3, r3, #2
 800268e:	b21a      	sxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da00      	bge.n	800269e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800269c:	3303      	adds	r3, #3
 800269e:	109b      	asrs	r3, r3, #2
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80026a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da00      	bge.n	80026b0 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80026ae:	3303      	adds	r3, #3
 80026b0:	109b      	asrs	r3, r3, #2
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	809a      	strh	r2, [r3, #4]
      break;
 80026b8:	e003      	b.n	80026c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	617b      	str	r3, [r7, #20]
      break;
 80026c0:	bf00      	nop
  }

  return ret;
 80026c2:	697b      	ldr	r3, [r7, #20]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff70 	bl	80025c8 <LIS2DW12_ACC_GetAxesRaw>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e03c      	b.n	800276e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fc9c 	bl	8002038 <LIS2DW12_ACC_GetSensitivity>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e030      	b.n	800276e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800270c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002718:	edd7 7a03 	vldr	s15, [r7, #12]
 800271c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002724:	ee17 2a90 	vmov	r2, s15
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800272c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002738:	edd7 7a03 	vldr	s15, [r7, #12]
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002744:	ee17 2a90 	vmov	r2, s15
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800274c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002758:	edd7 7a03 	vldr	s15, [r7, #12]
 800275c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002764:	ee17 2a90 	vmov	r2, s15
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	70fb      	strb	r3, [r7, #3]
 8002782:	4613      	mov	r3, r2
 8002784:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f103 0020 	add.w	r0, r3, #32
 800278c:	1cba      	adds	r2, r7, #2
 800278e:	78f9      	ldrb	r1, [r7, #3]
 8002790:	2301      	movs	r3, #1
 8002792:	f000 fa07 	bl	8002ba4 <lis2dw12_write_reg>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e000      	b.n	80027a4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80027b8:	460b      	mov	r3, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d80b      	bhi.n	80027e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	08002839 	.word	0x08002839
 80027d8:	08002865 	.word	0x08002865
 80027dc:	08002891 	.word	0x08002891
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80027e0:	79bb      	ldrb	r3, [r7, #6]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d002      	beq.n	80027ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80027e6:	2304      	movs	r3, #4
 80027e8:	75fb      	strb	r3, [r7, #23]
          break;
 80027ea:	e002      	b.n	80027f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80027ec:	2314      	movs	r3, #20
 80027ee:	75fb      	strb	r3, [r7, #23]
          break;
 80027f0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80027f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80027fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d400      	bmi.n	8002806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002804:	e05a      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002806:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002808:	60bb      	str	r3, [r7, #8]
      break;
 800280a:	e057      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d002      	beq.n	8002818 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002812:	2303      	movs	r3, #3
 8002814:	75fb      	strb	r3, [r7, #23]
          break;
 8002816:	e002      	b.n	800281e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002818:	2313      	movs	r3, #19
 800281a:	75fb      	strb	r3, [r7, #23]
          break;
 800281c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800281e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002822:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	dc00      	bgt.n	8002832 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002830:	e044      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002834:	60bb      	str	r3, [r7, #8]
      break;
 8002836:	e041      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d002      	beq.n	8002844 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800283e:	2302      	movs	r3, #2
 8002840:	75fb      	strb	r3, [r7, #23]
          break;
 8002842:	e002      	b.n	800284a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002844:	2312      	movs	r3, #18
 8002846:	75fb      	strb	r3, [r7, #23]
          break;
 8002848:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800284a:	edd7 7a02 	vldr	s15, [r7, #8]
 800284e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80029c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	dc00      	bgt.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800285c:	e02e      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800285e:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002860:	60bb      	str	r3, [r7, #8]
      break;
 8002862:	e02b      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d002      	beq.n	8002870 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
          break;
 800286e:	e002      	b.n	8002876 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002870:	2311      	movs	r3, #17
 8002872:	75fb      	strb	r3, [r7, #23]
          break;
 8002874:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002876:	edd7 7a02 	vldr	s15, [r7, #8]
 800287a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80029c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	dc00      	bgt.n	800288a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002888:	e018      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800288c:	60bb      	str	r3, [r7, #8]
      break;
 800288e:	e015      	b.n	80028bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d002      	beq.n	800289c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
          break;
 800289a:	e002      	b.n	80028a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800289c:	2310      	movs	r3, #16
 800289e:	75fb      	strb	r3, [r7, #23]
          break;
 80028a0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80028a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80029c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80028aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dc00      	bgt.n	80028b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80028b4:	e001      	b.n	80028ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80028b8:	60bb      	str	r3, [r7, #8]
      break;
 80028ba:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80028bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80029d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80028c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d801      	bhi.n	80028d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e04d      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d801      	bhi.n	80028e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e042      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d801      	bhi.n	80028fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e037      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002902:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80029d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d801      	bhi.n	8002914 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002910:	2304      	movs	r3, #4
 8002912:	e02c      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002914:	edd7 7a02 	vldr	s15, [r7, #8]
 8002918:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80029d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800291c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d801      	bhi.n	800292a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002926:	2305      	movs	r3, #5
 8002928:	e021      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800292a:	edd7 7a02 	vldr	s15, [r7, #8]
 800292e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	d801      	bhi.n	8002940 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800293c:	2306      	movs	r3, #6
 800293e:	e016      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002940:	edd7 7a02 	vldr	s15, [r7, #8]
 8002944:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80029dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	d801      	bhi.n	8002956 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002952:	2307      	movs	r3, #7
 8002954:	e00b      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002956:	edd7 7a02 	vldr	s15, [r7, #8]
 800295a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80029e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800295e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	d801      	bhi.n	800296c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002968:	2308      	movs	r3, #8
 800296a:	e000      	b.n	800296e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800296c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800296e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3320      	adds	r3, #32
 8002974:	7dba      	ldrb	r2, [r7, #22]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa33 	bl	8002de4 <lis2dw12_data_rate_set>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e018      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3320      	adds	r3, #32
 800298e:	7dfa      	ldrb	r2, [r7, #23]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f91e 	bl	8002bd4 <lis2dw12_power_mode_set>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e00b      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	79fa      	ldrb	r2, [r7, #7]
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	79ba      	ldrb	r2, [r7, #6]
 80029b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	41480000 	.word	0x41480000
 80029c8:	43480000 	.word	0x43480000
 80029cc:	43480000 	.word	0x43480000
 80029d0:	3fcccccd 	.word	0x3fcccccd
 80029d4:	42480000 	.word	0x42480000
 80029d8:	42c80000 	.word	0x42c80000
 80029dc:	43c80000 	.word	0x43c80000
 80029e0:	44480000 	.word	0x44480000

080029e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80029f0:	460b      	mov	r3, r1
 80029f2:	71fb      	strb	r3, [r7, #7]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	79fa      	ldrb	r2, [r7, #7]
 80029fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	79ba      	ldrb	r2, [r7, #6]
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	d801      	bhi.n	8002a1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002a1c:	e04d      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a22:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	d801      	bhi.n	8002a34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002a32:	e042      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a38:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	d801      	bhi.n	8002a4a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002a48:	e037      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a4e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002adc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d801      	bhi.n	8002a60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002a5e:	e02c      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a64:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	d801      	bhi.n	8002a76 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002a74:	e021      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002aec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d801      	bhi.n	8002a8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002a8a:	e016      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002af4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	d801      	bhi.n	8002aa2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002aa0:	e00b      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002afc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d801      	bhi.n	8002ab8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002ab6:	e000      	b.n	8002aba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	3fcccccd 	.word	0x3fcccccd
 8002ad0:	3fcccccd 	.word	0x3fcccccd
 8002ad4:	41480000 	.word	0x41480000
 8002ad8:	41c80000 	.word	0x41c80000
 8002adc:	42480000 	.word	0x42480000
 8002ae0:	42480000 	.word	0x42480000
 8002ae4:	42c80000 	.word	0x42c80000
 8002ae8:	42c80000 	.word	0x42c80000
 8002aec:	43480000 	.word	0x43480000
 8002af0:	43480000 	.word	0x43480000
 8002af4:	43c80000 	.word	0x43c80000
 8002af8:	43c80000 	.word	0x43c80000
 8002afc:	44480000 	.word	0x44480000
 8002b00:	44480000 	.word	0x44480000
 8002b04:	44c80000 	.word	0x44c80000

08002b08 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	695c      	ldr	r4, [r3, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	7b1b      	ldrb	r3, [r3, #12]
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	893b      	ldrh	r3, [r7, #8]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	47a0      	blx	r4
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}

08002b3e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b3e:	b590      	push	{r4, r7, lr}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	72fb      	strb	r3, [r7, #11]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	691c      	ldr	r4, [r3, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	7b1b      	ldrb	r3, [r3, #12]
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	7afb      	ldrb	r3, [r7, #11]
 8002b62:	b299      	uxth	r1, r3
 8002b64:	893b      	ldrh	r3, [r7, #8]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	47a0      	blx	r4
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	72fb      	strb	r3, [r7, #11]
 8002b84:	4613      	mov	r3, r2
 8002b86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685c      	ldr	r4, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68d8      	ldr	r0, [r3, #12]
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	7af9      	ldrb	r1, [r7, #11]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	47a0      	blx	r4
 8002b98:	6178      	str	r0, [r7, #20]

  return ret;
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}

08002ba4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	72fb      	strb	r3, [r7, #11]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681c      	ldr	r4, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68d8      	ldr	r0, [r3, #12]
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	7af9      	ldrb	r1, [r7, #11]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	47a0      	blx	r4
 8002bc8:	6178      	str	r0, [r7, #20]

  return ret;
 8002bca:	697b      	ldr	r3, [r7, #20]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd90      	pop	{r4, r7, pc}

08002bd4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002be0:	f107 0210 	add.w	r2, r7, #16
 8002be4:	2301      	movs	r3, #1
 8002be6:	2120      	movs	r1, #32
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ffc3 	bl	8002b74 <lis2dw12_read_reg>
 8002bee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	7c3b      	ldrb	r3, [r7, #16]
 8002c02:	f362 0383 	bfi	r3, r2, #2, #2
 8002c06:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	7c3b      	ldrb	r3, [r7, #16]
 8002c12:	f362 0301 	bfi	r3, r2, #0, #2
 8002c16:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c18:	f107 0210 	add.w	r2, r7, #16
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	2120      	movs	r1, #32
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffbf 	bl	8002ba4 <lis2dw12_write_reg>
 8002c26:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	2301      	movs	r3, #1
 8002c34:	2125      	movs	r1, #37	; 0x25
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff9c 	bl	8002b74 <lis2dw12_read_reg>
 8002c3c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d110      	bne.n	8002c66 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	7b3b      	ldrb	r3, [r7, #12]
 8002c50:	f362 0382 	bfi	r3, r2, #2, #1
 8002c54:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c56:	f107 020c 	add.w	r2, r7, #12
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	2125      	movs	r1, #37	; 0x25
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffa0 	bl	8002ba4 <lis2dw12_write_reg>
 8002c64:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002c66:	697b      	ldr	r3, [r7, #20]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c7a:	f107 0210 	add.w	r2, r7, #16
 8002c7e:	2301      	movs	r3, #1
 8002c80:	2120      	movs	r1, #32
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff76 	bl	8002b74 <lis2dw12_read_reg>
 8002c88:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 80a3 	bne.w	8002dd8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c92:	f107 020c 	add.w	r2, r7, #12
 8002c96:	2301      	movs	r3, #1
 8002c98:	2125      	movs	r1, #37	; 0x25
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff6a 	bl	8002b74 <lis2dw12_read_reg>
 8002ca0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	011a      	lsls	r2, r3, #4
 8002cac:	7c3b      	ldrb	r3, [r7, #16]
 8002cae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002cb8:	7c3a      	ldrb	r2, [r7, #16]
 8002cba:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002cbe:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002cc0:	4413      	add	r3, r2
 8002cc2:	2b1b      	cmp	r3, #27
 8002cc4:	f200 8084 	bhi.w	8002dd0 <lis2dw12_power_mode_get+0x160>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <lis2dw12_power_mode_get+0x60>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d61 	.word	0x08002d61
 8002cd4:	08002d59 	.word	0x08002d59
 8002cd8:	08002d51 	.word	0x08002d51
 8002cdc:	08002d49 	.word	0x08002d49
 8002ce0:	08002d41 	.word	0x08002d41
 8002ce4:	08002dd1 	.word	0x08002dd1
 8002ce8:	08002dd1 	.word	0x08002dd1
 8002cec:	08002dd1 	.word	0x08002dd1
 8002cf0:	08002d81 	.word	0x08002d81
 8002cf4:	08002d79 	.word	0x08002d79
 8002cf8:	08002d71 	.word	0x08002d71
 8002cfc:	08002d69 	.word	0x08002d69
 8002d00:	08002dd1 	.word	0x08002dd1
 8002d04:	08002dd1 	.word	0x08002dd1
 8002d08:	08002dd1 	.word	0x08002dd1
 8002d0c:	08002dd1 	.word	0x08002dd1
 8002d10:	08002da9 	.word	0x08002da9
 8002d14:	08002da1 	.word	0x08002da1
 8002d18:	08002d99 	.word	0x08002d99
 8002d1c:	08002d91 	.word	0x08002d91
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002dd1 	.word	0x08002dd1
 8002d28:	08002dd1 	.word	0x08002dd1
 8002d2c:	08002dd1 	.word	0x08002dd1
 8002d30:	08002dc9 	.word	0x08002dc9
 8002d34:	08002dc1 	.word	0x08002dc1
 8002d38:	08002db9 	.word	0x08002db9
 8002d3c:	08002db1 	.word	0x08002db1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	701a      	strb	r2, [r3, #0]
        break;
 8002d46:	e047      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	701a      	strb	r2, [r3, #0]
        break;
 8002d4e:	e043      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2202      	movs	r2, #2
 8002d54:	701a      	strb	r2, [r3, #0]
        break;
 8002d56:	e03f      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
        break;
 8002d5e:	e03b      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
        break;
 8002d66:	e037      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	220b      	movs	r2, #11
 8002d6c:	701a      	strb	r2, [r3, #0]
        break;
 8002d6e:	e033      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	220a      	movs	r2, #10
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	e02f      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2209      	movs	r2, #9
 8002d7c:	701a      	strb	r2, [r3, #0]
        break;
 8002d7e:	e02b      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2208      	movs	r2, #8
 8002d84:	701a      	strb	r2, [r3, #0]
        break;
 8002d86:	e027      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2214      	movs	r2, #20
 8002d8c:	701a      	strb	r2, [r3, #0]
        break;
 8002d8e:	e023      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2213      	movs	r2, #19
 8002d94:	701a      	strb	r2, [r3, #0]
        break;
 8002d96:	e01f      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2212      	movs	r2, #18
 8002d9c:	701a      	strb	r2, [r3, #0]
        break;
 8002d9e:	e01b      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2211      	movs	r2, #17
 8002da4:	701a      	strb	r2, [r3, #0]
        break;
 8002da6:	e017      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2210      	movs	r2, #16
 8002dac:	701a      	strb	r2, [r3, #0]
        break;
 8002dae:	e013      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	221b      	movs	r2, #27
 8002db4:	701a      	strb	r2, [r3, #0]
        break;
 8002db6:	e00f      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	221a      	movs	r2, #26
 8002dbc:	701a      	strb	r2, [r3, #0]
        break;
 8002dbe:	e00b      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2219      	movs	r2, #25
 8002dc4:	701a      	strb	r2, [r3, #0]
        break;
 8002dc6:	e007      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2218      	movs	r2, #24
 8002dcc:	701a      	strb	r2, [r3, #0]
        break;
 8002dce:	e003      	b.n	8002dd8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
        break;
 8002dd6:	bf00      	nop
    }
  }

  return ret;
 8002dd8:	697b      	ldr	r3, [r7, #20]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	2301      	movs	r3, #1
 8002df6:	2120      	movs	r1, #32
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff febb 	bl	8002b74 <lis2dw12_read_reg>
 8002dfe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	7c3b      	ldrb	r3, [r7, #16]
 8002e10:	f362 1307 	bfi	r3, r2, #4, #4
 8002e14:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e16:	f107 0210 	add.w	r2, r7, #16
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fec0 	bl	8002ba4 <lis2dw12_write_reg>
 8002e24:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e2c:	f107 020c 	add.w	r2, r7, #12
 8002e30:	2301      	movs	r3, #1
 8002e32:	2122      	movs	r1, #34	; 0x22
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fe9d 	bl	8002b74 <lis2dw12_read_reg>
 8002e3a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d110      	bne.n	8002e64 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	f362 0301 	bfi	r3, r2, #0, #2
 8002e52:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e54:	f107 020c 	add.w	r2, r7, #12
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2122      	movs	r1, #34	; 0x22
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fea1 	bl	8002ba4 <lis2dw12_write_reg>
 8002e62:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002e64:	697b      	ldr	r3, [r7, #20]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e7a:	f107 0210 	add.w	r2, r7, #16
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2120      	movs	r1, #32
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fe76 	bl	8002b74 <lis2dw12_read_reg>
 8002e88:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f040 80b3 	bne.w	8002ff8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e92:	f107 020c 	add.w	r2, r7, #12
 8002e96:	2301      	movs	r3, #1
 8002e98:	2122      	movs	r1, #34	; 0x22
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fe6a 	bl	8002b74 <lis2dw12_read_reg>
 8002ea0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002ea2:	7b3b      	ldrb	r3, [r7, #12]
 8002ea4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	7c3a      	ldrb	r2, [r7, #16]
 8002eae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2b32      	cmp	r3, #50	; 0x32
 8002eb8:	f200 809a 	bhi.w	8002ff0 <lis2dw12_data_rate_get+0x180>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <lis2dw12_data_rate_get+0x54>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002f91 	.word	0x08002f91
 8002ec8:	08002f99 	.word	0x08002f99
 8002ecc:	08002fa1 	.word	0x08002fa1
 8002ed0:	08002fa9 	.word	0x08002fa9
 8002ed4:	08002fb1 	.word	0x08002fb1
 8002ed8:	08002fb9 	.word	0x08002fb9
 8002edc:	08002fc1 	.word	0x08002fc1
 8002ee0:	08002fc9 	.word	0x08002fc9
 8002ee4:	08002fd1 	.word	0x08002fd1
 8002ee8:	08002fd9 	.word	0x08002fd9
 8002eec:	08002ff1 	.word	0x08002ff1
 8002ef0:	08002ff1 	.word	0x08002ff1
 8002ef4:	08002ff1 	.word	0x08002ff1
 8002ef8:	08002ff1 	.word	0x08002ff1
 8002efc:	08002ff1 	.word	0x08002ff1
 8002f00:	08002ff1 	.word	0x08002ff1
 8002f04:	08002ff1 	.word	0x08002ff1
 8002f08:	08002ff1 	.word	0x08002ff1
 8002f0c:	08002fe9 	.word	0x08002fe9
 8002f10:	08002ff1 	.word	0x08002ff1
 8002f14:	08002ff1 	.word	0x08002ff1
 8002f18:	08002ff1 	.word	0x08002ff1
 8002f1c:	08002ff1 	.word	0x08002ff1
 8002f20:	08002ff1 	.word	0x08002ff1
 8002f24:	08002ff1 	.word	0x08002ff1
 8002f28:	08002ff1 	.word	0x08002ff1
 8002f2c:	08002ff1 	.word	0x08002ff1
 8002f30:	08002ff1 	.word	0x08002ff1
 8002f34:	08002ff1 	.word	0x08002ff1
 8002f38:	08002ff1 	.word	0x08002ff1
 8002f3c:	08002ff1 	.word	0x08002ff1
 8002f40:	08002ff1 	.word	0x08002ff1
 8002f44:	08002ff1 	.word	0x08002ff1
 8002f48:	08002ff1 	.word	0x08002ff1
 8002f4c:	08002ff1 	.word	0x08002ff1
 8002f50:	08002ff1 	.word	0x08002ff1
 8002f54:	08002ff1 	.word	0x08002ff1
 8002f58:	08002ff1 	.word	0x08002ff1
 8002f5c:	08002ff1 	.word	0x08002ff1
 8002f60:	08002ff1 	.word	0x08002ff1
 8002f64:	08002ff1 	.word	0x08002ff1
 8002f68:	08002ff1 	.word	0x08002ff1
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	08002ff1 	.word	0x08002ff1
 8002f7c:	08002ff1 	.word	0x08002ff1
 8002f80:	08002ff1 	.word	0x08002ff1
 8002f84:	08002ff1 	.word	0x08002ff1
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002fe1 	.word	0x08002fe1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
        break;
 8002f96:	e02f      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
        break;
 8002f9e:	e02b      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
        break;
 8002fa6:	e027      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
        break;
 8002fae:	e023      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	701a      	strb	r2, [r3, #0]
        break;
 8002fb6:	e01f      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	701a      	strb	r2, [r3, #0]
        break;
 8002fbe:	e01b      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	701a      	strb	r2, [r3, #0]
        break;
 8002fc6:	e017      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2207      	movs	r2, #7
 8002fcc:	701a      	strb	r2, [r3, #0]
        break;
 8002fce:	e013      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	701a      	strb	r2, [r3, #0]
        break;
 8002fd6:	e00f      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2209      	movs	r2, #9
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e00b      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2232      	movs	r2, #50	; 0x32
 8002fe4:	701a      	strb	r2, [r3, #0]
        break;
 8002fe6:	e007      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2212      	movs	r2, #18
 8002fec:	701a      	strb	r2, [r3, #0]
        break;
 8002fee:	e003      	b.n	8002ff8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
        break;
 8002ff6:	bf00      	nop
    }
  }

  return ret;
 8002ff8:	697b      	ldr	r3, [r7, #20]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop

08003004 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003010:	f107 0208 	add.w	r2, r7, #8
 8003014:	2301      	movs	r3, #1
 8003016:	2121      	movs	r1, #33	; 0x21
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff fdab 	bl	8002b74 <lis2dw12_read_reg>
 800301e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	7a3b      	ldrb	r3, [r7, #8]
 8003030:	f362 03c3 	bfi	r3, r2, #3, #1
 8003034:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003036:	f107 0208 	add.w	r2, r7, #8
 800303a:	2301      	movs	r3, #1
 800303c:	2121      	movs	r1, #33	; 0x21
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fdb0 	bl	8002ba4 <lis2dw12_write_reg>
 8003044:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800305c:	f107 0208 	add.w	r2, r7, #8
 8003060:	2301      	movs	r3, #1
 8003062:	2125      	movs	r1, #37	; 0x25
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fd85 	bl	8002b74 <lis2dw12_read_reg>
 800306a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	b2da      	uxtb	r2, r3
 800307a:	7a3b      	ldrb	r3, [r7, #8]
 800307c:	f362 1305 	bfi	r3, r2, #4, #2
 8003080:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003082:	f107 0208 	add.w	r2, r7, #8
 8003086:	2301      	movs	r3, #1
 8003088:	2125      	movs	r1, #37	; 0x25
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fd8a 	bl	8002ba4 <lis2dw12_write_reg>
 8003090:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80030a6:	f107 0208 	add.w	r2, r7, #8
 80030aa:	2301      	movs	r3, #1
 80030ac:	2125      	movs	r1, #37	; 0x25
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fd60 	bl	8002b74 <lis2dw12_read_reg>
 80030b4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80030b6:	7a3b      	ldrb	r3, [r7, #8]
 80030b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d81a      	bhi.n	80030f8 <lis2dw12_full_scale_get+0x5c>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <lis2dw12_full_scale_get+0x2c>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e1 	.word	0x080030e1
 80030d0:	080030e9 	.word	0x080030e9
 80030d4:	080030f1 	.word	0x080030f1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
      break;
 80030de:	e00f      	b.n	8003100 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e00b      	b.n	8003100 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      break;
 80030ee:	e007      	b.n	8003100 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2203      	movs	r2, #3
 80030f4:	701a      	strb	r2, [r3, #0]
      break;
 80030f6:	e003      	b.n	8003100 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
      break;
 80030fe:	bf00      	nop
  }

  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop

0800310c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003116:	f107 020c 	add.w	r2, r7, #12
 800311a:	2306      	movs	r3, #6
 800311c:	2128      	movs	r1, #40	; 0x28
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fd28 	bl	8002b74 <lis2dw12_read_reg>
 8003124:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003126:	7b7b      	ldrb	r3, [r7, #13]
 8003128:	b21a      	sxth	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003134:	b29b      	uxth	r3, r3
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	b29a      	uxth	r2, r3
 800313a:	7b3b      	ldrb	r3, [r7, #12]
 800313c:	b29b      	uxth	r3, r3
 800313e:	4413      	add	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	b21a      	sxth	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3302      	adds	r3, #2
 800314e:	b212      	sxth	r2, r2
 8003150:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	3302      	adds	r3, #2
 8003156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315a:	b29b      	uxth	r3, r3
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	b29a      	uxth	r2, r3
 8003160:	7bbb      	ldrb	r3, [r7, #14]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4413      	add	r3, r2
 8003166:	b29a      	uxth	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	3302      	adds	r3, #2
 800316c:	b212      	sxth	r2, r2
 800316e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003170:	7c7a      	ldrb	r2, [r7, #17]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	b212      	sxth	r2, r2
 8003178:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003182:	b29b      	uxth	r3, r3
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b29a      	uxth	r2, r3
 8003188:	7c3b      	ldrb	r3, [r7, #16]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4413      	add	r3, r2
 800318e:	b29a      	uxth	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3304      	adds	r3, #4
 8003194:	b212      	sxth	r2, r2
 8003196:	801a      	strh	r2, [r3, #0]

  return ret;
 8003198:	697b      	ldr	r3, [r7, #20]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80031ac:	2301      	movs	r3, #1
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	210f      	movs	r1, #15
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fcde 	bl	8002b74 <lis2dw12_read_reg>
 80031b8:	60f8      	str	r0, [r7, #12]

  return ret;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80031d0:	f107 0208 	add.w	r2, r7, #8
 80031d4:	2301      	movs	r3, #1
 80031d6:	2121      	movs	r1, #33	; 0x21
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fccb 	bl	8002b74 <lis2dw12_read_reg>
 80031de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	7a3b      	ldrb	r3, [r7, #8]
 80031f0:	f362 0382 	bfi	r3, r2, #2, #1
 80031f4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	2301      	movs	r3, #1
 80031fc:	2121      	movs	r1, #33	; 0x21
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fcd0 	bl	8002ba4 <lis2dw12_write_reg>
 8003204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800321c:	f107 0208 	add.w	r2, r7, #8
 8003220:	2301      	movs	r3, #1
 8003222:	212e      	movs	r1, #46	; 0x2e
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fca5 	bl	8002b74 <lis2dw12_read_reg>
 800322a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	b2da      	uxtb	r2, r3
 800323a:	7a3b      	ldrb	r3, [r7, #8]
 800323c:	f362 1347 	bfi	r3, r2, #5, #3
 8003240:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003242:	f107 0208 	add.w	r2, r7, #8
 8003246:	2301      	movs	r3, #1
 8003248:	212e      	movs	r1, #46	; 0x2e
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fcaa 	bl	8002ba4 <lis2dw12_write_reg>
 8003250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e067      	b.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	7b1a      	ldrb	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a28      	ldr	r2, [pc, #160]	; (8003354 <LIS2MDL_RegisterBusIO+0xf8>)
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a27      	ldr	r2, [pc, #156]	; (8003358 <LIS2MDL_RegisterBusIO+0xfc>)
 80032ba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e036      	b.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4798      	blx	r3
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e02c      	b.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d123      	bne.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10d      	bne.n	8003324 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003308:	2334      	movs	r3, #52	; 0x34
 800330a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800330c:	7afb      	ldrb	r3, [r7, #11]
 800330e:	461a      	mov	r2, r3
 8003310:	2162      	movs	r1, #98	; 0x62
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb1b 	bl	800394e <LIS2MDL_Write_Reg>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d014      	beq.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e012      	b.n	800334a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d101      	bne.n	8003330 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	e00c      	b.n	800334a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3320      	adds	r3, #32
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ff70 	bl	800421c <lis2mdl_i2c_interface_set>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e000      	b.n	800334a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	080039a5 	.word	0x080039a5
 8003358:	08003a27 	.word	0x08003a27

0800335c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d144      	bne.n	80033f6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800336c:	f107 0208 	add.w	r2, r7, #8
 8003370:	2301      	movs	r3, #1
 8003372:	2162      	movs	r1, #98	; 0x62
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb97 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
 8003384:	e06c      	b.n	8003460 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003386:	f107 020c 	add.w	r2, r7, #12
 800338a:	2301      	movs	r3, #1
 800338c:	2160      	movs	r1, #96	; 0x60
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fb8a 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	e05f      	b.n	8003460 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80033a0:	7a3b      	ldrb	r3, [r7, #8]
 80033a2:	f043 0310 	orr.w	r3, r3, #16
 80033a6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80033a8:	7a3b      	ldrb	r3, [r7, #8]
 80033aa:	f36f 0341 	bfc	r3, #1, #1
 80033ae:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80033b0:	7b3b      	ldrb	r3, [r7, #12]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f362 0301 	bfi	r3, r2, #0, #2
 80033b8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80033ba:	7b3b      	ldrb	r3, [r7, #12]
 80033bc:	f043 030c 	orr.w	r3, r3, #12
 80033c0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80033c2:	f107 0208 	add.w	r2, r7, #8
 80033c6:	2301      	movs	r3, #1
 80033c8:	2162      	movs	r1, #98	; 0x62
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fcab 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	e041      	b.n	8003460 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80033dc:	f107 020c 	add.w	r2, r7, #12
 80033e0:	2301      	movs	r3, #1
 80033e2:	2160      	movs	r1, #96	; 0x60
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc9e 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d032      	beq.n	8003456 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295
 80033f4:	e034      	b.n	8003460 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3320      	adds	r3, #32
 80033fa:	2101      	movs	r1, #1
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe65 	bl	80040cc <lis2mdl_block_data_update_set>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
 800340c:	e028      	b.n	8003460 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3320      	adds	r3, #32
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fdd4 	bl	8003fc2 <lis2mdl_operating_mode_set>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	e01c      	b.n	8003460 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3320      	adds	r3, #32
 800342a:	2103      	movs	r1, #3
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fdee 	bl	800400e <lis2mdl_data_rate_set>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	e010      	b.n	8003460 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3320      	adds	r3, #32
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fec3 	bl	80041d0 <lis2mdl_self_test_set>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
 8003454:	e004      	b.n	8003460 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8a5 	bl	80035c0 <LIS2MDL_MAG_Disable>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	e004      	b.n	800348c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d10b      	bne.n	80034be <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80034a6:	2301      	movs	r3, #1
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	214f      	movs	r1, #79	; 0x4f
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fafb 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
 80034bc:	e00c      	b.n	80034d8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fe72 	bl	80041ae <lis2mdl_device_id_get>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	e000      	b.n	80034d8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2200      	movs	r2, #0
 8003506:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2232      	movs	r2, #50	; 0x32
 8003512:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <LIS2MDL_GetCapabilities+0x58>)
 8003528:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	42c80000 	.word	0x42c80000

0800353c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e032      	b.n	80035b8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d11d      	bne.n	8003596 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800355a:	f107 020c 	add.w	r2, r7, #12
 800355e:	2301      	movs	r3, #1
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 faa0 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e021      	b.n	80035b8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003574:	7b3b      	ldrb	r3, [r7, #12]
 8003576:	f36f 0301 	bfc	r3, #0, #2
 800357a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800357c:	f107 020c 	add.w	r2, r7, #12
 8003580:	2301      	movs	r3, #1
 8003582:	2160      	movs	r1, #96	; 0x60
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fbce 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	e010      	b.n	80035b8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3320      	adds	r3, #32
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fd10 	bl	8003fc2 <lis2mdl_operating_mode_set>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e004      	b.n	80035b8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e033      	b.n	800363e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d11e      	bne.n	800361c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80035de:	f107 020c 	add.w	r2, r7, #12
 80035e2:	2301      	movs	r3, #1
 80035e4:	2160      	movs	r1, #96	; 0x60
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa5e 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e022      	b.n	800363e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80035f8:	7b3b      	ldrb	r3, [r7, #12]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f362 0301 	bfi	r3, r2, #0, #2
 8003600:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003602:	f107 020c 	add.w	r2, r7, #12
 8003606:	2301      	movs	r3, #1
 8003608:	2160      	movs	r1, #96	; 0x60
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fb8b 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e010      	b.n	800363e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3320      	adds	r3, #32
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fccd 	bl	8003fc2 <lis2mdl_operating_mode_set>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	e004      	b.n	800363e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003656:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3320      	adds	r3, #32
 800367a:	f107 020b 	add.w	r2, r7, #11
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fceb 	bl	800405c <lis2mdl_data_rate_get>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e023      	b.n	80036da <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d81b      	bhi.n	80036d0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036b9 	.word	0x080036b9
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036c9 	.word	0x080036c9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80036b4:	601a      	str	r2, [r3, #0]
      break;
 80036b6:	e00f      	b.n	80036d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80036bc:	601a      	str	r2, [r3, #0]
      break;
 80036be:	e00b      	b.n	80036d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80036c4:	601a      	str	r2, [r3, #0]
      break;
 80036c6:	e007      	b.n	80036d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80036cc:	601a      	str	r2, [r3, #0]
      break;
 80036ce:	e003      	b.n	80036d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	60fb      	str	r3, [r7, #12]
      break;
 80036d6:	bf00      	nop
  }

  return ret;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	41200000 	.word	0x41200000
 80036e8:	41a00000 	.word	0x41a00000
 80036ec:	42480000 	.word	0x42480000
 80036f0:	42c80000 	.word	0x42c80000

080036f4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003700:	edd7 7a00 	vldr	s15, [r7]
 8003704:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d801      	bhi.n	8003716 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003712:	2300      	movs	r3, #0
 8003714:	e016      	b.n	8003744 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003716:	edd7 7a00 	vldr	s15, [r7]
 800371a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d801      	bhi.n	800372c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003728:	2301      	movs	r3, #1
 800372a:	e00b      	b.n	8003744 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800372c:	edd7 7a00 	vldr	s15, [r7]
 8003730:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80037b8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d801      	bhi.n	8003742 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800373e:	2302      	movs	r3, #2
 8003740:	e000      	b.n	8003744 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003742:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003744:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d121      	bne.n	8003792 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800374e:	f107 020c 	add.w	r2, r7, #12
 8003752:	2301      	movs	r3, #1
 8003754:	2160      	movs	r1, #96	; 0x60
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9a6 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	e022      	b.n	80037ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	b2da      	uxtb	r2, r3
 8003770:	7b3b      	ldrb	r3, [r7, #12]
 8003772:	f362 0383 	bfi	r3, r2, #2, #2
 8003776:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003778:	f107 020c 	add.w	r2, r7, #12
 800377c:	2301      	movs	r3, #1
 800377e:	2160      	movs	r1, #96	; 0x60
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fad0 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00f      	beq.n	80037ac <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	e00d      	b.n	80037ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3320      	adds	r3, #32
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc37 	bl	800400e <lis2mdl_data_rate_set>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	e000      	b.n	80037ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	42480000 	.word	0x42480000

080037bc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2232      	movs	r2, #50	; 0x32
 80037ca:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3320      	adds	r3, #32
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fc86 	bl	8004118 <lis2mdl_magnetic_raw_get>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e00c      	b.n	8003832 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003820:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003828:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d137      	bne.n	80038bc <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800384c:	f107 0218 	add.w	r2, r7, #24
 8003850:	2306      	movs	r3, #6
 8003852:	2168      	movs	r1, #104	; 0x68
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f927 	bl	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e06f      	b.n	8003946 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003866:	7e7b      	ldrb	r3, [r7, #25]
 8003868:	b21b      	sxth	r3, r3
 800386a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800386c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003870:	b29b      	uxth	r3, r3
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	b29a      	uxth	r2, r3
 8003876:	7e3b      	ldrb	r3, [r7, #24]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4413      	add	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	b21b      	sxth	r3, r3
 8003880:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003882:	7efb      	ldrb	r3, [r7, #27]
 8003884:	b21b      	sxth	r3, r3
 8003886:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800388c:	b29b      	uxth	r3, r3
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	b29a      	uxth	r2, r3
 8003892:	7ebb      	ldrb	r3, [r7, #26]
 8003894:	b29b      	uxth	r3, r3
 8003896:	4413      	add	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	b21b      	sxth	r3, r3
 800389c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800389e:	7f7b      	ldrb	r3, [r7, #29]
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80038a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	7f3b      	ldrb	r3, [r7, #28]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	82bb      	strh	r3, [r7, #20]
 80038ba:	e00d      	b.n	80038d8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3320      	adds	r3, #32
 80038c0:	f107 0210 	add.w	r2, r7, #16
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fc26 	bl	8004118 <lis2mdl_magnetic_raw_get>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	e036      	b.n	8003946 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff feb1 	bl	8003646 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80038e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038fc:	ee17 2a90 	vmov	r2, s15
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003908:	ee07 3a90 	vmov	s15, r3
 800390c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003910:	edd7 7a03 	vldr	s15, [r7, #12]
 8003914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800391c:	ee17 2a90 	vmov	r2, s15
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003924:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003930:	edd7 7a03 	vldr	s15, [r7, #12]
 8003934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800393c:	ee17 2a90 	vmov	r2, s15
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
 800395a:	4613      	mov	r3, r2
 800395c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d10b      	bne.n	800397e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003966:	1cba      	adds	r2, r7, #2
 8003968:	78f9      	ldrb	r1, [r7, #3]
 800396a:	2301      	movs	r3, #1
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f9da 	bl	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	e00e      	b.n	800399c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0020 	add.w	r0, r3, #32
 8003984:	1cba      	adds	r2, r7, #2
 8003986:	78f9      	ldrb	r1, [r7, #3]
 8003988:	2301      	movs	r3, #1
 800398a:	f000 fb02 	bl	8003f92 <lis2mdl_write_reg>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e000      	b.n	800399c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	460b      	mov	r3, r1
 80039b2:	72fb      	strb	r3, [r7, #11]
 80039b4:	4613      	mov	r3, r2
 80039b6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10e      	bne.n	80039e2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	695c      	ldr	r4, [r3, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	7b1b      	ldrb	r3, [r3, #12]
 80039cc:	b298      	uxth	r0, r3
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	b299      	uxth	r1, r3
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	47a0      	blx	r4
 80039de:	4603      	mov	r3, r0
 80039e0:	e01d      	b.n	8003a1e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d10b      	bne.n	8003a02 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	695c      	ldr	r4, [r3, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	7b1b      	ldrb	r3, [r3, #12]
 80039f2:	b298      	uxth	r0, r3
 80039f4:	7afb      	ldrb	r3, [r7, #11]
 80039f6:	b299      	uxth	r1, r3
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	47a0      	blx	r4
 80039fe:	4603      	mov	r3, r0
 8003a00:	e00d      	b.n	8003a1e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	695c      	ldr	r4, [r3, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	7b1b      	ldrb	r3, [r3, #12]
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	b299      	uxth	r1, r3
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	47a0      	blx	r4
 8003a1c:	4603      	mov	r3, r0
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}

08003a26 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a26:	b590      	push	{r4, r7, lr}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	461a      	mov	r2, r3
 8003a32:	460b      	mov	r3, r1
 8003a34:	72fb      	strb	r3, [r7, #11]
 8003a36:	4613      	mov	r3, r2
 8003a38:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	691c      	ldr	r4, [r3, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	7b1b      	ldrb	r3, [r3, #12]
 8003a4e:	b298      	uxth	r0, r3
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	b299      	uxth	r1, r3
 8003a5a:	893b      	ldrh	r3, [r7, #8]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	47a0      	blx	r4
 8003a60:	4603      	mov	r3, r0
 8003a62:	e01d      	b.n	8003aa0 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d10b      	bne.n	8003a84 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	691c      	ldr	r4, [r3, #16]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	7b1b      	ldrb	r3, [r3, #12]
 8003a74:	b298      	uxth	r0, r3
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	47a0      	blx	r4
 8003a80:	4603      	mov	r3, r0
 8003a82:	e00d      	b.n	8003aa0 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	691c      	ldr	r4, [r3, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	7b1b      	ldrb	r3, [r3, #12]
 8003a8c:	b298      	uxth	r0, r3
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	b299      	uxth	r1, r3
 8003a98:	893b      	ldrh	r3, [r7, #8]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	47a0      	blx	r4
 8003a9e:	4603      	mov	r3, r0
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}

08003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	; 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	72fb      	strb	r3, [r7, #11]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ac2:	2340      	movs	r3, #64	; 0x40
 8003ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003ace:	233d      	movs	r3, #61	; 0x3d
 8003ad0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003ad2:	2315      	movs	r3, #21
 8003ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003ad8:	2316      	movs	r3, #22
 8003ada:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003ade:	2317      	movs	r3, #23
 8003ae0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003ae4:	2314      	movs	r3, #20
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003aea:	2344      	movs	r3, #68	; 0x44
 8003aec:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003aee:	2302      	movs	r3, #2
 8003af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003af4:	2339      	movs	r3, #57	; 0x39
 8003af6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003b00:	2329      	movs	r3, #41	; 0x29
 8003b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003b06:	231e      	movs	r3, #30
 8003b08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003b18:	2310      	movs	r3, #16
 8003b1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003b24:	2340      	movs	r3, #64	; 0x40
 8003b26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f103 0020 	add.w	r0, r3, #32
 8003b30:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003b34:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f000 fa2a 	bl	8003f92 <lis2mdl_write_reg>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	e0e9      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f103 0020 	add.w	r0, r3, #32
 8003b50:	f107 021f 	add.w	r2, r7, #31
 8003b54:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f000 fa1a 	bl	8003f92 <lis2mdl_write_reg>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	e0d9      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f103 0020 	add.w	r0, r3, #32
 8003b70:	f107 020b 	add.w	r2, r7, #11
 8003b74:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f000 fa0a 	bl	8003f92 <lis2mdl_write_reg>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e0c9      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f103 0020 	add.w	r0, r3, #32
 8003b90:	f107 021d 	add.w	r2, r7, #29
 8003b94:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f000 f9fa 	bl	8003f92 <lis2mdl_write_reg>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	e0b9      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f103 0020 	add.w	r0, r3, #32
 8003bb0:	f107 021e 	add.w	r2, r7, #30
 8003bb4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f000 f9ea 	bl	8003f92 <lis2mdl_write_reg>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e0a9      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f103 0020 	add.w	r0, r3, #32
 8003bd0:	f107 0220 	add.w	r2, r7, #32
 8003bd4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f000 f9da 	bl	8003f92 <lis2mdl_write_reg>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	e099      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f103 0020 	add.w	r0, r3, #32
 8003bf0:	f107 021c 	add.w	r2, r7, #28
 8003bf4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f000 f9b2 	bl	8003f62 <lis2mdl_read_reg>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	e089      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003c0a:	7f3b      	ldrb	r3, [r7, #28]
 8003c0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d102      	bne.n	8003c1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003c18:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f103 0020 	add.w	r0, r3, #32
 8003c20:	f107 021c 	add.w	r2, r7, #28
 8003c24:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f000 f9b2 	bl	8003f92 <lis2mdl_write_reg>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	e071      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f103 0020 	add.w	r0, r3, #32
 8003c40:	f107 0214 	add.w	r2, r7, #20
 8003c44:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003c48:	2306      	movs	r3, #6
 8003c4a:	f000 f98a 	bl	8003f62 <lis2mdl_read_reg>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	e061      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f103 0020 	add.w	r0, r3, #32
 8003c60:	f107 021b 	add.w	r2, r7, #27
 8003c64:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f000 f97a 	bl	8003f62 <lis2mdl_read_reg>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e051      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003c7a:	7efa      	ldrb	r2, [r7, #27]
 8003c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c80:	4013      	ands	r3, r2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1e6      	bne.n	8003c5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f103 0020 	add.w	r0, r3, #32
 8003c92:	f107 021b 	add.w	r2, r7, #27
 8003c96:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f000 f961 	bl	8003f62 <lis2mdl_read_reg>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e038      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003cac:	7efa      	ldrb	r2, [r7, #27]
 8003cae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d1e6      	bne.n	8003c8c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f103 0020 	add.w	r0, r3, #32
 8003cc4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003cc8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f000 f960 	bl	8003f92 <lis2mdl_write_reg>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e01f      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f103 0020 	add.w	r0, r3, #32
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	f000 f939 	bl	8003f62 <lis2mdl_read_reg>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	e010      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f103 0020 	add.w	r0, r3, #32
 8003d02:	f107 0220 	add.w	r2, r7, #32
 8003d06:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f000 f941 	bl	8003f92 <lis2mdl_write_reg>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	e000      	b.n	8003d1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3730      	adds	r7, #48	; 0x30
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08c      	sub	sp, #48	; 0x30
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	461a      	mov	r2, r3
 8003d32:	460b      	mov	r3, r1
 8003d34:	72fb      	strb	r3, [r7, #11]
 8003d36:	4613      	mov	r3, r2
 8003d38:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003d4c:	233c      	movs	r3, #60	; 0x3c
 8003d4e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003d50:	2315      	movs	r3, #21
 8003d52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003d56:	2316      	movs	r3, #22
 8003d58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003d5c:	2317      	movs	r3, #23
 8003d5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003d66:	2314      	movs	r3, #20
 8003d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003d6c:	2344      	movs	r3, #68	; 0x44
 8003d6e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003d70:	2339      	movs	r3, #57	; 0x39
 8003d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003d7c:	2329      	movs	r3, #41	; 0x29
 8003d7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003d82:	231e      	movs	r3, #30
 8003d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003d8e:	2310      	movs	r3, #16
 8003d90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003da0:	230e      	movs	r3, #14
 8003da2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f103 0020 	add.w	r0, r3, #32
 8003dac:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003db0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003db4:	2301      	movs	r3, #1
 8003db6:	f000 f8ec 	bl	8003f92 <lis2mdl_write_reg>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	e0c9      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f103 0020 	add.w	r0, r3, #32
 8003dcc:	f107 021f 	add.w	r2, r7, #31
 8003dd0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f000 f8dc 	bl	8003f92 <lis2mdl_write_reg>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	e0b9      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f103 0020 	add.w	r0, r3, #32
 8003dec:	f107 020b 	add.w	r2, r7, #11
 8003df0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003df4:	2301      	movs	r3, #1
 8003df6:	f000 f8cc 	bl	8003f92 <lis2mdl_write_reg>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	e0a9      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f103 0020 	add.w	r0, r3, #32
 8003e0c:	f107 021e 	add.w	r2, r7, #30
 8003e10:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003e14:	2301      	movs	r3, #1
 8003e16:	f000 f8bc 	bl	8003f92 <lis2mdl_write_reg>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e099      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f103 0020 	add.w	r0, r3, #32
 8003e2c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003e30:	2301      	movs	r3, #1
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	f000 f8ad 	bl	8003f92 <lis2mdl_write_reg>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e08a      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f103 0020 	add.w	r0, r3, #32
 8003e4a:	f107 021d 	add.w	r2, r7, #29
 8003e4e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003e52:	2301      	movs	r3, #1
 8003e54:	f000 f89d 	bl	8003f92 <lis2mdl_write_reg>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e07a      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f103 0020 	add.w	r0, r3, #32
 8003e6a:	f107 0220 	add.w	r2, r7, #32
 8003e6e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e72:	2301      	movs	r3, #1
 8003e74:	f000 f88d 	bl	8003f92 <lis2mdl_write_reg>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	e06a      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f103 0020 	add.w	r0, r3, #32
 8003e8a:	f107 021c 	add.w	r2, r7, #28
 8003e8e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003e92:	2301      	movs	r3, #1
 8003e94:	f000 f865 	bl	8003f62 <lis2mdl_read_reg>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e05a      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003ea4:	7f3b      	ldrb	r3, [r7, #28]
 8003ea6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d102      	bne.n	8003eb4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f103 0020 	add.w	r0, r3, #32
 8003eba:	f107 021c 	add.w	r2, r7, #28
 8003ebe:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f000 f865 	bl	8003f92 <lis2mdl_write_reg>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	e042      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f103 0020 	add.w	r0, r3, #32
 8003eda:	f107 0214 	add.w	r2, r7, #20
 8003ede:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	f000 f83d 	bl	8003f62 <lis2mdl_read_reg>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e032      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f103 0020 	add.w	r0, r3, #32
 8003efa:	f107 021b 	add.w	r2, r7, #27
 8003efe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003f02:	2301      	movs	r3, #1
 8003f04:	f000 f82d 	bl	8003f62 <lis2mdl_read_reg>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e022      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003f14:	7efa      	ldrb	r2, [r7, #27]
 8003f16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d1e6      	bne.n	8003ef4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f103 0020 	add.w	r0, r3, #32
 8003f2c:	f107 021b 	add.w	r2, r7, #27
 8003f30:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003f34:	2301      	movs	r3, #1
 8003f36:	f000 f814 	bl	8003f62 <lis2mdl_read_reg>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295
 8003f44:	e009      	b.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003f46:	7efa      	ldrb	r2, [r7, #27]
 8003f48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1e6      	bne.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3730      	adds	r7, #48	; 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f62:	b590      	push	{r4, r7, lr}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	460b      	mov	r3, r1
 8003f70:	72fb      	strb	r3, [r7, #11]
 8003f72:	4613      	mov	r3, r2
 8003f74:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685c      	ldr	r4, [r3, #4]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	68d8      	ldr	r0, [r3, #12]
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	7af9      	ldrb	r1, [r7, #11]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	47a0      	blx	r4
 8003f86:	6178      	str	r0, [r7, #20]

  return ret;
 8003f88:	697b      	ldr	r3, [r7, #20]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd90      	pop	{r4, r7, pc}

08003f92 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f92:	b590      	push	{r4, r7, lr}
 8003f94:	b087      	sub	sp, #28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	72fb      	strb	r3, [r7, #11]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681c      	ldr	r4, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68d8      	ldr	r0, [r3, #12]
 8003fae:	893b      	ldrh	r3, [r7, #8]
 8003fb0:	7af9      	ldrb	r1, [r7, #11]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	47a0      	blx	r4
 8003fb6:	6178      	str	r0, [r7, #20]

  return ret;
 8003fb8:	697b      	ldr	r3, [r7, #20]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}

08003fc2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003fce:	f107 0208 	add.w	r2, r7, #8
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ffc3 	bl	8003f62 <lis2mdl_read_reg>
 8003fdc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10f      	bne.n	8004004 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	7a3b      	ldrb	r3, [r7, #8]
 8003fee:	f362 0301 	bfi	r3, r2, #0, #2
 8003ff2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003ff4:	f107 0208 	add.w	r2, r7, #8
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	2160      	movs	r1, #96	; 0x60
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ffc8 	bl	8003f92 <lis2mdl_write_reg>
 8004002:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800401a:	f107 0208 	add.w	r2, r7, #8
 800401e:	2301      	movs	r3, #1
 8004020:	2160      	movs	r1, #96	; 0x60
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff9d 	bl	8003f62 <lis2mdl_read_reg>
 8004028:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10f      	bne.n	8004050 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	b2da      	uxtb	r2, r3
 8004038:	7a3b      	ldrb	r3, [r7, #8]
 800403a:	f362 0383 	bfi	r3, r2, #2, #2
 800403e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004040:	f107 0208 	add.w	r2, r7, #8
 8004044:	2301      	movs	r3, #1
 8004046:	2160      	movs	r1, #96	; 0x60
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffa2 	bl	8003f92 <lis2mdl_write_reg>
 800404e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004050:	68fb      	ldr	r3, [r7, #12]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004066:	f107 0208 	add.w	r2, r7, #8
 800406a:	2301      	movs	r3, #1
 800406c:	2160      	movs	r1, #96	; 0x60
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff77 	bl	8003f62 <lis2mdl_read_reg>
 8004074:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004076:	7a3b      	ldrb	r3, [r7, #8]
 8004078:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b03      	cmp	r3, #3
 8004080:	d81a      	bhi.n	80040b8 <lis2mdl_data_rate_get+0x5c>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <lis2mdl_data_rate_get+0x2c>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040b1 	.word	0x080040b1
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
      break;
 800409e:	e00f      	b.n	80040c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e00b      	b.n	80040c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
      break;
 80040ae:	e007      	b.n	80040c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
      break;
 80040b6:	e003      	b.n	80040c0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
      break;
 80040be:	bf00      	nop
  }

  return ret;
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80040d8:	f107 0208 	add.w	r2, r7, #8
 80040dc:	2301      	movs	r3, #1
 80040de:	2162      	movs	r1, #98	; 0x62
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff3e 	bl	8003f62 <lis2mdl_read_reg>
 80040e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	7a3b      	ldrb	r3, [r7, #8]
 80040f8:	f362 1304 	bfi	r3, r2, #4, #1
 80040fc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80040fe:	f107 0208 	add.w	r2, r7, #8
 8004102:	2301      	movs	r3, #1
 8004104:	2162      	movs	r1, #98	; 0x62
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff43 	bl	8003f92 <lis2mdl_write_reg>
 800410c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004122:	f107 020c 	add.w	r2, r7, #12
 8004126:	2306      	movs	r3, #6
 8004128:	2168      	movs	r1, #104	; 0x68
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff19 	bl	8003f62 <lis2mdl_read_reg>
 8004130:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004132:	7b7b      	ldrb	r3, [r7, #13]
 8004134:	b21a      	sxth	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004140:	b29b      	uxth	r3, r3
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b29a      	uxth	r2, r3
 8004146:	7b3b      	ldrb	r3, [r7, #12]
 8004148:	b29b      	uxth	r3, r3
 800414a:	4413      	add	r3, r2
 800414c:	b29b      	uxth	r3, r3
 800414e:	b21a      	sxth	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	3302      	adds	r3, #2
 800415a:	b212      	sxth	r2, r2
 800415c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3302      	adds	r3, #2
 8004162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004166:	b29b      	uxth	r3, r3
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b29a      	uxth	r2, r3
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4413      	add	r3, r2
 8004172:	b29a      	uxth	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3302      	adds	r3, #2
 8004178:	b212      	sxth	r2, r2
 800417a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800417c:	7c7a      	ldrb	r2, [r7, #17]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	b212      	sxth	r2, r2
 8004184:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418e:	b29b      	uxth	r3, r3
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	b29a      	uxth	r2, r3
 8004194:	7c3b      	ldrb	r3, [r7, #16]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4413      	add	r3, r2
 800419a:	b29a      	uxth	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	b212      	sxth	r2, r2
 80041a2:	801a      	strh	r2, [r3, #0]

  return ret;
 80041a4:	697b      	ldr	r3, [r7, #20]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80041b8:	2301      	movs	r3, #1
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	214f      	movs	r1, #79	; 0x4f
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fecf 	bl	8003f62 <lis2mdl_read_reg>
 80041c4:	60f8      	str	r0, [r7, #12]

  return ret;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041dc:	f107 0208 	add.w	r2, r7, #8
 80041e0:	2301      	movs	r3, #1
 80041e2:	2162      	movs	r1, #98	; 0x62
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff febc 	bl	8003f62 <lis2mdl_read_reg>
 80041ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	7a3b      	ldrb	r3, [r7, #8]
 80041fc:	f362 0341 	bfi	r3, r2, #1, #1
 8004200:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004202:	f107 0208 	add.w	r2, r7, #8
 8004206:	2301      	movs	r3, #1
 8004208:	2162      	movs	r1, #98	; 0x62
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fec1 	bl	8003f92 <lis2mdl_write_reg>
 8004210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004228:	f107 0208 	add.w	r2, r7, #8
 800422c:	2301      	movs	r3, #1
 800422e:	2162      	movs	r1, #98	; 0x62
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff fe96 	bl	8003f62 <lis2mdl_read_reg>
 8004236:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	7a3b      	ldrb	r3, [r7, #8]
 8004248:	f362 1345 	bfi	r3, r2, #5, #1
 800424c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800424e:	f107 0208 	add.w	r2, r7, #8
 8004252:	2301      	movs	r3, #1
 8004254:	2162      	movs	r1, #98	; 0x62
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fe9b 	bl	8003f92 <lis2mdl_write_reg>
 800425c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800425e:	68fb      	ldr	r3, [r7, #12]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e051      	b.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7b1a      	ldrb	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <LSM6DSO_RegisterBusIO+0xcc>)
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <LSM6DSO_RegisterBusIO+0xd0>)
 80042c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e020      	b.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4798      	blx	r3
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e016      	b.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d112      	bne.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800430c:	230c      	movs	r3, #12
 800430e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	461a      	mov	r2, r3
 8004314:	2112      	movs	r1, #18
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ff59 	bl	80051ce <LSM6DSO_Write_Reg>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08005671 	.word	0x08005671
 8004338:	080056a7 	.word	0x080056a7

0800433c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3320      	adds	r3, #32
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	4618      	mov	r0, r3
 800434c:	f001 fe93 	bl	8006076 <lsm6dso_i3c_disable_set>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e060      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3320      	adds	r3, #32
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fe61 	bl	800602a <lsm6dso_auto_increment_set>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e054      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3320      	adds	r3, #32
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f001 fd62 	bl	8005e44 <lsm6dso_block_data_update_set>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e048      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3320      	adds	r3, #32
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 feb5 	bl	8006102 <lsm6dso_fifo_mode_set>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e03c      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3320      	adds	r3, #32
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 fa20 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e02c      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3320      	adds	r3, #32
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f9b6 	bl	800573c <lsm6dso_xl_full_scale_set>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	e020      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3320      	adds	r3, #32
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fbce 	bl	8005b8c <lsm6dso_gy_data_rate_set>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e010      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3320      	adds	r3, #32
 8004400:	2106      	movs	r1, #6
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fb5a 	bl	8005abc <lsm6dso_gy_full_scale_set>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e004      	b.n	800441e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f888 	bl	8004544 <LSM6DSO_ACC_Disable>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	e015      	b.n	800446c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fc2e 	bl	8004ca2 <LSM6DSO_GYRO_Disable>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	e00c      	b.n	800446c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3320      	adds	r3, #32
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fdbf 	bl	8006008 <lsm6dso_device_id_get>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	e000      	b.n	8004498 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044c8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2210      	movs	r2, #16
 80044ce:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <LSM6DSO_GetCapabilities+0x58>)
 80044da:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <LSM6DSO_GetCapabilities+0x58>)
 80044e0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	45d02000 	.word	0x45d02000

080044fc <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e014      	b.n	800453c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f103 0220 	add.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f001 f969 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800452c:	f04f 33ff 	mov.w	r3, #4294967295
 8004530:	e004      	b.n	800453c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e01f      	b.n	800459a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f103 0220 	add.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3333      	adds	r3, #51	; 0x33
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f001 fa40 	bl	80059ec <lsm6dso_xl_data_rate_get>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004572:	f04f 33ff 	mov.w	r3, #4294967295
 8004576:	e010      	b.n	800459a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3320      	adds	r3, #32
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f93a 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	e004      	b.n	800459a <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3320      	adds	r3, #32
 80045b6:	f107 020b 	add.w	r2, r7, #11
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 f8e3 	bl	8005788 <lsm6dso_xl_full_scale_get>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	e023      	b.n	8004616 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d81b      	bhi.n	800460c <LSM6DSO_ACC_GetSensitivity+0x68>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <LSM6DSO_ACC_GetSensitivity+0x38>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	08004605 	.word	0x08004605
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	080045fd 	.word	0x080045fd
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80045f0:	601a      	str	r2, [r3, #0]
      break;
 80045f2:	e00f      	b.n	8004614 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80045f8:	601a      	str	r2, [r3, #0]
      break;
 80045fa:	e00b      	b.n	8004614 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004600:	601a      	str	r2, [r3, #0]
      break;
 8004602:	e007      	b.n	8004614 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004608:	601a      	str	r2, [r3, #0]
      break;
 800460a:	e003      	b.n	8004614 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	60fb      	str	r3, [r7, #12]
      break;
 8004612:	bf00      	nop
  }

  return ret;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	3d79db23 	.word	0x3d79db23
 8004624:	3df9db23 	.word	0x3df9db23
 8004628:	3e79db23 	.word	0x3e79db23
 800462c:	3ef9db23 	.word	0x3ef9db23

08004630 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3320      	adds	r3, #32
 8004642:	f107 020b 	add.w	r2, r7, #11
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f001 f9cf 	bl	80059ec <lsm6dso_xl_data_rate_get>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	e054      	b.n	8004704 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	2b0b      	cmp	r3, #11
 800465e:	d84c      	bhi.n	80046fa <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004699 	.word	0x08004699
 800466c:	080046ab 	.word	0x080046ab
 8004670:	080046b3 	.word	0x080046b3
 8004674:	080046bb 	.word	0x080046bb
 8004678:	080046c3 	.word	0x080046c3
 800467c:	080046cb 	.word	0x080046cb
 8004680:	080046d3 	.word	0x080046d3
 8004684:	080046db 	.word	0x080046db
 8004688:	080046e3 	.word	0x080046e3
 800468c:	080046eb 	.word	0x080046eb
 8004690:	080046f3 	.word	0x080046f3
 8004694:	080046a3 	.word	0x080046a3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
      break;
 80046a0:	e02f      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80046a6:	601a      	str	r2, [r3, #0]
      break;
 80046a8:	e02b      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80046ae:	601a      	str	r2, [r3, #0]
      break;
 80046b0:	e027      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4a17      	ldr	r2, [pc, #92]	; (8004714 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80046b6:	601a      	str	r2, [r3, #0]
      break;
 80046b8:	e023      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80046be:	601a      	str	r2, [r3, #0]
      break;
 80046c0:	e01f      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80046c6:	601a      	str	r2, [r3, #0]
      break;
 80046c8:	e01b      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80046ce:	601a      	str	r2, [r3, #0]
      break;
 80046d0:	e017      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80046d6:	601a      	str	r2, [r3, #0]
      break;
 80046d8:	e013      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80046de:	601a      	str	r2, [r3, #0]
      break;
 80046e0:	e00f      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	4a11      	ldr	r2, [pc, #68]	; (800472c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80046e6:	601a      	str	r2, [r3, #0]
      break;
 80046e8:	e00b      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80046ee:	601a      	str	r2, [r3, #0]
      break;
 80046f0:	e007      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80046f6:	601a      	str	r2, [r3, #0]
      break;
 80046f8:	e003      	b.n	8004702 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
      break;
 8004700:	bf00      	nop
  }

  return ret;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	3fcccccd 	.word	0x3fcccccd
 8004710:	41480000 	.word	0x41480000
 8004714:	41d00000 	.word	0x41d00000
 8004718:	42500000 	.word	0x42500000
 800471c:	42d00000 	.word	0x42d00000
 8004720:	43500000 	.word	0x43500000
 8004724:	43d08000 	.word	0x43d08000
 8004728:	44504000 	.word	0x44504000
 800472c:	44d06000 	.word	0x44d06000
 8004730:	45505000 	.word	0x45505000
 8004734:	45d05800 	.word	0x45d05800

08004738 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004744:	2100      	movs	r1, #0
 8004746:	ed97 0a00 	vldr	s0, [r7]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f806 	bl	800475c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	ed87 0a02 	vstr	s0, [r7, #8]
 8004768:	460b      	mov	r3, r1
 800476a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2b02      	cmp	r3, #2
 8004778:	f000 80ea 	beq.w	8004950 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 800477c:	2b02      	cmp	r3, #2
 800477e:	f300 8163 	bgt.w	8004a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d074      	beq.n	8004874 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800478a:	e15d      	b.n	8004a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f103 0020 	add.w	r0, r3, #32
 8004792:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004796:	2301      	movs	r3, #1
 8004798:	2114      	movs	r1, #20
 800479a:	f000 ff9f 	bl	80056dc <lsm6dso_read_reg>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	e16c      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80047aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d025      	beq.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10b      	bne.n	80047da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3320      	adds	r3, #32
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f815 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295
 80047d8:	e154      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80047da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047de:	f36f 13c7 	bfc	r3, #7, #1
 80047e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f103 0020 	add.w	r0, r3, #32
 80047ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80047f0:	2301      	movs	r3, #1
 80047f2:	2114      	movs	r1, #20
 80047f4:	f000 ff8a 	bl	800570c <lsm6dso_write_reg>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e13f      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f103 0020 	add.w	r0, r3, #32
 800480a:	f107 0220 	add.w	r2, r7, #32
 800480e:	2301      	movs	r3, #1
 8004810:	2115      	movs	r1, #21
 8004812:	f000 ff63 	bl	80056dc <lsm6dso_read_reg>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e130      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d014      	beq.n	800485a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004834:	f36f 1304 	bfc	r3, #4, #1
 8004838:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f103 0020 	add.w	r0, r3, #32
 8004842:	f107 0220 	add.w	r2, r7, #32
 8004846:	2301      	movs	r3, #1
 8004848:	2115      	movs	r1, #21
 800484a:	f000 ff5f 	bl	800570c <lsm6dso_write_reg>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	e114      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800485a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800485e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	d400      	bmi.n	800486e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 800486c:	e0f0      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800486e:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
 8004872:	e0ed      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f103 0020 	add.w	r0, r3, #32
 800487a:	f107 021c 	add.w	r2, r7, #28
 800487e:	2301      	movs	r3, #1
 8004880:	2114      	movs	r1, #20
 8004882:	f000 ff2b 	bl	80056dc <lsm6dso_read_reg>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	e0f8      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004892:	7f3b      	ldrb	r3, [r7, #28]
 8004894:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d023      	beq.n	80048e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10b      	bne.n	80048c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3320      	adds	r3, #32
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 ffa2 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e0e1      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80048c0:	7f3b      	ldrb	r3, [r7, #28]
 80048c2:	f36f 13c7 	bfc	r3, #7, #1
 80048c6:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f103 0020 	add.w	r0, r3, #32
 80048ce:	f107 021c 	add.w	r2, r7, #28
 80048d2:	2301      	movs	r3, #1
 80048d4:	2114      	movs	r1, #20
 80048d6:	f000 ff19 	bl	800570c <lsm6dso_write_reg>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e0ce      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f103 0020 	add.w	r0, r3, #32
 80048ec:	f107 0218 	add.w	r2, r7, #24
 80048f0:	2301      	movs	r3, #1
 80048f2:	2115      	movs	r1, #21
 80048f4:	f000 fef2 	bl	80056dc <lsm6dso_read_reg>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	e0bf      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004904:	7e3b      	ldrb	r3, [r7, #24]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d112      	bne.n	8004936 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004910:	7e3b      	ldrb	r3, [r7, #24]
 8004912:	f043 0310 	orr.w	r3, r3, #16
 8004916:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f103 0020 	add.w	r0, r3, #32
 800491e:	f107 0218 	add.w	r2, r7, #24
 8004922:	2301      	movs	r3, #1
 8004924:	2115      	movs	r1, #21
 8004926:	f000 fef1 	bl	800570c <lsm6dso_write_reg>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004930:	f04f 33ff 	mov.w	r3, #4294967295
 8004934:	e0a6      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004936:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800493a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004a90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800493e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	dc00      	bgt.n	800494a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004948:	e082      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800494a:	4b52      	ldr	r3, [pc, #328]	; (8004a94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
 800494e:	e07f      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f103 0020 	add.w	r0, r3, #32
 8004956:	f107 0210 	add.w	r2, r7, #16
 800495a:	2301      	movs	r3, #1
 800495c:	2115      	movs	r1, #21
 800495e:	f000 febd 	bl	80056dc <lsm6dso_read_reg>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
 800496c:	e08a      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800496e:	7c3b      	ldrb	r3, [r7, #16]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d012      	beq.n	80049a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800497a:	7c3b      	ldrb	r3, [r7, #16]
 800497c:	f36f 1304 	bfc	r3, #4, #1
 8004980:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f103 0020 	add.w	r0, r3, #32
 8004988:	f107 0210 	add.w	r2, r7, #16
 800498c:	2301      	movs	r3, #1
 800498e:	2115      	movs	r1, #21
 8004990:	f000 febc 	bl	800570c <lsm6dso_write_reg>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e071      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d108      	bne.n	80049bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f979 	bl	8004ca2 <LSM6DSO_GYRO_Disable>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	e063      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f103 0020 	add.w	r0, r3, #32
 80049c2:	f107 0214 	add.w	r2, r7, #20
 80049c6:	2301      	movs	r3, #1
 80049c8:	2114      	movs	r1, #20
 80049ca:	f000 fe87 	bl	80056dc <lsm6dso_read_reg>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80049d4:	f04f 33ff 	mov.w	r3, #4294967295
 80049d8:	e054      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80049da:	7d3b      	ldrb	r3, [r7, #20]
 80049dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d123      	bne.n	8004a2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10b      	bne.n	8004a08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3320      	adds	r3, #32
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fefe 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e03d      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004a08:	7d3b      	ldrb	r3, [r7, #20]
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f103 0020 	add.w	r0, r3, #32
 8004a16:	f107 0214 	add.w	r2, r7, #20
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	2114      	movs	r1, #20
 8004a1e:	f000 fe75 	bl	800570c <lsm6dso_write_reg>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e02a      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004a2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a32:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004a90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	dc00      	bgt.n	8004a42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004a40:	e006      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a46:	e003      	b.n	8004a50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004a4e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d102      	bne.n	8004a5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5c:	e012      	b.n	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004a68:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fbc9 	bl	8005204 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004a72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a74:	e005      	b.n	8004a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004a76:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc5a 	bl	8005334 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004a80:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3730      	adds	r7, #48	; 0x30
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	41480000 	.word	0x41480000
 8004a90:	43500000 	.word	0x43500000
 8004a94:	43500000 	.word	0x43500000

08004a98 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3320      	adds	r3, #32
 8004aaa:	f107 020b 	add.w	r2, r7, #11
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fe69 	bl	8005788 <lsm6dso_xl_full_scale_get>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	e023      	b.n	8004b0a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d81b      	bhi.n	8004b00 <LSM6DSO_ACC_GetFullScale+0x68>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <LSM6DSO_ACC_GetFullScale+0x38>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af1 	.word	0x08004af1
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	601a      	str	r2, [r3, #0]
      break;
 8004ae6:	e00f      	b.n	8004b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2204      	movs	r2, #4
 8004aec:	601a      	str	r2, [r3, #0]
      break;
 8004aee:	e00b      	b.n	8004b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2208      	movs	r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
      break;
 8004af6:	e007      	b.n	8004b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2210      	movs	r2, #16
 8004afc:	601a      	str	r2, [r3, #0]
      break;
 8004afe:	e003      	b.n	8004b08 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	60fb      	str	r3, [r7, #12]
      break;
 8004b06:	bf00      	nop
  }

  return ret;
 8004b08:	68fb      	ldr	r3, [r7, #12]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop

08004b14 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	dd0b      	ble.n	8004b3c <LSM6DSO_ACC_SetFullScale+0x28>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	dd06      	ble.n	8004b38 <LSM6DSO_ACC_SetFullScale+0x24>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	dc01      	bgt.n	8004b34 <LSM6DSO_ACC_SetFullScale+0x20>
 8004b30:	2303      	movs	r3, #3
 8004b32:	e004      	b.n	8004b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e002      	b.n	8004b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e000      	b.n	8004b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8004b3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004b3e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3320      	adds	r3, #32
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fdf7 	bl	800573c <lsm6dso_xl_full_scale_set>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e000      	b.n	8004b5c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3320      	adds	r3, #32
 8004b72:	f107 0208 	add.w	r2, r7, #8
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 f9d4 	bl	8005f26 <lsm6dso_acceleration_raw_get>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295
 8004b88:	e00c      	b.n	8004ba4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004b8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004b92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004b9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3320      	adds	r3, #32
 8004bc0:	f107 0210 	add.w	r2, r7, #16
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f9ad 	bl	8005f26 <lsm6dso_acceleration_raw_get>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e03c      	b.n	8004c52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004bd8:	f107 030c 	add.w	r3, r7, #12
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fce0 	bl	80045a4 <LSM6DSO_ACC_GetSensitivity>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e030      	b.n	8004c52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004bf0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c08:	ee17 2a90 	vmov	r2, s15
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c28:	ee17 2a90 	vmov	r2, s15
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004c30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c48:	ee17 2a90 	vmov	r2, s15
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e014      	b.n	8004c9a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0220 	add.w	r2, r3, #32
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 ff84 	bl	8005b8c <lsm6dso_gy_data_rate_set>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e004      	b.n	8004c9a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e01f      	b.n	8004cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0220 	add.w	r2, r3, #32
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3334      	adds	r3, #52	; 0x34
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f001 f85b 	bl	8005d80 <lsm6dso_gy_data_rate_get>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	e010      	b.n	8004cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3320      	adds	r3, #32
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ff55 	bl	8005b8c <lsm6dso_gy_data_rate_set>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	e004      	b.n	8004cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3320      	adds	r3, #32
 8004d12:	f107 020b 	add.w	r2, r7, #11
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fef5 	bl	8005b08 <lsm6dso_gy_full_scale_get>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	e02d      	b.n	8004d86 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d825      	bhi.n	8004d7c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d55 	.word	0x08004d55
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d75 	.word	0x08004d75
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	4a0e      	ldr	r2, [pc, #56]	; (8004d90 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004d58:	601a      	str	r2, [r3, #0]
      break;
 8004d5a:	e013      	b.n	8004d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	; (8004d94 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004d60:	601a      	str	r2, [r3, #0]
      break;
 8004d62:	e00f      	b.n	8004d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004d68:	601a      	str	r2, [r3, #0]
      break;
 8004d6a:	e00b      	b.n	8004d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004d70:	601a      	str	r2, [r3, #0]
      break;
 8004d72:	e007      	b.n	8004d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004d78:	601a      	str	r2, [r3, #0]
      break;
 8004d7a:	e003      	b.n	8004d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	60fb      	str	r3, [r7, #12]
      break;
 8004d82:	bf00      	nop
  }

  return ret;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	408c0000 	.word	0x408c0000
 8004d94:	410c0000 	.word	0x410c0000
 8004d98:	418c0000 	.word	0x418c0000
 8004d9c:	420c0000 	.word	0x420c0000
 8004da0:	428c0000 	.word	0x428c0000

08004da4 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3320      	adds	r3, #32
 8004db6:	f107 020b 	add.w	r2, r7, #11
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 ffdf 	bl	8005d80 <lsm6dso_gy_data_rate_get>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	e04e      	b.n	8004e6c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b0a      	cmp	r3, #10
 8004dd2:	d846      	bhi.n	8004e62 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	08004e13 	.word	0x08004e13
 8004de4:	08004e1b 	.word	0x08004e1b
 8004de8:	08004e23 	.word	0x08004e23
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e33 	.word	0x08004e33
 8004df4:	08004e3b 	.word	0x08004e3b
 8004df8:	08004e43 	.word	0x08004e43
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004e53 	.word	0x08004e53
 8004e04:	08004e5b 	.word	0x08004e5b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
      break;
 8004e10:	e02b      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004e16:	601a      	str	r2, [r3, #0]
      break;
 8004e18:	e027      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004e1e:	601a      	str	r2, [r3, #0]
      break;
 8004e20:	e023      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004e26:	601a      	str	r2, [r3, #0]
      break;
 8004e28:	e01f      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004e2e:	601a      	str	r2, [r3, #0]
      break;
 8004e30:	e01b      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004e36:	601a      	str	r2, [r3, #0]
      break;
 8004e38:	e017      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004e3e:	601a      	str	r2, [r3, #0]
      break;
 8004e40:	e013      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004e46:	601a      	str	r2, [r3, #0]
      break;
 8004e48:	e00f      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4a10      	ldr	r2, [pc, #64]	; (8004e90 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004e4e:	601a      	str	r2, [r3, #0]
      break;
 8004e50:	e00b      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004e56:	601a      	str	r2, [r3, #0]
      break;
 8004e58:	e007      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004e5e:	601a      	str	r2, [r3, #0]
      break;
 8004e60:	e003      	b.n	8004e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	60fb      	str	r3, [r7, #12]
      break;
 8004e68:	bf00      	nop
  }

  return ret;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	41480000 	.word	0x41480000
 8004e78:	41d00000 	.word	0x41d00000
 8004e7c:	42500000 	.word	0x42500000
 8004e80:	42d00000 	.word	0x42d00000
 8004e84:	43500000 	.word	0x43500000
 8004e88:	43d08000 	.word	0x43d08000
 8004e8c:	44504000 	.word	0x44504000
 8004e90:	44d06000 	.word	0x44d06000
 8004e94:	45505000 	.word	0x45505000
 8004e98:	45d05800 	.word	0x45d05800

08004e9c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	ed97 0a00 	vldr	s0, [r7]
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f806 	bl	8004ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d028      	beq.n	8004f34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004ee2:	e05c      	b.n	8004f9e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f103 0020 	add.w	r0, r3, #32
 8004eea:	f107 0214 	add.w	r2, r7, #20
 8004eee:	2301      	movs	r3, #1
 8004ef0:	2116      	movs	r1, #22
 8004ef2:	f000 fbf3 	bl	80056dc <lsm6dso_read_reg>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	e06c      	b.n	8004fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004f02:	7d3b      	ldrb	r3, [r7, #20]
 8004f04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04b      	beq.n	8004fa6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004f0e:	7d3b      	ldrb	r3, [r7, #20]
 8004f10:	f36f 13c7 	bfc	r3, #7, #1
 8004f14:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f103 0020 	add.w	r0, r3, #32
 8004f1c:	f107 0214 	add.w	r2, r7, #20
 8004f20:	2301      	movs	r3, #1
 8004f22:	2116      	movs	r1, #22
 8004f24:	f000 fbf2 	bl	800570c <lsm6dso_write_reg>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03b      	beq.n	8004fa6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	e053      	b.n	8004fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f103 0020 	add.w	r0, r3, #32
 8004f3a:	f107 0210 	add.w	r2, r7, #16
 8004f3e:	2301      	movs	r3, #1
 8004f40:	2116      	movs	r1, #22
 8004f42:	f000 fbcb 	bl	80056dc <lsm6dso_read_reg>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f50:	e044      	b.n	8004fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004f52:	7c3b      	ldrb	r3, [r7, #16]
 8004f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004f5e:	7c3b      	ldrb	r3, [r7, #16]
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f103 0020 	add.w	r0, r3, #32
 8004f6c:	f107 0210 	add.w	r2, r7, #16
 8004f70:	2301      	movs	r3, #1
 8004f72:	2116      	movs	r1, #22
 8004f74:	f000 fbca 	bl	800570c <lsm6dso_write_reg>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	e02b      	b.n	8004fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f88:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004fe4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	dc00      	bgt.n	8004f98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004f96:	e007      	b.n	8004fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004f98:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e004      	b.n	8004fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa2:	61fb      	str	r3, [r7, #28]
      break;
 8004fa4:	e000      	b.n	8004fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004fa6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb4:	e012      	b.n	8004fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004fc0:	ed97 0a06 	vldr	s0, [r7, #24]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fa45 	bl	8005454 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004fca:	61f8      	str	r0, [r7, #28]
 8004fcc:	e005      	b.n	8004fda <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004fce:	ed97 0a06 	vldr	s0, [r7, #24]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 faca 	bl	800556c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004fd8:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	43500000 	.word	0x43500000
 8004fe8:	43500000 	.word	0x43500000

08004fec <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3320      	adds	r3, #32
 8004ffe:	f107 020b 	add.w	r2, r7, #11
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fd7f 	bl	8005b08 <lsm6dso_gy_full_scale_get>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	e030      	b.n	8005078 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	2b06      	cmp	r3, #6
 800501a:	d828      	bhi.n	800506e <LSM6DSO_GYRO_GetFullScale+0x82>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005049 	.word	0x08005049
 8005028:	08005041 	.word	0x08005041
 800502c:	08005051 	.word	0x08005051
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505b 	.word	0x0800505b
 8005038:	0800506f 	.word	0x0800506f
 800503c:	08005065 	.word	0x08005065
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	227d      	movs	r2, #125	; 0x7d
 8005044:	601a      	str	r2, [r3, #0]
      break;
 8005046:	e016      	b.n	8005076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	22fa      	movs	r2, #250	; 0xfa
 800504c:	601a      	str	r2, [r3, #0]
      break;
 800504e:	e012      	b.n	8005076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005056:	601a      	str	r2, [r3, #0]
      break;
 8005058:	e00d      	b.n	8005076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005060:	601a      	str	r2, [r3, #0]
      break;
 8005062:	e008      	b.n	8005076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800506a:	601a      	str	r2, [r3, #0]
      break;
 800506c:	e003      	b.n	8005076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	60fb      	str	r3, [r7, #12]
      break;
 8005074:	bf00      	nop
  }

  return ret;
 8005076:	68fb      	ldr	r3, [r7, #12]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b7d      	cmp	r3, #125	; 0x7d
 800508e:	dd12      	ble.n	80050b6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2bfa      	cmp	r3, #250	; 0xfa
 8005094:	dd0d      	ble.n	80050b2 <LSM6DSO_GYRO_SetFullScale+0x32>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800509c:	dd07      	ble.n	80050ae <LSM6DSO_GYRO_SetFullScale+0x2e>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a4:	dc01      	bgt.n	80050aa <LSM6DSO_GYRO_SetFullScale+0x2a>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e006      	b.n	80050b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80050aa:	2306      	movs	r3, #6
 80050ac:	e004      	b.n	80050b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e002      	b.n	80050b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80050b6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80050b8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3320      	adds	r3, #32
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fcfa 	bl	8005abc <lsm6dso_gy_full_scale_set>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e000      	b.n	80050d6 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3320      	adds	r3, #32
 80050ec:	f107 0208 	add.w	r2, r7, #8
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fecc 	bl	8005e90 <lsm6dso_angular_rate_raw_get>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e00c      	b.n	800511e <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005104:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800510c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005114:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b086      	sub	sp, #24
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3320      	adds	r3, #32
 8005134:	f107 0210 	add.w	r2, r7, #16
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fea8 	bl	8005e90 <lsm6dso_angular_rate_raw_get>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e03c      	b.n	80051c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800514c:	f107 030c 	add.w	r3, r7, #12
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fdd4 	bl	8004d00 <LSM6DSO_GYRO_GetSensitivity>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295
 8005162:	e030      	b.n	80051c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005170:	edd7 7a03 	vldr	s15, [r7, #12]
 8005174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517c:	ee17 2a90 	vmov	r2, s15
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005190:	edd7 7a03 	vldr	s15, [r7, #12]
 8005194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800519c:	ee17 2a90 	vmov	r2, s15
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80051a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051a8:	ee07 3a90 	vmov	s15, r3
 80051ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051bc:	ee17 2a90 	vmov	r2, s15
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70fb      	strb	r3, [r7, #3]
 80051da:	4613      	mov	r3, r2
 80051dc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 0020 	add.w	r0, r3, #32
 80051e4:	1cba      	adds	r2, r7, #2
 80051e6:	78f9      	ldrb	r1, [r7, #3]
 80051e8:	2301      	movs	r3, #1
 80051ea:	f000 fa8f 	bl	800570c <lsm6dso_write_reg>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	e000      	b.n	80051fc <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005210:	edd7 7a00 	vldr	s15, [r7]
 8005214:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005314 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	d801      	bhi.n	8005226 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005222:	230b      	movs	r3, #11
 8005224:	e063      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005226:	edd7 7a00 	vldr	s15, [r7]
 800522a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800522e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	d801      	bhi.n	800523c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005238:	2301      	movs	r3, #1
 800523a:	e058      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800523c:	edd7 7a00 	vldr	s15, [r7]
 8005240:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	d801      	bhi.n	8005252 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800524e:	2302      	movs	r3, #2
 8005250:	e04d      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005252:	edd7 7a00 	vldr	s15, [r7]
 8005256:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005318 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800525a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d801      	bhi.n	8005268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005264:	2303      	movs	r3, #3
 8005266:	e042      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005268:	edd7 7a00 	vldr	s15, [r7]
 800526c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800531c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d801      	bhi.n	800527e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800527a:	2304      	movs	r3, #4
 800527c:	e037      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800527e:	edd7 7a00 	vldr	s15, [r7]
 8005282:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005320 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8005286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d801      	bhi.n	8005294 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005290:	2305      	movs	r3, #5
 8005292:	e02c      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005294:	edd7 7a00 	vldr	s15, [r7]
 8005298:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005324 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 800529c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d801      	bhi.n	80052aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80052a6:	2306      	movs	r3, #6
 80052a8:	e021      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80052aa:	edd7 7a00 	vldr	s15, [r7]
 80052ae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005328 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80052b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	d801      	bhi.n	80052c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80052bc:	2307      	movs	r3, #7
 80052be:	e016      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80052c0:	edd7 7a00 	vldr	s15, [r7]
 80052c4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800532c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	d801      	bhi.n	80052d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80052d2:	2308      	movs	r3, #8
 80052d4:	e00b      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80052d6:	edd7 7a00 	vldr	s15, [r7]
 80052da:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005330 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80052de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d801      	bhi.n	80052ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80052e8:	2309      	movs	r3, #9
 80052ea:	e000      	b.n	80052ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80052ec:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80052ee:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3320      	adds	r3, #32
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fa7d 	bl	80057f8 <lsm6dso_xl_data_rate_set>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	e000      	b.n	800530c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	3fcccccd 	.word	0x3fcccccd
 8005318:	42500000 	.word	0x42500000
 800531c:	42d00000 	.word	0x42d00000
 8005320:	43500000 	.word	0x43500000
 8005324:	43d08000 	.word	0x43d08000
 8005328:	44504000 	.word	0x44504000
 800532c:	44d06000 	.word	0x44d06000
 8005330:	45505000 	.word	0x45505000

08005334 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005340:	edd7 7a00 	vldr	s15, [r7]
 8005344:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005434 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005350:	d801      	bhi.n	8005356 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005352:	230b      	movs	r3, #11
 8005354:	e063      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005356:	edd7 7a00 	vldr	s15, [r7]
 800535a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800535e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	d801      	bhi.n	800536c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005368:	2301      	movs	r3, #1
 800536a:	e058      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800536c:	edd7 7a00 	vldr	s15, [r7]
 8005370:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537c:	d801      	bhi.n	8005382 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800537e:	2302      	movs	r3, #2
 8005380:	e04d      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005382:	edd7 7a00 	vldr	s15, [r7]
 8005386:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005438 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800538a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	d801      	bhi.n	8005398 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005394:	2303      	movs	r3, #3
 8005396:	e042      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005398:	edd7 7a00 	vldr	s15, [r7]
 800539c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800543c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d801      	bhi.n	80053ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80053aa:	2304      	movs	r3, #4
 80053ac:	e037      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80053ae:	edd7 7a00 	vldr	s15, [r7]
 80053b2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005440 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80053b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d801      	bhi.n	80053c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80053c0:	2305      	movs	r3, #5
 80053c2:	e02c      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80053c4:	edd7 7a00 	vldr	s15, [r7]
 80053c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005444 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80053cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	d801      	bhi.n	80053da <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80053d6:	2306      	movs	r3, #6
 80053d8:	e021      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80053da:	edd7 7a00 	vldr	s15, [r7]
 80053de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005448 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	d801      	bhi.n	80053f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80053ec:	2307      	movs	r3, #7
 80053ee:	e016      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80053f0:	edd7 7a00 	vldr	s15, [r7]
 80053f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800544c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80053f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005400:	d801      	bhi.n	8005406 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005402:	2308      	movs	r3, #8
 8005404:	e00b      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005406:	edd7 7a00 	vldr	s15, [r7]
 800540a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005450 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	d801      	bhi.n	800541c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005418:	2309      	movs	r3, #9
 800541a:	e000      	b.n	800541e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800541c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	3fcccccd 	.word	0x3fcccccd
 8005438:	42500000 	.word	0x42500000
 800543c:	42d00000 	.word	0x42d00000
 8005440:	43500000 	.word	0x43500000
 8005444:	43d08000 	.word	0x43d08000
 8005448:	44504000 	.word	0x44504000
 800544c:	44d06000 	.word	0x44d06000
 8005450:	45505000 	.word	0x45505000

08005454 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005460:	edd7 7a00 	vldr	s15, [r7]
 8005464:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d801      	bhi.n	8005476 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005472:	2301      	movs	r3, #1
 8005474:	e058      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005476:	edd7 7a00 	vldr	s15, [r7]
 800547a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800547e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005486:	d801      	bhi.n	800548c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005488:	2302      	movs	r3, #2
 800548a:	e04d      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800548c:	edd7 7a00 	vldr	s15, [r7]
 8005490:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005550 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549c:	d801      	bhi.n	80054a2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800549e:	2303      	movs	r3, #3
 80054a0:	e042      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054a2:	edd7 7a00 	vldr	s15, [r7]
 80054a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005554 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80054aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d801      	bhi.n	80054b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80054b4:	2304      	movs	r3, #4
 80054b6:	e037      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054b8:	edd7 7a00 	vldr	s15, [r7]
 80054bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005558 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80054c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	d801      	bhi.n	80054ce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80054ca:	2305      	movs	r3, #5
 80054cc:	e02c      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054ce:	edd7 7a00 	vldr	s15, [r7]
 80054d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800555c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80054d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d801      	bhi.n	80054e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80054e0:	2306      	movs	r3, #6
 80054e2:	e021      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054e4:	edd7 7a00 	vldr	s15, [r7]
 80054e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005560 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80054ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	d801      	bhi.n	80054fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80054f6:	2307      	movs	r3, #7
 80054f8:	e016      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054fa:	edd7 7a00 	vldr	s15, [r7]
 80054fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005564 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d801      	bhi.n	8005510 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800550c:	2308      	movs	r3, #8
 800550e:	e00b      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005510:	edd7 7a00 	vldr	s15, [r7]
 8005514:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005568 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	d801      	bhi.n	8005526 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005522:	2309      	movs	r3, #9
 8005524:	e000      	b.n	8005528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005526:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005528:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3320      	adds	r3, #32
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb2a 	bl	8005b8c <lsm6dso_gy_data_rate_set>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	e000      	b.n	8005546 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	42500000 	.word	0x42500000
 8005554:	42d00000 	.word	0x42d00000
 8005558:	43500000 	.word	0x43500000
 800555c:	43d08000 	.word	0x43d08000
 8005560:	44504000 	.word	0x44504000
 8005564:	44d06000 	.word	0x44d06000
 8005568:	45505000 	.word	0x45505000

0800556c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005578:	edd7 7a00 	vldr	s15, [r7]
 800557c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005588:	d801      	bhi.n	800558e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800558a:	2301      	movs	r3, #1
 800558c:	e058      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800558e:	edd7 7a00 	vldr	s15, [r7]
 8005592:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	d801      	bhi.n	80055a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e04d      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055a4:	edd7 7a00 	vldr	s15, [r7]
 80055a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005654 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80055ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	d801      	bhi.n	80055ba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80055b6:	2303      	movs	r3, #3
 80055b8:	e042      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055ba:	edd7 7a00 	vldr	s15, [r7]
 80055be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005658 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80055c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ca:	d801      	bhi.n	80055d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80055cc:	2304      	movs	r3, #4
 80055ce:	e037      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055d0:	edd7 7a00 	vldr	s15, [r7]
 80055d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800565c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80055d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	d801      	bhi.n	80055e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80055e2:	2305      	movs	r3, #5
 80055e4:	e02c      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055e6:	edd7 7a00 	vldr	s15, [r7]
 80055ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005660 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80055ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	d801      	bhi.n	80055fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80055f8:	2306      	movs	r3, #6
 80055fa:	e021      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055fc:	edd7 7a00 	vldr	s15, [r7]
 8005600:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005664 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	d801      	bhi.n	8005612 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800560e:	2307      	movs	r3, #7
 8005610:	e016      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005612:	edd7 7a00 	vldr	s15, [r7]
 8005616:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005668 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800561a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	d801      	bhi.n	8005628 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005624:	2308      	movs	r3, #8
 8005626:	e00b      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005628:	edd7 7a00 	vldr	s15, [r7]
 800562c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800566c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	d801      	bhi.n	800563e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800563a:	2309      	movs	r3, #9
 800563c:	e000      	b.n	8005640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800563e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	42500000 	.word	0x42500000
 8005658:	42d00000 	.word	0x42d00000
 800565c:	43500000 	.word	0x43500000
 8005660:	43d08000 	.word	0x43d08000
 8005664:	44504000 	.word	0x44504000
 8005668:	44d06000 	.word	0x44d06000
 800566c:	45505000 	.word	0x45505000

08005670 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	461a      	mov	r2, r3
 800567c:	460b      	mov	r3, r1
 800567e:	72fb      	strb	r3, [r7, #11]
 8005680:	4613      	mov	r3, r2
 8005682:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	695c      	ldr	r4, [r3, #20]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	7b1b      	ldrb	r3, [r3, #12]
 8005690:	b298      	uxth	r0, r3
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	b299      	uxth	r1, r3
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	47a0      	blx	r4
 800569c:	4603      	mov	r3, r0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}

080056a6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056a6:	b590      	push	{r4, r7, lr}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	461a      	mov	r2, r3
 80056b2:	460b      	mov	r3, r1
 80056b4:	72fb      	strb	r3, [r7, #11]
 80056b6:	4613      	mov	r3, r2
 80056b8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	691c      	ldr	r4, [r3, #16]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	7b1b      	ldrb	r3, [r3, #12]
 80056c6:	b298      	uxth	r0, r3
 80056c8:	7afb      	ldrb	r3, [r7, #11]
 80056ca:	b299      	uxth	r1, r3
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	47a0      	blx	r4
 80056d2:	4603      	mov	r3, r0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd90      	pop	{r4, r7, pc}

080056dc <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	461a      	mov	r2, r3
 80056e8:	460b      	mov	r3, r1
 80056ea:	72fb      	strb	r3, [r7, #11]
 80056ec:	4613      	mov	r3, r2
 80056ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685c      	ldr	r4, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68d8      	ldr	r0, [r3, #12]
 80056f8:	893b      	ldrh	r3, [r7, #8]
 80056fa:	7af9      	ldrb	r1, [r7, #11]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	47a0      	blx	r4
 8005700:	6178      	str	r0, [r7, #20]

  return ret;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	bd90      	pop	{r4, r7, pc}

0800570c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	461a      	mov	r2, r3
 8005718:	460b      	mov	r3, r1
 800571a:	72fb      	strb	r3, [r7, #11]
 800571c:	4613      	mov	r3, r2
 800571e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681c      	ldr	r4, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68d8      	ldr	r0, [r3, #12]
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	7af9      	ldrb	r1, [r7, #11]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	47a0      	blx	r4
 8005730:	6178      	str	r0, [r7, #20]

  return ret;
 8005732:	697b      	ldr	r3, [r7, #20]
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}

0800573c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005748:	f107 0208 	add.w	r2, r7, #8
 800574c:	2301      	movs	r3, #1
 800574e:	2110      	movs	r1, #16
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ffc3 	bl	80056dc <lsm6dso_read_reg>
 8005756:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	b2da      	uxtb	r2, r3
 8005766:	7a3b      	ldrb	r3, [r7, #8]
 8005768:	f362 0383 	bfi	r3, r2, #2, #2
 800576c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800576e:	f107 0208 	add.w	r2, r7, #8
 8005772:	2301      	movs	r3, #1
 8005774:	2110      	movs	r1, #16
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ffc8 	bl	800570c <lsm6dso_write_reg>
 800577c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	2301      	movs	r3, #1
 8005798:	2110      	movs	r1, #16
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ff9e 	bl	80056dc <lsm6dso_read_reg>
 80057a0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80057a2:	7a3b      	ldrb	r3, [r7, #8]
 80057a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d81a      	bhi.n	80057e4 <lsm6dso_xl_full_scale_get+0x5c>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <lsm6dso_xl_full_scale_get+0x2c>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057cd 	.word	0x080057cd
 80057bc:	080057d5 	.word	0x080057d5
 80057c0:	080057dd 	.word	0x080057dd
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
      break;
 80057ca:	e00f      	b.n	80057ec <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	701a      	strb	r2, [r3, #0]
      break;
 80057d2:	e00b      	b.n	80057ec <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
      break;
 80057da:	e007      	b.n	80057ec <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	701a      	strb	r2, [r3, #0]
      break;
 80057e2:	e003      	b.n	80057ec <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
      break;
 80057ea:	bf00      	nop
  }

  return ret;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop

080057f8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fc9d 	bl	800614e <lsm6dso_fsm_enable_get>
 8005814:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 80c4 	bne.w	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800581e:	7b3b      	ldrb	r3, [r7, #12]
 8005820:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005824:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005826:	7b3b      	ldrb	r3, [r7, #12]
 8005828:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800582c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800582e:	4313      	orrs	r3, r2
 8005830:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005832:	7b3b      	ldrb	r3, [r7, #12]
 8005834:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005838:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800583a:	4313      	orrs	r3, r2
 800583c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800583e:	7b3b      	ldrb	r3, [r7, #12]
 8005840:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005844:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005846:	4313      	orrs	r3, r2
 8005848:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800584a:	7b3b      	ldrb	r3, [r7, #12]
 800584c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005850:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005852:	4313      	orrs	r3, r2
 8005854:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005856:	7b3b      	ldrb	r3, [r7, #12]
 8005858:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800585c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800585e:	4313      	orrs	r3, r2
 8005860:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005862:	7b3b      	ldrb	r3, [r7, #12]
 8005864:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005868:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800586a:	4313      	orrs	r3, r2
 800586c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800586e:	7b3b      	ldrb	r3, [r7, #12]
 8005870:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005874:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005876:	4313      	orrs	r3, r2
 8005878:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800587a:	7b7b      	ldrb	r3, [r7, #13]
 800587c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005880:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005882:	4313      	orrs	r3, r2
 8005884:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005886:	7b7b      	ldrb	r3, [r7, #13]
 8005888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800588c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800588e:	4313      	orrs	r3, r2
 8005890:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005892:	7b7b      	ldrb	r3, [r7, #13]
 8005894:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005898:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800589a:	4313      	orrs	r3, r2
 800589c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800589e:	7b7b      	ldrb	r3, [r7, #13]
 80058a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80058aa:	7b7b      	ldrb	r3, [r7, #13]
 80058ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80058b6:	7b7b      	ldrb	r3, [r7, #13]
 80058b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80058be:	4313      	orrs	r3, r2
 80058c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80058c2:	7b7b      	ldrb	r3, [r7, #13]
 80058c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80058ce:	7b7b      	ldrb	r3, [r7, #13]
 80058d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d163      	bne.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80058de:	f107 030b 	add.w	r3, r7, #11
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fc53 	bl	8006190 <lsm6dso_fsm_data_rate_get>
 80058ea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d159      	bne.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d853      	bhi.n	80059a0 <lsm6dso_xl_data_rate_set+0x1a8>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <lsm6dso_xl_data_rate_set+0x108>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	08005923 	.word	0x08005923
 8005908:	08005941 	.word	0x08005941
 800590c:	0800596b 	.word	0x0800596b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800591a:	e044      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	75fb      	strb	r3, [r7, #23]
            break;
 8005920:	e041      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005928:	2302      	movs	r3, #2
 800592a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800592c:	e03b      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d102      	bne.n	800593a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005934:	2302      	movs	r3, #2
 8005936:	75fb      	strb	r3, [r7, #23]
            break;
 8005938:	e035      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	75fb      	strb	r3, [r7, #23]
            break;
 800593e:	e032      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005946:	2303      	movs	r3, #3
 8005948:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800594a:	e02c      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d102      	bne.n	8005958 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005952:	2303      	movs	r3, #3
 8005954:	75fb      	strb	r3, [r7, #23]
            break;
 8005956:	e026      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d102      	bne.n	8005964 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800595e:	2303      	movs	r3, #3
 8005960:	75fb      	strb	r3, [r7, #23]
            break;
 8005962:	e020      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	75fb      	strb	r3, [r7, #23]
            break;
 8005968:	e01d      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005970:	2304      	movs	r3, #4
 8005972:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005974:	e017      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800597c:	2304      	movs	r3, #4
 800597e:	75fb      	strb	r3, [r7, #23]
            break;
 8005980:	e011      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d102      	bne.n	800598e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005988:	2304      	movs	r3, #4
 800598a:	75fb      	strb	r3, [r7, #23]
            break;
 800598c:	e00b      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d102      	bne.n	800599a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005994:	2304      	movs	r3, #4
 8005996:	75fb      	strb	r3, [r7, #23]
            break;
 8005998:	e005      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	75fb      	strb	r3, [r7, #23]
            break;
 800599e:	e002      	b.n	80059a6 <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	75fb      	strb	r3, [r7, #23]
            break;
 80059a4:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80059ac:	f107 0208 	add.w	r2, r7, #8
 80059b0:	2301      	movs	r3, #1
 80059b2:	2110      	movs	r1, #16
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fe91 	bl	80056dc <lsm6dso_read_reg>
 80059ba:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	7a3b      	ldrb	r3, [r7, #8]
 80059cc:	f362 1307 	bfi	r3, r2, #4, #4
 80059d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80059d2:	f107 0208 	add.w	r2, r7, #8
 80059d6:	2301      	movs	r3, #1
 80059d8:	2110      	movs	r1, #16
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fe96 	bl	800570c <lsm6dso_write_reg>
 80059e0:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80059e2:	693b      	ldr	r3, [r7, #16]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80059f6:	f107 0208 	add.w	r2, r7, #8
 80059fa:	2301      	movs	r3, #1
 80059fc:	2110      	movs	r1, #16
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fe6c 	bl	80056dc <lsm6dso_read_reg>
 8005a04:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005a06:	7a3b      	ldrb	r3, [r7, #8]
 8005a08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b0b      	cmp	r3, #11
 8005a10:	d84a      	bhi.n	8005aa8 <lsm6dso_xl_data_rate_get+0xbc>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <lsm6dso_xl_data_rate_get+0x2c>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a49 	.word	0x08005a49
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005a59 	.word	0x08005a59
 8005a24:	08005a61 	.word	0x08005a61
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005aa1 	.word	0x08005aa1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
      break;
 8005a4e:	e02f      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
      break;
 8005a56:	e02b      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	701a      	strb	r2, [r3, #0]
      break;
 8005a5e:	e027      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2203      	movs	r2, #3
 8005a64:	701a      	strb	r2, [r3, #0]
      break;
 8005a66:	e023      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	701a      	strb	r2, [r3, #0]
      break;
 8005a6e:	e01f      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2205      	movs	r2, #5
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	e01b      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2206      	movs	r2, #6
 8005a7c:	701a      	strb	r2, [r3, #0]
      break;
 8005a7e:	e017      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2207      	movs	r2, #7
 8005a84:	701a      	strb	r2, [r3, #0]
      break;
 8005a86:	e013      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	701a      	strb	r2, [r3, #0]
      break;
 8005a8e:	e00f      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2209      	movs	r2, #9
 8005a94:	701a      	strb	r2, [r3, #0]
      break;
 8005a96:	e00b      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	701a      	strb	r2, [r3, #0]
      break;
 8005a9e:	e007      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	220b      	movs	r2, #11
 8005aa4:	701a      	strb	r2, [r3, #0]
      break;
 8005aa6:	e003      	b.n	8005ab0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
      break;
 8005aae:	bf00      	nop
  }

  return ret;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005ac8:	f107 0208 	add.w	r2, r7, #8
 8005acc:	2301      	movs	r3, #1
 8005ace:	2111      	movs	r1, #17
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fe03 	bl	80056dc <lsm6dso_read_reg>
 8005ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10f      	bne.n	8005afe <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	7a3b      	ldrb	r3, [r7, #8]
 8005ae8:	f362 0343 	bfi	r3, r2, #1, #3
 8005aec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005aee:	f107 0208 	add.w	r2, r7, #8
 8005af2:	2301      	movs	r3, #1
 8005af4:	2111      	movs	r1, #17
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe08 	bl	800570c <lsm6dso_write_reg>
 8005afc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005b12:	f107 0208 	add.w	r2, r7, #8
 8005b16:	2301      	movs	r3, #1
 8005b18:	2111      	movs	r1, #17
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fdde 	bl	80056dc <lsm6dso_read_reg>
 8005b20:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005b22:	7a3b      	ldrb	r3, [r7, #8]
 8005b24:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d824      	bhi.n	8005b78 <lsm6dso_gy_full_scale_get+0x70>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <lsm6dso_gy_full_scale_get+0x2c>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	08005b59 	.word	0x08005b59
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b79 	.word	0x08005b79
 8005b4c:	08005b71 	.word	0x08005b71
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
      break;
 8005b56:	e013      	b.n	8005b80 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e00f      	b.n	8005b80 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2202      	movs	r2, #2
 8005b64:	701a      	strb	r2, [r3, #0]
      break;
 8005b66:	e00b      	b.n	8005b80 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e007      	b.n	8005b80 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2206      	movs	r2, #6
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	e003      	b.n	8005b80 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
      break;
 8005b7e:	bf00      	nop
  }

  return ret;
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop

08005b8c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fad3 	bl	800614e <lsm6dso_fsm_enable_get>
 8005ba8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 80c4 	bne.w	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005bb2:	7b3b      	ldrb	r3, [r7, #12]
 8005bb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005bba:	7b3b      	ldrb	r3, [r7, #12]
 8005bbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bc0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005bc6:	7b3b      	ldrb	r3, [r7, #12]
 8005bc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005bd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005bde:	7b3b      	ldrb	r3, [r7, #12]
 8005be0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005be4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005bea:	7b3b      	ldrb	r3, [r7, #12]
 8005bec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005bf6:	7b3b      	ldrb	r3, [r7, #12]
 8005bf8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005c02:	7b3b      	ldrb	r3, [r7, #12]
 8005c04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005c0e:	7b7b      	ldrb	r3, [r7, #13]
 8005c10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005c1a:	7b7b      	ldrb	r3, [r7, #13]
 8005c1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005c26:	7b7b      	ldrb	r3, [r7, #13]
 8005c28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005c3e:	7b7b      	ldrb	r3, [r7, #13]
 8005c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005c4a:	7b7b      	ldrb	r3, [r7, #13]
 8005c4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005c52:	4313      	orrs	r3, r2
 8005c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005c56:	7b7b      	ldrb	r3, [r7, #13]
 8005c58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005c62:	7b7b      	ldrb	r3, [r7, #13]
 8005c64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d163      	bne.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005c72:	f107 030b 	add.w	r3, r7, #11
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa89 	bl	8006190 <lsm6dso_fsm_data_rate_get>
 8005c7e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d159      	bne.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d853      	bhi.n	8005d34 <lsm6dso_gy_data_rate_set+0x1a8>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <lsm6dso_gy_data_rate_set+0x108>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb7 	.word	0x08005cb7
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cff 	.word	0x08005cff
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005cae:	e044      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8005cb4:	e041      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005cc0:	e03b      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	75fb      	strb	r3, [r7, #23]
            break;
 8005ccc:	e035      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8005cd2:	e032      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005cde:	e02c      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	75fb      	strb	r3, [r7, #23]
            break;
 8005cea:	e026      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d102      	bne.n	8005cf8 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	75fb      	strb	r3, [r7, #23]
            break;
 8005cf6:	e020      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8005cfc:	e01d      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d04:	2304      	movs	r3, #4
 8005d06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d08:	e017      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d102      	bne.n	8005d16 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d10:	2304      	movs	r3, #4
 8005d12:	75fb      	strb	r3, [r7, #23]
            break;
 8005d14:	e011      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d102      	bne.n	8005d22 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005d20:	e00b      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d102      	bne.n	8005d2e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d28:	2304      	movs	r3, #4
 8005d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d2c:	e005      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	75fb      	strb	r3, [r7, #23]
            break;
 8005d32:	e002      	b.n	8005d3a <lsm6dso_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	75fb      	strb	r3, [r7, #23]
            break;
 8005d38:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <lsm6dso_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005d40:	f107 0208 	add.w	r2, r7, #8
 8005d44:	2301      	movs	r3, #1
 8005d46:	2111      	movs	r1, #17
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fcc7 	bl	80056dc <lsm6dso_read_reg>
 8005d4e:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10f      	bne.n	8005d76 <lsm6dso_gy_data_rate_set+0x1ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	7a3b      	ldrb	r3, [r7, #8]
 8005d60:	f362 1307 	bfi	r3, r2, #4, #4
 8005d64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005d66:	f107 0208 	add.w	r2, r7, #8
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	2111      	movs	r1, #17
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff fccc 	bl	800570c <lsm6dso_write_reg>
 8005d74:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005d76:	693b      	ldr	r3, [r7, #16]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005d8a:	f107 0208 	add.w	r2, r7, #8
 8005d8e:	2301      	movs	r3, #1
 8005d90:	2111      	movs	r1, #17
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fca2 	bl	80056dc <lsm6dso_read_reg>
 8005d98:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005d9a:	7a3b      	ldrb	r3, [r7, #8]
 8005d9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b0a      	cmp	r3, #10
 8005da4:	d844      	bhi.n	8005e30 <lsm6dso_gy_data_rate_get+0xb0>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <lsm6dso_gy_data_rate_get+0x2c>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dd9 	.word	0x08005dd9
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005df1 	.word	0x08005df1
 8005dbc:	08005df9 	.word	0x08005df9
 8005dc0:	08005e01 	.word	0x08005e01
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e21 	.word	0x08005e21
 8005dd4:	08005e29 	.word	0x08005e29
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
      break;
 8005dde:	e02b      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
      break;
 8005de6:	e027      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2202      	movs	r2, #2
 8005dec:	701a      	strb	r2, [r3, #0]
      break;
 8005dee:	e023      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2203      	movs	r2, #3
 8005df4:	701a      	strb	r2, [r3, #0]
      break;
 8005df6:	e01f      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	701a      	strb	r2, [r3, #0]
      break;
 8005dfe:	e01b      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2205      	movs	r2, #5
 8005e04:	701a      	strb	r2, [r3, #0]
      break;
 8005e06:	e017      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2206      	movs	r2, #6
 8005e0c:	701a      	strb	r2, [r3, #0]
      break;
 8005e0e:	e013      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2207      	movs	r2, #7
 8005e14:	701a      	strb	r2, [r3, #0]
      break;
 8005e16:	e00f      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	701a      	strb	r2, [r3, #0]
      break;
 8005e1e:	e00b      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2209      	movs	r2, #9
 8005e24:	701a      	strb	r2, [r3, #0]
      break;
 8005e26:	e007      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	220a      	movs	r2, #10
 8005e2c:	701a      	strb	r2, [r3, #0]
      break;
 8005e2e:	e003      	b.n	8005e38 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
      break;
 8005e36:	bf00      	nop
  }

  return ret;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop

08005e44 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005e50:	f107 0208 	add.w	r2, r7, #8
 8005e54:	2301      	movs	r3, #1
 8005e56:	2112      	movs	r1, #18
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fc3f 	bl	80056dc <lsm6dso_read_reg>
 8005e5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10f      	bne.n	8005e86 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	7a3b      	ldrb	r3, [r7, #8]
 8005e70:	f362 1386 	bfi	r3, r2, #6, #1
 8005e74:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005e76:	f107 0208 	add.w	r2, r7, #8
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	2112      	movs	r1, #18
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fc44 	bl	800570c <lsm6dso_write_reg>
 8005e84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005e9a:	f107 020c 	add.w	r2, r7, #12
 8005e9e:	2306      	movs	r3, #6
 8005ea0:	2122      	movs	r1, #34	; 0x22
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fc1a 	bl	80056dc <lsm6dso_read_reg>
 8005ea8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005eaa:	7b7b      	ldrb	r3, [r7, #13]
 8005eac:	b21a      	sxth	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	7b3b      	ldrb	r3, [r7, #12]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b21a      	sxth	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ecc:	7bfa      	ldrb	r2, [r7, #15]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	b212      	sxth	r2, r2
 8005ed4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	3302      	adds	r3, #2
 8005eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3302      	adds	r3, #2
 8005ef0:	b212      	sxth	r2, r2
 8005ef2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ef4:	7c7a      	ldrb	r2, [r7, #17]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	b212      	sxth	r2, r2
 8005efc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	7c3b      	ldrb	r3, [r7, #16]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3304      	adds	r3, #4
 8005f18:	b212      	sxth	r2, r2
 8005f1a:	801a      	strh	r2, [r3, #0]

  return ret;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005f30:	f107 020c 	add.w	r2, r7, #12
 8005f34:	2306      	movs	r3, #6
 8005f36:	2128      	movs	r1, #40	; 0x28
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fbcf 	bl	80056dc <lsm6dso_read_reg>
 8005f3e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005f40:	7b7b      	ldrb	r3, [r7, #13]
 8005f42:	b21a      	sxth	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	7b3b      	ldrb	r3, [r7, #12]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	b21a      	sxth	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005f62:	7bfa      	ldrb	r2, [r7, #15]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	3302      	adds	r3, #2
 8005f68:	b212      	sxth	r2, r2
 8005f6a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	3302      	adds	r3, #2
 8005f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	3302      	adds	r3, #2
 8005f86:	b212      	sxth	r2, r2
 8005f88:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005f8a:	7c7a      	ldrb	r2, [r7, #17]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	b212      	sxth	r2, r2
 8005f92:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	3304      	adds	r3, #4
 8005f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	7c3b      	ldrb	r3, [r7, #16]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3304      	adds	r3, #4
 8005fae:	b212      	sxth	r2, r2
 8005fb0:	801a      	strh	r2, [r3, #0]

  return ret;
 8005fb2:	697b      	ldr	r3, [r7, #20]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005fc8:	f107 0208 	add.w	r2, r7, #8
 8005fcc:	2301      	movs	r3, #1
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fb83 	bl	80056dc <lsm6dso_read_reg>
 8005fd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	7a3b      	ldrb	r3, [r7, #8]
 8005fe8:	f362 1387 	bfi	r3, r2, #6, #2
 8005fec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005fee:	f107 0208 	add.w	r2, r7, #8
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fb88 	bl	800570c <lsm6dso_write_reg>
 8005ffc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006012:	2301      	movs	r3, #1
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	210f      	movs	r1, #15
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff fb5f 	bl	80056dc <lsm6dso_read_reg>
 800601e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006020:	68fb      	ldr	r3, [r7, #12]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006036:	f107 0208 	add.w	r2, r7, #8
 800603a:	2301      	movs	r3, #1
 800603c:	2112      	movs	r1, #18
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fb4c 	bl	80056dc <lsm6dso_read_reg>
 8006044:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	7a3b      	ldrb	r3, [r7, #8]
 8006056:	f362 0382 	bfi	r3, r2, #2, #1
 800605a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800605c:	f107 0208 	add.w	r2, r7, #8
 8006060:	2301      	movs	r3, #1
 8006062:	2112      	movs	r1, #18
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fb51 	bl	800570c <lsm6dso_write_reg>
 800606a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800606c:	68fb      	ldr	r3, [r7, #12]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006082:	f107 020c 	add.w	r2, r7, #12
 8006086:	2301      	movs	r3, #1
 8006088:	2118      	movs	r1, #24
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fb26 	bl	80056dc <lsm6dso_read_reg>
 8006090:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d111      	bne.n	80060bc <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	7b3b      	ldrb	r3, [r7, #12]
 80060a6:	f362 0341 	bfi	r3, r2, #1, #1
 80060aa:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80060ac:	f107 020c 	add.w	r2, r7, #12
 80060b0:	2301      	movs	r3, #1
 80060b2:	2118      	movs	r1, #24
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fb29 	bl	800570c <lsm6dso_write_reg>
 80060ba:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80060c2:	f107 0210 	add.w	r2, r7, #16
 80060c6:	2301      	movs	r3, #1
 80060c8:	2162      	movs	r1, #98	; 0x62
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fb06 	bl	80056dc <lsm6dso_read_reg>
 80060d0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10f      	bne.n	80060f8 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	7c3b      	ldrb	r3, [r7, #16]
 80060e2:	f362 03c4 	bfi	r3, r2, #3, #2
 80060e6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80060e8:	f107 0210 	add.w	r2, r7, #16
 80060ec:	2301      	movs	r3, #1
 80060ee:	2162      	movs	r1, #98	; 0x62
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fb0b 	bl	800570c <lsm6dso_write_reg>
 80060f6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800610e:	f107 0208 	add.w	r2, r7, #8
 8006112:	2301      	movs	r3, #1
 8006114:	210a      	movs	r1, #10
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fae0 	bl	80056dc <lsm6dso_read_reg>
 800611c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	b2da      	uxtb	r2, r3
 800612c:	7a3b      	ldrb	r3, [r7, #8]
 800612e:	f362 0302 	bfi	r3, r2, #0, #3
 8006132:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006134:	f107 0208 	add.w	r2, r7, #8
 8006138:	2301      	movs	r3, #1
 800613a:	210a      	movs	r1, #10
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fae5 	bl	800570c <lsm6dso_write_reg>
 8006142:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006158:	2102      	movs	r1, #2
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ff2e 	bl	8005fbc <lsm6dso_mem_bank_set>
 8006160:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006168:	2302      	movs	r3, #2
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	2146      	movs	r1, #70	; 0x46
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fab4 	bl	80056dc <lsm6dso_read_reg>
 8006174:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800617c:	2100      	movs	r1, #0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff1c 	bl	8005fbc <lsm6dso_mem_bank_set>
 8006184:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006186:	68fb      	ldr	r3, [r7, #12]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800619a:	2102      	movs	r1, #2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff0d 	bl	8005fbc <lsm6dso_mem_bank_set>
 80061a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80061aa:	f107 0208 	add.w	r2, r7, #8
 80061ae:	2301      	movs	r3, #1
 80061b0:	215f      	movs	r1, #95	; 0x5f
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fa92 	bl	80056dc <lsm6dso_read_reg>
 80061b8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d12a      	bne.n	8006216 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80061c0:	7a3b      	ldrb	r3, [r7, #8]
 80061c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d81b      	bhi.n	8006204 <lsm6dso_fsm_data_rate_get+0x74>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <lsm6dso_fsm_data_rate_get+0x44>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061ed 	.word	0x080061ed
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	080061fd 	.word	0x080061fd
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
        break;
 80061ea:	e00f      	b.n	800620c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
        break;
 80061f2:	e00b      	b.n	800620c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2202      	movs	r2, #2
 80061f8:	701a      	strb	r2, [r3, #0]
        break;
 80061fa:	e007      	b.n	800620c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2203      	movs	r2, #3
 8006200:	701a      	strb	r2, [r3, #0]
        break;
 8006202:	e003      	b.n	800620c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
        break;
 800620a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fed4 	bl	8005fbc <lsm6dso_mem_bank_set>
 8006214:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	; 0x38
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800622a:	2300      	movs	r3, #0
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800622e:	2301      	movs	r3, #1
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d06e      	beq.n	800631a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b02      	cmp	r3, #2
 8006240:	f200 809d 	bhi.w	800637e <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d032      	beq.n	80062b6 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8006250:	e095      	b.n	800637e <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8006252:	6838      	ldr	r0, [r7, #0]
 8006254:	f000 fa9e 	bl	8006794 <LSM6DSO_0_Probe>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	e0cc      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006264:	4a68      	ldr	r2, [pc, #416]	; (8006408 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4967      	ldr	r1, [pc, #412]	; (800640c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006276:	f107 010c 	add.w	r1, r7, #12
 800627a:	4610      	mov	r0, r2
 800627c:	4798      	blx	r3
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006284:	f06f 0306 	mvn.w	r3, #6
 8006288:	e0b9      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800628a:	7b3b      	ldrb	r3, [r7, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d103      	bne.n	8006298 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006298:	7b7b      	ldrb	r3, [r7, #13]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d103      	bne.n	80062a6 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d16c      	bne.n	8006386 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	f043 0304 	orr.w	r3, r3, #4
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80062b4:	e067      	b.n	8006386 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80062b6:	6838      	ldr	r0, [r7, #0]
 80062b8:	f000 fb2c 	bl	8006914 <LIS2DW12_0_Probe>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	e09a      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80062c8:	4a4f      	ldr	r2, [pc, #316]	; (8006408 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	494e      	ldr	r1, [pc, #312]	; (800640c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80062da:	f107 010c 	add.w	r1, r7, #12
 80062de:	4610      	mov	r0, r2
 80062e0:	4798      	blx	r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80062e8:	f06f 0306 	mvn.w	r3, #6
 80062ec:	e087      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80062ee:	7b3b      	ldrb	r3, [r7, #12]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d103      	bne.n	80062fc <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f043 0302 	orr.w	r3, r3, #2
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80062fc:	7b7b      	ldrb	r3, [r7, #13]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d103      	bne.n	800630a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d13c      	bne.n	800638a <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	f043 0304 	orr.w	r3, r3, #4
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006318:	e037      	b.n	800638a <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800631a:	6838      	ldr	r0, [r7, #0]
 800631c:	f000 fba2 	bl	8006a64 <LIS2MDL_0_Probe>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8006326:	f04f 33ff 	mov.w	r3, #4294967295
 800632a:	e068      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800632c:	4a36      	ldr	r2, [pc, #216]	; (8006408 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4935      	ldr	r1, [pc, #212]	; (800640c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800633e:	f107 010c 	add.w	r1, r7, #12
 8006342:	4610      	mov	r0, r2
 8006344:	4798      	blx	r3
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800634c:	f06f 0306 	mvn.w	r3, #6
 8006350:	e055      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006352:	7b3b      	ldrb	r3, [r7, #12]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d103      	bne.n	8006360 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006360:	7b7b      	ldrb	r3, [r7, #13]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d103      	bne.n	800636e <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10c      	bne.n	800638e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800637c:	e007      	b.n	800638e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800637e:	f06f 0301 	mvn.w	r3, #1
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006384:	e004      	b.n	8006390 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006386:	bf00      	nop
 8006388:	e002      	b.n	8006390 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800638e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	e031      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800639a:	2300      	movs	r3, #0
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639e:	e02a      	b.n	80063f6 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	4013      	ands	r3, r2
 80063a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d11e      	bne.n	80063ea <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	4013      	ands	r3, r2
 80063b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d118      	bne.n	80063ea <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80063b8:	4a15      	ldr	r2, [pc, #84]	; (8006410 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063c0:	4814      	ldr	r0, [pc, #80]	; (8006414 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	440b      	add	r3, r1
 80063cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	490e      	ldr	r1, [pc, #56]	; (800640c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80063da:	4610      	mov	r0, r2
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80063e4:	f06f 0304 	mvn.w	r3, #4
 80063e8:	e009      	b.n	80063fe <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	3301      	adds	r3, #1
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d9d1      	bls.n	80063a0 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3738      	adds	r7, #56	; 0x38
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20016da8 	.word	0x20016da8
 800640c:	20016d78 	.word	0x20016d78
 8006410:	200000c8 	.word	0x200000c8
 8006414:	20016d84 	.word	0x20016d84

08006418 <IKS01A3_MOTION_SENSOR_DeInit>:
  * @brief  Deinitialize Motion sensor
  * @param  Instance Motion sensor instance
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_DeInit(uint32_t Instance)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d903      	bls.n	800642e <IKS01A3_MOTION_SENSOR_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006426:	f06f 0301 	mvn.w	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	e013      	b.n	8006456 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800642e:	4a0c      	ldr	r2, [pc, #48]	; (8006460 <IKS01A3_MOTION_SENSOR_DeInit+0x48>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	490a      	ldr	r1, [pc, #40]	; (8006464 <IKS01A3_MOTION_SENSOR_DeInit+0x4c>)
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <IKS01A3_MOTION_SENSOR_DeInit+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800644a:	f06f 0304 	mvn.w	r3, #4
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e001      	b.n	8006456 <IKS01A3_MOTION_SENSOR_DeInit+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20016da8 	.word	0x20016da8
 8006464:	20016d78 	.word	0x20016d78

08006468 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d903      	bls.n	8006480 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006478:	f06f 0301 	mvn.w	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	e028      	b.n	80064d2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006480:	4a16      	ldr	r2, [pc, #88]	; (80064dc <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4013      	ands	r3, r2
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d11c      	bne.n	80064cc <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800649a:	4812      	ldr	r0, [pc, #72]	; (80064e4 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	4413      	add	r3, r2
 80064a4:	440b      	add	r3, r1
 80064a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	490e      	ldr	r1, [pc, #56]	; (80064e8 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064be:	f06f 0304 	mvn.w	r3, #4
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e005      	b.n	80064d2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e002      	b.n	80064d2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80064cc:	f06f 0301 	mvn.w	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80064d2:	68fb      	ldr	r3, [r7, #12]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20016db4 	.word	0x20016db4
 80064e0:	200000c8 	.word	0x200000c8
 80064e4:	20016d84 	.word	0x20016d84
 80064e8:	20016d78 	.word	0x20016d78

080064ec <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d903      	bls.n	8006504 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80064fc:	f06f 0301 	mvn.w	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e028      	b.n	8006556 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	4013      	ands	r3, r2
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d11c      	bne.n	8006550 <IKS01A3_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800651e:	4812      	ldr	r0, [pc, #72]	; (8006568 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	440b      	add	r3, r1
 800652a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	490e      	ldr	r1, [pc, #56]	; (800656c <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <IKS01A3_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006542:	f06f 0304 	mvn.w	r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e005      	b.n	8006556 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e002      	b.n	8006556 <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006550:	f06f 0301 	mvn.w	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20016db4 	.word	0x20016db4
 8006564:	200000c8 	.word	0x200000c8
 8006568:	20016d84 	.word	0x20016d84
 800656c:	20016d78 	.word	0x20016d78

08006570 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d903      	bls.n	800658a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006582:	f06f 0301 	mvn.w	r3, #1
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e029      	b.n	80065de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4013      	ands	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	d11d      	bne.n	80065d8 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065a4:	4812      	ldr	r0, [pc, #72]	; (80065f0 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4613      	mov	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	440b      	add	r3, r1
 80065b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	490f      	ldr	r1, [pc, #60]	; (80065f4 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065ca:	f06f 0304 	mvn.w	r3, #4
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e005      	b.n	80065de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e002      	b.n	80065de <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80065d8:	f06f 0301 	mvn.w	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20016db4 	.word	0x20016db4
 80065ec:	200000c8 	.word	0x200000c8
 80065f0:	20016d84 	.word	0x20016d84
 80065f4:	20016d78 	.word	0x20016d78

080065f8 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d903      	bls.n	8006612 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e029      	b.n	8006666 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006612:	4a17      	ldr	r2, [pc, #92]	; (8006670 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d11d      	bne.n	8006660 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006624:	4a13      	ldr	r2, [pc, #76]	; (8006674 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800662c:	4812      	ldr	r0, [pc, #72]	; (8006678 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	440b      	add	r3, r1
 8006638:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	490f      	ldr	r1, [pc, #60]	; (800667c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006652:	f06f 0304 	mvn.w	r3, #4
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e005      	b.n	8006666 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e002      	b.n	8006666 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006660:	f06f 0301 	mvn.w	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006666:	697b      	ldr	r3, [r7, #20]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20016db4 	.word	0x20016db4
 8006674:	200000c8 	.word	0x200000c8
 8006678:	20016d84 	.word	0x20016d84
 800667c:	20016d78 	.word	0x20016d78

08006680 <IKS01A3_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d903      	bls.n	800669a <IKS01A3_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006692:	f06f 0301 	mvn.w	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e029      	b.n	80066ee <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <IKS01A3_MOTION_SENSOR_GetFullScale+0x78>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d11d      	bne.n	80066e8 <IKS01A3_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <IKS01A3_MOTION_SENSOR_GetFullScale+0x7c>)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066b4:	4812      	ldr	r0, [pc, #72]	; (8006700 <IKS01A3_MOTION_SENSOR_GetFullScale+0x80>)
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4613      	mov	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4413      	add	r3, r2
 80066be:	440b      	add	r3, r1
 80066c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	490f      	ldr	r1, [pc, #60]	; (8006704 <IKS01A3_MOTION_SENSOR_GetFullScale+0x84>)
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <IKS01A3_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066da:	f06f 0304 	mvn.w	r3, #4
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e005      	b.n	80066ee <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e002      	b.n	80066ee <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80066e8:	f06f 0301 	mvn.w	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20016db4 	.word	0x20016db4
 80066fc:	200000c8 	.word	0x200000c8
 8006700:	20016d84 	.word	0x20016d84
 8006704:	20016d78 	.word	0x20016d78

08006708 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d903      	bls.n	8006724 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800671c:	f06f 0301 	mvn.w	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e02a      	b.n	800677a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006724:	4a17      	ldr	r2, [pc, #92]	; (8006784 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4013      	ands	r3, r2
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	d11e      	bne.n	8006774 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800673e:	4813      	ldr	r0, [pc, #76]	; (800678c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	440b      	add	r3, r1
 800674a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	490f      	ldr	r1, [pc, #60]	; (8006790 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006758:	ed97 0a01 	vldr	s0, [r7, #4]
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006766:	f06f 0304 	mvn.w	r3, #4
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e005      	b.n	800677a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e002      	b.n	800677a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006774:	f06f 0301 	mvn.w	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800677a:	697b      	ldr	r3, [r7, #20]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20016db4 	.word	0x20016db4
 8006788:	200000c8 	.word	0x200000c8
 800678c:	20016d84 	.word	0x20016d84
 8006790:	20016d78 	.word	0x20016d78

08006794 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b094      	sub	sp, #80	; 0x50
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800679c:	2300      	movs	r3, #0
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80067a0:	2300      	movs	r3, #0
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80067a4:	23d7      	movs	r3, #215	; 0xd7
 80067a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80067aa:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <LSM6DSO_0_Probe+0x144>)
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80067ae:	4b4b      	ldr	r3, [pc, #300]	; (80068dc <LSM6DSO_0_Probe+0x148>)
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80067b2:	4b4b      	ldr	r3, [pc, #300]	; (80068e0 <LSM6DSO_0_Probe+0x14c>)
 80067b4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80067b6:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <LSM6DSO_0_Probe+0x150>)
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80067ba:	4b4b      	ldr	r3, [pc, #300]	; (80068e8 <LSM6DSO_0_Probe+0x154>)
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80067be:	4b4b      	ldr	r3, [pc, #300]	; (80068ec <LSM6DSO_0_Probe+0x158>)
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80067c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067c6:	4619      	mov	r1, r3
 80067c8:	4849      	ldr	r0, [pc, #292]	; (80068f0 <LSM6DSO_0_Probe+0x15c>)
 80067ca:	f7fd fd4d 	bl	8004268 <LSM6DSO_RegisterBusIO>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80067d4:	f06f 0306 	mvn.w	r3, #6
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067da:	e077      	b.n	80068cc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80067dc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80067e0:	4619      	mov	r1, r3
 80067e2:	4843      	ldr	r0, [pc, #268]	; (80068f0 <LSM6DSO_0_Probe+0x15c>)
 80067e4:	f7fd fe46 	bl	8004474 <LSM6DSO_ReadID>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80067ee:	f06f 0306 	mvn.w	r3, #6
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f4:	e06a      	b.n	80068cc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80067f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067fa:	2b6c      	cmp	r3, #108	; 0x6c
 80067fc:	d003      	beq.n	8006806 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80067fe:	f06f 0306 	mvn.w	r3, #6
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006804:	e062      	b.n	80068cc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006806:	f107 030c 	add.w	r3, r7, #12
 800680a:	4619      	mov	r1, r3
 800680c:	4838      	ldr	r0, [pc, #224]	; (80068f0 <LSM6DSO_0_Probe+0x15c>)
 800680e:	f7fd fe47 	bl	80044a0 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006812:	7b7b      	ldrb	r3, [r7, #13]
 8006814:	461a      	mov	r2, r3
 8006816:	7b3b      	ldrb	r3, [r7, #12]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	431a      	orrs	r2, r3
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4313      	orrs	r3, r2
 8006822:	4a34      	ldr	r2, [pc, #208]	; (80068f4 <LSM6DSO_0_Probe+0x160>)
 8006824:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006826:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <LSM6DSO_0_Probe+0x164>)
 8006828:	4a31      	ldr	r2, [pc, #196]	; (80068f0 <LSM6DSO_0_Probe+0x15c>)
 800682a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800682c:	4b33      	ldr	r3, [pc, #204]	; (80068fc <LSM6DSO_0_Probe+0x168>)
 800682e:	4a34      	ldr	r2, [pc, #208]	; (8006900 <LSM6DSO_0_Probe+0x16c>)
 8006830:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11d      	bne.n	8006874 <LSM6DSO_0_Probe+0xe0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <LSM6DSO_0_Probe+0xe0>
 8006842:	7b7b      	ldrb	r3, [r7, #13]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d115      	bne.n	8006874 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006848:	4b2e      	ldr	r3, [pc, #184]	; (8006904 <LSM6DSO_0_Probe+0x170>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a2e      	ldr	r2, [pc, #184]	; (8006908 <LSM6DSO_0_Probe+0x174>)
 800684e:	492f      	ldr	r1, [pc, #188]	; (800690c <LSM6DSO_0_Probe+0x178>)
 8006850:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <LSM6DSO_0_Probe+0x168>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <LSM6DSO_0_Probe+0x164>)
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4610      	mov	r0, r2
 8006860:	4798      	blx	r3
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006868:	f06f 0304 	mvn.w	r3, #4
 800686c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686e:	e001      	b.n	8006874 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006870:	2300      	movs	r3, #0
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11d      	bne.n	80068b6 <LSM6DSO_0_Probe+0x122>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d018      	beq.n	80068b6 <LSM6DSO_0_Probe+0x122>
 8006884:	7b3b      	ldrb	r3, [r7, #12]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d115      	bne.n	80068b6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800688a:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <LSM6DSO_0_Probe+0x170>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <LSM6DSO_0_Probe+0x174>)
 8006890:	491f      	ldr	r1, [pc, #124]	; (8006910 <LSM6DSO_0_Probe+0x17c>)
 8006892:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <LSM6DSO_0_Probe+0x168>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <LSM6DSO_0_Probe+0x164>)
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068aa:	f06f 0304 	mvn.w	r3, #4
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	e001      	b.n	80068b6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <LSM6DSO_0_Probe+0x138>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80068c6:	f06f 0304 	mvn.w	r3, #4
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3750      	adds	r7, #80	; 0x50
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	0800199d 	.word	0x0800199d
 80068dc:	08001a01 	.word	0x08001a01
 80068e0:	08001ab5 	.word	0x08001ab5
 80068e4:	08001a51 	.word	0x08001a51
 80068e8:	08001b19 	.word	0x08001b19
 80068ec:	08006c99 	.word	0x08006c99
 80068f0:	20016dc0 	.word	0x20016dc0
 80068f4:	20016db4 	.word	0x20016db4
 80068f8:	20016d78 	.word	0x20016d78
 80068fc:	20016da8 	.word	0x20016da8
 8006900:	20000070 	.word	0x20000070
 8006904:	200000c8 	.word	0x200000c8
 8006908:	20016d84 	.word	0x20016d84
 800690c:	200000a4 	.word	0x200000a4
 8006910:	20000080 	.word	0x20000080

08006914 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b094      	sub	sp, #80	; 0x50
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006920:	2300      	movs	r3, #0
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006924:	2333      	movs	r3, #51	; 0x33
 8006926:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800692a:	4b40      	ldr	r3, [pc, #256]	; (8006a2c <LIS2DW12_0_Probe+0x118>)
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800692e:	4b40      	ldr	r3, [pc, #256]	; (8006a30 <LIS2DW12_0_Probe+0x11c>)
 8006930:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006932:	4b40      	ldr	r3, [pc, #256]	; (8006a34 <LIS2DW12_0_Probe+0x120>)
 8006934:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006936:	4b40      	ldr	r3, [pc, #256]	; (8006a38 <LIS2DW12_0_Probe+0x124>)
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800693a:	4b40      	ldr	r3, [pc, #256]	; (8006a3c <LIS2DW12_0_Probe+0x128>)
 800693c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800693e:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <LIS2DW12_0_Probe+0x12c>)
 8006940:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006946:	4619      	mov	r1, r3
 8006948:	483e      	ldr	r0, [pc, #248]	; (8006a44 <LIS2DW12_0_Probe+0x130>)
 800694a:	f7fb f9f9 	bl	8001d40 <LIS2DW12_RegisterBusIO>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006954:	f06f 0306 	mvn.w	r3, #6
 8006958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695a:	e062      	b.n	8006a22 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800695c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006960:	4619      	mov	r1, r3
 8006962:	4838      	ldr	r0, [pc, #224]	; (8006a44 <LIS2DW12_0_Probe+0x130>)
 8006964:	f7fb fada 	bl	8001f1c <LIS2DW12_ReadID>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800696e:	f06f 0306 	mvn.w	r3, #6
 8006972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006974:	e055      	b.n	8006a22 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8006976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800697a:	2b44      	cmp	r3, #68	; 0x44
 800697c:	d003      	beq.n	8006986 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800697e:	f06f 0306 	mvn.w	r3, #6
 8006982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006984:	e04d      	b.n	8006a22 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006986:	f107 030c 	add.w	r3, r7, #12
 800698a:	4619      	mov	r1, r3
 800698c:	482d      	ldr	r0, [pc, #180]	; (8006a44 <LIS2DW12_0_Probe+0x130>)
 800698e:	f7fb fadb 	bl	8001f48 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	461a      	mov	r2, r3
 8006996:	7b3b      	ldrb	r3, [r7, #12]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	431a      	orrs	r2, r3
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4313      	orrs	r3, r2
 80069a2:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <LIS2DW12_0_Probe+0x134>)
 80069a4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80069a6:	4b29      	ldr	r3, [pc, #164]	; (8006a4c <LIS2DW12_0_Probe+0x138>)
 80069a8:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <LIS2DW12_0_Probe+0x130>)
 80069aa:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80069ac:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <LIS2DW12_0_Probe+0x13c>)
 80069ae:	4a29      	ldr	r2, [pc, #164]	; (8006a54 <LIS2DW12_0_Probe+0x140>)
 80069b0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d11e      	bne.n	80069f6 <LIS2DW12_0_Probe+0xe2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d019      	beq.n	80069f6 <LIS2DW12_0_Probe+0xe2>
 80069c2:	7b3b      	ldrb	r3, [r7, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d116      	bne.n	80069f6 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <LIS2DW12_0_Probe+0x144>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a23      	ldr	r2, [pc, #140]	; (8006a5c <LIS2DW12_0_Probe+0x148>)
 80069ce:	3303      	adds	r3, #3
 80069d0:	4923      	ldr	r1, [pc, #140]	; (8006a60 <LIS2DW12_0_Probe+0x14c>)
 80069d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80069d6:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <LIS2DW12_0_Probe+0x13c>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <LIS2DW12_0_Probe+0x138>)
 80069de:	6852      	ldr	r2, [r2, #4]
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ea:	f06f 0304 	mvn.w	r3, #4
 80069ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f0:	e001      	b.n	80069f6 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069f2:	2300      	movs	r3, #0
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80069f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d107      	bne.n	8006a0c <LIS2DW12_0_Probe+0xf8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a06:	f06f 0304 	mvn.w	r3, #4
 8006a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <LIS2DW12_0_Probe+0x10e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a1c:	f06f 0304 	mvn.w	r3, #4
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3750      	adds	r7, #80	; 0x50
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	0800199d 	.word	0x0800199d
 8006a30:	08001a01 	.word	0x08001a01
 8006a34:	08001ab5 	.word	0x08001ab5
 8006a38:	08001a51 	.word	0x08001a51
 8006a3c:	08001b19 	.word	0x08001b19
 8006a40:	08006c99 	.word	0x08006c99
 8006a44:	20016df8 	.word	0x20016df8
 8006a48:	20016db4 	.word	0x20016db4
 8006a4c:	20016d78 	.word	0x20016d78
 8006a50:	20016da8 	.word	0x20016da8
 8006a54:	20000008 	.word	0x20000008
 8006a58:	200000c8 	.word	0x200000c8
 8006a5c:	20016d84 	.word	0x20016d84
 8006a60:	20000018 	.word	0x20000018

08006a64 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b094      	sub	sp, #80	; 0x50
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006a70:	2300      	movs	r3, #0
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006a74:	233d      	movs	r3, #61	; 0x3d
 8006a76:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006a7a:	4b40      	ldr	r3, [pc, #256]	; (8006b7c <LIS2MDL_0_Probe+0x118>)
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006a7e:	4b40      	ldr	r3, [pc, #256]	; (8006b80 <LIS2MDL_0_Probe+0x11c>)
 8006a80:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <LIS2MDL_0_Probe+0x120>)
 8006a84:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006a86:	4b40      	ldr	r3, [pc, #256]	; (8006b88 <LIS2MDL_0_Probe+0x124>)
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006a8a:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <LIS2MDL_0_Probe+0x128>)
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006a8e:	4b40      	ldr	r3, [pc, #256]	; (8006b90 <LIS2MDL_0_Probe+0x12c>)
 8006a90:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a96:	4619      	mov	r1, r3
 8006a98:	483e      	ldr	r0, [pc, #248]	; (8006b94 <LIS2MDL_0_Probe+0x130>)
 8006a9a:	f7fc fbdf 	bl	800325c <LIS2MDL_RegisterBusIO>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006aa4:	f06f 0306 	mvn.w	r3, #6
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aaa:	e062      	b.n	8006b72 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006aac:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4838      	ldr	r0, [pc, #224]	; (8006b94 <LIS2MDL_0_Probe+0x130>)
 8006ab4:	f7fc fcee 	bl	8003494 <LIS2MDL_ReadID>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006abe:	f06f 0306 	mvn.w	r3, #6
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac4:	e055      	b.n	8006b72 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8006ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d003      	beq.n	8006ad6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ace:	f06f 0306 	mvn.w	r3, #6
 8006ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad4:	e04d      	b.n	8006b72 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006ad6:	f107 030c 	add.w	r3, r7, #12
 8006ada:	4619      	mov	r1, r3
 8006adc:	482d      	ldr	r0, [pc, #180]	; (8006b94 <LIS2MDL_0_Probe+0x130>)
 8006ade:	f7fc fcff 	bl	80034e0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	7b3b      	ldrb	r3, [r7, #12]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	431a      	orrs	r2, r3
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4313      	orrs	r3, r2
 8006af2:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <LIS2MDL_0_Probe+0x134>)
 8006af4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006af6:	4b29      	ldr	r3, [pc, #164]	; (8006b9c <LIS2MDL_0_Probe+0x138>)
 8006af8:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <LIS2MDL_0_Probe+0x130>)
 8006afa:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006afc:	4b28      	ldr	r3, [pc, #160]	; (8006ba0 <LIS2MDL_0_Probe+0x13c>)
 8006afe:	4a29      	ldr	r2, [pc, #164]	; (8006ba4 <LIS2MDL_0_Probe+0x140>)
 8006b00:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11e      	bne.n	8006b46 <LIS2MDL_0_Probe+0xe2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d019      	beq.n	8006b46 <LIS2MDL_0_Probe+0xe2>
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d116      	bne.n	8006b46 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b18:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <LIS2MDL_0_Probe+0x144>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4a23      	ldr	r2, [pc, #140]	; (8006bac <LIS2MDL_0_Probe+0x148>)
 8006b1e:	3306      	adds	r3, #6
 8006b20:	4923      	ldr	r1, [pc, #140]	; (8006bb0 <LIS2MDL_0_Probe+0x14c>)
 8006b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <LIS2MDL_0_Probe+0x13c>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <LIS2MDL_0_Probe+0x138>)
 8006b2e:	6892      	ldr	r2, [r2, #8]
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b3a:	f06f 0304 	mvn.w	r3, #4
 8006b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b40:	e001      	b.n	8006b46 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <LIS2MDL_0_Probe+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b56:	f06f 0304 	mvn.w	r3, #4
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <LIS2MDL_0_Probe+0x10e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b6c:	f06f 0304 	mvn.w	r3, #4
 8006b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3750      	adds	r7, #80	; 0x50
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800199d 	.word	0x0800199d
 8006b80:	08001a01 	.word	0x08001a01
 8006b84:	08001ab5 	.word	0x08001ab5
 8006b88:	08001a51 	.word	0x08001a51
 8006b8c:	08001b19 	.word	0x08001b19
 8006b90:	08006c99 	.word	0x08006c99
 8006b94:	20016e34 	.word	0x20016e34
 8006b98:	20016db4 	.word	0x20016db4
 8006b9c:	20016d78 	.word	0x20016d78
 8006ba0:	20016da8 	.word	0x20016da8
 8006ba4:	2000003c 	.word	0x2000003c
 8006ba8:	200000c8 	.word	0x200000c8
 8006bac:	20016d84 	.word	0x20016d84
 8006bb0:	2000004c 	.word	0x2000004c

08006bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <HAL_Init+0x40>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <HAL_Init+0x40>)
 8006bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_Init+0x40>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <HAL_Init+0x40>)
 8006bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <HAL_Init+0x40>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a07      	ldr	r2, [pc, #28]	; (8006bf4 <HAL_Init+0x40>)
 8006bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bdc:	2003      	movs	r0, #3
 8006bde:	f000 f94f 	bl	8006e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006be2:	2000      	movs	r0, #0
 8006be4:	f000 f808 	bl	8006bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006be8:	f7fa fd5e 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40023c00 	.word	0x40023c00

08006bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <HAL_InitTick+0x54>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <HAL_InitTick+0x58>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f967 	bl	8006eea <HAL_SYSTICK_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e00e      	b.n	8006c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	d80a      	bhi.n	8006c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	f000 f92f 	bl	8006e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c38:	4a06      	ldr	r2, [pc, #24]	; (8006c54 <HAL_InitTick+0x5c>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000004 	.word	0x20000004
 8006c50:	200000e0 	.word	0x200000e0
 8006c54:	200000dc 	.word	0x200000dc

08006c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_IncTick+0x20>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <HAL_IncTick+0x24>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4413      	add	r3, r2
 8006c68:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <HAL_IncTick+0x24>)
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	200000e0 	.word	0x200000e0
 8006c7c:	20016e68 	.word	0x20016e68

08006c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return uwTick;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_GetTick+0x14>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20016e68 	.word	0x20016e68

08006c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ca0:	f7ff ffee 	bl	8006c80 <HAL_GetTick>
 8006ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d005      	beq.n	8006cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_Delay+0x44>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cbe:	bf00      	nop
 8006cc0:	f7ff ffde 	bl	8006c80 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d8f7      	bhi.n	8006cc0 <HAL_Delay+0x28>
  {
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200000e0 	.word	0x200000e0

08006ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <__NVIC_SetPriorityGrouping+0x44>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d12:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <__NVIC_SetPriorityGrouping+0x44>)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	60d3      	str	r3, [r2, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	e000ed00 	.word	0xe000ed00

08006d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <__NVIC_GetPriorityGrouping+0x18>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	f003 0307 	and.w	r3, r3, #7
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	e000ed00 	.word	0xe000ed00

08006d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	db0b      	blt.n	8006d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	f003 021f 	and.w	r2, r3, #31
 8006d5c:	4907      	ldr	r1, [pc, #28]	; (8006d7c <__NVIC_EnableIRQ+0x38>)
 8006d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2001      	movs	r0, #1
 8006d66:	fa00 f202 	lsl.w	r2, r0, r2
 8006d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	e000e100 	.word	0xe000e100

08006d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	6039      	str	r1, [r7, #0]
 8006d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	db0a      	blt.n	8006daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	490c      	ldr	r1, [pc, #48]	; (8006dcc <__NVIC_SetPriority+0x4c>)
 8006d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9e:	0112      	lsls	r2, r2, #4
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	440b      	add	r3, r1
 8006da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006da8:	e00a      	b.n	8006dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4908      	ldr	r1, [pc, #32]	; (8006dd0 <__NVIC_SetPriority+0x50>)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	3b04      	subs	r3, #4
 8006db8:	0112      	lsls	r2, r2, #4
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	761a      	strb	r2, [r3, #24]
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	e000e100 	.word	0xe000e100
 8006dd0:	e000ed00 	.word	0xe000ed00

08006dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f1c3 0307 	rsb	r3, r3, #7
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	bf28      	it	cs
 8006df2:	2304      	movcs	r3, #4
 8006df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2b06      	cmp	r3, #6
 8006dfc:	d902      	bls.n	8006e04 <NVIC_EncodePriority+0x30>
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	3b03      	subs	r3, #3
 8006e02:	e000      	b.n	8006e06 <NVIC_EncodePriority+0x32>
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	43da      	mvns	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	401a      	ands	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	43d9      	mvns	r1, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e2c:	4313      	orrs	r3, r2
         );
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3724      	adds	r7, #36	; 0x24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e4c:	d301      	bcc.n	8006e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e00f      	b.n	8006e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e52:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <SysTick_Config+0x40>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e5a:	210f      	movs	r1, #15
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	f7ff ff8e 	bl	8006d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <SysTick_Config+0x40>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e6a:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <SysTick_Config+0x40>)
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	e000e010 	.word	0xe000e010

08006e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff29 	bl	8006ce0 <__NVIC_SetPriorityGrouping>
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	607a      	str	r2, [r7, #4]
 8006ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ea8:	f7ff ff3e 	bl	8006d28 <__NVIC_GetPriorityGrouping>
 8006eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	6978      	ldr	r0, [r7, #20]
 8006eb4:	f7ff ff8e 	bl	8006dd4 <NVIC_EncodePriority>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff5d 	bl	8006d80 <__NVIC_SetPriority>
}
 8006ec6:	bf00      	nop
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff ff31 	bl	8006d44 <__NVIC_EnableIRQ>
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ffa2 	bl	8006e3c <SysTick_Config>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b089      	sub	sp, #36	; 0x24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	e159      	b.n	80071d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f20:	2201      	movs	r2, #1
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4013      	ands	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	f040 8148 	bne.w	80071ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d005      	beq.n	8006f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d130      	bne.n	8006fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	2203      	movs	r2, #3
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43db      	mvns	r3, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 0201 	and.w	r2, r3, #1
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d017      	beq.n	8006ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	2203      	movs	r2, #3
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d123      	bne.n	8007048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	08da      	lsrs	r2, r3, #3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3208      	adds	r2, #8
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	220f      	movs	r2, #15
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4013      	ands	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4313      	orrs	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	08da      	lsrs	r2, r3, #3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3208      	adds	r2, #8
 8007042:	69b9      	ldr	r1, [r7, #24]
 8007044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	2203      	movs	r2, #3
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	43db      	mvns	r3, r3
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	4013      	ands	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0203 	and.w	r2, r3, #3
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	fa02 f303 	lsl.w	r3, r2, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4313      	orrs	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80a2 	beq.w	80071ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	4b57      	ldr	r3, [pc, #348]	; (80071ec <HAL_GPIO_Init+0x2e8>)
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	4a56      	ldr	r2, [pc, #344]	; (80071ec <HAL_GPIO_Init+0x2e8>)
 8007094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007098:	6453      	str	r3, [r2, #68]	; 0x44
 800709a:	4b54      	ldr	r3, [pc, #336]	; (80071ec <HAL_GPIO_Init+0x2e8>)
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070a6:	4a52      	ldr	r2, [pc, #328]	; (80071f0 <HAL_GPIO_Init+0x2ec>)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	3302      	adds	r3, #2
 80070ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	220f      	movs	r2, #15
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	43db      	mvns	r3, r3
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4013      	ands	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a49      	ldr	r2, [pc, #292]	; (80071f4 <HAL_GPIO_Init+0x2f0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d019      	beq.n	8007106 <HAL_GPIO_Init+0x202>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a48      	ldr	r2, [pc, #288]	; (80071f8 <HAL_GPIO_Init+0x2f4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_GPIO_Init+0x1fe>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a47      	ldr	r2, [pc, #284]	; (80071fc <HAL_GPIO_Init+0x2f8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00d      	beq.n	80070fe <HAL_GPIO_Init+0x1fa>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a46      	ldr	r2, [pc, #280]	; (8007200 <HAL_GPIO_Init+0x2fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <HAL_GPIO_Init+0x1f6>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a45      	ldr	r2, [pc, #276]	; (8007204 <HAL_GPIO_Init+0x300>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_GPIO_Init+0x1f2>
 80070f2:	2304      	movs	r3, #4
 80070f4:	e008      	b.n	8007108 <HAL_GPIO_Init+0x204>
 80070f6:	2307      	movs	r3, #7
 80070f8:	e006      	b.n	8007108 <HAL_GPIO_Init+0x204>
 80070fa:	2303      	movs	r3, #3
 80070fc:	e004      	b.n	8007108 <HAL_GPIO_Init+0x204>
 80070fe:	2302      	movs	r3, #2
 8007100:	e002      	b.n	8007108 <HAL_GPIO_Init+0x204>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <HAL_GPIO_Init+0x204>
 8007106:	2300      	movs	r3, #0
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	f002 0203 	and.w	r2, r2, #3
 800710e:	0092      	lsls	r2, r2, #2
 8007110:	4093      	lsls	r3, r2
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4313      	orrs	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007118:	4935      	ldr	r1, [pc, #212]	; (80071f0 <HAL_GPIO_Init+0x2ec>)
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	089b      	lsrs	r3, r3, #2
 800711e:	3302      	adds	r3, #2
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007126:	4b38      	ldr	r3, [pc, #224]	; (8007208 <HAL_GPIO_Init+0x304>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	43db      	mvns	r3, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4013      	ands	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800714a:	4a2f      	ldr	r2, [pc, #188]	; (8007208 <HAL_GPIO_Init+0x304>)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007150:	4b2d      	ldr	r3, [pc, #180]	; (8007208 <HAL_GPIO_Init+0x304>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	43db      	mvns	r3, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4013      	ands	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007174:	4a24      	ldr	r2, [pc, #144]	; (8007208 <HAL_GPIO_Init+0x304>)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800717a:	4b23      	ldr	r3, [pc, #140]	; (8007208 <HAL_GPIO_Init+0x304>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	43db      	mvns	r3, r3
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4013      	ands	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800719e:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <HAL_GPIO_Init+0x304>)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071a4:	4b18      	ldr	r3, [pc, #96]	; (8007208 <HAL_GPIO_Init+0x304>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4013      	ands	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071c8:	4a0f      	ldr	r2, [pc, #60]	; (8007208 <HAL_GPIO_Init+0x304>)
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	f67f aea2 	bls.w	8006f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	3724      	adds	r7, #36	; 0x24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800
 80071f0:	40013800 	.word	0x40013800
 80071f4:	40020000 	.word	0x40020000
 80071f8:	40020400 	.word	0x40020400
 80071fc:	40020800 	.word	0x40020800
 8007200:	40020c00 	.word	0x40020c00
 8007204:	40021000 	.word	0x40021000
 8007208:	40013c00 	.word	0x40013c00

0800720c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e0bb      	b.n	80073a0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007228:	2201      	movs	r2, #1
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4013      	ands	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	f040 80ab 	bne.w	800739a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007244:	4a5c      	ldr	r2, [pc, #368]	; (80073b8 <HAL_GPIO_DeInit+0x1ac>)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	089b      	lsrs	r3, r3, #2
 800724a:	3302      	adds	r3, #2
 800724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007250:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	220f      	movs	r2, #15
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a54      	ldr	r2, [pc, #336]	; (80073bc <HAL_GPIO_DeInit+0x1b0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d019      	beq.n	80072a2 <HAL_GPIO_DeInit+0x96>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a53      	ldr	r2, [pc, #332]	; (80073c0 <HAL_GPIO_DeInit+0x1b4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_GPIO_DeInit+0x92>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a52      	ldr	r2, [pc, #328]	; (80073c4 <HAL_GPIO_DeInit+0x1b8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00d      	beq.n	800729a <HAL_GPIO_DeInit+0x8e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a51      	ldr	r2, [pc, #324]	; (80073c8 <HAL_GPIO_DeInit+0x1bc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d007      	beq.n	8007296 <HAL_GPIO_DeInit+0x8a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a50      	ldr	r2, [pc, #320]	; (80073cc <HAL_GPIO_DeInit+0x1c0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d101      	bne.n	8007292 <HAL_GPIO_DeInit+0x86>
 800728e:	2304      	movs	r3, #4
 8007290:	e008      	b.n	80072a4 <HAL_GPIO_DeInit+0x98>
 8007292:	2307      	movs	r3, #7
 8007294:	e006      	b.n	80072a4 <HAL_GPIO_DeInit+0x98>
 8007296:	2303      	movs	r3, #3
 8007298:	e004      	b.n	80072a4 <HAL_GPIO_DeInit+0x98>
 800729a:	2302      	movs	r3, #2
 800729c:	e002      	b.n	80072a4 <HAL_GPIO_DeInit+0x98>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <HAL_GPIO_DeInit+0x98>
 80072a2:	2300      	movs	r3, #0
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	f002 0203 	and.w	r2, r2, #3
 80072aa:	0092      	lsls	r2, r2, #2
 80072ac:	4093      	lsls	r3, r2
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d132      	bne.n	800731a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80072b4:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	43db      	mvns	r3, r3
 80072bc:	4944      	ldr	r1, [pc, #272]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072be:	4013      	ands	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	43db      	mvns	r3, r3
 80072ca:	4941      	ldr	r1, [pc, #260]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	493d      	ldr	r1, [pc, #244]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072da:	4013      	ands	r3, r2
 80072dc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80072de:	4b3c      	ldr	r3, [pc, #240]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	493a      	ldr	r1, [pc, #232]	; (80073d0 <HAL_GPIO_DeInit+0x1c4>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	220f      	movs	r2, #15
 80072f6:	fa02 f303 	lsl.w	r3, r2, r3
 80072fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80072fc:	4a2e      	ldr	r2, [pc, #184]	; (80073b8 <HAL_GPIO_DeInit+0x1ac>)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	3302      	adds	r3, #2
 8007304:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	43da      	mvns	r2, r3
 800730c:	482a      	ldr	r0, [pc, #168]	; (80073b8 <HAL_GPIO_DeInit+0x1ac>)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	089b      	lsrs	r3, r3, #2
 8007312:	400a      	ands	r2, r1
 8007314:	3302      	adds	r3, #2
 8007316:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	2103      	movs	r1, #3
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	08da      	lsrs	r2, r3, #3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3208      	adds	r2, #8
 8007338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	220f      	movs	r2, #15
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	43db      	mvns	r3, r3
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	08d2      	lsrs	r2, r2, #3
 8007350:	4019      	ands	r1, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3208      	adds	r2, #8
 8007356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	2103      	movs	r1, #3
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	43db      	mvns	r3, r3
 800736a:	401a      	ands	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	2101      	movs	r1, #1
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	fa01 f303 	lsl.w	r3, r1, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	401a      	ands	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	2103      	movs	r1, #3
 800738e:	fa01 f303 	lsl.w	r3, r1, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	401a      	ands	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	3301      	adds	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	f67f af40 	bls.w	8007228 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40013800 	.word	0x40013800
 80073bc:	40020000 	.word	0x40020000
 80073c0:	40020400 	.word	0x40020400
 80073c4:	40020800 	.word	0x40020800
 80073c8:	40020c00 	.word	0x40020c00
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40013c00 	.word	0x40013c00

080073d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
 80073e0:	4613      	mov	r3, r2
 80073e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073e4:	787b      	ldrb	r3, [r7, #1]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ea:	887a      	ldrh	r2, [r7, #2]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073f0:	e003      	b.n	80073fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073f2:	887b      	ldrh	r3, [r7, #2]
 80073f4:	041a      	lsls	r2, r3, #16
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	619a      	str	r2, [r3, #24]
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007414:	695a      	ldr	r2, [r3, #20]
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	4013      	ands	r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800741e:	4a05      	ldr	r2, [pc, #20]	; (8007434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f806 	bl	8007438 <HAL_GPIO_EXTI_Callback>
  }
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40013c00 	.word	0x40013c00

08007438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
	...

08007450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e12b      	b.n	80076ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f95d 	bl	8007736 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074b4:	f001 fcac 	bl	8008e10 <HAL_RCC_GetPCLK1Freq>
 80074b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4a81      	ldr	r2, [pc, #516]	; (80076c4 <HAL_I2C_Init+0x274>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d807      	bhi.n	80074d4 <HAL_I2C_Init+0x84>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a80      	ldr	r2, [pc, #512]	; (80076c8 <HAL_I2C_Init+0x278>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf94      	ite	ls
 80074cc:	2301      	movls	r3, #1
 80074ce:	2300      	movhi	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e006      	b.n	80074e2 <HAL_I2C_Init+0x92>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a7d      	ldr	r2, [pc, #500]	; (80076cc <HAL_I2C_Init+0x27c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	bf94      	ite	ls
 80074dc:	2301      	movls	r3, #1
 80074de:	2300      	movhi	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e0e7      	b.n	80076ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a78      	ldr	r2, [pc, #480]	; (80076d0 <HAL_I2C_Init+0x280>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	0c9b      	lsrs	r3, r3, #18
 80074f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4a6a      	ldr	r2, [pc, #424]	; (80076c4 <HAL_I2C_Init+0x274>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d802      	bhi.n	8007524 <HAL_I2C_Init+0xd4>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3301      	adds	r3, #1
 8007522:	e009      	b.n	8007538 <HAL_I2C_Init+0xe8>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	4a69      	ldr	r2, [pc, #420]	; (80076d4 <HAL_I2C_Init+0x284>)
 8007530:	fba2 2303 	umull	r2, r3, r2, r3
 8007534:	099b      	lsrs	r3, r3, #6
 8007536:	3301      	adds	r3, #1
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	430b      	orrs	r3, r1
 800753e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800754a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	495c      	ldr	r1, [pc, #368]	; (80076c4 <HAL_I2C_Init+0x274>)
 8007554:	428b      	cmp	r3, r1
 8007556:	d819      	bhi.n	800758c <HAL_I2C_Init+0x13c>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1e59      	subs	r1, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	fbb1 f3f3 	udiv	r3, r1, r3
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	f640 73fc 	movw	r3, #4092	; 0xffc
 800756c:	400b      	ands	r3, r1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <HAL_I2C_Init+0x138>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1e59      	subs	r1, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007580:	3301      	adds	r3, #1
 8007582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007586:	e051      	b.n	800762c <HAL_I2C_Init+0x1dc>
 8007588:	2304      	movs	r3, #4
 800758a:	e04f      	b.n	800762c <HAL_I2C_Init+0x1dc>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d111      	bne.n	80075b8 <HAL_I2C_Init+0x168>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	1e58      	subs	r0, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6859      	ldr	r1, [r3, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	440b      	add	r3, r1
 80075a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a6:	3301      	adds	r3, #1
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e012      	b.n	80075de <HAL_I2C_Init+0x18e>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	1e58      	subs	r0, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6859      	ldr	r1, [r3, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	0099      	lsls	r1, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ce:	3301      	adds	r3, #1
 80075d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <HAL_I2C_Init+0x196>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e022      	b.n	800762c <HAL_I2C_Init+0x1dc>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10e      	bne.n	800760c <HAL_I2C_Init+0x1bc>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1e58      	subs	r0, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6859      	ldr	r1, [r3, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	440b      	add	r3, r1
 80075fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007600:	3301      	adds	r3, #1
 8007602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	e00f      	b.n	800762c <HAL_I2C_Init+0x1dc>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	1e58      	subs	r0, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	0099      	lsls	r1, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007622:	3301      	adds	r3, #1
 8007624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	6809      	ldr	r1, [r1, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800765a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6911      	ldr	r1, [r2, #16]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68d2      	ldr	r2, [r2, #12]
 8007666:	4311      	orrs	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	430b      	orrs	r3, r1
 800766e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	000186a0 	.word	0x000186a0
 80076c8:	001e847f 	.word	0x001e847f
 80076cc:	003d08ff 	.word	0x003d08ff
 80076d0:	431bde83 	.word	0x431bde83
 80076d4:	10624dd3 	.word	0x10624dd3

080076d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e021      	b.n	800772e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2224      	movs	r2, #36	; 0x24
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f821 	bl	800774a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	817b      	strh	r3, [r7, #10]
 8007772:	460b      	mov	r3, r1
 8007774:	813b      	strh	r3, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800777a:	f7ff fa81 	bl	8006c80 <HAL_GetTick>
 800777e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b20      	cmp	r3, #32
 800778a:	f040 80d9 	bne.w	8007940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	2319      	movs	r3, #25
 8007794:	2201      	movs	r2, #1
 8007796:	496d      	ldr	r1, [pc, #436]	; (800794c <HAL_I2C_Mem_Write+0x1ec>)
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fc99 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
 80077a6:	e0cc      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_I2C_Mem_Write+0x56>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0c5      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d007      	beq.n	80077dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2221      	movs	r2, #33	; 0x21
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2240      	movs	r2, #64	; 0x40
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800780c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a4d      	ldr	r2, [pc, #308]	; (8007950 <HAL_I2C_Mem_Write+0x1f0>)
 800781c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800781e:	88f8      	ldrh	r0, [r7, #6]
 8007820:	893a      	ldrh	r2, [r7, #8]
 8007822:	8979      	ldrh	r1, [r7, #10]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4603      	mov	r3, r0
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fad0 	bl	8007dd4 <I2C_RequestMemoryWrite>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d052      	beq.n	80078e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e081      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fd1a 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	2b04      	cmp	r3, #4
 8007854:	d107      	bne.n	8007866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e06b      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d11b      	bne.n	80078e0 <HAL_I2C_Mem_Write+0x180>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d017      	beq.n	80078e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1aa      	bne.n	800783e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fd06 	bl	80082fe <I2C_WaitOnBTFFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d107      	bne.n	8007910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800790e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e016      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	00100002 	.word	0x00100002
 8007950:	ffff0000 	.word	0xffff0000

08007954 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08c      	sub	sp, #48	; 0x30
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	4608      	mov	r0, r1
 800795e:	4611      	mov	r1, r2
 8007960:	461a      	mov	r2, r3
 8007962:	4603      	mov	r3, r0
 8007964:	817b      	strh	r3, [r7, #10]
 8007966:	460b      	mov	r3, r1
 8007968:	813b      	strh	r3, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800796e:	f7ff f987 	bl	8006c80 <HAL_GetTick>
 8007972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b20      	cmp	r3, #32
 800797e:	f040 8208 	bne.w	8007d92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2319      	movs	r3, #25
 8007988:	2201      	movs	r2, #1
 800798a:	497b      	ldr	r1, [pc, #492]	; (8007b78 <HAL_I2C_Mem_Read+0x224>)
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fb9f 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007998:	2302      	movs	r3, #2
 800799a:	e1fb      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_I2C_Mem_Read+0x56>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e1f4      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d007      	beq.n	80079d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2222      	movs	r2, #34	; 0x22
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2240      	movs	r2, #64	; 0x40
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4a5b      	ldr	r2, [pc, #364]	; (8007b7c <HAL_I2C_Mem_Read+0x228>)
 8007a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a12:	88f8      	ldrh	r0, [r7, #6]
 8007a14:	893a      	ldrh	r2, [r7, #8]
 8007a16:	8979      	ldrh	r1, [r7, #10]
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	4603      	mov	r3, r0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa6c 	bl	8007f00 <I2C_RequestMemoryRead>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e1b0      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	e184      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d11b      	bne.n	8007aa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e164      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d11b      	bne.n	8007ae2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aca:	2300      	movs	r3, #0
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	e144      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007af8:	e138      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	f200 80f1 	bhi.w	8007ce6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d123      	bne.n	8007b54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 fc35 	bl	8008380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e139      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b52:	e10b      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d14e      	bne.n	8007bfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2200      	movs	r2, #0
 8007b64:	4906      	ldr	r1, [pc, #24]	; (8007b80 <HAL_I2C_Mem_Read+0x22c>)
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fab2 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d008      	beq.n	8007b84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e10e      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
 8007b76:	bf00      	nop
 8007b78:	00100002 	.word	0x00100002
 8007b7c:	ffff0000 	.word	0xffff0000
 8007b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bf8:	e0b8      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2200      	movs	r2, #0
 8007c02:	4966      	ldr	r1, [pc, #408]	; (8007d9c <HAL_I2C_Mem_Read+0x448>)
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fa63 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0bf      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	494f      	ldr	r1, [pc, #316]	; (8007d9c <HAL_I2C_Mem_Read+0x448>)
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fa35 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e091      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ce4:	e042      	b.n	8007d6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fb48 	bl	8008380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e04c      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d118      	bne.n	8007d6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f aec2 	bne.w	8007afa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e000      	b.n	8007d94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3728      	adds	r7, #40	; 0x28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	00010004 	.word	0x00010004

08007da0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dae:	b2db      	uxtb	r3, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	4608      	mov	r0, r1
 8007dde:	4611      	mov	r1, r2
 8007de0:	461a      	mov	r2, r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	817b      	strh	r3, [r7, #10]
 8007de6:	460b      	mov	r3, r1
 8007de8:	813b      	strh	r3, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f960 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00d      	beq.n	8007e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e24:	d103      	bne.n	8007e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e05f      	b.n	8007ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	6a3a      	ldr	r2, [r7, #32]
 8007e46:	492d      	ldr	r1, [pc, #180]	; (8007efc <I2C_RequestMemoryWrite+0x128>)
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f998 	bl	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e04c      	b.n	8007ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e70:	6a39      	ldr	r1, [r7, #32]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fa02 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d107      	bne.n	8007e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e02b      	b.n	8007ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d105      	bne.n	8007eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ea0:	893b      	ldrh	r3, [r7, #8]
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	611a      	str	r2, [r3, #16]
 8007eaa:	e021      	b.n	8007ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007eac:	893b      	ldrh	r3, [r7, #8]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	6a39      	ldr	r1, [r7, #32]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f9dc 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d107      	bne.n	8007ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e005      	b.n	8007ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee6:	893b      	ldrh	r3, [r7, #8]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	00010002 	.word	0x00010002

08007f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	817b      	strh	r3, [r7, #10]
 8007f12:	460b      	mov	r3, r1
 8007f14:	813b      	strh	r3, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f8c2 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00d      	beq.n	8007f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f60:	d103      	bne.n	8007f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e0aa      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f6e:	897b      	ldrh	r3, [r7, #10]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	6a3a      	ldr	r2, [r7, #32]
 8007f82:	4952      	ldr	r1, [pc, #328]	; (80080cc <I2C_RequestMemoryRead+0x1cc>)
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f8fa 	bl	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e097      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	6a39      	ldr	r1, [r7, #32]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f964 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00d      	beq.n	8007fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d107      	bne.n	8007fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e076      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d105      	bne.n	8007fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fdc:	893b      	ldrh	r3, [r7, #8]
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	611a      	str	r2, [r3, #16]
 8007fe6:	e021      	b.n	800802c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff8:	6a39      	ldr	r1, [r7, #32]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f93e 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00d      	beq.n	8008022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b04      	cmp	r3, #4
 800800c:	d107      	bne.n	800801e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e050      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008022:	893b      	ldrh	r3, [r7, #8]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	6a39      	ldr	r1, [r7, #32]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f923 	bl	800827c <I2C_WaitOnTXEFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	2b04      	cmp	r3, #4
 8008042:	d107      	bne.n	8008054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e035      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2200      	movs	r2, #0
 8008070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f82b 	bl	80080d0 <I2C_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d103      	bne.n	8008098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e013      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800809c:	897b      	ldrh	r3, [r7, #10]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	4906      	ldr	r1, [pc, #24]	; (80080cc <I2C_RequestMemoryRead+0x1cc>)
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f863 	bl	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	00010002 	.word	0x00010002

080080d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080e0:	e025      	b.n	800812e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d021      	beq.n	800812e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ea:	f7fe fdc9 	bl	8006c80 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d302      	bcc.n	8008100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d116      	bne.n	800812e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e023      	b.n	8008176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b01      	cmp	r3, #1
 8008136:	d10d      	bne.n	8008154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	43da      	mvns	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	e00c      	b.n	800816e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	43da      	mvns	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4013      	ands	r3, r2
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	bf0c      	ite	eq
 8008166:	2301      	moveq	r3, #1
 8008168:	2300      	movne	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	461a      	mov	r2, r3
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	429a      	cmp	r2, r3
 8008172:	d0b6      	beq.n	80080e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800818c:	e051      	b.n	8008232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d123      	bne.n	80081e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f043 0204 	orr.w	r2, r3, #4
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e046      	b.n	8008274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d021      	beq.n	8008232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ee:	f7fe fd47 	bl	8006c80 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d116      	bne.n	8008232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e020      	b.n	8008274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	d10c      	bne.n	8008256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	43da      	mvns	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4013      	ands	r3, r2
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf14      	ite	ne
 800824e:	2301      	movne	r3, #1
 8008250:	2300      	moveq	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e00b      	b.n	800826e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	43da      	mvns	r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	4013      	ands	r3, r2
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf14      	ite	ne
 8008268:	2301      	movne	r3, #1
 800826a:	2300      	moveq	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d18d      	bne.n	800818e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008288:	e02d      	b.n	80082e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f8ce 	bl	800842c <I2C_IsAcknowledgeFailed>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e02d      	b.n	80082f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a0:	d021      	beq.n	80082e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a2:	f7fe fced 	bl	8006c80 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d302      	bcc.n	80082b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d116      	bne.n	80082e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e007      	b.n	80082f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d1ca      	bne.n	800828a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800830a:	e02d      	b.n	8008368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f88d 	bl	800842c <I2C_IsAcknowledgeFailed>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e02d      	b.n	8008378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d021      	beq.n	8008368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008324:	f7fe fcac 	bl	8006c80 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d302      	bcc.n	800833a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d116      	bne.n	8008368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	f043 0220 	orr.w	r2, r3, #32
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e007      	b.n	8008378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b04      	cmp	r3, #4
 8008374:	d1ca      	bne.n	800830c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800838c:	e042      	b.n	8008414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b10      	cmp	r3, #16
 800839a:	d119      	bne.n	80083d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0210 	mvn.w	r2, #16
 80083a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e029      	b.n	8008424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083d0:	f7fe fc56 	bl	8006c80 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d302      	bcc.n	80083e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d116      	bne.n	8008414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e007      	b.n	8008424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d1b5      	bne.n	800838e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008442:	d11b      	bne.n	800847c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800844c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e034      	b.n	8008506 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80084a4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f245 5255 	movw	r2, #21845	; 0x5555
 80084ae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6892      	ldr	r2, [r2, #8]
 80084c2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80084c4:	f7fe fbdc 	bl	8006c80 <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80084ca:	e00f      	b.n	80084ec <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80084cc:	f7fe fbd8 	bl	8006c80 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b31      	cmp	r3, #49	; 0x31
 80084d8:	d908      	bls.n	80084ec <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e00c      	b.n	8008506 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e8      	bne.n	80084cc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008502:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800851e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
	...

08008530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e267      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d075      	beq.n	800863a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800854e:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 030c 	and.w	r3, r3, #12
 8008556:	2b04      	cmp	r3, #4
 8008558:	d00c      	beq.n	8008574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800855a:	4b85      	ldr	r3, [pc, #532]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008562:	2b08      	cmp	r3, #8
 8008564:	d112      	bne.n	800858c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008566:	4b82      	ldr	r3, [pc, #520]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008572:	d10b      	bne.n	800858c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008574:	4b7e      	ldr	r3, [pc, #504]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05b      	beq.n	8008638 <HAL_RCC_OscConfig+0x108>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d157      	bne.n	8008638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e242      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008594:	d106      	bne.n	80085a4 <HAL_RCC_OscConfig+0x74>
 8008596:	4b76      	ldr	r3, [pc, #472]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a75      	ldr	r2, [pc, #468]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 800859c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e01d      	b.n	80085e0 <HAL_RCC_OscConfig+0xb0>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0x98>
 80085ae:	4b70      	ldr	r3, [pc, #448]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a6f      	ldr	r2, [pc, #444]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	4b6d      	ldr	r3, [pc, #436]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a6c      	ldr	r2, [pc, #432]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e00b      	b.n	80085e0 <HAL_RCC_OscConfig+0xb0>
 80085c8:	4b69      	ldr	r3, [pc, #420]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a68      	ldr	r2, [pc, #416]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	4b66      	ldr	r3, [pc, #408]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a65      	ldr	r2, [pc, #404]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80085da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e8:	f7fe fb4a 	bl	8006c80 <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ee:	e008      	b.n	8008602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085f0:	f7fe fb46 	bl	8006c80 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b64      	cmp	r3, #100	; 0x64
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e207      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008602:	4b5b      	ldr	r3, [pc, #364]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f0      	beq.n	80085f0 <HAL_RCC_OscConfig+0xc0>
 800860e:	e014      	b.n	800863a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fe fb36 	bl	8006c80 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008618:	f7fe fb32 	bl	8006c80 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b64      	cmp	r3, #100	; 0x64
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e1f3      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800862a:	4b51      	ldr	r3, [pc, #324]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0xe8>
 8008636:	e000      	b.n	800863a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d063      	beq.n	800870e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008646:	4b4a      	ldr	r3, [pc, #296]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008652:	4b47      	ldr	r3, [pc, #284]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800865a:	2b08      	cmp	r3, #8
 800865c:	d11c      	bne.n	8008698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800865e:	4b44      	ldr	r3, [pc, #272]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d116      	bne.n	8008698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800866a:	4b41      	ldr	r3, [pc, #260]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d005      	beq.n	8008682 <HAL_RCC_OscConfig+0x152>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d001      	beq.n	8008682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e1c7      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008682:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4937      	ldr	r1, [pc, #220]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008692:	4313      	orrs	r3, r2
 8008694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008696:	e03a      	b.n	800870e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d020      	beq.n	80086e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086a0:	4b34      	ldr	r3, [pc, #208]	; (8008774 <HAL_RCC_OscConfig+0x244>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a6:	f7fe faeb 	bl	8006c80 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ac:	e008      	b.n	80086c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086ae:	f7fe fae7 	bl	8006c80 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d901      	bls.n	80086c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e1a8      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c0:	4b2b      	ldr	r3, [pc, #172]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0f0      	beq.n	80086ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086cc:	4b28      	ldr	r3, [pc, #160]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	4925      	ldr	r1, [pc, #148]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	600b      	str	r3, [r1, #0]
 80086e0:	e015      	b.n	800870e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <HAL_RCC_OscConfig+0x244>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fe faca 	bl	8006c80 <HAL_GetTick>
 80086ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086f0:	f7fe fac6 	bl	8006c80 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e187      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008702:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f0      	bne.n	80086f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d036      	beq.n	8008788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d016      	beq.n	8008750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <HAL_RCC_OscConfig+0x248>)
 8008724:	2201      	movs	r2, #1
 8008726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008728:	f7fe faaa 	bl	8006c80 <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008730:	f7fe faa6 	bl	8006c80 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e167      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <HAL_RCC_OscConfig+0x240>)
 8008744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <HAL_RCC_OscConfig+0x200>
 800874e:	e01b      	b.n	8008788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008750:	4b09      	ldr	r3, [pc, #36]	; (8008778 <HAL_RCC_OscConfig+0x248>)
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008756:	f7fe fa93 	bl	8006c80 <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800875c:	e00e      	b.n	800877c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800875e:	f7fe fa8f 	bl	8006c80 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d907      	bls.n	800877c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e150      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
 8008770:	40023800 	.word	0x40023800
 8008774:	42470000 	.word	0x42470000
 8008778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800877c:	4b88      	ldr	r3, [pc, #544]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800877e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1ea      	bne.n	800875e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8097 	beq.w	80088c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800879a:	4b81      	ldr	r3, [pc, #516]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10f      	bne.n	80087c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	4b7d      	ldr	r3, [pc, #500]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	4a7c      	ldr	r2, [pc, #496]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80087b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6413      	str	r3, [r2, #64]	; 0x40
 80087b6:	4b7a      	ldr	r3, [pc, #488]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087c2:	2301      	movs	r3, #1
 80087c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087c6:	4b77      	ldr	r3, [pc, #476]	; (80089a4 <HAL_RCC_OscConfig+0x474>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d118      	bne.n	8008804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087d2:	4b74      	ldr	r3, [pc, #464]	; (80089a4 <HAL_RCC_OscConfig+0x474>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a73      	ldr	r2, [pc, #460]	; (80089a4 <HAL_RCC_OscConfig+0x474>)
 80087d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087de:	f7fe fa4f 	bl	8006c80 <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087e6:	f7fe fa4b 	bl	8006c80 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e10c      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f8:	4b6a      	ldr	r3, [pc, #424]	; (80089a4 <HAL_RCC_OscConfig+0x474>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0f0      	beq.n	80087e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d106      	bne.n	800881a <HAL_RCC_OscConfig+0x2ea>
 800880c:	4b64      	ldr	r3, [pc, #400]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	6713      	str	r3, [r2, #112]	; 0x70
 8008818:	e01c      	b.n	8008854 <HAL_RCC_OscConfig+0x324>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b05      	cmp	r3, #5
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x30c>
 8008822:	4b5f      	ldr	r3, [pc, #380]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	4a5e      	ldr	r2, [pc, #376]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008828:	f043 0304 	orr.w	r3, r3, #4
 800882c:	6713      	str	r3, [r2, #112]	; 0x70
 800882e:	4b5c      	ldr	r3, [pc, #368]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	4a5b      	ldr	r2, [pc, #364]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6713      	str	r3, [r2, #112]	; 0x70
 800883a:	e00b      	b.n	8008854 <HAL_RCC_OscConfig+0x324>
 800883c:	4b58      	ldr	r3, [pc, #352]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	4a57      	ldr	r2, [pc, #348]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	6713      	str	r3, [r2, #112]	; 0x70
 8008848:	4b55      	ldr	r3, [pc, #340]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	4a54      	ldr	r2, [pc, #336]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800884e:	f023 0304 	bic.w	r3, r3, #4
 8008852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d015      	beq.n	8008888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885c:	f7fe fa10 	bl	8006c80 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008862:	e00a      	b.n	800887a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008864:	f7fe fa0c 	bl	8006c80 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008872:	4293      	cmp	r3, r2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e0cb      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800887a:	4b49      	ldr	r3, [pc, #292]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0ee      	beq.n	8008864 <HAL_RCC_OscConfig+0x334>
 8008886:	e014      	b.n	80088b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008888:	f7fe f9fa 	bl	8006c80 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800888e:	e00a      	b.n	80088a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008890:	f7fe f9f6 	bl	8006c80 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	f241 3288 	movw	r2, #5000	; 0x1388
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e0b5      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088a6:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1ee      	bne.n	8008890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d105      	bne.n	80088c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088b8:	4b39      	ldr	r3, [pc, #228]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	4a38      	ldr	r2, [pc, #224]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80088be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 80a1 	beq.w	8008a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088ce:	4b34      	ldr	r3, [pc, #208]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 030c 	and.w	r3, r3, #12
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d05c      	beq.n	8008994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d141      	bne.n	8008966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088e2:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <HAL_RCC_OscConfig+0x478>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e8:	f7fe f9ca 	bl	8006c80 <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fe f9c6 	bl	8006c80 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e087      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008902:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69da      	ldr	r2, [r3, #28]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	019b      	lsls	r3, r3, #6
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	3b01      	subs	r3, #1
 8008928:	041b      	lsls	r3, r3, #16
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	061b      	lsls	r3, r3, #24
 8008932:	491b      	ldr	r1, [pc, #108]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008934:	4313      	orrs	r3, r2
 8008936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008938:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <HAL_RCC_OscConfig+0x478>)
 800893a:	2201      	movs	r2, #1
 800893c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893e:	f7fe f99f 	bl	8006c80 <HAL_GetTick>
 8008942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008944:	e008      	b.n	8008958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008946:	f7fe f99b 	bl	8006c80 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e05c      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008958:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0f0      	beq.n	8008946 <HAL_RCC_OscConfig+0x416>
 8008964:	e054      	b.n	8008a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <HAL_RCC_OscConfig+0x478>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896c:	f7fe f988 	bl	8006c80 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008974:	f7fe f984 	bl	8006c80 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e045      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <HAL_RCC_OscConfig+0x470>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0x444>
 8008992:	e03d      	b.n	8008a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d107      	bne.n	80089ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e038      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40007000 	.word	0x40007000
 80089a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089ac:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <HAL_RCC_OscConfig+0x4ec>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d028      	beq.n	8008a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d121      	bne.n	8008a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d11a      	bne.n	8008a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089dc:	4013      	ands	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d111      	bne.n	8008a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	3b01      	subs	r3, #1
 80089f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d107      	bne.n	8008a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d001      	beq.n	8008a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40023800 	.word	0x40023800

08008a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0cc      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a34:	4b68      	ldr	r3, [pc, #416]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d90c      	bls.n	8008a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a42:	4b65      	ldr	r3, [pc, #404]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4a:	4b63      	ldr	r3, [pc, #396]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d001      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0b8      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d020      	beq.n	8008aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a74:	4b59      	ldr	r3, [pc, #356]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	4a58      	ldr	r2, [pc, #352]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a8c:	4b53      	ldr	r3, [pc, #332]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	4a52      	ldr	r2, [pc, #328]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a98:	4b50      	ldr	r3, [pc, #320]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	494d      	ldr	r1, [pc, #308]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d044      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d107      	bne.n	8008ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008abe:	4b47      	ldr	r3, [pc, #284]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d119      	bne.n	8008afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e07f      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d003      	beq.n	8008ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d107      	bne.n	8008aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ade:	4b3f      	ldr	r3, [pc, #252]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e06f      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aee:	4b3b      	ldr	r3, [pc, #236]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e067      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008afe:	4b37      	ldr	r3, [pc, #220]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f023 0203 	bic.w	r2, r3, #3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	4934      	ldr	r1, [pc, #208]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b10:	f7fe f8b6 	bl	8006c80 <HAL_GetTick>
 8008b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b16:	e00a      	b.n	8008b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b18:	f7fe f8b2 	bl	8006c80 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e04f      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2e:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 020c 	and.w	r2, r3, #12
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d1eb      	bne.n	8008b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b40:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d20c      	bcs.n	8008b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b56:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d001      	beq.n	8008b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e032      	b.n	8008bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d008      	beq.n	8008b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b74:	4b19      	ldr	r3, [pc, #100]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	4916      	ldr	r1, [pc, #88]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0308 	and.w	r3, r3, #8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	490e      	ldr	r1, [pc, #56]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ba6:	f000 f821 	bl	8008bec <HAL_RCC_GetSysClockFreq>
 8008baa:	4602      	mov	r2, r0
 8008bac:	4b0b      	ldr	r3, [pc, #44]	; (8008bdc <HAL_RCC_ClockConfig+0x1bc>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	490a      	ldr	r1, [pc, #40]	; (8008be0 <HAL_RCC_ClockConfig+0x1c0>)
 8008bb8:	5ccb      	ldrb	r3, [r1, r3]
 8008bba:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <HAL_RCC_ClockConfig+0x1c4>)
 8008bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <HAL_RCC_ClockConfig+0x1c8>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe f816 	bl	8006bf8 <HAL_InitTick>

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40023c00 	.word	0x40023c00
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	0800e154 	.word	0x0800e154
 8008be4:	20000004 	.word	0x20000004
 8008be8:	200000dc 	.word	0x200000dc

08008bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf0:	b094      	sub	sp, #80	; 0x50
 8008bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c04:	4b79      	ldr	r3, [pc, #484]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f003 030c 	and.w	r3, r3, #12
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d00d      	beq.n	8008c2c <HAL_RCC_GetSysClockFreq+0x40>
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	f200 80e1 	bhi.w	8008dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <HAL_RCC_GetSysClockFreq+0x34>
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d003      	beq.n	8008c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c1e:	e0db      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c20:	4b73      	ldr	r3, [pc, #460]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008c24:	e0db      	b.n	8008dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c26:	4b73      	ldr	r3, [pc, #460]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c2a:	e0d8      	b.n	8008dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c2c:	4b6f      	ldr	r3, [pc, #444]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c36:	4b6d      	ldr	r3, [pc, #436]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d063      	beq.n	8008d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c42:	4b6a      	ldr	r3, [pc, #424]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	099b      	lsrs	r3, r3, #6
 8008c48:	2200      	movs	r2, #0
 8008c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30
 8008c56:	2300      	movs	r3, #0
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c5e:	4622      	mov	r2, r4
 8008c60:	462b      	mov	r3, r5
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f04f 0100 	mov.w	r1, #0
 8008c6a:	0159      	lsls	r1, r3, #5
 8008c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c70:	0150      	lsls	r0, r2, #5
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4621      	mov	r1, r4
 8008c78:	1a51      	subs	r1, r2, r1
 8008c7a:	6139      	str	r1, [r7, #16]
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c90:	4659      	mov	r1, fp
 8008c92:	018b      	lsls	r3, r1, #6
 8008c94:	4651      	mov	r1, sl
 8008c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	018a      	lsls	r2, r1, #6
 8008c9e:	4651      	mov	r1, sl
 8008ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8008ca4:	4659      	mov	r1, fp
 8008ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	eb18 0303 	adds.w	r3, r8, r3
 8008cc8:	60bb      	str	r3, [r7, #8]
 8008cca:	462b      	mov	r3, r5
 8008ccc:	eb49 0303 	adc.w	r3, r9, r3
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cde:	4629      	mov	r1, r5
 8008ce0:	024b      	lsls	r3, r1, #9
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ce8:	4621      	mov	r1, r4
 8008cea:	024a      	lsls	r2, r1, #9
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cfc:	f7f7 fac8 	bl	8000290 <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4613      	mov	r3, r2
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d08:	e058      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d0a:	4b38      	ldr	r3, [pc, #224]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	099b      	lsrs	r3, r3, #6
 8008d10:	2200      	movs	r2, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	4611      	mov	r1, r2
 8008d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d1a:	623b      	str	r3, [r7, #32]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	0159      	lsls	r1, r3, #5
 8008d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d36:	0150      	lsls	r0, r2, #5
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4641      	mov	r1, r8
 8008d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d42:	4649      	mov	r1, r9
 8008d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8008d60:	eb63 050b 	sbc.w	r5, r3, fp
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	00eb      	lsls	r3, r5, #3
 8008d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d72:	00e2      	lsls	r2, r4, #3
 8008d74:	4614      	mov	r4, r2
 8008d76:	461d      	mov	r5, r3
 8008d78:	4643      	mov	r3, r8
 8008d7a:	18e3      	adds	r3, r4, r3
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	464b      	mov	r3, r9
 8008d80:	eb45 0303 	adc.w	r3, r5, r3
 8008d84:	607b      	str	r3, [r7, #4]
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d92:	4629      	mov	r1, r5
 8008d94:	028b      	lsls	r3, r1, #10
 8008d96:	4621      	mov	r1, r4
 8008d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	028a      	lsls	r2, r1, #10
 8008da0:	4610      	mov	r0, r2
 8008da2:	4619      	mov	r1, r3
 8008da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da6:	2200      	movs	r2, #0
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	61fa      	str	r2, [r7, #28]
 8008dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008db0:	f7f7 fa6e 	bl	8000290 <__aeabi_uldivmod>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4613      	mov	r3, r2
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <HAL_RCC_GetSysClockFreq+0x200>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	0c1b      	lsrs	r3, r3, #16
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008dd6:	e002      	b.n	8008dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3750      	adds	r7, #80	; 0x50
 8008de4:	46bd      	mov	sp, r7
 8008de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dea:	bf00      	nop
 8008dec:	40023800 	.word	0x40023800
 8008df0:	00f42400 	.word	0x00f42400
 8008df4:	007a1200 	.word	0x007a1200

08008df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000004 	.word	0x20000004

08008e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e14:	f7ff fff0 	bl	8008df8 <HAL_RCC_GetHCLKFreq>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	0a9b      	lsrs	r3, r3, #10
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	4903      	ldr	r1, [pc, #12]	; (8008e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e26:	5ccb      	ldrb	r3, [r1, r3]
 8008e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40023800 	.word	0x40023800
 8008e34:	0800e164 	.word	0x0800e164

08008e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e3c:	f7ff ffdc 	bl	8008df8 <HAL_RCC_GetHCLKFreq>
 8008e40:	4602      	mov	r2, r0
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	0b5b      	lsrs	r3, r3, #13
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	4903      	ldr	r1, [pc, #12]	; (8008e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e4e:	5ccb      	ldrb	r3, [r1, r3]
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	0800e164 	.word	0x0800e164

08008e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e07b      	b.n	8008f6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d108      	bne.n	8008e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e82:	d009      	beq.n	8008e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	61da      	str	r2, [r3, #28]
 8008e8a:	e005      	b.n	8008e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7f8 fc20 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ece:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1c:	ea42 0103 	orr.w	r1, r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	0c1b      	lsrs	r3, r3, #16
 8008f36:	f003 0104 	and.w	r1, r3, #4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	f003 0210 	and.w	r2, r3, #16
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b088      	sub	sp, #32
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_SPI_Transmit+0x22>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e126      	b.n	80091e2 <HAL_SPI_Transmit+0x270>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f9c:	f7fd fe70 	bl	8006c80 <HAL_GetTick>
 8008fa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d002      	beq.n	8008fb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fb6:	e10b      	b.n	80091d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_SPI_Transmit+0x52>
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fc8:	e102      	b.n	80091d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	88fa      	ldrh	r2, [r7, #6]
 8008fe8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009010:	d10f      	bne.n	8009032 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009020:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009030:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b40      	cmp	r3, #64	; 0x40
 800903e:	d007      	beq.n	8009050 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009058:	d14b      	bne.n	80090f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <HAL_SPI_Transmit+0xf6>
 8009062:	8afb      	ldrh	r3, [r7, #22]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d13e      	bne.n	80090e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	881a      	ldrh	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	1c9a      	adds	r2, r3, #2
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800908c:	e02b      	b.n	80090e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b02      	cmp	r3, #2
 800909a:	d112      	bne.n	80090c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	86da      	strh	r2, [r3, #54]	; 0x36
 80090c0:	e011      	b.n	80090e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090c2:	f7fd fddd 	bl	8006c80 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d803      	bhi.n	80090da <HAL_SPI_Transmit+0x168>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d8:	d102      	bne.n	80090e0 <HAL_SPI_Transmit+0x16e>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80090e4:	e074      	b.n	80091d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1ce      	bne.n	800908e <HAL_SPI_Transmit+0x11c>
 80090f0:	e04c      	b.n	800918c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <HAL_SPI_Transmit+0x18e>
 80090fa:	8afb      	ldrh	r3, [r7, #22]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d140      	bne.n	8009182 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	7812      	ldrb	r2, [r2, #0]
 800910c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009126:	e02c      	b.n	8009182 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d113      	bne.n	800915e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	86da      	strh	r2, [r3, #54]	; 0x36
 800915c:	e011      	b.n	8009182 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800915e:	f7fd fd8f 	bl	8006c80 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d803      	bhi.n	8009176 <HAL_SPI_Transmit+0x204>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009174:	d102      	bne.n	800917c <HAL_SPI_Transmit+0x20a>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009180:	e026      	b.n	80091d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1cd      	bne.n	8009128 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 fa55 	bl	8009640 <SPI_EndRxTxTransaction>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e000      	b.n	80091d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80091ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b08c      	sub	sp, #48	; 0x30
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091f8:	2301      	movs	r3, #1
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x26>
 800920c:	2302      	movs	r3, #2
 800920e:	e18a      	b.n	8009526 <HAL_SPI_TransmitReceive+0x33c>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009218:	f7fd fd32 	bl	8006c80 <HAL_GetTick>
 800921c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800922e:	887b      	ldrh	r3, [r7, #2]
 8009230:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009236:	2b01      	cmp	r3, #1
 8009238:	d00f      	beq.n	800925a <HAL_SPI_TransmitReceive+0x70>
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009240:	d107      	bne.n	8009252 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d103      	bne.n	8009252 <HAL_SPI_TransmitReceive+0x68>
 800924a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800924e:	2b04      	cmp	r3, #4
 8009250:	d003      	beq.n	800925a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009252:	2302      	movs	r3, #2
 8009254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009258:	e15b      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <HAL_SPI_TransmitReceive+0x82>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <HAL_SPI_TransmitReceive+0x82>
 8009266:	887b      	ldrh	r3, [r7, #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009272:	e14e      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b04      	cmp	r3, #4
 800927e:	d003      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2205      	movs	r2, #5
 8009284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	887a      	ldrh	r2, [r7, #2]
 8009298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	887a      	ldrh	r2, [r7, #2]
 80092aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	887a      	ldrh	r2, [r7, #2]
 80092b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d007      	beq.n	80092dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092e4:	d178      	bne.n	80093d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <HAL_SPI_TransmitReceive+0x10a>
 80092ee:	8b7b      	ldrh	r3, [r7, #26]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d166      	bne.n	80093c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	881a      	ldrh	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009304:	1c9a      	adds	r2, r3, #2
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009318:	e053      	b.n	80093c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b02      	cmp	r3, #2
 8009326:	d11b      	bne.n	8009360 <HAL_SPI_TransmitReceive+0x176>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932c:	b29b      	uxth	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d016      	beq.n	8009360 <HAL_SPI_TransmitReceive+0x176>
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	2b01      	cmp	r3, #1
 8009336:	d113      	bne.n	8009360 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	881a      	ldrh	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	1c9a      	adds	r2, r3, #2
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b01      	cmp	r3, #1
 800936c:	d119      	bne.n	80093a2 <HAL_SPI_TransmitReceive+0x1b8>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	d014      	beq.n	80093a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	b292      	uxth	r2, r2
 8009384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	1c9a      	adds	r2, r3, #2
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800939e:	2301      	movs	r3, #1
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093a2:	f7fd fc6d 	bl	8006c80 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d807      	bhi.n	80093c2 <HAL_SPI_TransmitReceive+0x1d8>
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b8:	d003      	beq.n	80093c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093c0:	e0a7      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1a6      	bne.n	800931a <HAL_SPI_TransmitReceive+0x130>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1a1      	bne.n	800931a <HAL_SPI_TransmitReceive+0x130>
 80093d6:	e07c      	b.n	80094d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_SPI_TransmitReceive+0x1fc>
 80093e0:	8b7b      	ldrh	r3, [r7, #26]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d16b      	bne.n	80094be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	330c      	adds	r3, #12
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940c:	e057      	b.n	80094be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b02      	cmp	r3, #2
 800941a:	d11c      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x26c>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x26c>
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d114      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b01      	cmp	r3, #1
 8009462:	d119      	bne.n	8009498 <HAL_SPI_TransmitReceive+0x2ae>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009494:	2301      	movs	r3, #1
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009498:	f7fd fbf2 	bl	8006c80 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d803      	bhi.n	80094b0 <HAL_SPI_TransmitReceive+0x2c6>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d102      	bne.n	80094b6 <HAL_SPI_TransmitReceive+0x2cc>
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094bc:	e029      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1a2      	bne.n	800940e <HAL_SPI_TransmitReceive+0x224>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d19d      	bne.n	800940e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f8b2 	bl	8009640 <SPI_EndRxTxTransaction>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094ee:	e010      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	e000      	b.n	8009512 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009526:	4618      	mov	r0, r3
 8009528:	3730      	adds	r7, #48	; 0x30
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009540:	f7fd fb9e 	bl	8006c80 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4413      	add	r3, r2
 800954e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009550:	f7fd fb96 	bl	8006c80 <HAL_GetTick>
 8009554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009556:	4b39      	ldr	r3, [pc, #228]	; (800963c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	015b      	lsls	r3, r3, #5
 800955c:	0d1b      	lsrs	r3, r3, #20
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009566:	e054      	b.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956e:	d050      	beq.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009570:	f7fd fb86 	bl	8006c80 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	429a      	cmp	r2, r3
 800957e:	d902      	bls.n	8009586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d13d      	bne.n	8009602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800959e:	d111      	bne.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a8:	d004      	beq.n	80095b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b2:	d107      	bne.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095cc:	d10f      	bne.n	80095ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e017      	b.n	8009632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3b01      	subs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689a      	ldr	r2, [r3, #8]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4013      	ands	r3, r2
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	bf0c      	ite	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	2300      	movne	r3, #0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	429a      	cmp	r2, r3
 800962e:	d19b      	bne.n	8009568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000004 	.word	0x20000004

08009640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <SPI_EndRxTxTransaction+0x7c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <SPI_EndRxTxTransaction+0x80>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	0d5b      	lsrs	r3, r3, #21
 8009658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800966a:	d112      	bne.n	8009692 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	2180      	movs	r1, #128	; 0x80
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff ff5a 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d016      	beq.n	80096b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	f043 0220 	orr.w	r2, r3, #32
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e00f      	b.n	80096b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	3b01      	subs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a8:	2b80      	cmp	r3, #128	; 0x80
 80096aa:	d0f2      	beq.n	8009692 <SPI_EndRxTxTransaction+0x52>
 80096ac:	e000      	b.n	80096b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80096ae:	bf00      	nop
  }

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000004 	.word	0x20000004
 80096c0:	165e9f81 	.word	0x165e9f81

080096c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e041      	b.n	800975a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f8 f84c 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f000 fac0 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b01      	cmp	r3, #1
 8009776:	d001      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e044      	b.n	8009806 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <HAL_TIM_Base_Start_IT+0xb0>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d018      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x6c>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a6:	d013      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x6c>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <HAL_TIM_Base_Start_IT+0xb4>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00e      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x6c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a19      	ldr	r2, [pc, #100]	; (800981c <HAL_TIM_Base_Start_IT+0xb8>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d009      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x6c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a17      	ldr	r2, [pc, #92]	; (8009820 <HAL_TIM_Base_Start_IT+0xbc>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d004      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x6c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a16      	ldr	r2, [pc, #88]	; (8009824 <HAL_TIM_Base_Start_IT+0xc0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d111      	bne.n	80097f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b06      	cmp	r3, #6
 80097e0:	d010      	beq.n	8009804 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 0201 	orr.w	r2, r2, #1
 80097f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f2:	e007      	b.n	8009804 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0201 	orr.w	r2, r2, #1
 8009802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40010000 	.word	0x40010000
 8009818:	40000400 	.word	0x40000400
 800981c:	40000800 	.word	0x40000800
 8009820:	40000c00 	.word	0x40000c00
 8009824:	40014000 	.word	0x40014000

08009828 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0201 	bic.w	r2, r2, #1
 800983e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	f241 1311 	movw	r3, #4369	; 0x1111
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10f      	bne.n	8009870 <HAL_TIM_Base_Stop_IT+0x48>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6a1a      	ldr	r2, [r3, #32]
 8009856:	f240 4344 	movw	r3, #1092	; 0x444
 800985a:	4013      	ands	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d107      	bne.n	8009870 <HAL_TIM_Base_Stop_IT+0x48>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0201 	bic.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b02      	cmp	r3, #2
 800989a:	d122      	bne.n	80098e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d11b      	bne.n	80098e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f06f 0202 	mvn.w	r2, #2
 80098b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f003 0303 	and.w	r3, r3, #3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f9bf 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 80098ce:	e005      	b.n	80098dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9b1 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f9c2 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d122      	bne.n	8009936 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d11b      	bne.n	8009936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f06f 0204 	mvn.w	r2, #4
 8009906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f995 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 8009922:	e005      	b.n	8009930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f987 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f998 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b08      	cmp	r3, #8
 8009942:	d122      	bne.n	800998a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b08      	cmp	r3, #8
 8009950:	d11b      	bne.n	800998a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f06f 0208 	mvn.w	r2, #8
 800995a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2204      	movs	r2, #4
 8009960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f96b 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 8009976:	e005      	b.n	8009984 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f95d 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f96e 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b10      	cmp	r3, #16
 8009996:	d122      	bne.n	80099de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0310 	and.w	r3, r3, #16
 80099a2:	2b10      	cmp	r3, #16
 80099a4:	d11b      	bne.n	80099de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0210 	mvn.w	r2, #16
 80099ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2208      	movs	r2, #8
 80099b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f941 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 80099ca:	e005      	b.n	80099d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f933 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f944 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10e      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d107      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f06f 0201 	mvn.w	r2, #1
 8009a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f90d 	bl	8009c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d10e      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d107      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fabb 	bl	8009fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a40:	2b40      	cmp	r3, #64	; 0x40
 8009a42:	d10e      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d107      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f909 	bl	8009c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d10e      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	d107      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f06f 0220 	mvn.w	r2, #32
 8009a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fa85 	bl	8009f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_ConfigClockSource+0x1c>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e0b4      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x186>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ad8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aea:	d03e      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0xd4>
 8009aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af0:	f200 8087 	bhi.w	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af8:	f000 8086 	beq.w	8009c08 <HAL_TIM_ConfigClockSource+0x172>
 8009afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b00:	d87f      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b02:	2b70      	cmp	r3, #112	; 0x70
 8009b04:	d01a      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0xa6>
 8009b06:	2b70      	cmp	r3, #112	; 0x70
 8009b08:	d87b      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b0a:	2b60      	cmp	r3, #96	; 0x60
 8009b0c:	d050      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x11a>
 8009b0e:	2b60      	cmp	r3, #96	; 0x60
 8009b10:	d877      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b12:	2b50      	cmp	r3, #80	; 0x50
 8009b14:	d03c      	beq.n	8009b90 <HAL_TIM_ConfigClockSource+0xfa>
 8009b16:	2b50      	cmp	r3, #80	; 0x50
 8009b18:	d873      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b1a:	2b40      	cmp	r3, #64	; 0x40
 8009b1c:	d058      	beq.n	8009bd0 <HAL_TIM_ConfigClockSource+0x13a>
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	d86f      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b22:	2b30      	cmp	r3, #48	; 0x30
 8009b24:	d064      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x15a>
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	d86b      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d060      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x15a>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d867      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d05c      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x15a>
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	d05a      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x15a>
 8009b3a:	e062      	b.n	8009c02 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6899      	ldr	r1, [r3, #8]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f000 f996 	bl	8009e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	609a      	str	r2, [r3, #8]
      break;
 8009b68:	e04f      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6899      	ldr	r1, [r3, #8]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f000 f97f 	bl	8009e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b8c:	609a      	str	r2, [r3, #8]
      break;
 8009b8e:	e03c      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	6859      	ldr	r1, [r3, #4]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f000 f8f3 	bl	8009d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2150      	movs	r1, #80	; 0x50
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f94c 	bl	8009e46 <TIM_ITRx_SetConfig>
      break;
 8009bae:	e02c      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	6859      	ldr	r1, [r3, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	f000 f912 	bl	8009de6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2160      	movs	r1, #96	; 0x60
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 f93c 	bl	8009e46 <TIM_ITRx_SetConfig>
      break;
 8009bce:	e01c      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	6859      	ldr	r1, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f000 f8d3 	bl	8009d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2140      	movs	r1, #64	; 0x40
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f92c 	bl	8009e46 <TIM_ITRx_SetConfig>
      break;
 8009bee:	e00c      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f000 f923 	bl	8009e46 <TIM_ITRx_SetConfig>
      break;
 8009c00:	e003      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	73fb      	strb	r3, [r7, #15]
      break;
 8009c06:	e000      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a34      	ldr	r2, [pc, #208]	; (8009d6c <TIM_Base_SetConfig+0xe4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00f      	beq.n	8009cc0 <TIM_Base_SetConfig+0x38>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d00b      	beq.n	8009cc0 <TIM_Base_SetConfig+0x38>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a31      	ldr	r2, [pc, #196]	; (8009d70 <TIM_Base_SetConfig+0xe8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d007      	beq.n	8009cc0 <TIM_Base_SetConfig+0x38>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a30      	ldr	r2, [pc, #192]	; (8009d74 <TIM_Base_SetConfig+0xec>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_Base_SetConfig+0x38>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <TIM_Base_SetConfig+0xf0>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d108      	bne.n	8009cd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <TIM_Base_SetConfig+0xe4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d01b      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce0:	d017      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a22      	ldr	r2, [pc, #136]	; (8009d70 <TIM_Base_SetConfig+0xe8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a21      	ldr	r2, [pc, #132]	; (8009d74 <TIM_Base_SetConfig+0xec>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00f      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a20      	ldr	r2, [pc, #128]	; (8009d78 <TIM_Base_SetConfig+0xf0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00b      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1f      	ldr	r2, [pc, #124]	; (8009d7c <TIM_Base_SetConfig+0xf4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1e      	ldr	r2, [pc, #120]	; (8009d80 <TIM_Base_SetConfig+0xf8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_Base_SetConfig+0x8a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	; (8009d84 <TIM_Base_SetConfig+0xfc>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d108      	bne.n	8009d24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <TIM_Base_SetConfig+0xe4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d103      	bne.n	8009d58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	691a      	ldr	r2, [r3, #16]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	615a      	str	r2, [r3, #20]
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40000400 	.word	0x40000400
 8009d74:	40000800 	.word	0x40000800
 8009d78:	40000c00 	.word	0x40000c00
 8009d7c:	40014000 	.word	0x40014000
 8009d80:	40014400 	.word	0x40014400
 8009d84:	40014800 	.word	0x40014800

08009d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	f023 0201 	bic.w	r2, r3, #1
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f023 030a 	bic.w	r3, r3, #10
 8009dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	621a      	str	r2, [r3, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b087      	sub	sp, #28
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0210 	bic.w	r2, r3, #16
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	031b      	lsls	r3, r3, #12
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	621a      	str	r2, [r3, #32]
}
 8009e3a:	bf00      	nop
 8009e3c:	371c      	adds	r7, #28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	f043 0307 	orr.w	r3, r3, #7
 8009e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	609a      	str	r2, [r3, #8]
}
 8009e70:	bf00      	nop
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	021a      	lsls	r2, r3, #8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	609a      	str	r2, [r3, #8]
}
 8009eb0:	bf00      	nop
 8009eb2:	371c      	adds	r7, #28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d101      	bne.n	8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	e050      	b.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1c      	ldr	r2, [pc, #112]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f20:	d013      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a16      	ldr	r2, [pc, #88]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a13      	ldr	r2, [pc, #76]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d10c      	bne.n	8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40000400 	.word	0x40000400
 8009f8c:	40000800 	.word	0x40000800
 8009f90:	40000c00 	.word	0x40000c00
 8009f94:	40014000 	.word	0x40014000

08009f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e03f      	b.n	800a052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d106      	bne.n	8009fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7f7 fbf6 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2224      	movs	r2, #36	; 0x24
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f929 	bl	800a25c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b08a      	sub	sp, #40	; 0x28
 800a05e:	af02      	add	r7, sp, #8
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	603b      	str	r3, [r7, #0]
 800a066:	4613      	mov	r3, r2
 800a068:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b20      	cmp	r3, #32
 800a078:	d17c      	bne.n	800a174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <HAL_UART_Transmit+0x2c>
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e075      	b.n	800a176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_UART_Transmit+0x3e>
 800a094:	2302      	movs	r3, #2
 800a096:	e06e      	b.n	800a176 <HAL_UART_Transmit+0x11c>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2221      	movs	r2, #33	; 0x21
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ae:	f7fc fde7 	bl	8006c80 <HAL_GetTick>
 800a0b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	88fa      	ldrh	r2, [r7, #6]
 800a0be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c8:	d108      	bne.n	800a0dc <HAL_UART_Transmit+0x82>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	e003      	b.n	800a0e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a0ec:	e02a      	b.n	800a144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2180      	movs	r1, #128	; 0x80
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f840 	bl	800a17e <UART_WaitOnFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e036      	b.n	800a176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a11c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	3302      	adds	r3, #2
 800a122:	61bb      	str	r3, [r7, #24]
 800a124:	e007      	b.n	800a136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	3301      	adds	r3, #1
 800a134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1cf      	bne.n	800a0ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2200      	movs	r2, #0
 800a156:	2140      	movs	r1, #64	; 0x40
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f810 	bl	800a17e <UART_WaitOnFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e006      	b.n	800a176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	e000      	b.n	800a176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a174:	2302      	movs	r3, #2
  }
}
 800a176:	4618      	mov	r0, r3
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b090      	sub	sp, #64	; 0x40
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	603b      	str	r3, [r7, #0]
 800a18a:	4613      	mov	r3, r2
 800a18c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a18e:	e050      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a196:	d04c      	beq.n	800a232 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <UART_WaitOnFlagUntilTimeout+0x30>
 800a19e:	f7fc fd6f 	bl	8006c80 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d241      	bcs.n	800a232 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1ce:	637a      	str	r2, [r7, #52]	; 0x34
 800a1d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3314      	adds	r3, #20
 800a1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f023 0301 	bic.w	r3, r3, #1
 800a1f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3314      	adds	r3, #20
 800a200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a202:	623a      	str	r2, [r7, #32]
 800a204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a206:	69f9      	ldr	r1, [r7, #28]
 800a208:	6a3a      	ldr	r2, [r7, #32]
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1e5      	bne.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2220      	movs	r2, #32
 800a222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e00f      	b.n	800a252 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4013      	ands	r3, r2
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	429a      	cmp	r2, r3
 800a240:	bf0c      	ite	eq
 800a242:	2301      	moveq	r3, #1
 800a244:	2300      	movne	r3, #0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	461a      	mov	r2, r3
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d09f      	beq.n	800a190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3740      	adds	r7, #64	; 0x40
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a25c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a260:	b0c0      	sub	sp, #256	; 0x100
 800a262:	af00      	add	r7, sp, #0
 800a264:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a278:	68d9      	ldr	r1, [r3, #12]
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	ea40 0301 	orr.w	r3, r0, r1
 800a284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	431a      	orrs	r2, r3
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2b4:	f021 010c 	bic.w	r1, r1, #12
 800a2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d6:	6999      	ldr	r1, [r3, #24]
 800a2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	ea40 0301 	orr.w	r3, r0, r1
 800a2e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b8f      	ldr	r3, [pc, #572]	; (800a528 <UART_SetConfig+0x2cc>)
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d005      	beq.n	800a2fc <UART_SetConfig+0xa0>
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	4b8d      	ldr	r3, [pc, #564]	; (800a52c <UART_SetConfig+0x2d0>)
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d104      	bne.n	800a306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2fc:	f7fe fd9c 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 800a300:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a304:	e003      	b.n	800a30e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a306:	f7fe fd83 	bl	8008e10 <HAL_RCC_GetPCLK1Freq>
 800a30a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a318:	f040 810c 	bne.w	800a534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a31c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a320:	2200      	movs	r2, #0
 800a322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a326:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a32a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	1891      	adds	r1, r2, r2
 800a334:	65b9      	str	r1, [r7, #88]	; 0x58
 800a336:	415b      	adcs	r3, r3
 800a338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a33a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a33e:	4621      	mov	r1, r4
 800a340:	eb12 0801 	adds.w	r8, r2, r1
 800a344:	4629      	mov	r1, r5
 800a346:	eb43 0901 	adc.w	r9, r3, r1
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a35a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a35e:	4690      	mov	r8, r2
 800a360:	4699      	mov	r9, r3
 800a362:	4623      	mov	r3, r4
 800a364:	eb18 0303 	adds.w	r3, r8, r3
 800a368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a36c:	462b      	mov	r3, r5
 800a36e:	eb49 0303 	adc.w	r3, r9, r3
 800a372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a382:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a38a:	460b      	mov	r3, r1
 800a38c:	18db      	adds	r3, r3, r3
 800a38e:	653b      	str	r3, [r7, #80]	; 0x50
 800a390:	4613      	mov	r3, r2
 800a392:	eb42 0303 	adc.w	r3, r2, r3
 800a396:	657b      	str	r3, [r7, #84]	; 0x54
 800a398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a39c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3a0:	f7f5 ff76 	bl	8000290 <__aeabi_uldivmod>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4b61      	ldr	r3, [pc, #388]	; (800a530 <UART_SetConfig+0x2d4>)
 800a3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	011c      	lsls	r4, r3, #4
 800a3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	1891      	adds	r1, r2, r2
 800a3ca:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3cc:	415b      	adcs	r3, r3
 800a3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	eb12 0a01 	adds.w	sl, r2, r1
 800a3da:	4649      	mov	r1, r9
 800a3dc:	eb43 0b01 	adc.w	fp, r3, r1
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3f4:	4692      	mov	sl, r2
 800a3f6:	469b      	mov	fp, r3
 800a3f8:	4643      	mov	r3, r8
 800a3fa:	eb1a 0303 	adds.w	r3, sl, r3
 800a3fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a402:	464b      	mov	r3, r9
 800a404:	eb4b 0303 	adc.w	r3, fp, r3
 800a408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a418:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a41c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a420:	460b      	mov	r3, r1
 800a422:	18db      	adds	r3, r3, r3
 800a424:	643b      	str	r3, [r7, #64]	; 0x40
 800a426:	4613      	mov	r3, r2
 800a428:	eb42 0303 	adc.w	r3, r2, r3
 800a42c:	647b      	str	r3, [r7, #68]	; 0x44
 800a42e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a436:	f7f5 ff2b 	bl	8000290 <__aeabi_uldivmod>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4611      	mov	r1, r2
 800a440:	4b3b      	ldr	r3, [pc, #236]	; (800a530 <UART_SetConfig+0x2d4>)
 800a442:	fba3 2301 	umull	r2, r3, r3, r1
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	2264      	movs	r2, #100	; 0x64
 800a44a:	fb02 f303 	mul.w	r3, r2, r3
 800a44e:	1acb      	subs	r3, r1, r3
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a456:	4b36      	ldr	r3, [pc, #216]	; (800a530 <UART_SetConfig+0x2d4>)
 800a458:	fba3 2302 	umull	r2, r3, r3, r2
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a464:	441c      	add	r4, r3
 800a466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a470:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a478:	4642      	mov	r2, r8
 800a47a:	464b      	mov	r3, r9
 800a47c:	1891      	adds	r1, r2, r2
 800a47e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a480:	415b      	adcs	r3, r3
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a488:	4641      	mov	r1, r8
 800a48a:	1851      	adds	r1, r2, r1
 800a48c:	6339      	str	r1, [r7, #48]	; 0x30
 800a48e:	4649      	mov	r1, r9
 800a490:	414b      	adcs	r3, r1
 800a492:	637b      	str	r3, [r7, #52]	; 0x34
 800a494:	f04f 0200 	mov.w	r2, #0
 800a498:	f04f 0300 	mov.w	r3, #0
 800a49c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	00cb      	lsls	r3, r1, #3
 800a4a4:	4651      	mov	r1, sl
 800a4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4aa:	4651      	mov	r1, sl
 800a4ac:	00ca      	lsls	r2, r1, #3
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	189b      	adds	r3, r3, r2
 800a4b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4bc:	464b      	mov	r3, r9
 800a4be:	460a      	mov	r2, r1
 800a4c0:	eb42 0303 	adc.w	r3, r2, r3
 800a4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4dc:	460b      	mov	r3, r1
 800a4de:	18db      	adds	r3, r3, r3
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	eb42 0303 	adc.w	r3, r2, r3
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4f2:	f7f5 fecd 	bl	8000290 <__aeabi_uldivmod>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <UART_SetConfig+0x2d4>)
 800a4fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a500:	095b      	lsrs	r3, r3, #5
 800a502:	2164      	movs	r1, #100	; 0x64
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	00db      	lsls	r3, r3, #3
 800a50c:	3332      	adds	r3, #50	; 0x32
 800a50e:	4a08      	ldr	r2, [pc, #32]	; (800a530 <UART_SetConfig+0x2d4>)
 800a510:	fba2 2303 	umull	r2, r3, r2, r3
 800a514:	095b      	lsrs	r3, r3, #5
 800a516:	f003 0207 	and.w	r2, r3, #7
 800a51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4422      	add	r2, r4
 800a522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a524:	e106      	b.n	800a734 <UART_SetConfig+0x4d8>
 800a526:	bf00      	nop
 800a528:	40011000 	.word	0x40011000
 800a52c:	40011400 	.word	0x40011400
 800a530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a53e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a546:	4642      	mov	r2, r8
 800a548:	464b      	mov	r3, r9
 800a54a:	1891      	adds	r1, r2, r2
 800a54c:	6239      	str	r1, [r7, #32]
 800a54e:	415b      	adcs	r3, r3
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
 800a552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a556:	4641      	mov	r1, r8
 800a558:	1854      	adds	r4, r2, r1
 800a55a:	4649      	mov	r1, r9
 800a55c:	eb43 0501 	adc.w	r5, r3, r1
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	f04f 0300 	mov.w	r3, #0
 800a568:	00eb      	lsls	r3, r5, #3
 800a56a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a56e:	00e2      	lsls	r2, r4, #3
 800a570:	4614      	mov	r4, r2
 800a572:	461d      	mov	r5, r3
 800a574:	4643      	mov	r3, r8
 800a576:	18e3      	adds	r3, r4, r3
 800a578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a57c:	464b      	mov	r3, r9
 800a57e:	eb45 0303 	adc.w	r3, r5, r3
 800a582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	008b      	lsls	r3, r1, #2
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	008a      	lsls	r2, r1, #2
 800a5b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5b4:	f7f5 fe6c 	bl	8000290 <__aeabi_uldivmod>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4b60      	ldr	r3, [pc, #384]	; (800a740 <UART_SetConfig+0x4e4>)
 800a5be:	fba3 2302 	umull	r2, r3, r3, r2
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	011c      	lsls	r4, r3, #4
 800a5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5d8:	4642      	mov	r2, r8
 800a5da:	464b      	mov	r3, r9
 800a5dc:	1891      	adds	r1, r2, r2
 800a5de:	61b9      	str	r1, [r7, #24]
 800a5e0:	415b      	adcs	r3, r3
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	1851      	adds	r1, r2, r1
 800a5ec:	6139      	str	r1, [r7, #16]
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	414b      	adcs	r3, r1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	f04f 0300 	mov.w	r3, #0
 800a5fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a600:	4659      	mov	r1, fp
 800a602:	00cb      	lsls	r3, r1, #3
 800a604:	4651      	mov	r1, sl
 800a606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a60a:	4651      	mov	r1, sl
 800a60c:	00ca      	lsls	r2, r1, #3
 800a60e:	4610      	mov	r0, r2
 800a610:	4619      	mov	r1, r3
 800a612:	4603      	mov	r3, r0
 800a614:	4642      	mov	r2, r8
 800a616:	189b      	adds	r3, r3, r2
 800a618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a61c:	464b      	mov	r3, r9
 800a61e:	460a      	mov	r2, r1
 800a620:	eb42 0303 	adc.w	r3, r2, r3
 800a624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	67bb      	str	r3, [r7, #120]	; 0x78
 800a632:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a640:	4649      	mov	r1, r9
 800a642:	008b      	lsls	r3, r1, #2
 800a644:	4641      	mov	r1, r8
 800a646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a64a:	4641      	mov	r1, r8
 800a64c:	008a      	lsls	r2, r1, #2
 800a64e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a652:	f7f5 fe1d 	bl	8000290 <__aeabi_uldivmod>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	4b38      	ldr	r3, [pc, #224]	; (800a740 <UART_SetConfig+0x4e4>)
 800a65e:	fba3 2301 	umull	r2, r3, r3, r1
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	2264      	movs	r2, #100	; 0x64
 800a666:	fb02 f303 	mul.w	r3, r2, r3
 800a66a:	1acb      	subs	r3, r1, r3
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	3332      	adds	r3, #50	; 0x32
 800a670:	4a33      	ldr	r2, [pc, #204]	; (800a740 <UART_SetConfig+0x4e4>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	095b      	lsrs	r3, r3, #5
 800a678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a67c:	441c      	add	r4, r3
 800a67e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a682:	2200      	movs	r2, #0
 800a684:	673b      	str	r3, [r7, #112]	; 0x70
 800a686:	677a      	str	r2, [r7, #116]	; 0x74
 800a688:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	1891      	adds	r1, r2, r2
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	415b      	adcs	r3, r3
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a69c:	4641      	mov	r1, r8
 800a69e:	1851      	adds	r1, r2, r1
 800a6a0:	6039      	str	r1, [r7, #0]
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	414b      	adcs	r3, r1
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	f04f 0300 	mov.w	r3, #0
 800a6b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	00cb      	lsls	r3, r1, #3
 800a6b8:	4651      	mov	r1, sl
 800a6ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6be:	4651      	mov	r1, sl
 800a6c0:	00ca      	lsls	r2, r1, #3
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	189b      	adds	r3, r3, r2
 800a6cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	460a      	mov	r2, r1
 800a6d2:	eb42 0303 	adc.w	r3, r2, r3
 800a6d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a6e2:	667a      	str	r2, [r7, #100]	; 0x64
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	008b      	lsls	r3, r1, #2
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	008a      	lsls	r2, r1, #2
 800a6fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a702:	f7f5 fdc5 	bl	8000290 <__aeabi_uldivmod>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <UART_SetConfig+0x4e4>)
 800a70c:	fba3 1302 	umull	r1, r3, r3, r2
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	2164      	movs	r1, #100	; 0x64
 800a714:	fb01 f303 	mul.w	r3, r1, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	011b      	lsls	r3, r3, #4
 800a71c:	3332      	adds	r3, #50	; 0x32
 800a71e:	4a08      	ldr	r2, [pc, #32]	; (800a740 <UART_SetConfig+0x4e4>)
 800a720:	fba2 2303 	umull	r2, r3, r2, r3
 800a724:	095b      	lsrs	r3, r3, #5
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4422      	add	r2, r4
 800a732:	609a      	str	r2, [r3, #8]
}
 800a734:	bf00      	nop
 800a736:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a73a:	46bd      	mov	sp, r7
 800a73c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a740:	51eb851f 	.word	0x51eb851f

0800a744 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a748:	4904      	ldr	r1, [pc, #16]	; (800a75c <MX_FATFS_Init+0x18>)
 800a74a:	4805      	ldr	r0, [pc, #20]	; (800a760 <MX_FATFS_Init+0x1c>)
 800a74c:	f002 fedc 	bl	800d508 <FATFS_LinkDriver>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	4b03      	ldr	r3, [pc, #12]	; (800a764 <MX_FATFS_Init+0x20>)
 800a756:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a758:	bf00      	nop
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20016e70 	.word	0x20016e70
 800a760:	200000e4 	.word	0x200000e4
 800a764:	20016e6c 	.word	0x20016e6c

0800a768 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a76c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a76e:	4618      	mov	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	4618      	mov	r0, r3
 800a786:	f7f6 f8b7 	bl	80008f8 <SD_disk_initialize>
 800a78a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7f6 f995 	bl	8000ad0 <SD_disk_status>
 800a7a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a7c0:	7bf8      	ldrb	r0, [r7, #15]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	f7f6 f998 	bl	8000afc <SD_disk_read>
 800a7cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a7e6:	7bf8      	ldrb	r0, [r7, #15]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	f7f6 f9ef 	bl	8000bd0 <SD_disk_write>
 800a7f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	603a      	str	r2, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
 800a808:	460b      	mov	r3, r1
 800a80a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a80c:	79b9      	ldrb	r1, [r7, #6]
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f7f6 fa60 	bl	8000cd8 <SD_disk_ioctl>
 800a818:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	4a08      	ldr	r2, [pc, #32]	; (800a854 <disk_status+0x30>)
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	79fa      	ldrb	r2, [r7, #7]
 800a83c:	4905      	ldr	r1, [pc, #20]	; (800a854 <disk_status+0x30>)
 800a83e:	440a      	add	r2, r1
 800a840:	7a12      	ldrb	r2, [r2, #8]
 800a842:	4610      	mov	r0, r2
 800a844:	4798      	blx	r3
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	2001709c 	.word	0x2001709c

0800a858 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	4a0d      	ldr	r2, [pc, #52]	; (800a8a0 <disk_initialize+0x48>)
 800a86a:	5cd3      	ldrb	r3, [r2, r3]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d111      	bne.n	800a894 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	4a0b      	ldr	r2, [pc, #44]	; (800a8a0 <disk_initialize+0x48>)
 800a874:	2101      	movs	r1, #1
 800a876:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	4a09      	ldr	r2, [pc, #36]	; (800a8a0 <disk_initialize+0x48>)
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	79fa      	ldrb	r2, [r7, #7]
 800a886:	4906      	ldr	r1, [pc, #24]	; (800a8a0 <disk_initialize+0x48>)
 800a888:	440a      	add	r2, r1
 800a88a:	7a12      	ldrb	r2, [r2, #8]
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	2001709c 	.word	0x2001709c

0800a8a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <disk_read+0x3c>)
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	689c      	ldr	r4, [r3, #8]
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	4a07      	ldr	r2, [pc, #28]	; (800a8e0 <disk_read+0x3c>)
 800a8c4:	4413      	add	r3, r2
 800a8c6:	7a18      	ldrb	r0, [r3, #8]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	47a0      	blx	r4
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd90      	pop	{r4, r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2001709c 	.word	0x2001709c

0800a8e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a8e4:	b590      	push	{r4, r7, lr}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <disk_write+0x3c>)
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68dc      	ldr	r4, [r3, #12]
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	4a07      	ldr	r2, [pc, #28]	; (800a920 <disk_write+0x3c>)
 800a904:	4413      	add	r3, r2
 800a906:	7a18      	ldrb	r0, [r3, #8]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68b9      	ldr	r1, [r7, #8]
 800a90e:	47a0      	blx	r4
 800a910:	4603      	mov	r3, r0
 800a912:	75fb      	strb	r3, [r7, #23]
  return res;
 800a914:	7dfb      	ldrb	r3, [r7, #23]
}
 800a916:	4618      	mov	r0, r3
 800a918:	371c      	adds	r7, #28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd90      	pop	{r4, r7, pc}
 800a91e:	bf00      	nop
 800a920:	2001709c 	.word	0x2001709c

0800a924 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	603a      	str	r2, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
 800a930:	460b      	mov	r3, r1
 800a932:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	4a09      	ldr	r2, [pc, #36]	; (800a95c <disk_ioctl+0x38>)
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	79fa      	ldrb	r2, [r7, #7]
 800a942:	4906      	ldr	r1, [pc, #24]	; (800a95c <disk_ioctl+0x38>)
 800a944:	440a      	add	r2, r1
 800a946:	7a10      	ldrb	r0, [r2, #8]
 800a948:	79b9      	ldrb	r1, [r7, #6]
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
  return res;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	2001709c 	.word	0x2001709c

0800a960 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3301      	adds	r3, #1
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	b21a      	sxth	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b21b      	sxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b21b      	sxth	r3, r3
 800a980:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a982:	89fb      	ldrh	r3, [r7, #14]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3303      	adds	r3, #3
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	021b      	lsls	r3, r3, #8
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	3202      	adds	r2, #2
 800a9a8:	7812      	ldrb	r2, [r2, #0]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	021b      	lsls	r3, r3, #8
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	7812      	ldrb	r2, [r2, #0]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	887a      	ldrh	r2, [r7, #2]
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]
 800a9ee:	887b      	ldrh	r3, [r7, #2]
 800a9f0:	0a1b      	lsrs	r3, r3, #8
 800a9f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	887a      	ldrh	r2, [r7, #2]
 800a9fc:	b2d2      	uxtb	r2, r2
 800a9fe:	701a      	strb	r2, [r3, #0]
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	0a1b      	lsrs	r3, r3, #8
 800aa26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	b2d2      	uxtb	r2, r2
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	b2d2      	uxtb	r2, r2
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	0a1b      	lsrs	r3, r3, #8
 800aa4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	607a      	str	r2, [r7, #4]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	b2d2      	uxtb	r2, r2
 800aa56:	701a      	strb	r2, [r3, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	1c53      	adds	r3, r2, #1
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	1c59      	adds	r1, r3, #1
 800aa88:	6179      	str	r1, [r7, #20]
 800aa8a:	7812      	ldrb	r2, [r2, #0]
 800aa8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f1      	bne.n	800aa7e <mem_cpy+0x1a>
	}
}
 800aa9a:	bf00      	nop
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aaa6:	b480      	push	{r7}
 800aaa8:	b087      	sub	sp, #28
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	617a      	str	r2, [r7, #20]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	b2d2      	uxtb	r2, r2
 800aac0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f3      	bne.n	800aab6 <mem_set+0x10>
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	371c      	adds	r7, #28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aadc:	b480      	push	{r7}
 800aade:	b089      	sub	sp, #36	; 0x24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	61fa      	str	r2, [r7, #28]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	61ba      	str	r2, [r7, #24]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	1acb      	subs	r3, r1, r3
 800ab08:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	607b      	str	r3, [r7, #4]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <mem_cmp+0x40>
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0eb      	beq.n	800aaf4 <mem_cmp+0x18>

	return r;
 800ab1c:	697b      	ldr	r3, [r7, #20]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3724      	adds	r7, #36	; 0x24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ab34:	e002      	b.n	800ab3c <chk_chr+0x12>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	607b      	str	r3, [r7, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <chk_chr+0x26>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d1f2      	bne.n	800ab36 <chk_chr+0xc>
	return *str;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	781b      	ldrb	r3, [r3, #0]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60bb      	str	r3, [r7, #8]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	e029      	b.n	800abc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab74:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <chk_lock+0xb4>)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	011b      	lsls	r3, r3, #4
 800ab7a:	4413      	add	r3, r2
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d01d      	beq.n	800abbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab82:	4a24      	ldr	r2, [pc, #144]	; (800ac14 <chk_lock+0xb4>)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4413      	add	r3, r2
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d116      	bne.n	800abc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ab94:	4a1f      	ldr	r2, [pc, #124]	; (800ac14 <chk_lock+0xb4>)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d10c      	bne.n	800abc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aba8:	4a1a      	ldr	r2, [pc, #104]	; (800ac14 <chk_lock+0xb4>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	4413      	add	r3, r2
 800abb0:	3308      	adds	r3, #8
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800abb8:	429a      	cmp	r2, r3
 800abba:	d102      	bne.n	800abc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abbc:	e007      	b.n	800abce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800abbe:	2301      	movs	r3, #1
 800abc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d9d2      	bls.n	800ab74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d109      	bne.n	800abe8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <chk_lock+0x80>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d101      	bne.n	800abe4 <chk_lock+0x84>
 800abe0:	2300      	movs	r3, #0
 800abe2:	e010      	b.n	800ac06 <chk_lock+0xa6>
 800abe4:	2312      	movs	r3, #18
 800abe6:	e00e      	b.n	800ac06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d108      	bne.n	800ac00 <chk_lock+0xa0>
 800abee:	4a09      	ldr	r2, [pc, #36]	; (800ac14 <chk_lock+0xb4>)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	011b      	lsls	r3, r3, #4
 800abf4:	4413      	add	r3, r2
 800abf6:	330c      	adds	r3, #12
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfe:	d101      	bne.n	800ac04 <chk_lock+0xa4>
 800ac00:	2310      	movs	r3, #16
 800ac02:	e000      	b.n	800ac06 <chk_lock+0xa6>
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20016e7c 	.word	0x20016e7c

0800ac18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e002      	b.n	800ac2a <enq_lock+0x12>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3301      	adds	r3, #1
 800ac28:	607b      	str	r3, [r7, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d806      	bhi.n	800ac3e <enq_lock+0x26>
 800ac30:	4a09      	ldr	r2, [pc, #36]	; (800ac58 <enq_lock+0x40>)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	4413      	add	r3, r2
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f2      	bne.n	800ac24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	bf14      	ite	ne
 800ac44:	2301      	movne	r3, #1
 800ac46:	2300      	moveq	r3, #0
 800ac48:	b2db      	uxtb	r3, r3
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	20016e7c 	.word	0x20016e7c

0800ac5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	e01f      	b.n	800acac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac6c:	4a41      	ldr	r2, [pc, #260]	; (800ad74 <inc_lock+0x118>)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	4413      	add	r3, r2
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d113      	bne.n	800aca6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac7e:	4a3d      	ldr	r2, [pc, #244]	; (800ad74 <inc_lock+0x118>)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	4413      	add	r3, r2
 800ac86:	3304      	adds	r3, #4
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d109      	bne.n	800aca6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac92:	4a38      	ldr	r2, [pc, #224]	; (800ad74 <inc_lock+0x118>)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	4413      	add	r3, r2
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d006      	beq.n	800acb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d9dc      	bls.n	800ac6c <inc_lock+0x10>
 800acb2:	e000      	b.n	800acb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800acb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d132      	bne.n	800ad22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e002      	b.n	800acc8 <inc_lock+0x6c>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3301      	adds	r3, #1
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d806      	bhi.n	800acdc <inc_lock+0x80>
 800acce:	4a29      	ldr	r2, [pc, #164]	; (800ad74 <inc_lock+0x118>)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1f2      	bne.n	800acc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d101      	bne.n	800ace6 <inc_lock+0x8a>
 800ace2:	2300      	movs	r3, #0
 800ace4:	e040      	b.n	800ad68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4922      	ldr	r1, [pc, #136]	; (800ad74 <inc_lock+0x118>)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	440b      	add	r3, r1
 800acf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	491e      	ldr	r1, [pc, #120]	; (800ad74 <inc_lock+0x118>)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	440b      	add	r3, r1
 800ad00:	3304      	adds	r3, #4
 800ad02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	695a      	ldr	r2, [r3, #20]
 800ad08:	491a      	ldr	r1, [pc, #104]	; (800ad74 <inc_lock+0x118>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	440b      	add	r3, r1
 800ad10:	3308      	adds	r3, #8
 800ad12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad14:	4a17      	ldr	r2, [pc, #92]	; (800ad74 <inc_lock+0x118>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	011b      	lsls	r3, r3, #4
 800ad1a:	4413      	add	r3, r2
 800ad1c:	330c      	adds	r3, #12
 800ad1e:	2200      	movs	r2, #0
 800ad20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d009      	beq.n	800ad3c <inc_lock+0xe0>
 800ad28:	4a12      	ldr	r2, [pc, #72]	; (800ad74 <inc_lock+0x118>)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	4413      	add	r3, r2
 800ad30:	330c      	adds	r3, #12
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <inc_lock+0xe0>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e015      	b.n	800ad68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d108      	bne.n	800ad54 <inc_lock+0xf8>
 800ad42:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <inc_lock+0x118>)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	4413      	add	r3, r2
 800ad4a:	330c      	adds	r3, #12
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	e001      	b.n	800ad58 <inc_lock+0xfc>
 800ad54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad58:	4906      	ldr	r1, [pc, #24]	; (800ad74 <inc_lock+0x118>)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	011b      	lsls	r3, r3, #4
 800ad5e:	440b      	add	r3, r1
 800ad60:	330c      	adds	r3, #12
 800ad62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3301      	adds	r3, #1
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	20016e7c 	.word	0x20016e7c

0800ad78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3b01      	subs	r3, #1
 800ad84:	607b      	str	r3, [r7, #4]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d825      	bhi.n	800add8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ad8c:	4a17      	ldr	r2, [pc, #92]	; (800adec <dec_lock+0x74>)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	4413      	add	r3, r2
 800ad94:	330c      	adds	r3, #12
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad9a:	89fb      	ldrh	r3, [r7, #14]
 800ad9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada0:	d101      	bne.n	800ada6 <dec_lock+0x2e>
 800ada2:	2300      	movs	r3, #0
 800ada4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ada6:	89fb      	ldrh	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <dec_lock+0x3a>
 800adac:	89fb      	ldrh	r3, [r7, #14]
 800adae:	3b01      	subs	r3, #1
 800adb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adb2:	4a0e      	ldr	r2, [pc, #56]	; (800adec <dec_lock+0x74>)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	4413      	add	r3, r2
 800adba:	330c      	adds	r3, #12
 800adbc:	89fa      	ldrh	r2, [r7, #14]
 800adbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800adc0:	89fb      	ldrh	r3, [r7, #14]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d105      	bne.n	800add2 <dec_lock+0x5a>
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <dec_lock+0x74>)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	4413      	add	r3, r2
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	737b      	strb	r3, [r7, #13]
 800add6:	e001      	b.n	800addc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800add8:	2302      	movs	r3, #2
 800adda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800addc:	7b7b      	ldrb	r3, [r7, #13]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	20016e7c 	.word	0x20016e7c

0800adf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	e010      	b.n	800ae20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800adfe:	4a0d      	ldr	r2, [pc, #52]	; (800ae34 <clear_lock+0x44>)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	4413      	add	r3, r2
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d105      	bne.n	800ae1a <clear_lock+0x2a>
 800ae0e:	4a09      	ldr	r2, [pc, #36]	; (800ae34 <clear_lock+0x44>)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	4413      	add	r3, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d9eb      	bls.n	800adfe <clear_lock+0xe>
	}
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	20016e7c 	.word	0x20016e7c

0800ae38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	78db      	ldrb	r3, [r3, #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d034      	beq.n	800aeb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7858      	ldrb	r0, [r3, #1]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	f7ff fd40 	bl	800a8e4 <disk_write>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	73fb      	strb	r3, [r7, #15]
 800ae6e:	e022      	b.n	800aeb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	1ad2      	subs	r2, r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d217      	bcs.n	800aeb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	613b      	str	r3, [r7, #16]
 800ae8c:	e010      	b.n	800aeb0 <sync_window+0x78>
					wsect += fs->fsize;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4413      	add	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7858      	ldrb	r0, [r3, #1]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aea2:	2301      	movs	r3, #1
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	f7ff fd1d 	bl	800a8e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	613b      	str	r3, [r7, #16]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d8eb      	bhi.n	800ae8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d01b      	beq.n	800af10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff ffad 	bl	800ae38 <sync_window>
 800aede:	4603      	mov	r3, r0
 800aee0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d113      	bne.n	800af10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7858      	ldrb	r0, [r3, #1]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aef2:	2301      	movs	r3, #1
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	f7ff fcd5 	bl	800a8a4 <disk_read>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af00:	f04f 33ff 	mov.w	r3, #4294967295
 800af04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af06:	2301      	movs	r3, #1
 800af08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff ff87 	bl	800ae38 <sync_window>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d159      	bne.n	800afe8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d149      	bne.n	800afd0 <sync_fs+0xb4>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	791b      	ldrb	r3, [r3, #4]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d145      	bne.n	800afd0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	899b      	ldrh	r3, [r3, #12]
 800af4e:	461a      	mov	r2, r3
 800af50:	2100      	movs	r1, #0
 800af52:	f7ff fda8 	bl	800aaa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3338      	adds	r3, #56	; 0x38
 800af5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fd37 	bl	800a9d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3338      	adds	r3, #56	; 0x38
 800af6c:	4921      	ldr	r1, [pc, #132]	; (800aff4 <sync_fs+0xd8>)
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fd4c 	bl	800aa0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3338      	adds	r3, #56	; 0x38
 800af78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af7c:	491e      	ldr	r1, [pc, #120]	; (800aff8 <sync_fs+0xdc>)
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fd44 	bl	800aa0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3338      	adds	r3, #56	; 0x38
 800af88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7ff fd3a 	bl	800aa0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3338      	adds	r3, #56	; 0x38
 800af9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7ff fd30 	bl	800aa0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7858      	ldrb	r0, [r3, #1]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc4:	2301      	movs	r3, #1
 800afc6:	f7ff fc8d 	bl	800a8e4 <disk_write>
			fs->fsi_flag = 0;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	785b      	ldrb	r3, [r3, #1]
 800afd4:	2200      	movs	r2, #0
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fca3 	bl	800a924 <disk_ioctl>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <sync_fs+0xcc>
 800afe4:	2301      	movs	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	41615252 	.word	0x41615252
 800aff8:	61417272 	.word	0x61417272

0800affc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	3b02      	subs	r3, #2
 800b00a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	3b02      	subs	r3, #2
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d301      	bcc.n	800b01c <clust2sect+0x20>
 800b018:	2300      	movs	r3, #0
 800b01a:	e008      	b.n	800b02e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	895b      	ldrh	r3, [r3, #10]
 800b020:	461a      	mov	r2, r3
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	fb03 f202 	mul.w	r2, r3, r2
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02c:	4413      	add	r3, r2
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d904      	bls.n	800b05a <get_fat+0x20>
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d302      	bcc.n	800b060 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b05a:	2301      	movs	r3, #1
 800b05c:	617b      	str	r3, [r7, #20]
 800b05e:	e0bb      	b.n	800b1d8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b060:	f04f 33ff 	mov.w	r3, #4294967295
 800b064:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	f000 8083 	beq.w	800b176 <get_fat+0x13c>
 800b070:	2b03      	cmp	r3, #3
 800b072:	f300 80a7 	bgt.w	800b1c4 <get_fat+0x18a>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d002      	beq.n	800b080 <get_fat+0x46>
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d056      	beq.n	800b12c <get_fat+0xf2>
 800b07e:	e0a1      	b.n	800b1c4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	085b      	lsrs	r3, r3, #1
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	899b      	ldrh	r3, [r3, #12]
 800b096:	4619      	mov	r1, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b09e:	4413      	add	r3, r2
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6938      	ldr	r0, [r7, #16]
 800b0a4:	f7ff ff0c 	bl	800aec0 <move_window>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 808d 	bne.w	800b1ca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	60fa      	str	r2, [r7, #12]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	8992      	ldrh	r2, [r2, #12]
 800b0ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0be:	fb01 f202 	mul.w	r2, r1, r2
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b0cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	899b      	ldrh	r3, [r3, #12]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0de:	4413      	add	r3, r2
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6938      	ldr	r0, [r7, #16]
 800b0e4:	f7ff feec 	bl	800aec0 <move_window>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d16f      	bne.n	800b1ce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	899b      	ldrh	r3, [r3, #12]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0fa:	fb01 f202 	mul.w	r2, r1, r2
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4413      	add	r3, r2
 800b104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	461a      	mov	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	4313      	orrs	r3, r2
 800b110:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <get_fat+0xe8>
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	091b      	lsrs	r3, r3, #4
 800b120:	e002      	b.n	800b128 <get_fat+0xee>
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b128:	617b      	str	r3, [r7, #20]
			break;
 800b12a:	e055      	b.n	800b1d8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	899b      	ldrh	r3, [r3, #12]
 800b134:	085b      	lsrs	r3, r3, #1
 800b136:	b29b      	uxth	r3, r3
 800b138:	4619      	mov	r1, r3
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b140:	4413      	add	r3, r2
 800b142:	4619      	mov	r1, r3
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f7ff febb 	bl	800aec0 <move_window>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d140      	bne.n	800b1d2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	8992      	ldrh	r2, [r2, #12]
 800b15e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b162:	fb00 f202 	mul.w	r2, r0, r2
 800b166:	1a9b      	subs	r3, r3, r2
 800b168:	440b      	add	r3, r1
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff fbf8 	bl	800a960 <ld_word>
 800b170:	4603      	mov	r3, r0
 800b172:	617b      	str	r3, [r7, #20]
			break;
 800b174:	e030      	b.n	800b1d8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	899b      	ldrh	r3, [r3, #12]
 800b17e:	089b      	lsrs	r3, r3, #2
 800b180:	b29b      	uxth	r3, r3
 800b182:	4619      	mov	r1, r3
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	fbb3 f3f1 	udiv	r3, r3, r1
 800b18a:	4413      	add	r3, r2
 800b18c:	4619      	mov	r1, r3
 800b18e:	6938      	ldr	r0, [r7, #16]
 800b190:	f7ff fe96 	bl	800aec0 <move_window>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d11d      	bne.n	800b1d6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	8992      	ldrh	r2, [r2, #12]
 800b1a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1ac:	fb00 f202 	mul.w	r2, r0, r2
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fbeb 	bl	800a990 <ld_dword>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1c0:	617b      	str	r3, [r7, #20]
			break;
 800b1c2:	e009      	b.n	800b1d8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	e006      	b.n	800b1d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1ca:	bf00      	nop
 800b1cc:	e004      	b.n	800b1d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1ce:	bf00      	nop
 800b1d0:	e002      	b.n	800b1d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1d2:	bf00      	nop
 800b1d4:	e000      	b.n	800b1d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b1d6:	bf00      	nop
		}
	}

	return val;
 800b1d8:	697b      	ldr	r3, [r7, #20]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b1e2:	b590      	push	{r4, r7, lr}
 800b1e4:	b089      	sub	sp, #36	; 0x24
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	f240 8109 	bls.w	800b40c <put_fat+0x22a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	429a      	cmp	r2, r3
 800b202:	f080 8103 	bcs.w	800b40c <put_fat+0x22a>
		switch (fs->fs_type) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	f000 80b6 	beq.w	800b37c <put_fat+0x19a>
 800b210:	2b03      	cmp	r3, #3
 800b212:	f300 80fb 	bgt.w	800b40c <put_fat+0x22a>
 800b216:	2b01      	cmp	r3, #1
 800b218:	d003      	beq.n	800b222 <put_fat+0x40>
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	f000 8083 	beq.w	800b326 <put_fat+0x144>
 800b220:	e0f4      	b.n	800b40c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	61bb      	str	r3, [r7, #24]
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	69ba      	ldr	r2, [r7, #24]
 800b22c:	4413      	add	r3, r2
 800b22e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	899b      	ldrh	r3, [r3, #12]
 800b238:	4619      	mov	r1, r3
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b240:	4413      	add	r3, r2
 800b242:	4619      	mov	r1, r3
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fe3b 	bl	800aec0 <move_window>
 800b24a:	4603      	mov	r3, r0
 800b24c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b24e:	7ffb      	ldrb	r3, [r7, #31]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 80d4 	bne.w	800b3fe <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	61ba      	str	r2, [r7, #24]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	8992      	ldrh	r2, [r2, #12]
 800b266:	fbb3 f0f2 	udiv	r0, r3, r2
 800b26a:	fb00 f202 	mul.w	r2, r0, r2
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	440b      	add	r3, r1
 800b272:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00d      	beq.n	800b29a <put_fat+0xb8>
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	b25b      	sxtb	r3, r3
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	b25a      	sxtb	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	011b      	lsls	r3, r3, #4
 800b290:	b25b      	sxtb	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b25b      	sxtb	r3, r3
 800b296:	b2db      	uxtb	r3, r3
 800b298:	e001      	b.n	800b29e <put_fat+0xbc>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	899b      	ldrh	r3, [r3, #12]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2b8:	4413      	add	r3, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7ff fdff 	bl	800aec0 <move_window>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2c6:	7ffb      	ldrb	r3, [r7, #31]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f040 809a 	bne.w	800b402 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2e0:	fb00 f202 	mul.w	r2, r0, r2
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	440b      	add	r3, r1
 800b2e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <put_fat+0x11a>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	091b      	lsrs	r3, r3, #4
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	e00e      	b.n	800b31a <put_fat+0x138>
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	b25b      	sxtb	r3, r3
 800b302:	f023 030f 	bic.w	r3, r3, #15
 800b306:	b25a      	sxtb	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	b25b      	sxtb	r3, r3
 800b314:	4313      	orrs	r3, r2
 800b316:	b25b      	sxtb	r3, r3
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	70da      	strb	r2, [r3, #3]
			break;
 800b324:	e072      	b.n	800b40c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	899b      	ldrh	r3, [r3, #12]
 800b32e:	085b      	lsrs	r3, r3, #1
 800b330:	b29b      	uxth	r3, r3
 800b332:	4619      	mov	r1, r3
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	fbb3 f3f1 	udiv	r3, r3, r1
 800b33a:	4413      	add	r3, r2
 800b33c:	4619      	mov	r1, r3
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fdbe 	bl	800aec0 <move_window>
 800b344:	4603      	mov	r3, r0
 800b346:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b348:	7ffb      	ldrb	r3, [r7, #31]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d15b      	bne.n	800b406 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	8992      	ldrh	r2, [r2, #12]
 800b35c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b360:	fb00 f202 	mul.w	r2, r0, r2
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	440b      	add	r3, r1
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	b292      	uxth	r2, r2
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff fb31 	bl	800a9d6 <st_word>
			fs->wflag = 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2201      	movs	r2, #1
 800b378:	70da      	strb	r2, [r3, #3]
			break;
 800b37a:	e047      	b.n	800b40c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	899b      	ldrh	r3, [r3, #12]
 800b384:	089b      	lsrs	r3, r3, #2
 800b386:	b29b      	uxth	r3, r3
 800b388:	4619      	mov	r1, r3
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b390:	4413      	add	r3, r2
 800b392:	4619      	mov	r1, r3
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7ff fd93 	bl	800aec0 <move_window>
 800b39a:	4603      	mov	r3, r0
 800b39c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b39e:	7ffb      	ldrb	r3, [r7, #31]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d132      	bne.n	800b40a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	8992      	ldrh	r2, [r2, #12]
 800b3b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3bc:	fb00 f202 	mul.w	r2, r0, r2
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff fae3 	bl	800a990 <ld_dword>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3d0:	4323      	orrs	r3, r4
 800b3d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	8992      	ldrh	r2, [r2, #12]
 800b3e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3e6:	fb00 f202 	mul.w	r2, r0, r2
 800b3ea:	1a9b      	subs	r3, r3, r2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fb0b 	bl	800aa0c <st_dword>
			fs->wflag = 1;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	70da      	strb	r2, [r3, #3]
			break;
 800b3fc:	e006      	b.n	800b40c <put_fat+0x22a>
			if (res != FR_OK) break;
 800b3fe:	bf00      	nop
 800b400:	e004      	b.n	800b40c <put_fat+0x22a>
			if (res != FR_OK) break;
 800b402:	bf00      	nop
 800b404:	e002      	b.n	800b40c <put_fat+0x22a>
			if (res != FR_OK) break;
 800b406:	bf00      	nop
 800b408:	e000      	b.n	800b40c <put_fat+0x22a>
			if (res != FR_OK) break;
 800b40a:	bf00      	nop
		}
	}
	return res;
 800b40c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3724      	adds	r7, #36	; 0x24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd90      	pop	{r4, r7, pc}

0800b416 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d904      	bls.n	800b43c <remove_chain+0x26>
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d301      	bcc.n	800b440 <remove_chain+0x2a>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e04b      	b.n	800b4d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00c      	beq.n	800b460 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b446:	f04f 32ff 	mov.w	r2, #4294967295
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f7ff fec8 	bl	800b1e2 <put_fat>
 800b452:	4603      	mov	r3, r0
 800b454:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b456:	7ffb      	ldrb	r3, [r7, #31]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <remove_chain+0x4a>
 800b45c:	7ffb      	ldrb	r3, [r7, #31]
 800b45e:	e03b      	b.n	800b4d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff fde9 	bl	800b03a <get_fat>
 800b468:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d031      	beq.n	800b4d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d101      	bne.n	800b47a <remove_chain+0x64>
 800b476:	2302      	movs	r3, #2
 800b478:	e02e      	b.n	800b4d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b480:	d101      	bne.n	800b486 <remove_chain+0x70>
 800b482:	2301      	movs	r3, #1
 800b484:	e028      	b.n	800b4d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b486:	2200      	movs	r2, #0
 800b488:	68b9      	ldr	r1, [r7, #8]
 800b48a:	69b8      	ldr	r0, [r7, #24]
 800b48c:	f7ff fea9 	bl	800b1e2 <put_fat>
 800b490:	4603      	mov	r3, r0
 800b492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b494:	7ffb      	ldrb	r3, [r7, #31]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <remove_chain+0x88>
 800b49a:	7ffb      	ldrb	r3, [r7, #31]
 800b49c:	e01c      	b.n	800b4d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	3b02      	subs	r3, #2
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d20b      	bcs.n	800b4c4 <remove_chain+0xae>
			fs->free_clst++;
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	791b      	ldrb	r3, [r3, #4]
 800b4ba:	f043 0301 	orr.w	r3, r3, #1
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d3c6      	bcc.n	800b460 <remove_chain+0x4a>
 800b4d2:	e000      	b.n	800b4d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b4d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10d      	bne.n	800b512 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d004      	beq.n	800b50c <create_chain+0x2c>
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d31b      	bcc.n	800b544 <create_chain+0x64>
 800b50c:	2301      	movs	r3, #1
 800b50e:	61bb      	str	r3, [r7, #24]
 800b510:	e018      	b.n	800b544 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff fd90 	bl	800b03a <get_fat>
 800b51a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d801      	bhi.n	800b526 <create_chain+0x46>
 800b522:	2301      	movs	r3, #1
 800b524:	e070      	b.n	800b608 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d101      	bne.n	800b532 <create_chain+0x52>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	e06a      	b.n	800b608 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d201      	bcs.n	800b540 <create_chain+0x60>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	e063      	b.n	800b608 <create_chain+0x128>
		scl = clst;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	429a      	cmp	r2, r3
 800b556:	d307      	bcc.n	800b568 <create_chain+0x88>
				ncl = 2;
 800b558:	2302      	movs	r3, #2
 800b55a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	429a      	cmp	r2, r3
 800b562:	d901      	bls.n	800b568 <create_chain+0x88>
 800b564:	2300      	movs	r3, #0
 800b566:	e04f      	b.n	800b608 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b568:	69f9      	ldr	r1, [r7, #28]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fd65 	bl	800b03a <get_fat>
 800b570:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00e      	beq.n	800b596 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d003      	beq.n	800b586 <create_chain+0xa6>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d101      	bne.n	800b58a <create_chain+0xaa>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	e03e      	b.n	800b608 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d1da      	bne.n	800b548 <create_chain+0x68>
 800b592:	2300      	movs	r3, #0
 800b594:	e038      	b.n	800b608 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b596:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	69f9      	ldr	r1, [r7, #28]
 800b59e:	6938      	ldr	r0, [r7, #16]
 800b5a0:	f7ff fe1f 	bl	800b1e2 <put_fat>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <create_chain+0xe2>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d006      	beq.n	800b5c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b5b4:	69fa      	ldr	r2, [r7, #28]
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6938      	ldr	r0, [r7, #16]
 800b5ba:	f7ff fe12 	bl	800b1e2 <put_fat>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d116      	bne.n	800b5f6 <create_chain+0x116>
		fs->last_clst = ncl;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	3b02      	subs	r3, #2
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d804      	bhi.n	800b5e6 <create_chain+0x106>
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	1e5a      	subs	r2, r3, #1
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	791b      	ldrb	r3, [r3, #4]
 800b5ea:	f043 0301 	orr.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	711a      	strb	r2, [r3, #4]
 800b5f4:	e007      	b.n	800b606 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d102      	bne.n	800b602 <create_chain+0x122>
 800b5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b600:	e000      	b.n	800b604 <create_chain+0x124>
 800b602:	2301      	movs	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b606:	69fb      	ldr	r3, [r7, #28]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	3304      	adds	r3, #4
 800b626:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	899b      	ldrh	r3, [r3, #12]
 800b62c:	461a      	mov	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	fbb3 f3f2 	udiv	r3, r3, r2
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	8952      	ldrh	r2, [r2, #10]
 800b638:	fbb3 f3f2 	udiv	r3, r3, r2
 800b63c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1d1a      	adds	r2, r3, #4
 800b642:	613a      	str	r2, [r7, #16]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <clmt_clust+0x42>
 800b64e:	2300      	movs	r3, #0
 800b650:	e010      	b.n	800b674 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	429a      	cmp	r2, r3
 800b658:	d307      	bcc.n	800b66a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	3304      	adds	r3, #4
 800b666:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b668:	e7e9      	b.n	800b63e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b66a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	4413      	add	r3, r2
}
 800b674:	4618      	mov	r0, r3
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b696:	d204      	bcs.n	800b6a2 <dir_sdi+0x22>
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	f003 031f 	and.w	r3, r3, #31
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e071      	b.n	800b78a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <dir_sdi+0x46>
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d902      	bls.n	800b6c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10c      	bne.n	800b6e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	095b      	lsrs	r3, r3, #5
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	8912      	ldrh	r2, [r2, #8]
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d301      	bcc.n	800b6dc <dir_sdi+0x5c>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e056      	b.n	800b78a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	61da      	str	r2, [r3, #28]
 800b6e4:	e02d      	b.n	800b742 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	895b      	ldrh	r3, [r3, #10]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	899b      	ldrh	r3, [r3, #12]
 800b6f0:	fb02 f303 	mul.w	r3, r2, r3
 800b6f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6f6:	e019      	b.n	800b72c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6979      	ldr	r1, [r7, #20]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff fc9c 	bl	800b03a <get_fat>
 800b702:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d101      	bne.n	800b710 <dir_sdi+0x90>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e03c      	b.n	800b78a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d904      	bls.n	800b720 <dir_sdi+0xa0>
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d301      	bcc.n	800b724 <dir_sdi+0xa4>
 800b720:	2302      	movs	r3, #2
 800b722:	e032      	b.n	800b78a <dir_sdi+0x10a>
			ofs -= csz;
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	429a      	cmp	r2, r3
 800b732:	d2e1      	bcs.n	800b6f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b734:	6979      	ldr	r1, [r7, #20]
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f7ff fc60 	bl	800affc <clust2sect>
 800b73c:	4602      	mov	r2, r0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <dir_sdi+0xd4>
 800b750:	2302      	movs	r3, #2
 800b752:	e01a      	b.n	800b78a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	69da      	ldr	r2, [r3, #28]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	899b      	ldrh	r3, [r3, #12]
 800b75c:	4619      	mov	r1, r3
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	fbb3 f3f1 	udiv	r3, r3, r1
 800b764:	441a      	add	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	899b      	ldrh	r3, [r3, #12]
 800b774:	461a      	mov	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	fbb3 f0f2 	udiv	r0, r3, r2
 800b77c:	fb00 f202 	mul.w	r2, r0, r2
 800b780:	1a9b      	subs	r3, r3, r2
 800b782:	18ca      	adds	r2, r1, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	3320      	adds	r3, #32
 800b7a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <dir_next+0x28>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7b8:	d301      	bcc.n	800b7be <dir_next+0x2c>
 800b7ba:	2304      	movs	r3, #4
 800b7bc:	e0bb      	b.n	800b936 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	899b      	ldrh	r3, [r3, #12]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7ca:	fb01 f202 	mul.w	r2, r1, r2
 800b7ce:	1a9b      	subs	r3, r3, r2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 809d 	bne.w	800b910 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10b      	bne.n	800b800 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	8912      	ldrh	r2, [r2, #8]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	f0c0 808d 	bcc.w	800b910 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	61da      	str	r2, [r3, #28]
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	e09a      	b.n	800b936 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	899b      	ldrh	r3, [r3, #12]
 800b804:	461a      	mov	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	fbb3 f3f2 	udiv	r3, r3, r2
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	8952      	ldrh	r2, [r2, #10]
 800b810:	3a01      	subs	r2, #1
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d17b      	bne.n	800b910 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7ff fc0a 	bl	800b03a <get_fat>
 800b826:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d801      	bhi.n	800b832 <dir_next+0xa0>
 800b82e:	2302      	movs	r3, #2
 800b830:	e081      	b.n	800b936 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d101      	bne.n	800b83e <dir_next+0xac>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e07b      	b.n	800b936 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	429a      	cmp	r2, r3
 800b846:	d359      	bcc.n	800b8fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	61da      	str	r2, [r3, #28]
 800b854:	2304      	movs	r3, #4
 800b856:	e06e      	b.n	800b936 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7ff fe3d 	bl	800b4e0 <create_chain>
 800b866:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <dir_next+0xe0>
 800b86e:	2307      	movs	r3, #7
 800b870:	e061      	b.n	800b936 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <dir_next+0xea>
 800b878:	2302      	movs	r3, #2
 800b87a:	e05c      	b.n	800b936 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d101      	bne.n	800b888 <dir_next+0xf6>
 800b884:	2301      	movs	r3, #1
 800b886:	e056      	b.n	800b936 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fad5 	bl	800ae38 <sync_window>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <dir_next+0x106>
 800b894:	2301      	movs	r3, #1
 800b896:	e04e      	b.n	800b936 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	899b      	ldrh	r3, [r3, #12]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	f7ff f8fe 	bl	800aaa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff fba3 	bl	800affc <clust2sect>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	635a      	str	r2, [r3, #52]	; 0x34
 800b8bc:	e012      	b.n	800b8e4 <dir_next+0x152>
						fs->wflag = 1;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7ff fab7 	bl	800ae38 <sync_window>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <dir_next+0x142>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e030      	b.n	800b936 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	613b      	str	r3, [r7, #16]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	635a      	str	r2, [r3, #52]	; 0x34
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	895b      	ldrh	r3, [r3, #10]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d3e6      	bcc.n	800b8be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b902:	6979      	ldr	r1, [r7, #20]
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f7ff fb79 	bl	800affc <clust2sect>
 800b90a:	4602      	mov	r2, r0
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	899b      	ldrh	r3, [r3, #12]
 800b920:	461a      	mov	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	fbb3 f0f2 	udiv	r0, r3, r2
 800b928:	fb00 f202 	mul.w	r2, r0, r2
 800b92c:	1a9b      	subs	r3, r3, r2
 800b92e:	18ca      	adds	r2, r1, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b086      	sub	sp, #24
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b94e:	2100      	movs	r1, #0
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff fe95 	bl	800b680 <dir_sdi>
 800b956:	4603      	mov	r3, r0
 800b958:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d12b      	bne.n	800b9b8 <dir_alloc+0x7a>
		n = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	4619      	mov	r1, r3
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff faa8 	bl	800aec0 <move_window>
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d11d      	bne.n	800b9b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2be5      	cmp	r3, #229	; 0xe5
 800b982:	d004      	beq.n	800b98e <dir_alloc+0x50>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a1b      	ldr	r3, [r3, #32]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d107      	bne.n	800b99e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3301      	adds	r3, #1
 800b992:	613b      	str	r3, [r7, #16]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d102      	bne.n	800b9a2 <dir_alloc+0x64>
 800b99c:	e00c      	b.n	800b9b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b99e:	2300      	movs	r3, #0
 800b9a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff fef4 	bl	800b792 <dir_next>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0d7      	beq.n	800b964 <dir_alloc+0x26>
 800b9b4:	e000      	b.n	800b9b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b9b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	2b04      	cmp	r3, #4
 800b9bc:	d101      	bne.n	800b9c2 <dir_alloc+0x84>
 800b9be:	2307      	movs	r3, #7
 800b9c0:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	331a      	adds	r3, #26
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe ffc0 	bl	800a960 <ld_word>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d109      	bne.n	800ba00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	3314      	adds	r3, #20
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe ffb5 	bl	800a960 <ld_word>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	041b      	lsls	r3, r3, #16
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba00:	68fb      	ldr	r3, [r7, #12]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	331a      	adds	r3, #26
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe ffd8 	bl	800a9d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d109      	bne.n	800ba42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f103 0214 	add.w	r2, r3, #20
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	0c1b      	lsrs	r3, r3, #16
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7fe ffca 	bl	800a9d6 <st_word>
	}
}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ba4c:	b590      	push	{r4, r7, lr}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	331a      	adds	r3, #26
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe ff80 	bl	800a960 <ld_word>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <cmp_lfn+0x1e>
 800ba66:	2300      	movs	r3, #0
 800ba68:	e059      	b.n	800bb1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba72:	1e5a      	subs	r2, r3, #1
 800ba74:	4613      	mov	r3, r2
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	4413      	add	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba80:	2301      	movs	r3, #1
 800ba82:	81fb      	strh	r3, [r7, #14]
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
 800ba88:	e033      	b.n	800baf2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba8a:	4a27      	ldr	r2, [pc, #156]	; (800bb28 <cmp_lfn+0xdc>)
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	4413      	add	r3, r2
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	4413      	add	r3, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fe ff61 	bl	800a960 <ld_word>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800baa2:	89fb      	ldrh	r3, [r7, #14]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d01a      	beq.n	800bade <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2bfe      	cmp	r3, #254	; 0xfe
 800baac:	d812      	bhi.n	800bad4 <cmp_lfn+0x88>
 800baae:	89bb      	ldrh	r3, [r7, #12]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 fd75 	bl	800d5a0 <ff_wtoupper>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461c      	mov	r4, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	617a      	str	r2, [r7, #20]
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4413      	add	r3, r2
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fd69 	bl	800d5a0 <ff_wtoupper>
 800bace:	4603      	mov	r3, r0
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d001      	beq.n	800bad8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bad4:	2300      	movs	r3, #0
 800bad6:	e022      	b.n	800bb1e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bad8:	89bb      	ldrh	r3, [r7, #12]
 800bada:	81fb      	strh	r3, [r7, #14]
 800badc:	e006      	b.n	800baec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bade:	89bb      	ldrh	r3, [r7, #12]
 800bae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d001      	beq.n	800baec <cmp_lfn+0xa0>
 800bae8:	2300      	movs	r3, #0
 800baea:	e018      	b.n	800bb1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3301      	adds	r3, #1
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b0c      	cmp	r3, #12
 800baf6:	d9c8      	bls.n	800ba8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <cmp_lfn+0xd0>
 800bb04:	89fb      	ldrh	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d008      	beq.n	800bb1c <cmp_lfn+0xd0>
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	4413      	add	r3, r2
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <cmp_lfn+0xd0>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e000      	b.n	800bb1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb1c:	2301      	movs	r3, #1
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	371c      	adds	r7, #28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd90      	pop	{r4, r7, pc}
 800bb26:	bf00      	nop
 800bb28:	0800e1ec 	.word	0x0800e1ec

0800bb2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	4611      	mov	r1, r2
 800bb38:	461a      	mov	r2, r3
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	71fb      	strb	r3, [r7, #7]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	330d      	adds	r3, #13
 800bb46:	79ba      	ldrb	r2, [r7, #6]
 800bb48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	330b      	adds	r3, #11
 800bb4e:	220f      	movs	r2, #15
 800bb50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	330c      	adds	r3, #12
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	331a      	adds	r3, #26
 800bb5e:	2100      	movs	r1, #0
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe ff38 	bl	800a9d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	1e5a      	subs	r2, r3, #1
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	82fb      	strh	r3, [r7, #22]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bb7e:	8afb      	ldrh	r3, [r7, #22]
 800bb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d007      	beq.n	800bb98 <put_lfn+0x6c>
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	61fa      	str	r2, [r7, #28]
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bb98:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <put_lfn+0xcc>)
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	461a      	mov	r2, r3
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	4413      	add	r3, r2
 800bba6:	8afa      	ldrh	r2, [r7, #22]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe ff13 	bl	800a9d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bbb0:	8afb      	ldrh	r3, [r7, #22]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d102      	bne.n	800bbbc <put_lfn+0x90>
 800bbb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	2b0c      	cmp	r3, #12
 800bbc6:	d9da      	bls.n	800bb7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bbc8:	8afb      	ldrh	r3, [r7, #22]
 800bbca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d006      	beq.n	800bbe0 <put_lfn+0xb4>
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d103      	bne.n	800bbe8 <put_lfn+0xbc>
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	79fa      	ldrb	r2, [r7, #7]
 800bbec:	701a      	strb	r2, [r3, #0]
}
 800bbee:	bf00      	nop
 800bbf0:	3720      	adds	r7, #32
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800e1ec 	.word	0x0800e1ec

0800bbfc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08c      	sub	sp, #48	; 0x30
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bc0a:	220b      	movs	r2, #11
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7fe ff28 	bl	800aa64 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b05      	cmp	r3, #5
 800bc18:	d92b      	bls.n	800bc72 <gen_numname+0x76>
		sr = seq;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bc1e:	e022      	b.n	800bc66 <gen_numname+0x6a>
			wc = *lfn++;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	1c9a      	adds	r2, r3, #2
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc2e:	e017      	b.n	800bc60 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	005a      	lsls	r2, r3, #1
 800bc34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	4413      	add	r3, r2
 800bc3c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bc3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc40:	085b      	lsrs	r3, r3, #1
 800bc42:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <gen_numname+0x5e>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bc54:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bc58:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	2b0f      	cmp	r3, #15
 800bc64:	d9e4      	bls.n	800bc30 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1d8      	bne.n	800bc20 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bc72:	2307      	movs	r3, #7
 800bc74:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f003 030f 	and.w	r3, r3, #15
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	3330      	adds	r3, #48	; 0x30
 800bc82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bc86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc8a:	2b39      	cmp	r3, #57	; 0x39
 800bc8c:	d904      	bls.n	800bc98 <gen_numname+0x9c>
 800bc8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc92:	3307      	adds	r3, #7
 800bc94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	1e5a      	subs	r2, r3, #1
 800bc9c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bc9e:	3330      	adds	r3, #48	; 0x30
 800bca0:	443b      	add	r3, r7
 800bca2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bca6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	091b      	lsrs	r3, r3, #4
 800bcae:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1df      	bne.n	800bc76 <gen_numname+0x7a>
	ns[i] = '~';
 800bcb6:	f107 0214 	add.w	r2, r7, #20
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	4413      	add	r3, r2
 800bcbe:	227e      	movs	r2, #126	; 0x7e
 800bcc0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc6:	e002      	b.n	800bcce <gen_numname+0xd2>
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	3301      	adds	r3, #1
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
 800bcce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d205      	bcs.n	800bce2 <gen_numname+0xe6>
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	4413      	add	r3, r2
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d1f2      	bne.n	800bcc8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	2b07      	cmp	r3, #7
 800bce6:	d807      	bhi.n	800bcf8 <gen_numname+0xfc>
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	62ba      	str	r2, [r7, #40]	; 0x28
 800bcee:	3330      	adds	r3, #48	; 0x30
 800bcf0:	443b      	add	r3, r7
 800bcf2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bcf6:	e000      	b.n	800bcfa <gen_numname+0xfe>
 800bcf8:	2120      	movs	r1, #32
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	627a      	str	r2, [r7, #36]	; 0x24
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4413      	add	r3, r2
 800bd04:	460a      	mov	r2, r1
 800bd06:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	2b07      	cmp	r3, #7
 800bd0c:	d9e9      	bls.n	800bce2 <gen_numname+0xe6>
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	3730      	adds	r7, #48	; 0x30
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bd24:	230b      	movs	r3, #11
 800bd26:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	0852      	lsrs	r2, r2, #1
 800bd2e:	01db      	lsls	r3, r3, #7
 800bd30:	4313      	orrs	r3, r2
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	1c59      	adds	r1, r3, #1
 800bd38:	6079      	str	r1, [r7, #4]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	60bb      	str	r3, [r7, #8]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1ed      	bne.n	800bd28 <sum_sfn+0x10>
	return sum;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b086      	sub	sp, #24
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bd68:	2100      	movs	r1, #0
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fc88 	bl	800b680 <dir_sdi>
 800bd70:	4603      	mov	r3, r0
 800bd72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <dir_find+0x24>
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	e0a9      	b.n	800bed2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd7e:	23ff      	movs	r3, #255	; 0xff
 800bd80:	753b      	strb	r3, [r7, #20]
 800bd82:	7d3b      	ldrb	r3, [r7, #20]
 800bd84:	757b      	strb	r3, [r7, #21]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6938      	ldr	r0, [r7, #16]
 800bd96:	f7ff f893 	bl	800aec0 <move_window>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 8090 	bne.w	800bec6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bdae:	7dbb      	ldrb	r3, [r7, #22]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <dir_find+0x60>
 800bdb4:	2304      	movs	r3, #4
 800bdb6:	75fb      	strb	r3, [r7, #23]
 800bdb8:	e08a      	b.n	800bed0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	330b      	adds	r3, #11
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc6:	73fb      	strb	r3, [r7, #15]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7bfa      	ldrb	r2, [r7, #15]
 800bdcc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bdce:	7dbb      	ldrb	r3, [r7, #22]
 800bdd0:	2be5      	cmp	r3, #229	; 0xe5
 800bdd2:	d007      	beq.n	800bde4 <dir_find+0x8a>
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <dir_find+0x98>
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
 800bde0:	2b0f      	cmp	r3, #15
 800bde2:	d006      	beq.n	800bdf2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bde4:	23ff      	movs	r3, #255	; 0xff
 800bde6:	757b      	strb	r3, [r7, #21]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f04f 32ff 	mov.w	r2, #4294967295
 800bdee:	631a      	str	r2, [r3, #48]	; 0x30
 800bdf0:	e05e      	b.n	800beb0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	2b0f      	cmp	r3, #15
 800bdf6:	d136      	bne.n	800be66 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be02:	2b00      	cmp	r3, #0
 800be04:	d154      	bne.n	800beb0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800be06:	7dbb      	ldrb	r3, [r7, #22]
 800be08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00d      	beq.n	800be2c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	7b5b      	ldrb	r3, [r3, #13]
 800be16:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800be18:	7dbb      	ldrb	r3, [r7, #22]
 800be1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be1e:	75bb      	strb	r3, [r7, #22]
 800be20:	7dbb      	ldrb	r3, [r7, #22]
 800be22:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	695a      	ldr	r2, [r3, #20]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be2c:	7dba      	ldrb	r2, [r7, #22]
 800be2e:	7d7b      	ldrb	r3, [r7, #21]
 800be30:	429a      	cmp	r2, r3
 800be32:	d115      	bne.n	800be60 <dir_find+0x106>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a1b      	ldr	r3, [r3, #32]
 800be38:	330d      	adds	r3, #13
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	7d3a      	ldrb	r2, [r7, #20]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d10e      	bne.n	800be60 <dir_find+0x106>
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	4619      	mov	r1, r3
 800be4c:	4610      	mov	r0, r2
 800be4e:	f7ff fdfd 	bl	800ba4c <cmp_lfn>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d003      	beq.n	800be60 <dir_find+0x106>
 800be58:	7d7b      	ldrb	r3, [r7, #21]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	e000      	b.n	800be62 <dir_find+0x108>
 800be60:	23ff      	movs	r3, #255	; 0xff
 800be62:	757b      	strb	r3, [r7, #21]
 800be64:	e024      	b.n	800beb0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be66:	7d7b      	ldrb	r3, [r7, #21]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d109      	bne.n	800be80 <dir_find+0x126>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff ff51 	bl	800bd18 <sum_sfn>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	7d3b      	ldrb	r3, [r7, #20]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d024      	beq.n	800beca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <dir_find+0x14a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a18      	ldr	r0, [r3, #32]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3324      	adds	r3, #36	; 0x24
 800be96:	220b      	movs	r2, #11
 800be98:	4619      	mov	r1, r3
 800be9a:	f7fe fe1f 	bl	800aadc <mem_cmp>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d014      	beq.n	800bece <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bea4:	23ff      	movs	r3, #255	; 0xff
 800bea6:	757b      	strb	r3, [r7, #21]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800beb0:	2100      	movs	r1, #0
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff fc6d 	bl	800b792 <dir_next>
 800beb8:	4603      	mov	r3, r0
 800beba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f43f af65 	beq.w	800bd8e <dir_find+0x34>
 800bec4:	e004      	b.n	800bed0 <dir_find+0x176>
		if (res != FR_OK) break;
 800bec6:	bf00      	nop
 800bec8:	e002      	b.n	800bed0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800beca:	bf00      	nop
 800becc:	e000      	b.n	800bed0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bece:	bf00      	nop

	return res;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
	...

0800bedc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08c      	sub	sp, #48	; 0x30
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bef0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <dir_register+0x20>
 800bef8:	2306      	movs	r3, #6
 800befa:	e0e0      	b.n	800c0be <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800befc:	2300      	movs	r3, #0
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
 800bf00:	e002      	b.n	800bf08 <dir_register+0x2c>
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	3301      	adds	r3, #1
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	691a      	ldr	r2, [r3, #16]
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	4413      	add	r3, r2
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1f4      	bne.n	800bf02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bf1e:	f107 030c 	add.w	r3, r7, #12
 800bf22:	220c      	movs	r2, #12
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fd9d 	bl	800aa64 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d032      	beq.n	800bf9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2240      	movs	r2, #64	; 0x40
 800bf38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf40:	e016      	b.n	800bf70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	691a      	ldr	r2, [r3, #16]
 800bf4c:	f107 010c 	add.w	r1, r7, #12
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	f7ff fe53 	bl	800bbfc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff feff 	bl	800bd5a <dir_find>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bf62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	2b63      	cmp	r3, #99	; 0x63
 800bf74:	d9e5      	bls.n	800bf42 <dir_register+0x66>
 800bf76:	e000      	b.n	800bf7a <dir_register+0x9e>
			if (res != FR_OK) break;
 800bf78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	2b64      	cmp	r3, #100	; 0x64
 800bf7e:	d101      	bne.n	800bf84 <dir_register+0xa8>
 800bf80:	2307      	movs	r3, #7
 800bf82:	e09c      	b.n	800c0be <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d002      	beq.n	800bf92 <dir_register+0xb6>
 800bf8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf90:	e095      	b.n	800c0be <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf92:	7dfa      	ldrb	r2, [r7, #23]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d007      	beq.n	800bfb4 <dir_register+0xd8>
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	4a47      	ldr	r2, [pc, #284]	; (800c0c8 <dir_register+0x1ec>)
 800bfaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bfae:	089b      	lsrs	r3, r3, #2
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <dir_register+0xda>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bfb8:	6a39      	ldr	r1, [r7, #32]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff fcbf 	bl	800b93e <dir_alloc>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bfc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d148      	bne.n	800c060 <dir_register+0x184>
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	623b      	str	r3, [r7, #32]
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d042      	beq.n	800c060 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	695a      	ldr	r2, [r3, #20]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	015b      	lsls	r3, r3, #5
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fb4a 	bl	800b680 <dir_sdi>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d132      	bne.n	800c060 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3324      	adds	r3, #36	; 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fe8a 	bl	800bd18 <sum_sfn>
 800c004:	4603      	mov	r3, r0
 800c006:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	4619      	mov	r1, r3
 800c00e:	69f8      	ldr	r0, [r7, #28]
 800c010:	f7fe ff56 	bl	800aec0 <move_window>
 800c014:	4603      	mov	r3, r0
 800c016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d11d      	bne.n	800c05e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	6918      	ldr	r0, [r3, #16]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a19      	ldr	r1, [r3, #32]
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	7efb      	ldrb	r3, [r7, #27]
 800c030:	f7ff fd7c 	bl	800bb2c <put_lfn>
				fs->wflag = 1;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	2201      	movs	r2, #1
 800c038:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff fba8 	bl	800b792 <dir_next>
 800c042:	4603      	mov	r3, r0
 800c044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d107      	bne.n	800c060 <dir_register+0x184>
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	3b01      	subs	r3, #1
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1d5      	bne.n	800c008 <dir_register+0x12c>
 800c05c:	e000      	b.n	800c060 <dir_register+0x184>
				if (res != FR_OK) break;
 800c05e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d128      	bne.n	800c0ba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	69db      	ldr	r3, [r3, #28]
 800c06c:	4619      	mov	r1, r3
 800c06e:	69f8      	ldr	r0, [r7, #28]
 800c070:	f7fe ff26 	bl	800aec0 <move_window>
 800c074:	4603      	mov	r3, r0
 800c076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c07a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d11b      	bne.n	800c0ba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	2220      	movs	r2, #32
 800c088:	2100      	movs	r1, #0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fd0b 	bl	800aaa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a18      	ldr	r0, [r3, #32]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3324      	adds	r3, #36	; 0x24
 800c098:	220b      	movs	r2, #11
 800c09a:	4619      	mov	r1, r3
 800c09c:	f7fe fce2 	bl	800aa64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	330c      	adds	r3, #12
 800c0ac:	f002 0218 	and.w	r2, r2, #24
 800c0b0:	b2d2      	uxtb	r2, r2
 800c0b2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c0ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3730      	adds	r7, #48	; 0x30
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c0cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	; 0x28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	613b      	str	r3, [r7, #16]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	61ba      	str	r2, [r7, #24]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0fc:	2b1f      	cmp	r3, #31
 800c0fe:	d940      	bls.n	800c182 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c102:	2b2f      	cmp	r3, #47	; 0x2f
 800c104:	d006      	beq.n	800c114 <create_name+0x48>
 800c106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c108:	2b5c      	cmp	r3, #92	; 0x5c
 800c10a:	d110      	bne.n	800c12e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c10c:	e002      	b.n	800c114 <create_name+0x48>
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	3301      	adds	r3, #1
 800c112:	61bb      	str	r3, [r7, #24]
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	4413      	add	r3, r2
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b2f      	cmp	r3, #47	; 0x2f
 800c11e:	d0f6      	beq.n	800c10e <create_name+0x42>
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b5c      	cmp	r3, #92	; 0x5c
 800c12a:	d0f0      	beq.n	800c10e <create_name+0x42>
			break;
 800c12c:	e02a      	b.n	800c184 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2bfe      	cmp	r3, #254	; 0xfe
 800c132:	d901      	bls.n	800c138 <create_name+0x6c>
 800c134:	2306      	movs	r3, #6
 800c136:	e17d      	b.n	800c434 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c13e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c140:	2101      	movs	r1, #1
 800c142:	4618      	mov	r0, r3
 800c144:	f001 f9f0 	bl	800d528 <ff_convert>
 800c148:	4603      	mov	r3, r0
 800c14a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <create_name+0x8a>
 800c152:	2306      	movs	r3, #6
 800c154:	e16e      	b.n	800c434 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c158:	2b7f      	cmp	r3, #127	; 0x7f
 800c15a:	d809      	bhi.n	800c170 <create_name+0xa4>
 800c15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c15e:	4619      	mov	r1, r3
 800c160:	488d      	ldr	r0, [pc, #564]	; (800c398 <create_name+0x2cc>)
 800c162:	f7fe fce2 	bl	800ab2a <chk_chr>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <create_name+0xa4>
 800c16c:	2306      	movs	r3, #6
 800c16e:	e161      	b.n	800c434 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	1c5a      	adds	r2, r3, #1
 800c174:	617a      	str	r2, [r7, #20]
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c17e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c180:	e7b4      	b.n	800c0ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c182:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	441a      	add	r2, r3
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c190:	2b1f      	cmp	r3, #31
 800c192:	d801      	bhi.n	800c198 <create_name+0xcc>
 800c194:	2304      	movs	r3, #4
 800c196:	e000      	b.n	800c19a <create_name+0xce>
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c19e:	e011      	b.n	800c1c4 <create_name+0xf8>
		w = lfn[di - 1];
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d002      	beq.n	800c1be <create_name+0xf2>
 800c1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c1bc:	d106      	bne.n	800c1cc <create_name+0x100>
		di--;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1ea      	bne.n	800c1a0 <create_name+0xd4>
 800c1ca:	e000      	b.n	800c1ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c1cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <create_name+0x118>
 800c1e0:	2306      	movs	r3, #6
 800c1e2:	e127      	b.n	800c434 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3324      	adds	r3, #36	; 0x24
 800c1e8:	220b      	movs	r2, #11
 800c1ea:	2120      	movs	r1, #32
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fc5a 	bl	800aaa6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61bb      	str	r3, [r7, #24]
 800c1f6:	e002      	b.n	800c1fe <create_name+0x132>
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	61bb      	str	r3, [r7, #24]
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	2b20      	cmp	r3, #32
 800c20a:	d0f5      	beq.n	800c1f8 <create_name+0x12c>
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4413      	add	r3, r2
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	2b2e      	cmp	r3, #46	; 0x2e
 800c218:	d0ee      	beq.n	800c1f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d009      	beq.n	800c234 <create_name+0x168>
 800c220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c224:	f043 0303 	orr.w	r3, r3, #3
 800c228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c22c:	e002      	b.n	800c234 <create_name+0x168>
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	3b01      	subs	r3, #1
 800c232:	617b      	str	r3, [r7, #20]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d009      	beq.n	800c24e <create_name+0x182>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c240:	3b01      	subs	r3, #1
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4413      	add	r3, r2
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	2b2e      	cmp	r3, #46	; 0x2e
 800c24c:	d1ef      	bne.n	800c22e <create_name+0x162>

	i = b = 0; ni = 8;
 800c24e:	2300      	movs	r3, #0
 800c250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c254:	2300      	movs	r3, #0
 800c256:	623b      	str	r3, [r7, #32]
 800c258:	2308      	movs	r3, #8
 800c25a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	61ba      	str	r2, [r7, #24]
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 8090 	beq.w	800c394 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c276:	2b20      	cmp	r3, #32
 800c278:	d006      	beq.n	800c288 <create_name+0x1bc>
 800c27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27c:	2b2e      	cmp	r3, #46	; 0x2e
 800c27e:	d10a      	bne.n	800c296 <create_name+0x1ca>
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	429a      	cmp	r2, r3
 800c286:	d006      	beq.n	800c296 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c28c:	f043 0303 	orr.w	r3, r3, #3
 800c290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c294:	e07d      	b.n	800c392 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c296:	6a3a      	ldr	r2, [r7, #32]
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d203      	bcs.n	800c2a6 <create_name+0x1da>
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d123      	bne.n	800c2ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	2b0b      	cmp	r3, #11
 800c2aa:	d106      	bne.n	800c2ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b0:	f043 0303 	orr.w	r3, r3, #3
 800c2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2b8:	e075      	b.n	800c3a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d005      	beq.n	800c2ce <create_name+0x202>
 800c2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2c6:	f043 0303 	orr.w	r3, r3, #3
 800c2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d866      	bhi.n	800c3a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	61bb      	str	r3, [r7, #24]
 800c2da:	2308      	movs	r3, #8
 800c2dc:	623b      	str	r3, [r7, #32]
 800c2de:	230b      	movs	r3, #11
 800c2e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c2e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2ec:	e051      	b.n	800c392 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c2ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f0:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f2:	d914      	bls.n	800c31e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c2f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 f915 	bl	800d528 <ff_convert>
 800c2fe:	4603      	mov	r3, r0
 800c300:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <create_name+0x246>
 800c308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c30a:	3b80      	subs	r3, #128	; 0x80
 800c30c:	4a23      	ldr	r2, [pc, #140]	; (800c39c <create_name+0x2d0>)
 800c30e:	5cd3      	ldrb	r3, [r2, r3]
 800c310:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	d007      	beq.n	800c334 <create_name+0x268>
 800c324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c326:	4619      	mov	r1, r3
 800c328:	481d      	ldr	r0, [pc, #116]	; (800c3a0 <create_name+0x2d4>)
 800c32a:	f7fe fbfe 	bl	800ab2a <chk_chr>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d008      	beq.n	800c346 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c334:	235f      	movs	r3, #95	; 0x5f
 800c336:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c33c:	f043 0303 	orr.w	r3, r3, #3
 800c340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c344:	e01b      	b.n	800c37e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c348:	2b40      	cmp	r3, #64	; 0x40
 800c34a:	d909      	bls.n	800c360 <create_name+0x294>
 800c34c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c34e:	2b5a      	cmp	r3, #90	; 0x5a
 800c350:	d806      	bhi.n	800c360 <create_name+0x294>
					b |= 2;
 800c352:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c356:	f043 0302 	orr.w	r3, r3, #2
 800c35a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c35e:	e00e      	b.n	800c37e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c362:	2b60      	cmp	r3, #96	; 0x60
 800c364:	d90b      	bls.n	800c37e <create_name+0x2b2>
 800c366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c368:	2b7a      	cmp	r3, #122	; 0x7a
 800c36a:	d808      	bhi.n	800c37e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c36c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c370:	f043 0301 	orr.w	r3, r3, #1
 800c374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c37a:	3b20      	subs	r3, #32
 800c37c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	623a      	str	r2, [r7, #32]
 800c384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c386:	b2d1      	uxtb	r1, r2
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4413      	add	r3, r2
 800c38c:	460a      	mov	r2, r1
 800c38e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c392:	e763      	b.n	800c25c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c394:	bf00      	nop
 800c396:	e006      	b.n	800c3a6 <create_name+0x2da>
 800c398:	0800e10c 	.word	0x0800e10c
 800c39c:	0800e16c 	.word	0x0800e16c
 800c3a0:	0800e118 	.word	0x0800e118
			if (si > di) break;			/* No extension */
 800c3a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3ac:	2be5      	cmp	r3, #229	; 0xe5
 800c3ae:	d103      	bne.n	800c3b8 <create_name+0x2ec>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2205      	movs	r2, #5
 800c3b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	2b08      	cmp	r3, #8
 800c3bc:	d104      	bne.n	800c3c8 <create_name+0x2fc>
 800c3be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c3c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3cc:	f003 030c 	and.w	r3, r3, #12
 800c3d0:	2b0c      	cmp	r3, #12
 800c3d2:	d005      	beq.n	800c3e0 <create_name+0x314>
 800c3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3d8:	f003 0303 	and.w	r3, r3, #3
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d105      	bne.n	800c3ec <create_name+0x320>
 800c3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e4:	f043 0302 	orr.w	r3, r3, #2
 800c3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f0:	f003 0302 	and.w	r3, r3, #2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d117      	bne.n	800c428 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c3f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3fc:	f003 0303 	and.w	r3, r3, #3
 800c400:	2b01      	cmp	r3, #1
 800c402:	d105      	bne.n	800c410 <create_name+0x344>
 800c404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c408:	f043 0310 	orr.w	r3, r3, #16
 800c40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c414:	f003 030c 	and.w	r3, r3, #12
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d105      	bne.n	800c428 <create_name+0x35c>
 800c41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c420:	f043 0308 	orr.w	r3, r3, #8
 800c424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c42e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c432:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c434:	4618      	mov	r0, r3
 800c436:	3728      	adds	r7, #40	; 0x28
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c450:	e002      	b.n	800c458 <follow_path+0x1c>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	3301      	adds	r3, #1
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b2f      	cmp	r3, #47	; 0x2f
 800c45e:	d0f8      	beq.n	800c452 <follow_path+0x16>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b5c      	cmp	r3, #92	; 0x5c
 800c466:	d0f4      	beq.n	800c452 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2200      	movs	r2, #0
 800c46c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	2b1f      	cmp	r3, #31
 800c474:	d80a      	bhi.n	800c48c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2280      	movs	r2, #128	; 0x80
 800c47a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c47e:	2100      	movs	r1, #0
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff f8fd 	bl	800b680 <dir_sdi>
 800c486:	4603      	mov	r3, r0
 800c488:	75fb      	strb	r3, [r7, #23]
 800c48a:	e048      	b.n	800c51e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c48c:	463b      	mov	r3, r7
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff fe1b 	bl	800c0cc <create_name>
 800c496:	4603      	mov	r3, r0
 800c498:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d139      	bne.n	800c514 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff fc5a 	bl	800bd5a <dir_find>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00a      	beq.n	800c4ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d12c      	bne.n	800c518 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c4be:	7afb      	ldrb	r3, [r7, #11]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d127      	bne.n	800c518 <follow_path+0xdc>
 800c4c8:	2305      	movs	r3, #5
 800c4ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c4cc:	e024      	b.n	800c518 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	f003 0304 	and.w	r3, r3, #4
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d121      	bne.n	800c51c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	799b      	ldrb	r3, [r3, #6]
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d102      	bne.n	800c4ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c4e4:	2305      	movs	r3, #5
 800c4e6:	75fb      	strb	r3, [r7, #23]
 800c4e8:	e019      	b.n	800c51e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	695b      	ldr	r3, [r3, #20]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	8992      	ldrh	r2, [r2, #12]
 800c4f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4fc:	fb00 f202 	mul.w	r2, r0, r2
 800c500:	1a9b      	subs	r3, r3, r2
 800c502:	440b      	add	r3, r1
 800c504:	4619      	mov	r1, r3
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fa60 	bl	800b9cc <ld_clust>
 800c50c:	4602      	mov	r2, r0
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c512:	e7bb      	b.n	800c48c <follow_path+0x50>
			if (res != FR_OK) break;
 800c514:	bf00      	nop
 800c516:	e002      	b.n	800c51e <follow_path+0xe2>
				break;
 800c518:	bf00      	nop
 800c51a:	e000      	b.n	800c51e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c51c:	bf00      	nop
			}
		}
	}

	return res;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c530:	f04f 33ff 	mov.w	r3, #4294967295
 800c534:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d031      	beq.n	800c5a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	e002      	b.n	800c54c <get_ldnumber+0x24>
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	3301      	adds	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b1f      	cmp	r3, #31
 800c552:	d903      	bls.n	800c55c <get_ldnumber+0x34>
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b3a      	cmp	r3, #58	; 0x3a
 800c55a:	d1f4      	bne.n	800c546 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b3a      	cmp	r3, #58	; 0x3a
 800c562:	d11c      	bne.n	800c59e <get_ldnumber+0x76>
			tp = *path;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	60fa      	str	r2, [r7, #12]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	3b30      	subs	r3, #48	; 0x30
 800c574:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b09      	cmp	r3, #9
 800c57a:	d80e      	bhi.n	800c59a <get_ldnumber+0x72>
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	429a      	cmp	r2, r3
 800c582:	d10a      	bne.n	800c59a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d107      	bne.n	800c59a <get_ldnumber+0x72>
					vol = (int)i;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	3301      	adds	r3, #1
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	e002      	b.n	800c5a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c59e:	2300      	movs	r3, #0
 800c5a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c5a2:	693b      	ldr	r3, [r7, #16]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	70da      	strb	r2, [r3, #3]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7fe fc78 	bl	800aec0 <move_window>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <check_fs+0x2a>
 800c5d6:	2304      	movs	r3, #4
 800c5d8:	e038      	b.n	800c64c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3338      	adds	r3, #56	; 0x38
 800c5de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe f9bc 	bl	800a960 <ld_word>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d001      	beq.n	800c5f8 <check_fs+0x48>
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e029      	b.n	800c64c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5fe:	2be9      	cmp	r3, #233	; 0xe9
 800c600:	d009      	beq.n	800c616 <check_fs+0x66>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c608:	2beb      	cmp	r3, #235	; 0xeb
 800c60a:	d11e      	bne.n	800c64a <check_fs+0x9a>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c612:	2b90      	cmp	r3, #144	; 0x90
 800c614:	d119      	bne.n	800c64a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3338      	adds	r3, #56	; 0x38
 800c61a:	3336      	adds	r3, #54	; 0x36
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe f9b7 	bl	800a990 <ld_dword>
 800c622:	4603      	mov	r3, r0
 800c624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c628:	4a0a      	ldr	r2, [pc, #40]	; (800c654 <check_fs+0xa4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d101      	bne.n	800c632 <check_fs+0x82>
 800c62e:	2300      	movs	r3, #0
 800c630:	e00c      	b.n	800c64c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3338      	adds	r3, #56	; 0x38
 800c636:	3352      	adds	r3, #82	; 0x52
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe f9a9 	bl	800a990 <ld_dword>
 800c63e:	4603      	mov	r3, r0
 800c640:	4a05      	ldr	r2, [pc, #20]	; (800c658 <check_fs+0xa8>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d101      	bne.n	800c64a <check_fs+0x9a>
 800c646:	2300      	movs	r3, #0
 800c648:	e000      	b.n	800c64c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c64a:	2302      	movs	r3, #2
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	00544146 	.word	0x00544146
 800c658:	33544146 	.word	0x33544146

0800c65c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b096      	sub	sp, #88	; 0x58
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	4613      	mov	r3, r2
 800c668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7ff ff59 	bl	800c528 <get_ldnumber>
 800c676:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da01      	bge.n	800c682 <find_volume+0x26>
 800c67e:	230b      	movs	r3, #11
 800c680:	e265      	b.n	800cb4e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c682:	4a9f      	ldr	r2, [pc, #636]	; (800c900 <find_volume+0x2a4>)
 800c684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <find_volume+0x3a>
 800c692:	230c      	movs	r3, #12
 800c694:	e25b      	b.n	800cb4e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	f023 0301 	bic.w	r3, r3, #1
 800c6a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d01a      	beq.n	800c6e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	785b      	ldrb	r3, [r3, #1]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe f8b7 	bl	800a824 <disk_status>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10c      	bne.n	800c6e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d007      	beq.n	800c6de <find_volume+0x82>
 800c6ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c6da:	230a      	movs	r3, #10
 800c6dc:	e237      	b.n	800cb4e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e235      	b.n	800cb4e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe f8af 	bl	800a858 <disk_initialize>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c70c:	2303      	movs	r3, #3
 800c70e:	e21e      	b.n	800cb4e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d007      	beq.n	800c726 <find_volume+0xca>
 800c716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c722:	230a      	movs	r3, #10
 800c724:	e213      	b.n	800cb4e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	7858      	ldrb	r0, [r3, #1]
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	330c      	adds	r3, #12
 800c72e:	461a      	mov	r2, r3
 800c730:	2102      	movs	r1, #2
 800c732:	f7fe f8f7 	bl	800a924 <disk_ioctl>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <find_volume+0xe4>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e206      	b.n	800cb4e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	899b      	ldrh	r3, [r3, #12]
 800c744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c748:	d80d      	bhi.n	800c766 <find_volume+0x10a>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	899b      	ldrh	r3, [r3, #12]
 800c74e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c752:	d308      	bcc.n	800c766 <find_volume+0x10a>
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	899b      	ldrh	r3, [r3, #12]
 800c758:	461a      	mov	r2, r3
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	899b      	ldrh	r3, [r3, #12]
 800c75e:	3b01      	subs	r3, #1
 800c760:	4013      	ands	r3, r2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <find_volume+0x10e>
 800c766:	2301      	movs	r3, #1
 800c768:	e1f1      	b.n	800cb4e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c76e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c772:	f7ff ff1d 	bl	800c5b0 <check_fs>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c77c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c780:	2b02      	cmp	r3, #2
 800c782:	d149      	bne.n	800c818 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c784:	2300      	movs	r3, #0
 800c786:	643b      	str	r3, [r7, #64]	; 0x40
 800c788:	e01e      	b.n	800c7c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c798:	4413      	add	r3, r2
 800c79a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	3304      	adds	r3, #4
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d006      	beq.n	800c7b4 <find_volume+0x158>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe f8f0 	bl	800a990 <ld_dword>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	e000      	b.n	800c7b6 <find_volume+0x15a>
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	3358      	adds	r3, #88	; 0x58
 800c7bc:	443b      	add	r3, r7
 800c7be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	d9dd      	bls.n	800c78a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <find_volume+0x182>
 800c7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	3358      	adds	r3, #88	; 0x58
 800c7e4:	443b      	add	r3, r7
 800c7e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c7ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d005      	beq.n	800c7fe <find_volume+0x1a2>
 800c7f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7f6:	f7ff fedb 	bl	800c5b0 <check_fs>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	e000      	b.n	800c800 <find_volume+0x1a4>
 800c7fe:	2303      	movs	r3, #3
 800c800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d905      	bls.n	800c818 <find_volume+0x1bc>
 800c80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c80e:	3301      	adds	r3, #1
 800c810:	643b      	str	r3, [r7, #64]	; 0x40
 800c812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c814:	2b03      	cmp	r3, #3
 800c816:	d9e2      	bls.n	800c7de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	d101      	bne.n	800c824 <find_volume+0x1c8>
 800c820:	2301      	movs	r3, #1
 800c822:	e194      	b.n	800cb4e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d901      	bls.n	800c830 <find_volume+0x1d4>
 800c82c:	230d      	movs	r3, #13
 800c82e:	e18e      	b.n	800cb4e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	3338      	adds	r3, #56	; 0x38
 800c834:	330b      	adds	r3, #11
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe f892 	bl	800a960 <ld_word>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	899b      	ldrh	r3, [r3, #12]
 800c844:	429a      	cmp	r2, r3
 800c846:	d001      	beq.n	800c84c <find_volume+0x1f0>
 800c848:	230d      	movs	r3, #13
 800c84a:	e180      	b.n	800cb4e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	3338      	adds	r3, #56	; 0x38
 800c850:	3316      	adds	r3, #22
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe f884 	bl	800a960 <ld_word>
 800c858:	4603      	mov	r3, r0
 800c85a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <find_volume+0x214>
 800c862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c864:	3338      	adds	r3, #56	; 0x38
 800c866:	3324      	adds	r3, #36	; 0x24
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe f891 	bl	800a990 <ld_dword>
 800c86e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c874:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	789b      	ldrb	r3, [r3, #2]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d005      	beq.n	800c894 <find_volume+0x238>
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	789b      	ldrb	r3, [r3, #2]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d001      	beq.n	800c894 <find_volume+0x238>
 800c890:	230d      	movs	r3, #13
 800c892:	e15c      	b.n	800cb4e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	789b      	ldrb	r3, [r3, #2]
 800c898:	461a      	mov	r2, r3
 800c89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89c:	fb02 f303 	mul.w	r3, r2, r3
 800c8a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	895b      	ldrh	r3, [r3, #10]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d008      	beq.n	800c8c8 <find_volume+0x26c>
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	895b      	ldrh	r3, [r3, #10]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	895b      	ldrh	r3, [r3, #10]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <find_volume+0x270>
 800c8c8:	230d      	movs	r3, #13
 800c8ca:	e140      	b.n	800cb4e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	3338      	adds	r3, #56	; 0x38
 800c8d0:	3311      	adds	r3, #17
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fe f844 	bl	800a960 <ld_word>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	461a      	mov	r2, r3
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	891b      	ldrh	r3, [r3, #8]
 800c8e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8e6:	8992      	ldrh	r2, [r2, #12]
 800c8e8:	0952      	lsrs	r2, r2, #5
 800c8ea:	b292      	uxth	r2, r2
 800c8ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8f0:	fb01 f202 	mul.w	r2, r1, r2
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d003      	beq.n	800c904 <find_volume+0x2a8>
 800c8fc:	230d      	movs	r3, #13
 800c8fe:	e126      	b.n	800cb4e <find_volume+0x4f2>
 800c900:	20016e74 	.word	0x20016e74

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	3338      	adds	r3, #56	; 0x38
 800c908:	3313      	adds	r3, #19
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe f828 	bl	800a960 <ld_word>
 800c910:	4603      	mov	r3, r0
 800c912:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <find_volume+0x2cc>
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	3338      	adds	r3, #56	; 0x38
 800c91e:	3320      	adds	r3, #32
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe f835 	bl	800a990 <ld_dword>
 800c926:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	3338      	adds	r3, #56	; 0x38
 800c92c:	330e      	adds	r3, #14
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe f816 	bl	800a960 <ld_word>
 800c934:	4603      	mov	r3, r0
 800c936:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <find_volume+0x2e6>
 800c93e:	230d      	movs	r3, #13
 800c940:	e105      	b.n	800cb4e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c942:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c946:	4413      	add	r3, r2
 800c948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c94a:	8911      	ldrh	r1, [r2, #8]
 800c94c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c94e:	8992      	ldrh	r2, [r2, #12]
 800c950:	0952      	lsrs	r2, r2, #5
 800c952:	b292      	uxth	r2, r2
 800c954:	fbb1 f2f2 	udiv	r2, r1, r2
 800c958:	b292      	uxth	r2, r2
 800c95a:	4413      	add	r3, r2
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c95e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	429a      	cmp	r2, r3
 800c964:	d201      	bcs.n	800c96a <find_volume+0x30e>
 800c966:	230d      	movs	r3, #13
 800c968:	e0f1      	b.n	800cb4e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c96a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c972:	8952      	ldrh	r2, [r2, #10]
 800c974:	fbb3 f3f2 	udiv	r3, r3, r2
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <find_volume+0x328>
 800c980:	230d      	movs	r3, #13
 800c982:	e0e4      	b.n	800cb4e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c984:	2303      	movs	r3, #3
 800c986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c990:	4293      	cmp	r3, r2
 800c992:	d802      	bhi.n	800c99a <find_volume+0x33e>
 800c994:	2302      	movs	r3, #2
 800c996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d802      	bhi.n	800c9aa <find_volume+0x34e>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	1c9a      	adds	r2, r3, #2
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c9b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9bc:	441a      	add	r2, r3
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c9c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	441a      	add	r2, r3
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c9cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d11e      	bne.n	800ca12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	3338      	adds	r3, #56	; 0x38
 800c9d8:	332a      	adds	r3, #42	; 0x2a
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fd ffc0 	bl	800a960 <ld_word>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <find_volume+0x38e>
 800c9e6:	230d      	movs	r3, #13
 800c9e8:	e0b1      	b.n	800cb4e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	891b      	ldrh	r3, [r3, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <find_volume+0x39a>
 800c9f2:	230d      	movs	r3, #13
 800c9f4:	e0ab      	b.n	800cb4e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	3338      	adds	r3, #56	; 0x38
 800c9fa:	332c      	adds	r3, #44	; 0x2c
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd ffc7 	bl	800a990 <ld_dword>
 800ca02:	4602      	mov	r2, r0
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	69db      	ldr	r3, [r3, #28]
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca10:	e01f      	b.n	800ca52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	891b      	ldrh	r3, [r3, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <find_volume+0x3c2>
 800ca1a:	230d      	movs	r3, #13
 800ca1c:	e097      	b.n	800cb4e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca24:	441a      	add	r2, r3
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d103      	bne.n	800ca3a <find_volume+0x3de>
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	e00a      	b.n	800ca50 <find_volume+0x3f4>
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	69da      	ldr	r2, [r3, #28]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	4413      	add	r3, r2
 800ca44:	085a      	lsrs	r2, r3, #1
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	6a1a      	ldr	r2, [r3, #32]
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	899b      	ldrh	r3, [r3, #12]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca5e:	440b      	add	r3, r1
 800ca60:	3b01      	subs	r3, #1
 800ca62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca64:	8989      	ldrh	r1, [r1, #12]
 800ca66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d201      	bcs.n	800ca72 <find_volume+0x416>
 800ca6e:	230d      	movs	r3, #13
 800ca70:	e06d      	b.n	800cb4e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295
 800ca78:	619a      	str	r2, [r3, #24]
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	699a      	ldr	r2, [r3, #24]
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	2280      	movs	r2, #128	; 0x80
 800ca86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ca88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d149      	bne.n	800cb24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	3338      	adds	r3, #56	; 0x38
 800ca94:	3330      	adds	r3, #48	; 0x30
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fd ff62 	bl	800a960 <ld_word>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d140      	bne.n	800cb24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800caa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa4:	3301      	adds	r3, #1
 800caa6:	4619      	mov	r1, r3
 800caa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caaa:	f7fe fa09 	bl	800aec0 <move_window>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d137      	bne.n	800cb24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	2200      	movs	r2, #0
 800cab8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	3338      	adds	r3, #56	; 0x38
 800cabe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fd ff4c 	bl	800a960 <ld_word>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d127      	bne.n	800cb24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	3338      	adds	r3, #56	; 0x38
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd ff59 	bl	800a990 <ld_dword>
 800cade:	4603      	mov	r3, r0
 800cae0:	4a1d      	ldr	r2, [pc, #116]	; (800cb58 <find_volume+0x4fc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d11e      	bne.n	800cb24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	3338      	adds	r3, #56	; 0x38
 800caea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fd ff4e 	bl	800a990 <ld_dword>
 800caf4:	4603      	mov	r3, r0
 800caf6:	4a19      	ldr	r2, [pc, #100]	; (800cb5c <find_volume+0x500>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d113      	bne.n	800cb24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	3338      	adds	r3, #56	; 0x38
 800cb00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fd ff43 	bl	800a990 <ld_dword>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	3338      	adds	r3, #56	; 0x38
 800cb14:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fd ff39 	bl	800a990 <ld_dword>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb2c:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <find_volume+0x504>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	3301      	adds	r3, #1
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	4b0a      	ldr	r3, [pc, #40]	; (800cb60 <find_volume+0x504>)
 800cb36:	801a      	strh	r2, [r3, #0]
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <find_volume+0x504>)
 800cb3a:	881a      	ldrh	r2, [r3, #0]
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <find_volume+0x508>)
 800cb44:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb48:	f7fe f952 	bl	800adf0 <clear_lock>
#endif
	return FR_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3758      	adds	r7, #88	; 0x58
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	41615252 	.word	0x41615252
 800cb5c:	61417272 	.word	0x61417272
 800cb60:	20016e78 	.word	0x20016e78
 800cb64:	20016e9c 	.word	0x20016e9c

0800cb68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cb72:	2309      	movs	r3, #9
 800cb74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01c      	beq.n	800cbb6 <validate+0x4e>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d018      	beq.n	800cbb6 <validate+0x4e>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d013      	beq.n	800cbb6 <validate+0x4e>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	889a      	ldrh	r2, [r3, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	88db      	ldrh	r3, [r3, #6]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d10c      	bne.n	800cbb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	785b      	ldrb	r3, [r3, #1]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd fe3e 	bl	800a824 <disk_status>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <validate+0x4e>
			res = FR_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <validate+0x5a>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	e000      	b.n	800cbc4 <validate+0x5c>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	6013      	str	r3, [r2, #0]
	return res;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cbe6:	f107 0310 	add.w	r3, r7, #16
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fc9c 	bl	800c528 <get_ldnumber>
 800cbf0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da01      	bge.n	800cbfc <f_mount+0x28>
 800cbf8:	230b      	movs	r3, #11
 800cbfa:	e02b      	b.n	800cc54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cbfc:	4a17      	ldr	r2, [pc, #92]	; (800cc5c <f_mount+0x88>)
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d005      	beq.n	800cc18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc0c:	69b8      	ldr	r0, [r7, #24]
 800cc0e:	f7fe f8ef 	bl	800adf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	2200      	movs	r2, #0
 800cc16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	490d      	ldr	r1, [pc, #52]	; (800cc5c <f_mount+0x88>)
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <f_mount+0x66>
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d001      	beq.n	800cc3e <f_mount+0x6a>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e00a      	b.n	800cc54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc3e:	f107 010c 	add.w	r1, r7, #12
 800cc42:	f107 0308 	add.w	r3, r7, #8
 800cc46:	2200      	movs	r2, #0
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff fd07 	bl	800c65c <find_volume>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3720      	adds	r7, #32
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	20016e74 	.word	0x20016e74

0800cc60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b09a      	sub	sp, #104	; 0x68
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <f_open+0x18>
 800cc74:	2309      	movs	r3, #9
 800cc76:	e1bb      	b.n	800cff0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cc80:	79fa      	ldrb	r2, [r7, #7]
 800cc82:	f107 0114 	add.w	r1, r7, #20
 800cc86:	f107 0308 	add.w	r3, r7, #8
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fce6 	bl	800c65c <find_volume>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cc96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f040 819f 	bne.w	800cfde <f_open+0x37e>
		dj.obj.fs = fs;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	f107 0318 	add.w	r3, r7, #24
 800ccaa:	4611      	mov	r1, r2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff fbc5 	bl	800c43c <follow_path>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ccb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11a      	bne.n	800ccf6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ccc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	da03      	bge.n	800ccd2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ccca:	2306      	movs	r3, #6
 800cccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ccd0:	e011      	b.n	800ccf6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	f023 0301 	bic.w	r3, r3, #1
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bf14      	ite	ne
 800ccdc:	2301      	movne	r3, #1
 800ccde:	2300      	moveq	r3, #0
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	461a      	mov	r2, r3
 800cce4:	f107 0318 	add.w	r3, r7, #24
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fd ff38 	bl	800ab60 <chk_lock>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	f003 031c 	and.w	r3, r3, #28
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d07f      	beq.n	800ce00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cd00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d017      	beq.n	800cd38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d10e      	bne.n	800cd2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd10:	f7fd ff82 	bl	800ac18 <enq_lock>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d006      	beq.n	800cd28 <f_open+0xc8>
 800cd1a:	f107 0318 	add.w	r3, r7, #24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff f8dc 	bl	800bedc <dir_register>
 800cd24:	4603      	mov	r3, r0
 800cd26:	e000      	b.n	800cd2a <f_open+0xca>
 800cd28:	2312      	movs	r3, #18
 800cd2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	f043 0308 	orr.w	r3, r3, #8
 800cd34:	71fb      	strb	r3, [r7, #7]
 800cd36:	e010      	b.n	800cd5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd38:	7fbb      	ldrb	r3, [r7, #30]
 800cd3a:	f003 0311 	and.w	r3, r3, #17
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <f_open+0xea>
					res = FR_DENIED;
 800cd42:	2307      	movs	r3, #7
 800cd44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd48:	e007      	b.n	800cd5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd4a:	79fb      	ldrb	r3, [r7, #7]
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <f_open+0xfa>
 800cd54:	2308      	movs	r3, #8
 800cd56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d168      	bne.n	800ce34 <f_open+0x1d4>
 800cd62:	79fb      	ldrb	r3, [r7, #7]
 800cd64:	f003 0308 	and.w	r3, r3, #8
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d063      	beq.n	800ce34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cd6c:	f7fd fcfc 	bl	800a768 <get_fattime>
 800cd70:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	330e      	adds	r3, #14
 800cd76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fd fe47 	bl	800aa0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	3316      	adds	r3, #22
 800cd82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fd fe41 	bl	800aa0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	330b      	adds	r3, #11
 800cd8e:	2220      	movs	r2, #32
 800cd90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fe fe17 	bl	800b9cc <ld_clust>
 800cd9e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cda4:	2200      	movs	r2, #0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fe2f 	bl	800ba0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	331c      	adds	r3, #28
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fd fe2a 	bl	800aa0c <st_dword>
					fs->wflag = 1;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cdbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d037      	beq.n	800ce34 <f_open+0x1d4>
						dw = fs->winsect;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cdca:	f107 0318 	add.w	r3, r7, #24
 800cdce:	2200      	movs	r2, #0
 800cdd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fb1f 	bl	800b416 <remove_chain>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cdde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d126      	bne.n	800ce34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe f868 	bl	800aec0 <move_window>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdfa:	3a01      	subs	r2, #1
 800cdfc:	615a      	str	r2, [r3, #20]
 800cdfe:	e019      	b.n	800ce34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d115      	bne.n	800ce34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce08:	7fbb      	ldrb	r3, [r7, #30]
 800ce0a:	f003 0310 	and.w	r3, r3, #16
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ce12:	2304      	movs	r3, #4
 800ce14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce18:	e00c      	b.n	800ce34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	f003 0302 	and.w	r3, r3, #2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <f_open+0x1d4>
 800ce24:	7fbb      	ldrb	r3, [r7, #30]
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <f_open+0x1d4>
						res = FR_DENIED;
 800ce2e:	2307      	movs	r3, #7
 800ce30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d128      	bne.n	800ce8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	f003 0308 	and.w	r3, r3, #8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ce56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce5c:	79fb      	ldrb	r3, [r7, #7]
 800ce5e:	f023 0301 	bic.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	bf14      	ite	ne
 800ce66:	2301      	movne	r3, #1
 800ce68:	2300      	moveq	r3, #0
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	f107 0318 	add.w	r3, r7, #24
 800ce72:	4611      	mov	r1, r2
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fd fef1 	bl	800ac5c <inc_lock>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d102      	bne.n	800ce8e <f_open+0x22e>
 800ce88:	2302      	movs	r3, #2
 800ce8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ce8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f040 80a3 	bne.w	800cfde <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fe fd94 	bl	800b9cc <ld_clust>
 800cea4:	4602      	mov	r2, r0
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceac:	331c      	adds	r3, #28
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fd fd6e 	bl	800a990 <ld_dword>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2200      	movs	r2, #0
 800cebe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	88da      	ldrh	r2, [r3, #6]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	79fa      	ldrb	r2, [r7, #7]
 800ced2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3330      	adds	r3, #48	; 0x30
 800ceea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ceee:	2100      	movs	r1, #0
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fd fdd8 	bl	800aaa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d06e      	beq.n	800cfde <f_open+0x37e>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d06a      	beq.n	800cfde <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	895b      	ldrh	r3, [r3, #10]
 800cf14:	461a      	mov	r2, r3
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf2c:	e016      	b.n	800cf5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe f881 	bl	800b03a <get_fat>
 800cf38:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cf3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d802      	bhi.n	800cf46 <f_open+0x2e6>
 800cf40:	2302      	movs	r3, #2
 800cf42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4c:	d102      	bne.n	800cf54 <f_open+0x2f4>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d103      	bne.n	800cf6c <f_open+0x30c>
 800cf64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d8e0      	bhi.n	800cf2e <f_open+0x2ce>
				}
				fp->clust = clst;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cf72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d131      	bne.n	800cfde <f_open+0x37e>
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	899b      	ldrh	r3, [r3, #12]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf82:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf86:	fb01 f202 	mul.w	r2, r1, r2
 800cf8a:	1a9b      	subs	r3, r3, r2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d026      	beq.n	800cfde <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fe f831 	bl	800affc <clust2sect>
 800cf9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cf9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d103      	bne.n	800cfaa <f_open+0x34a>
						res = FR_INT_ERR;
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfa8:	e019      	b.n	800cfde <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	899b      	ldrh	r3, [r3, #12]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb8:	441a      	add	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	7858      	ldrb	r0, [r3, #1]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a1a      	ldr	r2, [r3, #32]
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f7fd fc69 	bl	800a8a4 <disk_read>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <f_open+0x37e>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cfde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <f_open+0x38c>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cfec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3768      	adds	r7, #104	; 0x68
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08c      	sub	sp, #48	; 0x30
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f107 0210 	add.w	r2, r7, #16
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff fda5 	bl	800cb68 <validate>
 800d01e:	4603      	mov	r3, r0
 800d020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d107      	bne.n	800d03c <f_write+0x44>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	7d5b      	ldrb	r3, [r3, #21]
 800d030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <f_write+0x4a>
 800d03c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d040:	e16a      	b.n	800d318 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	7d1b      	ldrb	r3, [r3, #20]
 800d046:	f003 0302 	and.w	r3, r3, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <f_write+0x5a>
 800d04e:	2307      	movs	r3, #7
 800d050:	e162      	b.n	800d318 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	441a      	add	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	429a      	cmp	r2, r3
 800d060:	f080 814c 	bcs.w	800d2fc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	43db      	mvns	r3, r3
 800d06a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d06c:	e146      	b.n	800d2fc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	8992      	ldrh	r2, [r2, #12]
 800d076:	fbb3 f1f2 	udiv	r1, r3, r2
 800d07a:	fb01 f202 	mul.w	r2, r1, r2
 800d07e:	1a9b      	subs	r3, r3, r2
 800d080:	2b00      	cmp	r3, #0
 800d082:	f040 80f1 	bne.w	800d268 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	8992      	ldrh	r2, [r2, #12]
 800d08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	8952      	ldrh	r2, [r2, #10]
 800d096:	3a01      	subs	r2, #1
 800d098:	4013      	ands	r3, r2
 800d09a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d143      	bne.n	800d12a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10c      	bne.n	800d0c4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d11a      	bne.n	800d0ec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fa10 	bl	800b4e0 <create_chain>
 800d0c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0c2:	e013      	b.n	800d0ec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d007      	beq.n	800d0dc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f7fe fa9c 	bl	800b610 <clmt_clust>
 800d0d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0da:	e007      	b.n	800d0ec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	f7fe f9fb 	bl	800b4e0 <create_chain>
 800d0ea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 8109 	beq.w	800d306 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d104      	bne.n	800d104 <f_write+0x10c>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	755a      	strb	r2, [r3, #21]
 800d100:	2302      	movs	r3, #2
 800d102:	e109      	b.n	800d318 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10a:	d104      	bne.n	800d116 <f_write+0x11e>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	755a      	strb	r2, [r3, #21]
 800d112:	2301      	movs	r3, #1
 800d114:	e100      	b.n	800d318 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d11a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <f_write+0x132>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d128:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	7d1b      	ldrb	r3, [r3, #20]
 800d12e:	b25b      	sxtb	r3, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	da18      	bge.n	800d166 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	7858      	ldrb	r0, [r3, #1]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6a1a      	ldr	r2, [r3, #32]
 800d142:	2301      	movs	r3, #1
 800d144:	f7fd fbce 	bl	800a8e4 <disk_write>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <f_write+0x160>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	755a      	strb	r2, [r3, #21]
 800d154:	2301      	movs	r3, #1
 800d156:	e0df      	b.n	800d318 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	7d1b      	ldrb	r3, [r3, #20]
 800d15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d160:	b2da      	uxtb	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	4619      	mov	r1, r3
 800d16e:	4610      	mov	r0, r2
 800d170:	f7fd ff44 	bl	800affc <clust2sect>
 800d174:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d104      	bne.n	800d186 <f_write+0x18e>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2202      	movs	r2, #2
 800d180:	755a      	strb	r2, [r3, #21]
 800d182:	2302      	movs	r3, #2
 800d184:	e0c8      	b.n	800d318 <f_write+0x320>
			sect += csect;
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	4413      	add	r3, r2
 800d18c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	899b      	ldrh	r3, [r3, #12]
 800d192:	461a      	mov	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	fbb3 f3f2 	udiv	r3, r3, r2
 800d19a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d19c:	6a3b      	ldr	r3, [r7, #32]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d043      	beq.n	800d22a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1a2:	69ba      	ldr	r2, [r7, #24]
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	8952      	ldrh	r2, [r2, #10]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d905      	bls.n	800d1bc <f_write+0x1c4>
					cc = fs->csize - csect;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	895b      	ldrh	r3, [r3, #10]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	7858      	ldrb	r0, [r3, #1]
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	69f9      	ldr	r1, [r7, #28]
 800d1c6:	f7fd fb8d 	bl	800a8e4 <disk_write>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d004      	beq.n	800d1da <f_write+0x1e2>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	755a      	strb	r2, [r3, #21]
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e09e      	b.n	800d318 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6a1a      	ldr	r2, [r3, #32]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d918      	bls.n	800d21a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a1a      	ldr	r2, [r3, #32]
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	8992      	ldrh	r2, [r2, #12]
 800d1fa:	fb02 f303 	mul.w	r3, r2, r3
 800d1fe:	69fa      	ldr	r2, [r7, #28]
 800d200:	18d1      	adds	r1, r2, r3
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	899b      	ldrh	r3, [r3, #12]
 800d206:	461a      	mov	r2, r3
 800d208:	f7fd fc2c 	bl	800aa64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	7d1b      	ldrb	r3, [r3, #20]
 800d210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d214:	b2da      	uxtb	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	899b      	ldrh	r3, [r3, #12]
 800d21e:	461a      	mov	r2, r3
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	fb02 f303 	mul.w	r3, r2, r3
 800d226:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d228:	e04b      	b.n	800d2c2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	429a      	cmp	r2, r3
 800d232:	d016      	beq.n	800d262 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d210      	bcs.n	800d262 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	7858      	ldrb	r0, [r3, #1]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d24a:	2301      	movs	r3, #1
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	f7fd fb29 	bl	800a8a4 <disk_read>
 800d252:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d254:	2b00      	cmp	r3, #0
 800d256:	d004      	beq.n	800d262 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2201      	movs	r2, #1
 800d25c:	755a      	strb	r2, [r3, #21]
 800d25e:	2301      	movs	r3, #1
 800d260:	e05a      	b.n	800d318 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	899b      	ldrh	r3, [r3, #12]
 800d26c:	4618      	mov	r0, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	693a      	ldr	r2, [r7, #16]
 800d274:	8992      	ldrh	r2, [r2, #12]
 800d276:	fbb3 f1f2 	udiv	r1, r3, r2
 800d27a:	fb01 f202 	mul.w	r2, r1, r2
 800d27e:	1a9b      	subs	r3, r3, r2
 800d280:	1ac3      	subs	r3, r0, r3
 800d282:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d901      	bls.n	800d290 <f_write+0x298>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	8992      	ldrh	r2, [r2, #12]
 800d29e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2a2:	fb00 f202 	mul.w	r2, r0, r2
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	440b      	add	r3, r1
 800d2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ac:	69f9      	ldr	r1, [r7, #28]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fd fbd8 	bl	800aa64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	7d1b      	ldrb	r3, [r3, #20]
 800d2b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d2c2:	69fa      	ldr	r2, [r7, #28]
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	4413      	add	r3, r2
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	699a      	ldr	r2, [r3, #24]
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	441a      	add	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	619a      	str	r2, [r3, #24]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	68da      	ldr	r2, [r3, #12]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	bf38      	it	cc
 800d2e2:	461a      	movcc	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	60da      	str	r2, [r3, #12]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	441a      	add	r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f47f aeb5 	bne.w	800d06e <f_write+0x76>
 800d304:	e000      	b.n	800d308 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d306:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	7d1b      	ldrb	r3, [r3, #20]
 800d30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d310:	b2da      	uxtb	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3730      	adds	r7, #48	; 0x30
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f107 0208 	add.w	r2, r7, #8
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff fc19 	bl	800cb68 <validate>
 800d336:	4603      	mov	r3, r0
 800d338:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d33a:	7dfb      	ldrb	r3, [r7, #23]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d168      	bne.n	800d412 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7d1b      	ldrb	r3, [r3, #20]
 800d344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d062      	beq.n	800d412 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7d1b      	ldrb	r3, [r3, #20]
 800d350:	b25b      	sxtb	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	da15      	bge.n	800d382 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	7858      	ldrb	r0, [r3, #1]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a1a      	ldr	r2, [r3, #32]
 800d364:	2301      	movs	r3, #1
 800d366:	f7fd fabd 	bl	800a8e4 <disk_write>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <f_sync+0x54>
 800d370:	2301      	movs	r3, #1
 800d372:	e04f      	b.n	800d414 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d382:	f7fd f9f1 	bl	800a768 <get_fattime>
 800d386:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	4619      	mov	r1, r3
 800d390:	4610      	mov	r0, r2
 800d392:	f7fd fd95 	bl	800aec0 <move_window>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d138      	bne.n	800d412 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	330b      	adds	r3, #11
 800d3aa:	781a      	ldrb	r2, [r3, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	330b      	adds	r3, #11
 800d3b0:	f042 0220 	orr.w	r2, r2, #32
 800d3b4:	b2d2      	uxtb	r2, r2
 800d3b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	f7fe fb21 	bl	800ba0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f103 021c 	add.w	r2, r3, #28
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f7fd fb19 	bl	800aa0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3316      	adds	r3, #22
 800d3de:	6939      	ldr	r1, [r7, #16]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fd fb13 	bl	800aa0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3312      	adds	r3, #18
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fd faf2 	bl	800a9d6 <st_word>
					fs->wflag = 1;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd fd8e 	bl	800af1c <sync_fs>
 800d400:	4603      	mov	r3, r0
 800d402:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	7d1b      	ldrb	r3, [r3, #20]
 800d408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d412:	7dfb      	ldrb	r3, [r7, #23]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff ff7b 	bl	800d320 <f_sync>
 800d42a:	4603      	mov	r3, r0
 800d42c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d118      	bne.n	800d466 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f107 0208 	add.w	r2, r7, #8
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7ff fb93 	bl	800cb68 <validate>
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10c      	bne.n	800d466 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	4618      	mov	r0, r3
 800d452:	f7fd fc91 	bl	800ad78 <dec_lock>
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d47e:	2301      	movs	r3, #1
 800d480:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d486:	4b1f      	ldr	r3, [pc, #124]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d488:	7a5b      	ldrb	r3, [r3, #9]
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d131      	bne.n	800d4f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d490:	4b1c      	ldr	r3, [pc, #112]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d492:	7a5b      	ldrb	r3, [r3, #9]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	4b1a      	ldr	r3, [pc, #104]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d49a:	2100      	movs	r1, #0
 800d49c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d49e:	4b19      	ldr	r3, [pc, #100]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4a0:	7a5b      	ldrb	r3, [r3, #9]
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	4a17      	ldr	r2, [pc, #92]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4ae:	4b15      	ldr	r3, [pc, #84]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4b0:	7a5b      	ldrb	r3, [r3, #9]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4b13      	ldr	r3, [pc, #76]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4b8:	4413      	add	r3, r2
 800d4ba:	79fa      	ldrb	r2, [r7, #7]
 800d4bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4be:	4b11      	ldr	r3, [pc, #68]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4c0:	7a5b      	ldrb	r3, [r3, #9]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	b2d1      	uxtb	r1, r2
 800d4c8:	4a0e      	ldr	r2, [pc, #56]	; (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4ca:	7251      	strb	r1, [r2, #9]
 800d4cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4ce:	7dbb      	ldrb	r3, [r7, #22]
 800d4d0:	3330      	adds	r3, #48	; 0x30
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	223a      	movs	r2, #58	; 0x3a
 800d4de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	3302      	adds	r3, #2
 800d4e4:	222f      	movs	r2, #47	; 0x2f
 800d4e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3303      	adds	r3, #3
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	2001709c 	.word	0x2001709c

0800d508 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d512:	2200      	movs	r2, #0
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ffaa 	bl	800d470 <FATFS_LinkDriverEx>
 800d51c:	4603      	mov	r3, r0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d534:	88fb      	ldrh	r3, [r7, #6]
 800d536:	2b7f      	cmp	r3, #127	; 0x7f
 800d538:	d802      	bhi.n	800d540 <ff_convert+0x18>
		c = chr;
 800d53a:	88fb      	ldrh	r3, [r7, #6]
 800d53c:	81fb      	strh	r3, [r7, #14]
 800d53e:	e025      	b.n	800d58c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d546:	88fb      	ldrh	r3, [r7, #6]
 800d548:	2bff      	cmp	r3, #255	; 0xff
 800d54a:	d805      	bhi.n	800d558 <ff_convert+0x30>
 800d54c:	88fb      	ldrh	r3, [r7, #6]
 800d54e:	3b80      	subs	r3, #128	; 0x80
 800d550:	4a12      	ldr	r2, [pc, #72]	; (800d59c <ff_convert+0x74>)
 800d552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d556:	e000      	b.n	800d55a <ff_convert+0x32>
 800d558:	2300      	movs	r3, #0
 800d55a:	81fb      	strh	r3, [r7, #14]
 800d55c:	e016      	b.n	800d58c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d55e:	2300      	movs	r3, #0
 800d560:	81fb      	strh	r3, [r7, #14]
 800d562:	e009      	b.n	800d578 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d564:	89fb      	ldrh	r3, [r7, #14]
 800d566:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <ff_convert+0x74>)
 800d568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d56c:	88fa      	ldrh	r2, [r7, #6]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d006      	beq.n	800d580 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d572:	89fb      	ldrh	r3, [r7, #14]
 800d574:	3301      	adds	r3, #1
 800d576:	81fb      	strh	r3, [r7, #14]
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	2b7f      	cmp	r3, #127	; 0x7f
 800d57c:	d9f2      	bls.n	800d564 <ff_convert+0x3c>
 800d57e:	e000      	b.n	800d582 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d580:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d582:	89fb      	ldrh	r3, [r7, #14]
 800d584:	3380      	adds	r3, #128	; 0x80
 800d586:	b29b      	uxth	r3, r3
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d58c:	89fb      	ldrh	r3, [r7, #14]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	0800e1fc 	.word	0x0800e1fc

0800d5a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d5aa:	88fb      	ldrh	r3, [r7, #6]
 800d5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b0:	d201      	bcs.n	800d5b6 <ff_wtoupper+0x16>
 800d5b2:	4b3e      	ldr	r3, [pc, #248]	; (800d6ac <ff_wtoupper+0x10c>)
 800d5b4:	e000      	b.n	800d5b8 <ff_wtoupper+0x18>
 800d5b6:	4b3e      	ldr	r3, [pc, #248]	; (800d6b0 <ff_wtoupper+0x110>)
 800d5b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	1c9a      	adds	r2, r3, #2
 800d5be:	617a      	str	r2, [r7, #20]
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d5c4:	8a7b      	ldrh	r3, [r7, #18]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d068      	beq.n	800d69c <ff_wtoupper+0xfc>
 800d5ca:	88fa      	ldrh	r2, [r7, #6]
 800d5cc:	8a7b      	ldrh	r3, [r7, #18]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d364      	bcc.n	800d69c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	1c9a      	adds	r2, r3, #2
 800d5d6:	617a      	str	r2, [r7, #20]
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	823b      	strh	r3, [r7, #16]
 800d5dc:	8a3b      	ldrh	r3, [r7, #16]
 800d5de:	0a1b      	lsrs	r3, r3, #8
 800d5e0:	81fb      	strh	r3, [r7, #14]
 800d5e2:	8a3b      	ldrh	r3, [r7, #16]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d5e8:	88fa      	ldrh	r2, [r7, #6]
 800d5ea:	8a79      	ldrh	r1, [r7, #18]
 800d5ec:	8a3b      	ldrh	r3, [r7, #16]
 800d5ee:	440b      	add	r3, r1
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	da49      	bge.n	800d688 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d5f4:	89fb      	ldrh	r3, [r7, #14]
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	d84f      	bhi.n	800d69a <ff_wtoupper+0xfa>
 800d5fa:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <ff_wtoupper+0x60>)
 800d5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d600:	0800d625 	.word	0x0800d625
 800d604:	0800d637 	.word	0x0800d637
 800d608:	0800d64d 	.word	0x0800d64d
 800d60c:	0800d655 	.word	0x0800d655
 800d610:	0800d65d 	.word	0x0800d65d
 800d614:	0800d665 	.word	0x0800d665
 800d618:	0800d66d 	.word	0x0800d66d
 800d61c:	0800d675 	.word	0x0800d675
 800d620:	0800d67d 	.word	0x0800d67d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d624:	88fa      	ldrh	r2, [r7, #6]
 800d626:	8a7b      	ldrh	r3, [r7, #18]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	4413      	add	r3, r2
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	80fb      	strh	r3, [r7, #6]
 800d634:	e027      	b.n	800d686 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d636:	88fa      	ldrh	r2, [r7, #6]
 800d638:	8a7b      	ldrh	r3, [r7, #18]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	b29b      	uxth	r3, r3
 800d644:	88fa      	ldrh	r2, [r7, #6]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	80fb      	strh	r3, [r7, #6]
 800d64a:	e01c      	b.n	800d686 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d64c:	88fb      	ldrh	r3, [r7, #6]
 800d64e:	3b10      	subs	r3, #16
 800d650:	80fb      	strh	r3, [r7, #6]
 800d652:	e018      	b.n	800d686 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d654:	88fb      	ldrh	r3, [r7, #6]
 800d656:	3b20      	subs	r3, #32
 800d658:	80fb      	strh	r3, [r7, #6]
 800d65a:	e014      	b.n	800d686 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	3b30      	subs	r3, #48	; 0x30
 800d660:	80fb      	strh	r3, [r7, #6]
 800d662:	e010      	b.n	800d686 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	3b1a      	subs	r3, #26
 800d668:	80fb      	strh	r3, [r7, #6]
 800d66a:	e00c      	b.n	800d686 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d66c:	88fb      	ldrh	r3, [r7, #6]
 800d66e:	3308      	adds	r3, #8
 800d670:	80fb      	strh	r3, [r7, #6]
 800d672:	e008      	b.n	800d686 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d674:	88fb      	ldrh	r3, [r7, #6]
 800d676:	3b50      	subs	r3, #80	; 0x50
 800d678:	80fb      	strh	r3, [r7, #6]
 800d67a:	e004      	b.n	800d686 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d682:	80fb      	strh	r3, [r7, #6]
 800d684:	bf00      	nop
			}
			break;
 800d686:	e008      	b.n	800d69a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d688:	89fb      	ldrh	r3, [r7, #14]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d195      	bne.n	800d5ba <ff_wtoupper+0x1a>
 800d68e:	8a3b      	ldrh	r3, [r7, #16]
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	697a      	ldr	r2, [r7, #20]
 800d694:	4413      	add	r3, r2
 800d696:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d698:	e78f      	b.n	800d5ba <ff_wtoupper+0x1a>
			break;
 800d69a:	bf00      	nop
	}

	return chr;
 800d69c:	88fb      	ldrh	r3, [r7, #6]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	371c      	adds	r7, #28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	0800e2fc 	.word	0x0800e2fc
 800d6b0:	0800e4f0 	.word	0x0800e4f0

0800d6b4 <siprintf>:
 800d6b4:	b40e      	push	{r1, r2, r3}
 800d6b6:	b500      	push	{lr}
 800d6b8:	b09c      	sub	sp, #112	; 0x70
 800d6ba:	ab1d      	add	r3, sp, #116	; 0x74
 800d6bc:	9002      	str	r0, [sp, #8]
 800d6be:	9006      	str	r0, [sp, #24]
 800d6c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6c4:	4809      	ldr	r0, [pc, #36]	; (800d6ec <siprintf+0x38>)
 800d6c6:	9107      	str	r1, [sp, #28]
 800d6c8:	9104      	str	r1, [sp, #16]
 800d6ca:	4909      	ldr	r1, [pc, #36]	; (800d6f0 <siprintf+0x3c>)
 800d6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6d0:	9105      	str	r1, [sp, #20]
 800d6d2:	6800      	ldr	r0, [r0, #0]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	a902      	add	r1, sp, #8
 800d6d8:	f000 f992 	bl	800da00 <_svfiprintf_r>
 800d6dc:	9b02      	ldr	r3, [sp, #8]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
 800d6e2:	b01c      	add	sp, #112	; 0x70
 800d6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6e8:	b003      	add	sp, #12
 800d6ea:	4770      	bx	lr
 800d6ec:	20000144 	.word	0x20000144
 800d6f0:	ffff0208 	.word	0xffff0208

0800d6f4 <memset>:
 800d6f4:	4402      	add	r2, r0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d100      	bne.n	800d6fe <memset+0xa>
 800d6fc:	4770      	bx	lr
 800d6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d702:	e7f9      	b.n	800d6f8 <memset+0x4>

0800d704 <__errno>:
 800d704:	4b01      	ldr	r3, [pc, #4]	; (800d70c <__errno+0x8>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	20000144 	.word	0x20000144

0800d710 <__libc_init_array>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	4d0d      	ldr	r5, [pc, #52]	; (800d748 <__libc_init_array+0x38>)
 800d714:	4c0d      	ldr	r4, [pc, #52]	; (800d74c <__libc_init_array+0x3c>)
 800d716:	1b64      	subs	r4, r4, r5
 800d718:	10a4      	asrs	r4, r4, #2
 800d71a:	2600      	movs	r6, #0
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	d109      	bne.n	800d734 <__libc_init_array+0x24>
 800d720:	4d0b      	ldr	r5, [pc, #44]	; (800d750 <__libc_init_array+0x40>)
 800d722:	4c0c      	ldr	r4, [pc, #48]	; (800d754 <__libc_init_array+0x44>)
 800d724:	f000 fc6a 	bl	800dffc <_init>
 800d728:	1b64      	subs	r4, r4, r5
 800d72a:	10a4      	asrs	r4, r4, #2
 800d72c:	2600      	movs	r6, #0
 800d72e:	42a6      	cmp	r6, r4
 800d730:	d105      	bne.n	800d73e <__libc_init_array+0x2e>
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	f855 3b04 	ldr.w	r3, [r5], #4
 800d738:	4798      	blx	r3
 800d73a:	3601      	adds	r6, #1
 800d73c:	e7ee      	b.n	800d71c <__libc_init_array+0xc>
 800d73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d742:	4798      	blx	r3
 800d744:	3601      	adds	r6, #1
 800d746:	e7f2      	b.n	800d72e <__libc_init_array+0x1e>
 800d748:	0800e5e8 	.word	0x0800e5e8
 800d74c:	0800e5e8 	.word	0x0800e5e8
 800d750:	0800e5e8 	.word	0x0800e5e8
 800d754:	0800e5ec 	.word	0x0800e5ec

0800d758 <__retarget_lock_acquire_recursive>:
 800d758:	4770      	bx	lr

0800d75a <__retarget_lock_release_recursive>:
 800d75a:	4770      	bx	lr

0800d75c <_free_r>:
 800d75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d75e:	2900      	cmp	r1, #0
 800d760:	d044      	beq.n	800d7ec <_free_r+0x90>
 800d762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d766:	9001      	str	r0, [sp, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f1a1 0404 	sub.w	r4, r1, #4
 800d76e:	bfb8      	it	lt
 800d770:	18e4      	addlt	r4, r4, r3
 800d772:	f000 f8df 	bl	800d934 <__malloc_lock>
 800d776:	4a1e      	ldr	r2, [pc, #120]	; (800d7f0 <_free_r+0x94>)
 800d778:	9801      	ldr	r0, [sp, #4]
 800d77a:	6813      	ldr	r3, [r2, #0]
 800d77c:	b933      	cbnz	r3, 800d78c <_free_r+0x30>
 800d77e:	6063      	str	r3, [r4, #4]
 800d780:	6014      	str	r4, [r2, #0]
 800d782:	b003      	add	sp, #12
 800d784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d788:	f000 b8da 	b.w	800d940 <__malloc_unlock>
 800d78c:	42a3      	cmp	r3, r4
 800d78e:	d908      	bls.n	800d7a2 <_free_r+0x46>
 800d790:	6825      	ldr	r5, [r4, #0]
 800d792:	1961      	adds	r1, r4, r5
 800d794:	428b      	cmp	r3, r1
 800d796:	bf01      	itttt	eq
 800d798:	6819      	ldreq	r1, [r3, #0]
 800d79a:	685b      	ldreq	r3, [r3, #4]
 800d79c:	1949      	addeq	r1, r1, r5
 800d79e:	6021      	streq	r1, [r4, #0]
 800d7a0:	e7ed      	b.n	800d77e <_free_r+0x22>
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	b10b      	cbz	r3, 800d7ac <_free_r+0x50>
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	d9fa      	bls.n	800d7a2 <_free_r+0x46>
 800d7ac:	6811      	ldr	r1, [r2, #0]
 800d7ae:	1855      	adds	r5, r2, r1
 800d7b0:	42a5      	cmp	r5, r4
 800d7b2:	d10b      	bne.n	800d7cc <_free_r+0x70>
 800d7b4:	6824      	ldr	r4, [r4, #0]
 800d7b6:	4421      	add	r1, r4
 800d7b8:	1854      	adds	r4, r2, r1
 800d7ba:	42a3      	cmp	r3, r4
 800d7bc:	6011      	str	r1, [r2, #0]
 800d7be:	d1e0      	bne.n	800d782 <_free_r+0x26>
 800d7c0:	681c      	ldr	r4, [r3, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	6053      	str	r3, [r2, #4]
 800d7c6:	440c      	add	r4, r1
 800d7c8:	6014      	str	r4, [r2, #0]
 800d7ca:	e7da      	b.n	800d782 <_free_r+0x26>
 800d7cc:	d902      	bls.n	800d7d4 <_free_r+0x78>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	6003      	str	r3, [r0, #0]
 800d7d2:	e7d6      	b.n	800d782 <_free_r+0x26>
 800d7d4:	6825      	ldr	r5, [r4, #0]
 800d7d6:	1961      	adds	r1, r4, r5
 800d7d8:	428b      	cmp	r3, r1
 800d7da:	bf04      	itt	eq
 800d7dc:	6819      	ldreq	r1, [r3, #0]
 800d7de:	685b      	ldreq	r3, [r3, #4]
 800d7e0:	6063      	str	r3, [r4, #4]
 800d7e2:	bf04      	itt	eq
 800d7e4:	1949      	addeq	r1, r1, r5
 800d7e6:	6021      	streq	r1, [r4, #0]
 800d7e8:	6054      	str	r4, [r2, #4]
 800d7ea:	e7ca      	b.n	800d782 <_free_r+0x26>
 800d7ec:	b003      	add	sp, #12
 800d7ee:	bd30      	pop	{r4, r5, pc}
 800d7f0:	200171e8 	.word	0x200171e8

0800d7f4 <sbrk_aligned>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	4e0e      	ldr	r6, [pc, #56]	; (800d830 <sbrk_aligned+0x3c>)
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	6831      	ldr	r1, [r6, #0]
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	b911      	cbnz	r1, 800d806 <sbrk_aligned+0x12>
 800d800:	f000 fba6 	bl	800df50 <_sbrk_r>
 800d804:	6030      	str	r0, [r6, #0]
 800d806:	4621      	mov	r1, r4
 800d808:	4628      	mov	r0, r5
 800d80a:	f000 fba1 	bl	800df50 <_sbrk_r>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d00a      	beq.n	800d828 <sbrk_aligned+0x34>
 800d812:	1cc4      	adds	r4, r0, #3
 800d814:	f024 0403 	bic.w	r4, r4, #3
 800d818:	42a0      	cmp	r0, r4
 800d81a:	d007      	beq.n	800d82c <sbrk_aligned+0x38>
 800d81c:	1a21      	subs	r1, r4, r0
 800d81e:	4628      	mov	r0, r5
 800d820:	f000 fb96 	bl	800df50 <_sbrk_r>
 800d824:	3001      	adds	r0, #1
 800d826:	d101      	bne.n	800d82c <sbrk_aligned+0x38>
 800d828:	f04f 34ff 	mov.w	r4, #4294967295
 800d82c:	4620      	mov	r0, r4
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	200171ec 	.word	0x200171ec

0800d834 <_malloc_r>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	1ccd      	adds	r5, r1, #3
 800d83a:	f025 0503 	bic.w	r5, r5, #3
 800d83e:	3508      	adds	r5, #8
 800d840:	2d0c      	cmp	r5, #12
 800d842:	bf38      	it	cc
 800d844:	250c      	movcc	r5, #12
 800d846:	2d00      	cmp	r5, #0
 800d848:	4607      	mov	r7, r0
 800d84a:	db01      	blt.n	800d850 <_malloc_r+0x1c>
 800d84c:	42a9      	cmp	r1, r5
 800d84e:	d905      	bls.n	800d85c <_malloc_r+0x28>
 800d850:	230c      	movs	r3, #12
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	2600      	movs	r6, #0
 800d856:	4630      	mov	r0, r6
 800d858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d930 <_malloc_r+0xfc>
 800d860:	f000 f868 	bl	800d934 <__malloc_lock>
 800d864:	f8d8 3000 	ldr.w	r3, [r8]
 800d868:	461c      	mov	r4, r3
 800d86a:	bb5c      	cbnz	r4, 800d8c4 <_malloc_r+0x90>
 800d86c:	4629      	mov	r1, r5
 800d86e:	4638      	mov	r0, r7
 800d870:	f7ff ffc0 	bl	800d7f4 <sbrk_aligned>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	4604      	mov	r4, r0
 800d878:	d155      	bne.n	800d926 <_malloc_r+0xf2>
 800d87a:	f8d8 4000 	ldr.w	r4, [r8]
 800d87e:	4626      	mov	r6, r4
 800d880:	2e00      	cmp	r6, #0
 800d882:	d145      	bne.n	800d910 <_malloc_r+0xdc>
 800d884:	2c00      	cmp	r4, #0
 800d886:	d048      	beq.n	800d91a <_malloc_r+0xe6>
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	4631      	mov	r1, r6
 800d88c:	4638      	mov	r0, r7
 800d88e:	eb04 0903 	add.w	r9, r4, r3
 800d892:	f000 fb5d 	bl	800df50 <_sbrk_r>
 800d896:	4581      	cmp	r9, r0
 800d898:	d13f      	bne.n	800d91a <_malloc_r+0xe6>
 800d89a:	6821      	ldr	r1, [r4, #0]
 800d89c:	1a6d      	subs	r5, r5, r1
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	f7ff ffa7 	bl	800d7f4 <sbrk_aligned>
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	d037      	beq.n	800d91a <_malloc_r+0xe6>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	442b      	add	r3, r5
 800d8ae:	6023      	str	r3, [r4, #0]
 800d8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d038      	beq.n	800d92a <_malloc_r+0xf6>
 800d8b8:	685a      	ldr	r2, [r3, #4]
 800d8ba:	42a2      	cmp	r2, r4
 800d8bc:	d12b      	bne.n	800d916 <_malloc_r+0xe2>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	605a      	str	r2, [r3, #4]
 800d8c2:	e00f      	b.n	800d8e4 <_malloc_r+0xb0>
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	1b52      	subs	r2, r2, r5
 800d8c8:	d41f      	bmi.n	800d90a <_malloc_r+0xd6>
 800d8ca:	2a0b      	cmp	r2, #11
 800d8cc:	d917      	bls.n	800d8fe <_malloc_r+0xca>
 800d8ce:	1961      	adds	r1, r4, r5
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	6025      	str	r5, [r4, #0]
 800d8d4:	bf18      	it	ne
 800d8d6:	6059      	strne	r1, [r3, #4]
 800d8d8:	6863      	ldr	r3, [r4, #4]
 800d8da:	bf08      	it	eq
 800d8dc:	f8c8 1000 	streq.w	r1, [r8]
 800d8e0:	5162      	str	r2, [r4, r5]
 800d8e2:	604b      	str	r3, [r1, #4]
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f104 060b 	add.w	r6, r4, #11
 800d8ea:	f000 f829 	bl	800d940 <__malloc_unlock>
 800d8ee:	f026 0607 	bic.w	r6, r6, #7
 800d8f2:	1d23      	adds	r3, r4, #4
 800d8f4:	1af2      	subs	r2, r6, r3
 800d8f6:	d0ae      	beq.n	800d856 <_malloc_r+0x22>
 800d8f8:	1b9b      	subs	r3, r3, r6
 800d8fa:	50a3      	str	r3, [r4, r2]
 800d8fc:	e7ab      	b.n	800d856 <_malloc_r+0x22>
 800d8fe:	42a3      	cmp	r3, r4
 800d900:	6862      	ldr	r2, [r4, #4]
 800d902:	d1dd      	bne.n	800d8c0 <_malloc_r+0x8c>
 800d904:	f8c8 2000 	str.w	r2, [r8]
 800d908:	e7ec      	b.n	800d8e4 <_malloc_r+0xb0>
 800d90a:	4623      	mov	r3, r4
 800d90c:	6864      	ldr	r4, [r4, #4]
 800d90e:	e7ac      	b.n	800d86a <_malloc_r+0x36>
 800d910:	4634      	mov	r4, r6
 800d912:	6876      	ldr	r6, [r6, #4]
 800d914:	e7b4      	b.n	800d880 <_malloc_r+0x4c>
 800d916:	4613      	mov	r3, r2
 800d918:	e7cc      	b.n	800d8b4 <_malloc_r+0x80>
 800d91a:	230c      	movs	r3, #12
 800d91c:	603b      	str	r3, [r7, #0]
 800d91e:	4638      	mov	r0, r7
 800d920:	f000 f80e 	bl	800d940 <__malloc_unlock>
 800d924:	e797      	b.n	800d856 <_malloc_r+0x22>
 800d926:	6025      	str	r5, [r4, #0]
 800d928:	e7dc      	b.n	800d8e4 <_malloc_r+0xb0>
 800d92a:	605b      	str	r3, [r3, #4]
 800d92c:	deff      	udf	#255	; 0xff
 800d92e:	bf00      	nop
 800d930:	200171e8 	.word	0x200171e8

0800d934 <__malloc_lock>:
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__malloc_lock+0x8>)
 800d936:	f7ff bf0f 	b.w	800d758 <__retarget_lock_acquire_recursive>
 800d93a:	bf00      	nop
 800d93c:	200171e4 	.word	0x200171e4

0800d940 <__malloc_unlock>:
 800d940:	4801      	ldr	r0, [pc, #4]	; (800d948 <__malloc_unlock+0x8>)
 800d942:	f7ff bf0a 	b.w	800d75a <__retarget_lock_release_recursive>
 800d946:	bf00      	nop
 800d948:	200171e4 	.word	0x200171e4

0800d94c <__ssputs_r>:
 800d94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d950:	688e      	ldr	r6, [r1, #8]
 800d952:	461f      	mov	r7, r3
 800d954:	42be      	cmp	r6, r7
 800d956:	680b      	ldr	r3, [r1, #0]
 800d958:	4682      	mov	sl, r0
 800d95a:	460c      	mov	r4, r1
 800d95c:	4690      	mov	r8, r2
 800d95e:	d82c      	bhi.n	800d9ba <__ssputs_r+0x6e>
 800d960:	898a      	ldrh	r2, [r1, #12]
 800d962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d966:	d026      	beq.n	800d9b6 <__ssputs_r+0x6a>
 800d968:	6965      	ldr	r5, [r4, #20]
 800d96a:	6909      	ldr	r1, [r1, #16]
 800d96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d970:	eba3 0901 	sub.w	r9, r3, r1
 800d974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d978:	1c7b      	adds	r3, r7, #1
 800d97a:	444b      	add	r3, r9
 800d97c:	106d      	asrs	r5, r5, #1
 800d97e:	429d      	cmp	r5, r3
 800d980:	bf38      	it	cc
 800d982:	461d      	movcc	r5, r3
 800d984:	0553      	lsls	r3, r2, #21
 800d986:	d527      	bpl.n	800d9d8 <__ssputs_r+0x8c>
 800d988:	4629      	mov	r1, r5
 800d98a:	f7ff ff53 	bl	800d834 <_malloc_r>
 800d98e:	4606      	mov	r6, r0
 800d990:	b360      	cbz	r0, 800d9ec <__ssputs_r+0xa0>
 800d992:	6921      	ldr	r1, [r4, #16]
 800d994:	464a      	mov	r2, r9
 800d996:	f000 faeb 	bl	800df70 <memcpy>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a4:	81a3      	strh	r3, [r4, #12]
 800d9a6:	6126      	str	r6, [r4, #16]
 800d9a8:	6165      	str	r5, [r4, #20]
 800d9aa:	444e      	add	r6, r9
 800d9ac:	eba5 0509 	sub.w	r5, r5, r9
 800d9b0:	6026      	str	r6, [r4, #0]
 800d9b2:	60a5      	str	r5, [r4, #8]
 800d9b4:	463e      	mov	r6, r7
 800d9b6:	42be      	cmp	r6, r7
 800d9b8:	d900      	bls.n	800d9bc <__ssputs_r+0x70>
 800d9ba:	463e      	mov	r6, r7
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	4632      	mov	r2, r6
 800d9c0:	4641      	mov	r1, r8
 800d9c2:	f000 faab 	bl	800df1c <memmove>
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	1b9b      	subs	r3, r3, r6
 800d9ca:	60a3      	str	r3, [r4, #8]
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	4433      	add	r3, r6
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d8:	462a      	mov	r2, r5
 800d9da:	f000 fad7 	bl	800df8c <_realloc_r>
 800d9de:	4606      	mov	r6, r0
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d1e0      	bne.n	800d9a6 <__ssputs_r+0x5a>
 800d9e4:	6921      	ldr	r1, [r4, #16]
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	f7ff feb8 	bl	800d75c <_free_r>
 800d9ec:	230c      	movs	r3, #12
 800d9ee:	f8ca 3000 	str.w	r3, [sl]
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fe:	e7e9      	b.n	800d9d4 <__ssputs_r+0x88>

0800da00 <_svfiprintf_r>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	4698      	mov	r8, r3
 800da06:	898b      	ldrh	r3, [r1, #12]
 800da08:	061b      	lsls	r3, r3, #24
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4607      	mov	r7, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	4614      	mov	r4, r2
 800da12:	d50e      	bpl.n	800da32 <_svfiprintf_r+0x32>
 800da14:	690b      	ldr	r3, [r1, #16]
 800da16:	b963      	cbnz	r3, 800da32 <_svfiprintf_r+0x32>
 800da18:	2140      	movs	r1, #64	; 0x40
 800da1a:	f7ff ff0b 	bl	800d834 <_malloc_r>
 800da1e:	6028      	str	r0, [r5, #0]
 800da20:	6128      	str	r0, [r5, #16]
 800da22:	b920      	cbnz	r0, 800da2e <_svfiprintf_r+0x2e>
 800da24:	230c      	movs	r3, #12
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	f04f 30ff 	mov.w	r0, #4294967295
 800da2c:	e0d0      	b.n	800dbd0 <_svfiprintf_r+0x1d0>
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	616b      	str	r3, [r5, #20]
 800da32:	2300      	movs	r3, #0
 800da34:	9309      	str	r3, [sp, #36]	; 0x24
 800da36:	2320      	movs	r3, #32
 800da38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da40:	2330      	movs	r3, #48	; 0x30
 800da42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbe8 <_svfiprintf_r+0x1e8>
 800da46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da4a:	f04f 0901 	mov.w	r9, #1
 800da4e:	4623      	mov	r3, r4
 800da50:	469a      	mov	sl, r3
 800da52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da56:	b10a      	cbz	r2, 800da5c <_svfiprintf_r+0x5c>
 800da58:	2a25      	cmp	r2, #37	; 0x25
 800da5a:	d1f9      	bne.n	800da50 <_svfiprintf_r+0x50>
 800da5c:	ebba 0b04 	subs.w	fp, sl, r4
 800da60:	d00b      	beq.n	800da7a <_svfiprintf_r+0x7a>
 800da62:	465b      	mov	r3, fp
 800da64:	4622      	mov	r2, r4
 800da66:	4629      	mov	r1, r5
 800da68:	4638      	mov	r0, r7
 800da6a:	f7ff ff6f 	bl	800d94c <__ssputs_r>
 800da6e:	3001      	adds	r0, #1
 800da70:	f000 80a9 	beq.w	800dbc6 <_svfiprintf_r+0x1c6>
 800da74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da76:	445a      	add	r2, fp
 800da78:	9209      	str	r2, [sp, #36]	; 0x24
 800da7a:	f89a 3000 	ldrb.w	r3, [sl]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 80a1 	beq.w	800dbc6 <_svfiprintf_r+0x1c6>
 800da84:	2300      	movs	r3, #0
 800da86:	f04f 32ff 	mov.w	r2, #4294967295
 800da8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da8e:	f10a 0a01 	add.w	sl, sl, #1
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	9307      	str	r3, [sp, #28]
 800da96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da9a:	931a      	str	r3, [sp, #104]	; 0x68
 800da9c:	4654      	mov	r4, sl
 800da9e:	2205      	movs	r2, #5
 800daa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa4:	4850      	ldr	r0, [pc, #320]	; (800dbe8 <_svfiprintf_r+0x1e8>)
 800daa6:	f7f2 fba3 	bl	80001f0 <memchr>
 800daaa:	9a04      	ldr	r2, [sp, #16]
 800daac:	b9d8      	cbnz	r0, 800dae6 <_svfiprintf_r+0xe6>
 800daae:	06d0      	lsls	r0, r2, #27
 800dab0:	bf44      	itt	mi
 800dab2:	2320      	movmi	r3, #32
 800dab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab8:	0711      	lsls	r1, r2, #28
 800daba:	bf44      	itt	mi
 800dabc:	232b      	movmi	r3, #43	; 0x2b
 800dabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dac2:	f89a 3000 	ldrb.w	r3, [sl]
 800dac6:	2b2a      	cmp	r3, #42	; 0x2a
 800dac8:	d015      	beq.n	800daf6 <_svfiprintf_r+0xf6>
 800daca:	9a07      	ldr	r2, [sp, #28]
 800dacc:	4654      	mov	r4, sl
 800dace:	2000      	movs	r0, #0
 800dad0:	f04f 0c0a 	mov.w	ip, #10
 800dad4:	4621      	mov	r1, r4
 800dad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dada:	3b30      	subs	r3, #48	; 0x30
 800dadc:	2b09      	cmp	r3, #9
 800dade:	d94d      	bls.n	800db7c <_svfiprintf_r+0x17c>
 800dae0:	b1b0      	cbz	r0, 800db10 <_svfiprintf_r+0x110>
 800dae2:	9207      	str	r2, [sp, #28]
 800dae4:	e014      	b.n	800db10 <_svfiprintf_r+0x110>
 800dae6:	eba0 0308 	sub.w	r3, r0, r8
 800daea:	fa09 f303 	lsl.w	r3, r9, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	9304      	str	r3, [sp, #16]
 800daf2:	46a2      	mov	sl, r4
 800daf4:	e7d2      	b.n	800da9c <_svfiprintf_r+0x9c>
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	1d19      	adds	r1, r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	9103      	str	r1, [sp, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bfbb      	ittet	lt
 800db02:	425b      	neglt	r3, r3
 800db04:	f042 0202 	orrlt.w	r2, r2, #2
 800db08:	9307      	strge	r3, [sp, #28]
 800db0a:	9307      	strlt	r3, [sp, #28]
 800db0c:	bfb8      	it	lt
 800db0e:	9204      	strlt	r2, [sp, #16]
 800db10:	7823      	ldrb	r3, [r4, #0]
 800db12:	2b2e      	cmp	r3, #46	; 0x2e
 800db14:	d10c      	bne.n	800db30 <_svfiprintf_r+0x130>
 800db16:	7863      	ldrb	r3, [r4, #1]
 800db18:	2b2a      	cmp	r3, #42	; 0x2a
 800db1a:	d134      	bne.n	800db86 <_svfiprintf_r+0x186>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	9203      	str	r2, [sp, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	bfb8      	it	lt
 800db28:	f04f 33ff 	movlt.w	r3, #4294967295
 800db2c:	3402      	adds	r4, #2
 800db2e:	9305      	str	r3, [sp, #20]
 800db30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dbf8 <_svfiprintf_r+0x1f8>
 800db34:	7821      	ldrb	r1, [r4, #0]
 800db36:	2203      	movs	r2, #3
 800db38:	4650      	mov	r0, sl
 800db3a:	f7f2 fb59 	bl	80001f0 <memchr>
 800db3e:	b138      	cbz	r0, 800db50 <_svfiprintf_r+0x150>
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	eba0 000a 	sub.w	r0, r0, sl
 800db46:	2240      	movs	r2, #64	; 0x40
 800db48:	4082      	lsls	r2, r0
 800db4a:	4313      	orrs	r3, r2
 800db4c:	3401      	adds	r4, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db54:	4825      	ldr	r0, [pc, #148]	; (800dbec <_svfiprintf_r+0x1ec>)
 800db56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db5a:	2206      	movs	r2, #6
 800db5c:	f7f2 fb48 	bl	80001f0 <memchr>
 800db60:	2800      	cmp	r0, #0
 800db62:	d038      	beq.n	800dbd6 <_svfiprintf_r+0x1d6>
 800db64:	4b22      	ldr	r3, [pc, #136]	; (800dbf0 <_svfiprintf_r+0x1f0>)
 800db66:	bb1b      	cbnz	r3, 800dbb0 <_svfiprintf_r+0x1b0>
 800db68:	9b03      	ldr	r3, [sp, #12]
 800db6a:	3307      	adds	r3, #7
 800db6c:	f023 0307 	bic.w	r3, r3, #7
 800db70:	3308      	adds	r3, #8
 800db72:	9303      	str	r3, [sp, #12]
 800db74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db76:	4433      	add	r3, r6
 800db78:	9309      	str	r3, [sp, #36]	; 0x24
 800db7a:	e768      	b.n	800da4e <_svfiprintf_r+0x4e>
 800db7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800db80:	460c      	mov	r4, r1
 800db82:	2001      	movs	r0, #1
 800db84:	e7a6      	b.n	800dad4 <_svfiprintf_r+0xd4>
 800db86:	2300      	movs	r3, #0
 800db88:	3401      	adds	r4, #1
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	4619      	mov	r1, r3
 800db8e:	f04f 0c0a 	mov.w	ip, #10
 800db92:	4620      	mov	r0, r4
 800db94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db98:	3a30      	subs	r2, #48	; 0x30
 800db9a:	2a09      	cmp	r2, #9
 800db9c:	d903      	bls.n	800dba6 <_svfiprintf_r+0x1a6>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d0c6      	beq.n	800db30 <_svfiprintf_r+0x130>
 800dba2:	9105      	str	r1, [sp, #20]
 800dba4:	e7c4      	b.n	800db30 <_svfiprintf_r+0x130>
 800dba6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbaa:	4604      	mov	r4, r0
 800dbac:	2301      	movs	r3, #1
 800dbae:	e7f0      	b.n	800db92 <_svfiprintf_r+0x192>
 800dbb0:	ab03      	add	r3, sp, #12
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	462a      	mov	r2, r5
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <_svfiprintf_r+0x1f4>)
 800dbb8:	a904      	add	r1, sp, #16
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f3af 8000 	nop.w
 800dbc0:	1c42      	adds	r2, r0, #1
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	d1d6      	bne.n	800db74 <_svfiprintf_r+0x174>
 800dbc6:	89ab      	ldrh	r3, [r5, #12]
 800dbc8:	065b      	lsls	r3, r3, #25
 800dbca:	f53f af2d 	bmi.w	800da28 <_svfiprintf_r+0x28>
 800dbce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd0:	b01d      	add	sp, #116	; 0x74
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_svfiprintf_r+0x1f4>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f000 f879 	bl	800dcd8 <_printf_i>
 800dbe6:	e7eb      	b.n	800dbc0 <_svfiprintf_r+0x1c0>
 800dbe8:	0800e5ac 	.word	0x0800e5ac
 800dbec:	0800e5b6 	.word	0x0800e5b6
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	0800d94d 	.word	0x0800d94d
 800dbf8:	0800e5b2 	.word	0x0800e5b2

0800dbfc <_printf_common>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	4616      	mov	r6, r2
 800dc02:	4699      	mov	r9, r3
 800dc04:	688a      	ldr	r2, [r1, #8]
 800dc06:	690b      	ldr	r3, [r1, #16]
 800dc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	bfb8      	it	lt
 800dc10:	4613      	movlt	r3, r2
 800dc12:	6033      	str	r3, [r6, #0]
 800dc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc18:	4607      	mov	r7, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	b10a      	cbz	r2, 800dc22 <_printf_common+0x26>
 800dc1e:	3301      	adds	r3, #1
 800dc20:	6033      	str	r3, [r6, #0]
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	0699      	lsls	r1, r3, #26
 800dc26:	bf42      	ittt	mi
 800dc28:	6833      	ldrmi	r3, [r6, #0]
 800dc2a:	3302      	addmi	r3, #2
 800dc2c:	6033      	strmi	r3, [r6, #0]
 800dc2e:	6825      	ldr	r5, [r4, #0]
 800dc30:	f015 0506 	ands.w	r5, r5, #6
 800dc34:	d106      	bne.n	800dc44 <_printf_common+0x48>
 800dc36:	f104 0a19 	add.w	sl, r4, #25
 800dc3a:	68e3      	ldr	r3, [r4, #12]
 800dc3c:	6832      	ldr	r2, [r6, #0]
 800dc3e:	1a9b      	subs	r3, r3, r2
 800dc40:	42ab      	cmp	r3, r5
 800dc42:	dc26      	bgt.n	800dc92 <_printf_common+0x96>
 800dc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc48:	1e13      	subs	r3, r2, #0
 800dc4a:	6822      	ldr	r2, [r4, #0]
 800dc4c:	bf18      	it	ne
 800dc4e:	2301      	movne	r3, #1
 800dc50:	0692      	lsls	r2, r2, #26
 800dc52:	d42b      	bmi.n	800dcac <_printf_common+0xb0>
 800dc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc58:	4649      	mov	r1, r9
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c0      	blx	r8
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d01e      	beq.n	800dca0 <_printf_common+0xa4>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	6922      	ldr	r2, [r4, #16]
 800dc66:	f003 0306 	and.w	r3, r3, #6
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	bf02      	ittt	eq
 800dc6e:	68e5      	ldreq	r5, [r4, #12]
 800dc70:	6833      	ldreq	r3, [r6, #0]
 800dc72:	1aed      	subeq	r5, r5, r3
 800dc74:	68a3      	ldr	r3, [r4, #8]
 800dc76:	bf0c      	ite	eq
 800dc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc7c:	2500      	movne	r5, #0
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	bfc4      	itt	gt
 800dc82:	1a9b      	subgt	r3, r3, r2
 800dc84:	18ed      	addgt	r5, r5, r3
 800dc86:	2600      	movs	r6, #0
 800dc88:	341a      	adds	r4, #26
 800dc8a:	42b5      	cmp	r5, r6
 800dc8c:	d11a      	bne.n	800dcc4 <_printf_common+0xc8>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e008      	b.n	800dca4 <_printf_common+0xa8>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4652      	mov	r2, sl
 800dc96:	4649      	mov	r1, r9
 800dc98:	4638      	mov	r0, r7
 800dc9a:	47c0      	blx	r8
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d103      	bne.n	800dca8 <_printf_common+0xac>
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca8:	3501      	adds	r5, #1
 800dcaa:	e7c6      	b.n	800dc3a <_printf_common+0x3e>
 800dcac:	18e1      	adds	r1, r4, r3
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	2030      	movs	r0, #48	; 0x30
 800dcb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcb6:	4422      	add	r2, r4
 800dcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	e7c7      	b.n	800dc54 <_printf_common+0x58>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	4649      	mov	r1, r9
 800dcca:	4638      	mov	r0, r7
 800dccc:	47c0      	blx	r8
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d0e6      	beq.n	800dca0 <_printf_common+0xa4>
 800dcd2:	3601      	adds	r6, #1
 800dcd4:	e7d9      	b.n	800dc8a <_printf_common+0x8e>
	...

0800dcd8 <_printf_i>:
 800dcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcdc:	7e0f      	ldrb	r7, [r1, #24]
 800dcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dce0:	2f78      	cmp	r7, #120	; 0x78
 800dce2:	4691      	mov	r9, r2
 800dce4:	4680      	mov	r8, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	469a      	mov	sl, r3
 800dcea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcee:	d807      	bhi.n	800dd00 <_printf_i+0x28>
 800dcf0:	2f62      	cmp	r7, #98	; 0x62
 800dcf2:	d80a      	bhi.n	800dd0a <_printf_i+0x32>
 800dcf4:	2f00      	cmp	r7, #0
 800dcf6:	f000 80d4 	beq.w	800dea2 <_printf_i+0x1ca>
 800dcfa:	2f58      	cmp	r7, #88	; 0x58
 800dcfc:	f000 80c0 	beq.w	800de80 <_printf_i+0x1a8>
 800dd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd08:	e03a      	b.n	800dd80 <_printf_i+0xa8>
 800dd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd0e:	2b15      	cmp	r3, #21
 800dd10:	d8f6      	bhi.n	800dd00 <_printf_i+0x28>
 800dd12:	a101      	add	r1, pc, #4	; (adr r1, 800dd18 <_printf_i+0x40>)
 800dd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd18:	0800dd71 	.word	0x0800dd71
 800dd1c:	0800dd85 	.word	0x0800dd85
 800dd20:	0800dd01 	.word	0x0800dd01
 800dd24:	0800dd01 	.word	0x0800dd01
 800dd28:	0800dd01 	.word	0x0800dd01
 800dd2c:	0800dd01 	.word	0x0800dd01
 800dd30:	0800dd85 	.word	0x0800dd85
 800dd34:	0800dd01 	.word	0x0800dd01
 800dd38:	0800dd01 	.word	0x0800dd01
 800dd3c:	0800dd01 	.word	0x0800dd01
 800dd40:	0800dd01 	.word	0x0800dd01
 800dd44:	0800de89 	.word	0x0800de89
 800dd48:	0800ddb1 	.word	0x0800ddb1
 800dd4c:	0800de43 	.word	0x0800de43
 800dd50:	0800dd01 	.word	0x0800dd01
 800dd54:	0800dd01 	.word	0x0800dd01
 800dd58:	0800deab 	.word	0x0800deab
 800dd5c:	0800dd01 	.word	0x0800dd01
 800dd60:	0800ddb1 	.word	0x0800ddb1
 800dd64:	0800dd01 	.word	0x0800dd01
 800dd68:	0800dd01 	.word	0x0800dd01
 800dd6c:	0800de4b 	.word	0x0800de4b
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	1d1a      	adds	r2, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	602a      	str	r2, [r5, #0]
 800dd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd80:	2301      	movs	r3, #1
 800dd82:	e09f      	b.n	800dec4 <_printf_i+0x1ec>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	682b      	ldr	r3, [r5, #0]
 800dd88:	0607      	lsls	r7, r0, #24
 800dd8a:	f103 0104 	add.w	r1, r3, #4
 800dd8e:	6029      	str	r1, [r5, #0]
 800dd90:	d501      	bpl.n	800dd96 <_printf_i+0xbe>
 800dd92:	681e      	ldr	r6, [r3, #0]
 800dd94:	e003      	b.n	800dd9e <_printf_i+0xc6>
 800dd96:	0646      	lsls	r6, r0, #25
 800dd98:	d5fb      	bpl.n	800dd92 <_printf_i+0xba>
 800dd9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd9e:	2e00      	cmp	r6, #0
 800dda0:	da03      	bge.n	800ddaa <_printf_i+0xd2>
 800dda2:	232d      	movs	r3, #45	; 0x2d
 800dda4:	4276      	negs	r6, r6
 800dda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddaa:	485a      	ldr	r0, [pc, #360]	; (800df14 <_printf_i+0x23c>)
 800ddac:	230a      	movs	r3, #10
 800ddae:	e012      	b.n	800ddd6 <_printf_i+0xfe>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	1d19      	adds	r1, r3, #4
 800ddb6:	6029      	str	r1, [r5, #0]
 800ddb8:	0605      	lsls	r5, r0, #24
 800ddba:	d501      	bpl.n	800ddc0 <_printf_i+0xe8>
 800ddbc:	681e      	ldr	r6, [r3, #0]
 800ddbe:	e002      	b.n	800ddc6 <_printf_i+0xee>
 800ddc0:	0641      	lsls	r1, r0, #25
 800ddc2:	d5fb      	bpl.n	800ddbc <_printf_i+0xe4>
 800ddc4:	881e      	ldrh	r6, [r3, #0]
 800ddc6:	4853      	ldr	r0, [pc, #332]	; (800df14 <_printf_i+0x23c>)
 800ddc8:	2f6f      	cmp	r7, #111	; 0x6f
 800ddca:	bf0c      	ite	eq
 800ddcc:	2308      	moveq	r3, #8
 800ddce:	230a      	movne	r3, #10
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddd6:	6865      	ldr	r5, [r4, #4]
 800ddd8:	60a5      	str	r5, [r4, #8]
 800ddda:	2d00      	cmp	r5, #0
 800dddc:	bfa2      	ittt	ge
 800ddde:	6821      	ldrge	r1, [r4, #0]
 800dde0:	f021 0104 	bicge.w	r1, r1, #4
 800dde4:	6021      	strge	r1, [r4, #0]
 800dde6:	b90e      	cbnz	r6, 800ddec <_printf_i+0x114>
 800dde8:	2d00      	cmp	r5, #0
 800ddea:	d04b      	beq.n	800de84 <_printf_i+0x1ac>
 800ddec:	4615      	mov	r5, r2
 800ddee:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddf2:	fb03 6711 	mls	r7, r3, r1, r6
 800ddf6:	5dc7      	ldrb	r7, [r0, r7]
 800ddf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddfc:	4637      	mov	r7, r6
 800ddfe:	42bb      	cmp	r3, r7
 800de00:	460e      	mov	r6, r1
 800de02:	d9f4      	bls.n	800ddee <_printf_i+0x116>
 800de04:	2b08      	cmp	r3, #8
 800de06:	d10b      	bne.n	800de20 <_printf_i+0x148>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	07de      	lsls	r6, r3, #31
 800de0c:	d508      	bpl.n	800de20 <_printf_i+0x148>
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	6861      	ldr	r1, [r4, #4]
 800de12:	4299      	cmp	r1, r3
 800de14:	bfde      	ittt	le
 800de16:	2330      	movle	r3, #48	; 0x30
 800de18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de20:	1b52      	subs	r2, r2, r5
 800de22:	6122      	str	r2, [r4, #16]
 800de24:	f8cd a000 	str.w	sl, [sp]
 800de28:	464b      	mov	r3, r9
 800de2a:	aa03      	add	r2, sp, #12
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f7ff fee4 	bl	800dbfc <_printf_common>
 800de34:	3001      	adds	r0, #1
 800de36:	d14a      	bne.n	800dece <_printf_i+0x1f6>
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	b004      	add	sp, #16
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	f043 0320 	orr.w	r3, r3, #32
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	4833      	ldr	r0, [pc, #204]	; (800df18 <_printf_i+0x240>)
 800de4c:	2778      	movs	r7, #120	; 0x78
 800de4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	6829      	ldr	r1, [r5, #0]
 800de56:	061f      	lsls	r7, r3, #24
 800de58:	f851 6b04 	ldr.w	r6, [r1], #4
 800de5c:	d402      	bmi.n	800de64 <_printf_i+0x18c>
 800de5e:	065f      	lsls	r7, r3, #25
 800de60:	bf48      	it	mi
 800de62:	b2b6      	uxthmi	r6, r6
 800de64:	07df      	lsls	r7, r3, #31
 800de66:	bf48      	it	mi
 800de68:	f043 0320 	orrmi.w	r3, r3, #32
 800de6c:	6029      	str	r1, [r5, #0]
 800de6e:	bf48      	it	mi
 800de70:	6023      	strmi	r3, [r4, #0]
 800de72:	b91e      	cbnz	r6, 800de7c <_printf_i+0x1a4>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	f023 0320 	bic.w	r3, r3, #32
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	2310      	movs	r3, #16
 800de7e:	e7a7      	b.n	800ddd0 <_printf_i+0xf8>
 800de80:	4824      	ldr	r0, [pc, #144]	; (800df14 <_printf_i+0x23c>)
 800de82:	e7e4      	b.n	800de4e <_printf_i+0x176>
 800de84:	4615      	mov	r5, r2
 800de86:	e7bd      	b.n	800de04 <_printf_i+0x12c>
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	6826      	ldr	r6, [r4, #0]
 800de8c:	6961      	ldr	r1, [r4, #20]
 800de8e:	1d18      	adds	r0, r3, #4
 800de90:	6028      	str	r0, [r5, #0]
 800de92:	0635      	lsls	r5, r6, #24
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	d501      	bpl.n	800de9c <_printf_i+0x1c4>
 800de98:	6019      	str	r1, [r3, #0]
 800de9a:	e002      	b.n	800dea2 <_printf_i+0x1ca>
 800de9c:	0670      	lsls	r0, r6, #25
 800de9e:	d5fb      	bpl.n	800de98 <_printf_i+0x1c0>
 800dea0:	8019      	strh	r1, [r3, #0]
 800dea2:	2300      	movs	r3, #0
 800dea4:	6123      	str	r3, [r4, #16]
 800dea6:	4615      	mov	r5, r2
 800dea8:	e7bc      	b.n	800de24 <_printf_i+0x14c>
 800deaa:	682b      	ldr	r3, [r5, #0]
 800deac:	1d1a      	adds	r2, r3, #4
 800deae:	602a      	str	r2, [r5, #0]
 800deb0:	681d      	ldr	r5, [r3, #0]
 800deb2:	6862      	ldr	r2, [r4, #4]
 800deb4:	2100      	movs	r1, #0
 800deb6:	4628      	mov	r0, r5
 800deb8:	f7f2 f99a 	bl	80001f0 <memchr>
 800debc:	b108      	cbz	r0, 800dec2 <_printf_i+0x1ea>
 800debe:	1b40      	subs	r0, r0, r5
 800dec0:	6060      	str	r0, [r4, #4]
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	6123      	str	r3, [r4, #16]
 800dec6:	2300      	movs	r3, #0
 800dec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800decc:	e7aa      	b.n	800de24 <_printf_i+0x14c>
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	462a      	mov	r2, r5
 800ded2:	4649      	mov	r1, r9
 800ded4:	4640      	mov	r0, r8
 800ded6:	47d0      	blx	sl
 800ded8:	3001      	adds	r0, #1
 800deda:	d0ad      	beq.n	800de38 <_printf_i+0x160>
 800dedc:	6823      	ldr	r3, [r4, #0]
 800dede:	079b      	lsls	r3, r3, #30
 800dee0:	d413      	bmi.n	800df0a <_printf_i+0x232>
 800dee2:	68e0      	ldr	r0, [r4, #12]
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	4298      	cmp	r0, r3
 800dee8:	bfb8      	it	lt
 800deea:	4618      	movlt	r0, r3
 800deec:	e7a6      	b.n	800de3c <_printf_i+0x164>
 800deee:	2301      	movs	r3, #1
 800def0:	4632      	mov	r2, r6
 800def2:	4649      	mov	r1, r9
 800def4:	4640      	mov	r0, r8
 800def6:	47d0      	blx	sl
 800def8:	3001      	adds	r0, #1
 800defa:	d09d      	beq.n	800de38 <_printf_i+0x160>
 800defc:	3501      	adds	r5, #1
 800defe:	68e3      	ldr	r3, [r4, #12]
 800df00:	9903      	ldr	r1, [sp, #12]
 800df02:	1a5b      	subs	r3, r3, r1
 800df04:	42ab      	cmp	r3, r5
 800df06:	dcf2      	bgt.n	800deee <_printf_i+0x216>
 800df08:	e7eb      	b.n	800dee2 <_printf_i+0x20a>
 800df0a:	2500      	movs	r5, #0
 800df0c:	f104 0619 	add.w	r6, r4, #25
 800df10:	e7f5      	b.n	800defe <_printf_i+0x226>
 800df12:	bf00      	nop
 800df14:	0800e5bd 	.word	0x0800e5bd
 800df18:	0800e5ce 	.word	0x0800e5ce

0800df1c <memmove>:
 800df1c:	4288      	cmp	r0, r1
 800df1e:	b510      	push	{r4, lr}
 800df20:	eb01 0402 	add.w	r4, r1, r2
 800df24:	d902      	bls.n	800df2c <memmove+0x10>
 800df26:	4284      	cmp	r4, r0
 800df28:	4623      	mov	r3, r4
 800df2a:	d807      	bhi.n	800df3c <memmove+0x20>
 800df2c:	1e43      	subs	r3, r0, #1
 800df2e:	42a1      	cmp	r1, r4
 800df30:	d008      	beq.n	800df44 <memmove+0x28>
 800df32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3a:	e7f8      	b.n	800df2e <memmove+0x12>
 800df3c:	4402      	add	r2, r0
 800df3e:	4601      	mov	r1, r0
 800df40:	428a      	cmp	r2, r1
 800df42:	d100      	bne.n	800df46 <memmove+0x2a>
 800df44:	bd10      	pop	{r4, pc}
 800df46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df4e:	e7f7      	b.n	800df40 <memmove+0x24>

0800df50 <_sbrk_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4d06      	ldr	r5, [pc, #24]	; (800df6c <_sbrk_r+0x1c>)
 800df54:	2300      	movs	r3, #0
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	602b      	str	r3, [r5, #0]
 800df5c:	f7f3 fe7e 	bl	8001c5c <_sbrk>
 800df60:	1c43      	adds	r3, r0, #1
 800df62:	d102      	bne.n	800df6a <_sbrk_r+0x1a>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b103      	cbz	r3, 800df6a <_sbrk_r+0x1a>
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	200171e0 	.word	0x200171e0

0800df70 <memcpy>:
 800df70:	440a      	add	r2, r1
 800df72:	4291      	cmp	r1, r2
 800df74:	f100 33ff 	add.w	r3, r0, #4294967295
 800df78:	d100      	bne.n	800df7c <memcpy+0xc>
 800df7a:	4770      	bx	lr
 800df7c:	b510      	push	{r4, lr}
 800df7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df86:	4291      	cmp	r1, r2
 800df88:	d1f9      	bne.n	800df7e <memcpy+0xe>
 800df8a:	bd10      	pop	{r4, pc}

0800df8c <_realloc_r>:
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	4680      	mov	r8, r0
 800df92:	4614      	mov	r4, r2
 800df94:	460e      	mov	r6, r1
 800df96:	b921      	cbnz	r1, 800dfa2 <_realloc_r+0x16>
 800df98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	4611      	mov	r1, r2
 800df9e:	f7ff bc49 	b.w	800d834 <_malloc_r>
 800dfa2:	b92a      	cbnz	r2, 800dfb0 <_realloc_r+0x24>
 800dfa4:	f7ff fbda 	bl	800d75c <_free_r>
 800dfa8:	4625      	mov	r5, r4
 800dfaa:	4628      	mov	r0, r5
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	f000 f81b 	bl	800dfea <_malloc_usable_size_r>
 800dfb4:	4284      	cmp	r4, r0
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	d802      	bhi.n	800dfc0 <_realloc_r+0x34>
 800dfba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfbe:	d812      	bhi.n	800dfe6 <_realloc_r+0x5a>
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	f7ff fc36 	bl	800d834 <_malloc_r>
 800dfc8:	4605      	mov	r5, r0
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d0ed      	beq.n	800dfaa <_realloc_r+0x1e>
 800dfce:	42bc      	cmp	r4, r7
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	bf28      	it	cs
 800dfd6:	463a      	movcs	r2, r7
 800dfd8:	f7ff ffca 	bl	800df70 <memcpy>
 800dfdc:	4631      	mov	r1, r6
 800dfde:	4640      	mov	r0, r8
 800dfe0:	f7ff fbbc 	bl	800d75c <_free_r>
 800dfe4:	e7e1      	b.n	800dfaa <_realloc_r+0x1e>
 800dfe6:	4635      	mov	r5, r6
 800dfe8:	e7df      	b.n	800dfaa <_realloc_r+0x1e>

0800dfea <_malloc_usable_size_r>:
 800dfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfee:	1f18      	subs	r0, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	bfbc      	itt	lt
 800dff4:	580b      	ldrlt	r3, [r1, r0]
 800dff6:	18c0      	addlt	r0, r0, r3
 800dff8:	4770      	bx	lr
	...

0800dffc <_init>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	bf00      	nop
 800e000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e002:	bc08      	pop	{r3}
 800e004:	469e      	mov	lr, r3
 800e006:	4770      	bx	lr

0800e008 <_fini>:
 800e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00a:	bf00      	nop
 800e00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e00e:	bc08      	pop	{r3}
 800e010:	469e      	mov	lr, r3
 800e012:	4770      	bx	lr
